
BatteryMonitor_L052.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee0  0800a568  0800a568  0001a568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c448  0800c448  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c450  0800c450  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c450  0800c450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c454  0800c454  0001c454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200001ec  0800c644  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  0800c644  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b72  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000279e  00000000  00000000  00031d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00034528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00035598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000148d6  00000000  00000000  000364a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db15  00000000  00000000  0004ad7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fd17  00000000  00000000  00058893  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d85aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d8  00000000  00000000  000d8628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a550 	.word	0x0800a550

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800a550 	.word	0x0800a550

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fdb5 	bl	8001f98 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fd0d 	bl	8001e58 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fda7 	bl	8001f98 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd9d 	bl	8001f98 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd2f 	bl	8001ed0 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd25 	bl	8001ed0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	1c08      	adds	r0, r1, #0
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f806 	bl	80004d4 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	464f      	mov	r7, r9
 80004d8:	4646      	mov	r6, r8
 80004da:	46d6      	mov	lr, sl
 80004dc:	b5c0      	push	{r6, r7, lr}
 80004de:	0004      	movs	r4, r0
 80004e0:	b082      	sub	sp, #8
 80004e2:	000d      	movs	r5, r1
 80004e4:	4691      	mov	r9, r2
 80004e6:	4698      	mov	r8, r3
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d82f      	bhi.n	800054c <__udivmoddi4+0x78>
 80004ec:	d02c      	beq.n	8000548 <__udivmoddi4+0x74>
 80004ee:	4641      	mov	r1, r8
 80004f0:	4648      	mov	r0, r9
 80004f2:	f002 fd25 	bl	8002f40 <__clzdi2>
 80004f6:	0029      	movs	r1, r5
 80004f8:	0006      	movs	r6, r0
 80004fa:	0020      	movs	r0, r4
 80004fc:	f002 fd20 	bl	8002f40 <__clzdi2>
 8000500:	1a33      	subs	r3, r6, r0
 8000502:	469c      	mov	ip, r3
 8000504:	3b20      	subs	r3, #32
 8000506:	469a      	mov	sl, r3
 8000508:	d500      	bpl.n	800050c <__udivmoddi4+0x38>
 800050a:	e076      	b.n	80005fa <__udivmoddi4+0x126>
 800050c:	464b      	mov	r3, r9
 800050e:	4652      	mov	r2, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001f      	movs	r7, r3
 8000514:	464b      	mov	r3, r9
 8000516:	4662      	mov	r2, ip
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d828      	bhi.n	8000572 <__udivmoddi4+0x9e>
 8000520:	d025      	beq.n	800056e <__udivmoddi4+0x9a>
 8000522:	4653      	mov	r3, sl
 8000524:	1ba4      	subs	r4, r4, r6
 8000526:	41bd      	sbcs	r5, r7
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <__udivmoddi4+0x5a>
 800052c:	e07b      	b.n	8000626 <__udivmoddi4+0x152>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	4652      	mov	r2, sl
 800053a:	4093      	lsls	r3, r2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	4662      	mov	r2, ip
 8000542:	4093      	lsls	r3, r2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	e018      	b.n	800057a <__udivmoddi4+0xa6>
 8000548:	4282      	cmp	r2, r0
 800054a:	d9d0      	bls.n	80004ee <__udivmoddi4+0x1a>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <__udivmoddi4+0x8a>
 800055a:	601c      	str	r4, [r3, #0]
 800055c:	605d      	str	r5, [r3, #4]
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	b002      	add	sp, #8
 8000564:	bc1c      	pop	{r2, r3, r4}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	46a2      	mov	sl, r4
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	42a3      	cmp	r3, r4
 8000570:	d9d7      	bls.n	8000522 <__udivmoddi4+0x4e>
 8000572:	2200      	movs	r2, #0
 8000574:	2300      	movs	r3, #0
 8000576:	9200      	str	r2, [sp, #0]
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	4663      	mov	r3, ip
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0e9      	beq.n	8000554 <__udivmoddi4+0x80>
 8000580:	07fb      	lsls	r3, r7, #31
 8000582:	4698      	mov	r8, r3
 8000584:	4641      	mov	r1, r8
 8000586:	0872      	lsrs	r2, r6, #1
 8000588:	430a      	orrs	r2, r1
 800058a:	087b      	lsrs	r3, r7, #1
 800058c:	4666      	mov	r6, ip
 800058e:	e00e      	b.n	80005ae <__udivmoddi4+0xda>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d101      	bne.n	8000598 <__udivmoddi4+0xc4>
 8000594:	42a2      	cmp	r2, r4
 8000596:	d80c      	bhi.n	80005b2 <__udivmoddi4+0xde>
 8000598:	1aa4      	subs	r4, r4, r2
 800059a:	419d      	sbcs	r5, r3
 800059c:	2001      	movs	r0, #1
 800059e:	1924      	adds	r4, r4, r4
 80005a0:	416d      	adcs	r5, r5
 80005a2:	2100      	movs	r1, #0
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1824      	adds	r4, r4, r0
 80005a8:	414d      	adcs	r5, r1
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d006      	beq.n	80005bc <__udivmoddi4+0xe8>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d9ee      	bls.n	8000590 <__udivmoddi4+0xbc>
 80005b2:	3e01      	subs	r6, #1
 80005b4:	1924      	adds	r4, r4, r4
 80005b6:	416d      	adcs	r5, r5
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d1f8      	bne.n	80005ae <__udivmoddi4+0xda>
 80005bc:	9800      	ldr	r0, [sp, #0]
 80005be:	9901      	ldr	r1, [sp, #4]
 80005c0:	4653      	mov	r3, sl
 80005c2:	1900      	adds	r0, r0, r4
 80005c4:	4169      	adcs	r1, r5
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db23      	blt.n	8000612 <__udivmoddi4+0x13e>
 80005ca:	002b      	movs	r3, r5
 80005cc:	4652      	mov	r2, sl
 80005ce:	40d3      	lsrs	r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4664      	mov	r4, ip
 80005d4:	40e2      	lsrs	r2, r4
 80005d6:	001c      	movs	r4, r3
 80005d8:	4653      	mov	r3, sl
 80005da:	0015      	movs	r5, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db2d      	blt.n	800063c <__udivmoddi4+0x168>
 80005e0:	0026      	movs	r6, r4
 80005e2:	4657      	mov	r7, sl
 80005e4:	40be      	lsls	r6, r7
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4667      	mov	r7, ip
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e7ac      	b.n	8000554 <__udivmoddi4+0x80>
 80005fa:	4662      	mov	r2, ip
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	464a      	mov	r2, r9
 8000602:	40da      	lsrs	r2, r3
 8000604:	4661      	mov	r1, ip
 8000606:	0013      	movs	r3, r2
 8000608:	4642      	mov	r2, r8
 800060a:	408a      	lsls	r2, r1
 800060c:	0017      	movs	r7, r2
 800060e:	431f      	orrs	r7, r3
 8000610:	e780      	b.n	8000514 <__udivmoddi4+0x40>
 8000612:	4662      	mov	r2, ip
 8000614:	2320      	movs	r3, #32
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	4666      	mov	r6, ip
 800061c:	409a      	lsls	r2, r3
 800061e:	0023      	movs	r3, r4
 8000620:	40f3      	lsrs	r3, r6
 8000622:	4313      	orrs	r3, r2
 8000624:	e7d4      	b.n	80005d0 <__udivmoddi4+0xfc>
 8000626:	4662      	mov	r2, ip
 8000628:	2320      	movs	r3, #32
 800062a:	2100      	movs	r1, #0
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	2200      	movs	r2, #0
 8000630:	9100      	str	r1, [sp, #0]
 8000632:	9201      	str	r2, [sp, #4]
 8000634:	2201      	movs	r2, #1
 8000636:	40da      	lsrs	r2, r3
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	e780      	b.n	800053e <__udivmoddi4+0x6a>
 800063c:	2320      	movs	r3, #32
 800063e:	4662      	mov	r2, ip
 8000640:	0026      	movs	r6, r4
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	002f      	movs	r7, r5
 8000648:	46b0      	mov	r8, r6
 800064a:	4666      	mov	r6, ip
 800064c:	40b7      	lsls	r7, r6
 800064e:	4646      	mov	r6, r8
 8000650:	003b      	movs	r3, r7
 8000652:	4333      	orrs	r3, r6
 8000654:	e7c8      	b.n	80005e8 <__udivmoddi4+0x114>
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__aeabi_fadd>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	4647      	mov	r7, r8
 800065c:	46ce      	mov	lr, r9
 800065e:	0243      	lsls	r3, r0, #9
 8000660:	0a5b      	lsrs	r3, r3, #9
 8000662:	0044      	lsls	r4, r0, #1
 8000664:	0fc2      	lsrs	r2, r0, #31
 8000666:	469c      	mov	ip, r3
 8000668:	0048      	lsls	r0, r1, #1
 800066a:	00dd      	lsls	r5, r3, #3
 800066c:	024b      	lsls	r3, r1, #9
 800066e:	0e24      	lsrs	r4, r4, #24
 8000670:	0a5b      	lsrs	r3, r3, #9
 8000672:	0e00      	lsrs	r0, r0, #24
 8000674:	b580      	push	{r7, lr}
 8000676:	4698      	mov	r8, r3
 8000678:	0026      	movs	r6, r4
 800067a:	4691      	mov	r9, r2
 800067c:	0fc9      	lsrs	r1, r1, #31
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	1a27      	subs	r7, r4, r0
 8000682:	428a      	cmp	r2, r1
 8000684:	d029      	beq.n	80006da <__aeabi_fadd+0x82>
 8000686:	2f00      	cmp	r7, #0
 8000688:	dd15      	ble.n	80006b6 <__aeabi_fadd+0x5e>
 800068a:	2800      	cmp	r0, #0
 800068c:	d14a      	bne.n	8000724 <__aeabi_fadd+0xcc>
 800068e:	2b00      	cmp	r3, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_fadd+0x3c>
 8000692:	e095      	b.n	80007c0 <__aeabi_fadd+0x168>
 8000694:	08ed      	lsrs	r5, r5, #3
 8000696:	2cff      	cmp	r4, #255	; 0xff
 8000698:	d100      	bne.n	800069c <__aeabi_fadd+0x44>
 800069a:	e088      	b.n	80007ae <__aeabi_fadd+0x156>
 800069c:	026b      	lsls	r3, r5, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	b2e6      	uxtb	r6, r4
 80006a2:	025b      	lsls	r3, r3, #9
 80006a4:	05f6      	lsls	r6, r6, #23
 80006a6:	0a58      	lsrs	r0, r3, #9
 80006a8:	4330      	orrs	r0, r6
 80006aa:	07d2      	lsls	r2, r2, #31
 80006ac:	4310      	orrs	r0, r2
 80006ae:	bc0c      	pop	{r2, r3}
 80006b0:	4690      	mov	r8, r2
 80006b2:	4699      	mov	r9, r3
 80006b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x64>
 80006ba:	e087      	b.n	80007cc <__aeabi_fadd+0x174>
 80006bc:	1c60      	adds	r0, r4, #1
 80006be:	b2c0      	uxtb	r0, r0
 80006c0:	2801      	cmp	r0, #1
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_fadd+0x6e>
 80006c4:	e0b6      	b.n	8000834 <__aeabi_fadd+0x1dc>
 80006c6:	1aee      	subs	r6, r5, r3
 80006c8:	0172      	lsls	r2, r6, #5
 80006ca:	d500      	bpl.n	80006ce <__aeabi_fadd+0x76>
 80006cc:	e0c5      	b.n	800085a <__aeabi_fadd+0x202>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d13d      	bne.n	800074e <__aeabi_fadd+0xf6>
 80006d2:	2200      	movs	r2, #0
 80006d4:	2600      	movs	r6, #0
 80006d6:	2300      	movs	r3, #0
 80006d8:	e7e3      	b.n	80006a2 <__aeabi_fadd+0x4a>
 80006da:	2f00      	cmp	r7, #0
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0x88>
 80006de:	e096      	b.n	800080e <__aeabi_fadd+0x1b6>
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d05d      	beq.n	80007a0 <__aeabi_fadd+0x148>
 80006e4:	2cff      	cmp	r4, #255	; 0xff
 80006e6:	d060      	beq.n	80007aa <__aeabi_fadd+0x152>
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	04d2      	lsls	r2, r2, #19
 80006ec:	4313      	orrs	r3, r2
 80006ee:	2f1b      	cmp	r7, #27
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_fadd+0x9c>
 80006f2:	e0ec      	b.n	80008ce <__aeabi_fadd+0x276>
 80006f4:	2220      	movs	r2, #32
 80006f6:	1bd2      	subs	r2, r2, r7
 80006f8:	0018      	movs	r0, r3
 80006fa:	4093      	lsls	r3, r2
 80006fc:	40f8      	lsrs	r0, r7
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	4193      	sbcs	r3, r2
 8000702:	4303      	orrs	r3, r0
 8000704:	18ed      	adds	r5, r5, r3
 8000706:	016b      	lsls	r3, r5, #5
 8000708:	d57b      	bpl.n	8000802 <__aeabi_fadd+0x1aa>
 800070a:	3401      	adds	r4, #1
 800070c:	2cff      	cmp	r4, #255	; 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0xba>
 8000710:	e0b7      	b.n	8000882 <__aeabi_fadd+0x22a>
 8000712:	2201      	movs	r2, #1
 8000714:	2607      	movs	r6, #7
 8000716:	402a      	ands	r2, r5
 8000718:	086b      	lsrs	r3, r5, #1
 800071a:	4d9a      	ldr	r5, [pc, #616]	; (8000984 <__aeabi_fadd+0x32c>)
 800071c:	401d      	ands	r5, r3
 800071e:	4315      	orrs	r5, r2
 8000720:	402e      	ands	r6, r5
 8000722:	e029      	b.n	8000778 <__aeabi_fadd+0x120>
 8000724:	2cff      	cmp	r4, #255	; 0xff
 8000726:	d0b5      	beq.n	8000694 <__aeabi_fadd+0x3c>
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	04d2      	lsls	r2, r2, #19
 800072c:	4313      	orrs	r3, r2
 800072e:	2f1b      	cmp	r7, #27
 8000730:	dd00      	ble.n	8000734 <__aeabi_fadd+0xdc>
 8000732:	e0b2      	b.n	800089a <__aeabi_fadd+0x242>
 8000734:	2220      	movs	r2, #32
 8000736:	1bd2      	subs	r2, r2, r7
 8000738:	0019      	movs	r1, r3
 800073a:	4093      	lsls	r3, r2
 800073c:	40f9      	lsrs	r1, r7
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	4193      	sbcs	r3, r2
 8000742:	430b      	orrs	r3, r1
 8000744:	1aed      	subs	r5, r5, r3
 8000746:	016b      	lsls	r3, r5, #5
 8000748:	d55b      	bpl.n	8000802 <__aeabi_fadd+0x1aa>
 800074a:	01ad      	lsls	r5, r5, #6
 800074c:	09ae      	lsrs	r6, r5, #6
 800074e:	0030      	movs	r0, r6
 8000750:	f002 fbd8 	bl	8002f04 <__clzsi2>
 8000754:	3805      	subs	r0, #5
 8000756:	4086      	lsls	r6, r0
 8000758:	4284      	cmp	r4, r0
 800075a:	dc65      	bgt.n	8000828 <__aeabi_fadd+0x1d0>
 800075c:	1b04      	subs	r4, r0, r4
 800075e:	0033      	movs	r3, r6
 8000760:	2020      	movs	r0, #32
 8000762:	3401      	adds	r4, #1
 8000764:	40e3      	lsrs	r3, r4
 8000766:	1b04      	subs	r4, r0, r4
 8000768:	40a6      	lsls	r6, r4
 800076a:	1e75      	subs	r5, r6, #1
 800076c:	41ae      	sbcs	r6, r5
 800076e:	4333      	orrs	r3, r6
 8000770:	2607      	movs	r6, #7
 8000772:	001d      	movs	r5, r3
 8000774:	2400      	movs	r4, #0
 8000776:	401e      	ands	r6, r3
 8000778:	2201      	movs	r2, #1
 800077a:	464b      	mov	r3, r9
 800077c:	401a      	ands	r2, r3
 800077e:	2e00      	cmp	r6, #0
 8000780:	d004      	beq.n	800078c <__aeabi_fadd+0x134>
 8000782:	230f      	movs	r3, #15
 8000784:	402b      	ands	r3, r5
 8000786:	2b04      	cmp	r3, #4
 8000788:	d000      	beq.n	800078c <__aeabi_fadd+0x134>
 800078a:	3504      	adds	r5, #4
 800078c:	016b      	lsls	r3, r5, #5
 800078e:	d400      	bmi.n	8000792 <__aeabi_fadd+0x13a>
 8000790:	e780      	b.n	8000694 <__aeabi_fadd+0x3c>
 8000792:	3401      	adds	r4, #1
 8000794:	b2e6      	uxtb	r6, r4
 8000796:	2cff      	cmp	r4, #255	; 0xff
 8000798:	d12f      	bne.n	80007fa <__aeabi_fadd+0x1a2>
 800079a:	26ff      	movs	r6, #255	; 0xff
 800079c:	2300      	movs	r3, #0
 800079e:	e780      	b.n	80006a2 <__aeabi_fadd+0x4a>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d152      	bne.n	800084a <__aeabi_fadd+0x1f2>
 80007a4:	2cff      	cmp	r4, #255	; 0xff
 80007a6:	d000      	beq.n	80007aa <__aeabi_fadd+0x152>
 80007a8:	e774      	b.n	8000694 <__aeabi_fadd+0x3c>
 80007aa:	000a      	movs	r2, r1
 80007ac:	08ed      	lsrs	r5, r5, #3
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d0f3      	beq.n	800079a <__aeabi_fadd+0x142>
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	03db      	lsls	r3, r3, #15
 80007b6:	432b      	orrs	r3, r5
 80007b8:	025b      	lsls	r3, r3, #9
 80007ba:	0a5b      	lsrs	r3, r3, #9
 80007bc:	26ff      	movs	r6, #255	; 0xff
 80007be:	e770      	b.n	80006a2 <__aeabi_fadd+0x4a>
 80007c0:	3f01      	subs	r7, #1
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d0be      	beq.n	8000744 <__aeabi_fadd+0xec>
 80007c6:	2cff      	cmp	r4, #255	; 0xff
 80007c8:	d1b1      	bne.n	800072e <__aeabi_fadd+0xd6>
 80007ca:	e763      	b.n	8000694 <__aeabi_fadd+0x3c>
 80007cc:	2c00      	cmp	r4, #0
 80007ce:	d047      	beq.n	8000860 <__aeabi_fadd+0x208>
 80007d0:	28ff      	cmp	r0, #255	; 0xff
 80007d2:	d069      	beq.n	80008a8 <__aeabi_fadd+0x250>
 80007d4:	2480      	movs	r4, #128	; 0x80
 80007d6:	04e4      	lsls	r4, r4, #19
 80007d8:	427a      	negs	r2, r7
 80007da:	4325      	orrs	r5, r4
 80007dc:	2a1b      	cmp	r2, #27
 80007de:	dd00      	ble.n	80007e2 <__aeabi_fadd+0x18a>
 80007e0:	e0c5      	b.n	800096e <__aeabi_fadd+0x316>
 80007e2:	002c      	movs	r4, r5
 80007e4:	2620      	movs	r6, #32
 80007e6:	40d4      	lsrs	r4, r2
 80007e8:	1ab2      	subs	r2, r6, r2
 80007ea:	4095      	lsls	r5, r2
 80007ec:	1e6a      	subs	r2, r5, #1
 80007ee:	4195      	sbcs	r5, r2
 80007f0:	4325      	orrs	r5, r4
 80007f2:	1b5d      	subs	r5, r3, r5
 80007f4:	0004      	movs	r4, r0
 80007f6:	4689      	mov	r9, r1
 80007f8:	e7a5      	b.n	8000746 <__aeabi_fadd+0xee>
 80007fa:	01ab      	lsls	r3, r5, #6
 80007fc:	0a5b      	lsrs	r3, r3, #9
 80007fe:	e750      	b.n	80006a2 <__aeabi_fadd+0x4a>
 8000800:	2400      	movs	r4, #0
 8000802:	2201      	movs	r2, #1
 8000804:	464b      	mov	r3, r9
 8000806:	401a      	ands	r2, r3
 8000808:	076b      	lsls	r3, r5, #29
 800080a:	d1ba      	bne.n	8000782 <__aeabi_fadd+0x12a>
 800080c:	e742      	b.n	8000694 <__aeabi_fadd+0x3c>
 800080e:	2f00      	cmp	r7, #0
 8000810:	d13b      	bne.n	800088a <__aeabi_fadd+0x232>
 8000812:	3401      	adds	r4, #1
 8000814:	b2e0      	uxtb	r0, r4
 8000816:	2801      	cmp	r0, #1
 8000818:	dd4a      	ble.n	80008b0 <__aeabi_fadd+0x258>
 800081a:	2cff      	cmp	r4, #255	; 0xff
 800081c:	d0bd      	beq.n	800079a <__aeabi_fadd+0x142>
 800081e:	2607      	movs	r6, #7
 8000820:	18ed      	adds	r5, r5, r3
 8000822:	086d      	lsrs	r5, r5, #1
 8000824:	402e      	ands	r6, r5
 8000826:	e7a7      	b.n	8000778 <__aeabi_fadd+0x120>
 8000828:	2307      	movs	r3, #7
 800082a:	4d57      	ldr	r5, [pc, #348]	; (8000988 <__aeabi_fadd+0x330>)
 800082c:	1a24      	subs	r4, r4, r0
 800082e:	4035      	ands	r5, r6
 8000830:	401e      	ands	r6, r3
 8000832:	e7a1      	b.n	8000778 <__aeabi_fadd+0x120>
 8000834:	2c00      	cmp	r4, #0
 8000836:	d11b      	bne.n	8000870 <__aeabi_fadd+0x218>
 8000838:	2d00      	cmp	r5, #0
 800083a:	d16e      	bne.n	800091a <__aeabi_fadd+0x2c2>
 800083c:	2b00      	cmp	r3, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x1ea>
 8000840:	e09a      	b.n	8000978 <__aeabi_fadd+0x320>
 8000842:	000a      	movs	r2, r1
 8000844:	001d      	movs	r5, r3
 8000846:	003c      	movs	r4, r7
 8000848:	e724      	b.n	8000694 <__aeabi_fadd+0x3c>
 800084a:	3f01      	subs	r7, #1
 800084c:	2f00      	cmp	r7, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x1fa>
 8000850:	e758      	b.n	8000704 <__aeabi_fadd+0xac>
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d000      	beq.n	8000858 <__aeabi_fadd+0x200>
 8000856:	e74a      	b.n	80006ee <__aeabi_fadd+0x96>
 8000858:	e7a7      	b.n	80007aa <__aeabi_fadd+0x152>
 800085a:	1b5e      	subs	r6, r3, r5
 800085c:	4689      	mov	r9, r1
 800085e:	e776      	b.n	800074e <__aeabi_fadd+0xf6>
 8000860:	2d00      	cmp	r5, #0
 8000862:	d11c      	bne.n	800089e <__aeabi_fadd+0x246>
 8000864:	000a      	movs	r2, r1
 8000866:	28ff      	cmp	r0, #255	; 0xff
 8000868:	d01f      	beq.n	80008aa <__aeabi_fadd+0x252>
 800086a:	0004      	movs	r4, r0
 800086c:	001d      	movs	r5, r3
 800086e:	e711      	b.n	8000694 <__aeabi_fadd+0x3c>
 8000870:	2d00      	cmp	r5, #0
 8000872:	d15d      	bne.n	8000930 <__aeabi_fadd+0x2d8>
 8000874:	2b00      	cmp	r3, #0
 8000876:	d117      	bne.n	80008a8 <__aeabi_fadd+0x250>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	2200      	movs	r2, #0
 800087c:	03db      	lsls	r3, r3, #15
 800087e:	26ff      	movs	r6, #255	; 0xff
 8000880:	e70f      	b.n	80006a2 <__aeabi_fadd+0x4a>
 8000882:	000a      	movs	r2, r1
 8000884:	26ff      	movs	r6, #255	; 0xff
 8000886:	2300      	movs	r3, #0
 8000888:	e70b      	b.n	80006a2 <__aeabi_fadd+0x4a>
 800088a:	2c00      	cmp	r4, #0
 800088c:	d121      	bne.n	80008d2 <__aeabi_fadd+0x27a>
 800088e:	2d00      	cmp	r5, #0
 8000890:	d166      	bne.n	8000960 <__aeabi_fadd+0x308>
 8000892:	28ff      	cmp	r0, #255	; 0xff
 8000894:	d1e9      	bne.n	800086a <__aeabi_fadd+0x212>
 8000896:	001d      	movs	r5, r3
 8000898:	e787      	b.n	80007aa <__aeabi_fadd+0x152>
 800089a:	2301      	movs	r3, #1
 800089c:	e752      	b.n	8000744 <__aeabi_fadd+0xec>
 800089e:	1c7a      	adds	r2, r7, #1
 80008a0:	d0a7      	beq.n	80007f2 <__aeabi_fadd+0x19a>
 80008a2:	43fa      	mvns	r2, r7
 80008a4:	28ff      	cmp	r0, #255	; 0xff
 80008a6:	d199      	bne.n	80007dc <__aeabi_fadd+0x184>
 80008a8:	000a      	movs	r2, r1
 80008aa:	001d      	movs	r5, r3
 80008ac:	24ff      	movs	r4, #255	; 0xff
 80008ae:	e6f1      	b.n	8000694 <__aeabi_fadd+0x3c>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d121      	bne.n	80008f8 <__aeabi_fadd+0x2a0>
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d04f      	beq.n	8000958 <__aeabi_fadd+0x300>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d04c      	beq.n	8000956 <__aeabi_fadd+0x2fe>
 80008bc:	18ed      	adds	r5, r5, r3
 80008be:	016b      	lsls	r3, r5, #5
 80008c0:	d59e      	bpl.n	8000800 <__aeabi_fadd+0x1a8>
 80008c2:	4b31      	ldr	r3, [pc, #196]	; (8000988 <__aeabi_fadd+0x330>)
 80008c4:	3607      	adds	r6, #7
 80008c6:	402e      	ands	r6, r5
 80008c8:	2401      	movs	r4, #1
 80008ca:	401d      	ands	r5, r3
 80008cc:	e754      	b.n	8000778 <__aeabi_fadd+0x120>
 80008ce:	2301      	movs	r3, #1
 80008d0:	e718      	b.n	8000704 <__aeabi_fadd+0xac>
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d0df      	beq.n	8000896 <__aeabi_fadd+0x23e>
 80008d6:	2480      	movs	r4, #128	; 0x80
 80008d8:	04e4      	lsls	r4, r4, #19
 80008da:	427f      	negs	r7, r7
 80008dc:	4325      	orrs	r5, r4
 80008de:	2f1b      	cmp	r7, #27
 80008e0:	dc4d      	bgt.n	800097e <__aeabi_fadd+0x326>
 80008e2:	2620      	movs	r6, #32
 80008e4:	1bf6      	subs	r6, r6, r7
 80008e6:	002c      	movs	r4, r5
 80008e8:	40b5      	lsls	r5, r6
 80008ea:	40fc      	lsrs	r4, r7
 80008ec:	1e6a      	subs	r2, r5, #1
 80008ee:	4195      	sbcs	r5, r2
 80008f0:	4325      	orrs	r5, r4
 80008f2:	18ed      	adds	r5, r5, r3
 80008f4:	0004      	movs	r4, r0
 80008f6:	e706      	b.n	8000706 <__aeabi_fadd+0xae>
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d0cc      	beq.n	8000896 <__aeabi_fadd+0x23e>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x2aa>
 8000900:	e753      	b.n	80007aa <__aeabi_fadd+0x152>
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4660      	mov	r0, ip
 8000906:	03c9      	lsls	r1, r1, #15
 8000908:	4208      	tst	r0, r1
 800090a:	d003      	beq.n	8000914 <__aeabi_fadd+0x2bc>
 800090c:	4640      	mov	r0, r8
 800090e:	4208      	tst	r0, r1
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x2bc>
 8000912:	001d      	movs	r5, r3
 8000914:	2101      	movs	r1, #1
 8000916:	4011      	ands	r1, r2
 8000918:	e747      	b.n	80007aa <__aeabi_fadd+0x152>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d100      	bne.n	8000920 <__aeabi_fadd+0x2c8>
 800091e:	e6b9      	b.n	8000694 <__aeabi_fadd+0x3c>
 8000920:	1aea      	subs	r2, r5, r3
 8000922:	0150      	lsls	r0, r2, #5
 8000924:	d525      	bpl.n	8000972 <__aeabi_fadd+0x31a>
 8000926:	2607      	movs	r6, #7
 8000928:	1b5d      	subs	r5, r3, r5
 800092a:	402e      	ands	r6, r5
 800092c:	4689      	mov	r9, r1
 800092e:	e723      	b.n	8000778 <__aeabi_fadd+0x120>
 8000930:	24ff      	movs	r4, #255	; 0xff
 8000932:	2b00      	cmp	r3, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x2e0>
 8000936:	e6ad      	b.n	8000694 <__aeabi_fadd+0x3c>
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	4660      	mov	r0, ip
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4210      	tst	r0, r2
 8000940:	d004      	beq.n	800094c <__aeabi_fadd+0x2f4>
 8000942:	4640      	mov	r0, r8
 8000944:	4210      	tst	r0, r2
 8000946:	d101      	bne.n	800094c <__aeabi_fadd+0x2f4>
 8000948:	001d      	movs	r5, r3
 800094a:	4689      	mov	r9, r1
 800094c:	2201      	movs	r2, #1
 800094e:	464b      	mov	r3, r9
 8000950:	24ff      	movs	r4, #255	; 0xff
 8000952:	401a      	ands	r2, r3
 8000954:	e69e      	b.n	8000694 <__aeabi_fadd+0x3c>
 8000956:	002b      	movs	r3, r5
 8000958:	08dd      	lsrs	r5, r3, #3
 800095a:	000a      	movs	r2, r1
 800095c:	2400      	movs	r4, #0
 800095e:	e69d      	b.n	800069c <__aeabi_fadd+0x44>
 8000960:	1c7a      	adds	r2, r7, #1
 8000962:	d0c6      	beq.n	80008f2 <__aeabi_fadd+0x29a>
 8000964:	43ff      	mvns	r7, r7
 8000966:	28ff      	cmp	r0, #255	; 0xff
 8000968:	d1b9      	bne.n	80008de <__aeabi_fadd+0x286>
 800096a:	001d      	movs	r5, r3
 800096c:	e71d      	b.n	80007aa <__aeabi_fadd+0x152>
 800096e:	2501      	movs	r5, #1
 8000970:	e73f      	b.n	80007f2 <__aeabi_fadd+0x19a>
 8000972:	1e15      	subs	r5, r2, #0
 8000974:	d000      	beq.n	8000978 <__aeabi_fadd+0x320>
 8000976:	e744      	b.n	8000802 <__aeabi_fadd+0x1aa>
 8000978:	2200      	movs	r2, #0
 800097a:	2300      	movs	r3, #0
 800097c:	e691      	b.n	80006a2 <__aeabi_fadd+0x4a>
 800097e:	2501      	movs	r5, #1
 8000980:	e7b7      	b.n	80008f2 <__aeabi_fadd+0x29a>
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	7dffffff 	.word	0x7dffffff
 8000988:	fbffffff 	.word	0xfbffffff

0800098c <__aeabi_fdiv>:
 800098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098e:	4657      	mov	r7, sl
 8000990:	464e      	mov	r6, r9
 8000992:	4645      	mov	r5, r8
 8000994:	46de      	mov	lr, fp
 8000996:	0244      	lsls	r4, r0, #9
 8000998:	b5e0      	push	{r5, r6, r7, lr}
 800099a:	0046      	lsls	r6, r0, #1
 800099c:	4688      	mov	r8, r1
 800099e:	0a64      	lsrs	r4, r4, #9
 80009a0:	0e36      	lsrs	r6, r6, #24
 80009a2:	0fc7      	lsrs	r7, r0, #31
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d063      	beq.n	8000a70 <__aeabi_fdiv+0xe4>
 80009a8:	2eff      	cmp	r6, #255	; 0xff
 80009aa:	d024      	beq.n	80009f6 <__aeabi_fdiv+0x6a>
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	00e4      	lsls	r4, r4, #3
 80009b0:	04db      	lsls	r3, r3, #19
 80009b2:	431c      	orrs	r4, r3
 80009b4:	2300      	movs	r3, #0
 80009b6:	4699      	mov	r9, r3
 80009b8:	469b      	mov	fp, r3
 80009ba:	3e7f      	subs	r6, #127	; 0x7f
 80009bc:	4643      	mov	r3, r8
 80009be:	4642      	mov	r2, r8
 80009c0:	025d      	lsls	r5, r3, #9
 80009c2:	0fd2      	lsrs	r2, r2, #31
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	0e1b      	lsrs	r3, r3, #24
 80009ca:	4690      	mov	r8, r2
 80009cc:	4692      	mov	sl, r2
 80009ce:	d065      	beq.n	8000a9c <__aeabi_fdiv+0x110>
 80009d0:	2bff      	cmp	r3, #255	; 0xff
 80009d2:	d055      	beq.n	8000a80 <__aeabi_fdiv+0xf4>
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	2100      	movs	r1, #0
 80009d8:	00ed      	lsls	r5, r5, #3
 80009da:	04d2      	lsls	r2, r2, #19
 80009dc:	3b7f      	subs	r3, #127	; 0x7f
 80009de:	4315      	orrs	r5, r2
 80009e0:	1af6      	subs	r6, r6, r3
 80009e2:	4643      	mov	r3, r8
 80009e4:	464a      	mov	r2, r9
 80009e6:	407b      	eors	r3, r7
 80009e8:	2a0f      	cmp	r2, #15
 80009ea:	d900      	bls.n	80009ee <__aeabi_fdiv+0x62>
 80009ec:	e08d      	b.n	8000b0a <__aeabi_fdiv+0x17e>
 80009ee:	486d      	ldr	r0, [pc, #436]	; (8000ba4 <__aeabi_fdiv+0x218>)
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	5882      	ldr	r2, [r0, r2]
 80009f4:	4697      	mov	pc, r2
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	d154      	bne.n	8000aa4 <__aeabi_fdiv+0x118>
 80009fa:	2308      	movs	r3, #8
 80009fc:	4699      	mov	r9, r3
 80009fe:	3b06      	subs	r3, #6
 8000a00:	26ff      	movs	r6, #255	; 0xff
 8000a02:	469b      	mov	fp, r3
 8000a04:	e7da      	b.n	80009bc <__aeabi_fdiv+0x30>
 8000a06:	2500      	movs	r5, #0
 8000a08:	4653      	mov	r3, sl
 8000a0a:	2902      	cmp	r1, #2
 8000a0c:	d01b      	beq.n	8000a46 <__aeabi_fdiv+0xba>
 8000a0e:	2903      	cmp	r1, #3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fdiv+0x88>
 8000a12:	e0bf      	b.n	8000b94 <__aeabi_fdiv+0x208>
 8000a14:	2901      	cmp	r1, #1
 8000a16:	d028      	beq.n	8000a6a <__aeabi_fdiv+0xde>
 8000a18:	0030      	movs	r0, r6
 8000a1a:	307f      	adds	r0, #127	; 0x7f
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	dd20      	ble.n	8000a62 <__aeabi_fdiv+0xd6>
 8000a20:	076a      	lsls	r2, r5, #29
 8000a22:	d004      	beq.n	8000a2e <__aeabi_fdiv+0xa2>
 8000a24:	220f      	movs	r2, #15
 8000a26:	402a      	ands	r2, r5
 8000a28:	2a04      	cmp	r2, #4
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fdiv+0xa2>
 8000a2c:	3504      	adds	r5, #4
 8000a2e:	012a      	lsls	r2, r5, #4
 8000a30:	d503      	bpl.n	8000a3a <__aeabi_fdiv+0xae>
 8000a32:	0030      	movs	r0, r6
 8000a34:	4a5c      	ldr	r2, [pc, #368]	; (8000ba8 <__aeabi_fdiv+0x21c>)
 8000a36:	3080      	adds	r0, #128	; 0x80
 8000a38:	4015      	ands	r5, r2
 8000a3a:	28fe      	cmp	r0, #254	; 0xfe
 8000a3c:	dc03      	bgt.n	8000a46 <__aeabi_fdiv+0xba>
 8000a3e:	01ac      	lsls	r4, r5, #6
 8000a40:	0a64      	lsrs	r4, r4, #9
 8000a42:	b2c2      	uxtb	r2, r0
 8000a44:	e001      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	2400      	movs	r4, #0
 8000a4a:	0264      	lsls	r4, r4, #9
 8000a4c:	05d2      	lsls	r2, r2, #23
 8000a4e:	0a60      	lsrs	r0, r4, #9
 8000a50:	07db      	lsls	r3, r3, #31
 8000a52:	4310      	orrs	r0, r2
 8000a54:	4318      	orrs	r0, r3
 8000a56:	bc3c      	pop	{r2, r3, r4, r5}
 8000a58:	4690      	mov	r8, r2
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	46a2      	mov	sl, r4
 8000a5e:	46ab      	mov	fp, r5
 8000a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a62:	2201      	movs	r2, #1
 8000a64:	1a10      	subs	r0, r2, r0
 8000a66:	281b      	cmp	r0, #27
 8000a68:	dd7c      	ble.n	8000b64 <__aeabi_fdiv+0x1d8>
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	e7ec      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	d11d      	bne.n	8000ab0 <__aeabi_fdiv+0x124>
 8000a74:	2304      	movs	r3, #4
 8000a76:	4699      	mov	r9, r3
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	2600      	movs	r6, #0
 8000a7c:	469b      	mov	fp, r3
 8000a7e:	e79d      	b.n	80009bc <__aeabi_fdiv+0x30>
 8000a80:	3eff      	subs	r6, #255	; 0xff
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d120      	bne.n	8000ac8 <__aeabi_fdiv+0x13c>
 8000a86:	2102      	movs	r1, #2
 8000a88:	4643      	mov	r3, r8
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	407b      	eors	r3, r7
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	2a0f      	cmp	r2, #15
 8000a92:	d8d8      	bhi.n	8000a46 <__aeabi_fdiv+0xba>
 8000a94:	4845      	ldr	r0, [pc, #276]	; (8000bac <__aeabi_fdiv+0x220>)
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	5882      	ldr	r2, [r0, r2]
 8000a9a:	4697      	mov	pc, r2
 8000a9c:	2d00      	cmp	r5, #0
 8000a9e:	d119      	bne.n	8000ad4 <__aeabi_fdiv+0x148>
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	e7f1      	b.n	8000a88 <__aeabi_fdiv+0xfc>
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	4699      	mov	r9, r3
 8000aa8:	3b09      	subs	r3, #9
 8000aaa:	26ff      	movs	r6, #255	; 0xff
 8000aac:	469b      	mov	fp, r3
 8000aae:	e785      	b.n	80009bc <__aeabi_fdiv+0x30>
 8000ab0:	0020      	movs	r0, r4
 8000ab2:	f002 fa27 	bl	8002f04 <__clzsi2>
 8000ab6:	2676      	movs	r6, #118	; 0x76
 8000ab8:	1f43      	subs	r3, r0, #5
 8000aba:	409c      	lsls	r4, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	4276      	negs	r6, r6
 8000ac0:	1a36      	subs	r6, r6, r0
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e779      	b.n	80009bc <__aeabi_fdiv+0x30>
 8000ac8:	464a      	mov	r2, r9
 8000aca:	2303      	movs	r3, #3
 8000acc:	431a      	orrs	r2, r3
 8000ace:	4691      	mov	r9, r2
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	e786      	b.n	80009e2 <__aeabi_fdiv+0x56>
 8000ad4:	0028      	movs	r0, r5
 8000ad6:	f002 fa15 	bl	8002f04 <__clzsi2>
 8000ada:	1f43      	subs	r3, r0, #5
 8000adc:	1836      	adds	r6, r6, r0
 8000ade:	409d      	lsls	r5, r3
 8000ae0:	3676      	adds	r6, #118	; 0x76
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	e77d      	b.n	80009e2 <__aeabi_fdiv+0x56>
 8000ae6:	2480      	movs	r4, #128	; 0x80
 8000ae8:	2300      	movs	r3, #0
 8000aea:	03e4      	lsls	r4, r4, #15
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	e7ac      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000af0:	2500      	movs	r5, #0
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	03db      	lsls	r3, r3, #15
 8000af6:	421c      	tst	r4, r3
 8000af8:	d028      	beq.n	8000b4c <__aeabi_fdiv+0x1c0>
 8000afa:	421d      	tst	r5, r3
 8000afc:	d126      	bne.n	8000b4c <__aeabi_fdiv+0x1c0>
 8000afe:	432b      	orrs	r3, r5
 8000b00:	025c      	lsls	r4, r3, #9
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	4643      	mov	r3, r8
 8000b06:	22ff      	movs	r2, #255	; 0xff
 8000b08:	e79f      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000b0a:	0162      	lsls	r2, r4, #5
 8000b0c:	016c      	lsls	r4, r5, #5
 8000b0e:	42a2      	cmp	r2, r4
 8000b10:	d224      	bcs.n	8000b5c <__aeabi_fdiv+0x1d0>
 8000b12:	211b      	movs	r1, #27
 8000b14:	2500      	movs	r5, #0
 8000b16:	3e01      	subs	r6, #1
 8000b18:	2701      	movs	r7, #1
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	006d      	lsls	r5, r5, #1
 8000b1e:	0052      	lsls	r2, r2, #1
 8000b20:	2800      	cmp	r0, #0
 8000b22:	db01      	blt.n	8000b28 <__aeabi_fdiv+0x19c>
 8000b24:	4294      	cmp	r4, r2
 8000b26:	d801      	bhi.n	8000b2c <__aeabi_fdiv+0x1a0>
 8000b28:	1b12      	subs	r2, r2, r4
 8000b2a:	433d      	orrs	r5, r7
 8000b2c:	3901      	subs	r1, #1
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d1f3      	bne.n	8000b1a <__aeabi_fdiv+0x18e>
 8000b32:	0014      	movs	r4, r2
 8000b34:	1e62      	subs	r2, r4, #1
 8000b36:	4194      	sbcs	r4, r2
 8000b38:	4325      	orrs	r5, r4
 8000b3a:	e76d      	b.n	8000a18 <__aeabi_fdiv+0x8c>
 8000b3c:	46ba      	mov	sl, r7
 8000b3e:	4659      	mov	r1, fp
 8000b40:	0025      	movs	r5, r4
 8000b42:	4653      	mov	r3, sl
 8000b44:	2902      	cmp	r1, #2
 8000b46:	d000      	beq.n	8000b4a <__aeabi_fdiv+0x1be>
 8000b48:	e761      	b.n	8000a0e <__aeabi_fdiv+0x82>
 8000b4a:	e77c      	b.n	8000a46 <__aeabi_fdiv+0xba>
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	03db      	lsls	r3, r3, #15
 8000b50:	431c      	orrs	r4, r3
 8000b52:	0264      	lsls	r4, r4, #9
 8000b54:	0a64      	lsrs	r4, r4, #9
 8000b56:	003b      	movs	r3, r7
 8000b58:	22ff      	movs	r2, #255	; 0xff
 8000b5a:	e776      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000b5c:	1b12      	subs	r2, r2, r4
 8000b5e:	211a      	movs	r1, #26
 8000b60:	2501      	movs	r5, #1
 8000b62:	e7d9      	b.n	8000b18 <__aeabi_fdiv+0x18c>
 8000b64:	369e      	adds	r6, #158	; 0x9e
 8000b66:	002a      	movs	r2, r5
 8000b68:	40b5      	lsls	r5, r6
 8000b6a:	002c      	movs	r4, r5
 8000b6c:	40c2      	lsrs	r2, r0
 8000b6e:	1e65      	subs	r5, r4, #1
 8000b70:	41ac      	sbcs	r4, r5
 8000b72:	4314      	orrs	r4, r2
 8000b74:	0762      	lsls	r2, r4, #29
 8000b76:	d004      	beq.n	8000b82 <__aeabi_fdiv+0x1f6>
 8000b78:	220f      	movs	r2, #15
 8000b7a:	4022      	ands	r2, r4
 8000b7c:	2a04      	cmp	r2, #4
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_fdiv+0x1f6>
 8000b80:	3404      	adds	r4, #4
 8000b82:	0162      	lsls	r2, r4, #5
 8000b84:	d403      	bmi.n	8000b8e <__aeabi_fdiv+0x202>
 8000b86:	01a4      	lsls	r4, r4, #6
 8000b88:	0a64      	lsrs	r4, r4, #9
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	e75d      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2400      	movs	r4, #0
 8000b92:	e75a      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000b94:	2480      	movs	r4, #128	; 0x80
 8000b96:	03e4      	lsls	r4, r4, #15
 8000b98:	432c      	orrs	r4, r5
 8000b9a:	0264      	lsls	r4, r4, #9
 8000b9c:	0a64      	lsrs	r4, r4, #9
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	e753      	b.n	8000a4a <__aeabi_fdiv+0xbe>
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	0800a588 	.word	0x0800a588
 8000ba8:	f7ffffff 	.word	0xf7ffffff
 8000bac:	0800a5c8 	.word	0x0800a5c8

08000bb0 <__aeabi_fmul>:
 8000bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb2:	464e      	mov	r6, r9
 8000bb4:	4657      	mov	r7, sl
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	46de      	mov	lr, fp
 8000bba:	b5e0      	push	{r5, r6, r7, lr}
 8000bbc:	0243      	lsls	r3, r0, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	0045      	lsls	r5, r0, #1
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	1c0f      	adds	r7, r1, #0
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	0e2d      	lsrs	r5, r5, #24
 8000bca:	0fc6      	lsrs	r6, r0, #31
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d057      	beq.n	8000c80 <__aeabi_fmul+0xd0>
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d024      	beq.n	8000c1e <__aeabi_fmul+0x6e>
 8000bd4:	2080      	movs	r0, #128	; 0x80
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	04c0      	lsls	r0, r0, #19
 8000bda:	4318      	orrs	r0, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	4681      	mov	r9, r0
 8000be0:	469a      	mov	sl, r3
 8000be2:	469b      	mov	fp, r3
 8000be4:	3d7f      	subs	r5, #127	; 0x7f
 8000be6:	027c      	lsls	r4, r7, #9
 8000be8:	007a      	lsls	r2, r7, #1
 8000bea:	0ffb      	lsrs	r3, r7, #31
 8000bec:	0a64      	lsrs	r4, r4, #9
 8000bee:	0e12      	lsrs	r2, r2, #24
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	d023      	beq.n	8000c3c <__aeabi_fmul+0x8c>
 8000bf4:	2aff      	cmp	r2, #255	; 0xff
 8000bf6:	d04b      	beq.n	8000c90 <__aeabi_fmul+0xe0>
 8000bf8:	00e3      	lsls	r3, r4, #3
 8000bfa:	2480      	movs	r4, #128	; 0x80
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	04e4      	lsls	r4, r4, #19
 8000c00:	3a7f      	subs	r2, #127	; 0x7f
 8000c02:	431c      	orrs	r4, r3
 8000c04:	18ad      	adds	r5, r5, r2
 8000c06:	1c6b      	adds	r3, r5, #1
 8000c08:	4647      	mov	r7, r8
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	4077      	eors	r7, r6
 8000c10:	003a      	movs	r2, r7
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d848      	bhi.n	8000ca8 <__aeabi_fmul+0xf8>
 8000c16:	497d      	ldr	r1, [pc, #500]	; (8000e0c <__aeabi_fmul+0x25c>)
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	58cb      	ldr	r3, [r1, r3]
 8000c1c:	469f      	mov	pc, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fmul+0x74>
 8000c22:	e085      	b.n	8000d30 <__aeabi_fmul+0x180>
 8000c24:	3308      	adds	r3, #8
 8000c26:	469a      	mov	sl, r3
 8000c28:	3b06      	subs	r3, #6
 8000c2a:	469b      	mov	fp, r3
 8000c2c:	027c      	lsls	r4, r7, #9
 8000c2e:	007a      	lsls	r2, r7, #1
 8000c30:	0ffb      	lsrs	r3, r7, #31
 8000c32:	25ff      	movs	r5, #255	; 0xff
 8000c34:	0a64      	lsrs	r4, r4, #9
 8000c36:	0e12      	lsrs	r2, r2, #24
 8000c38:	4698      	mov	r8, r3
 8000c3a:	d1db      	bne.n	8000bf4 <__aeabi_fmul+0x44>
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_fmul+0x92>
 8000c40:	e090      	b.n	8000d64 <__aeabi_fmul+0x1b4>
 8000c42:	4652      	mov	r2, sl
 8000c44:	2301      	movs	r3, #1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	4692      	mov	sl, r2
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	e7db      	b.n	8000c06 <__aeabi_fmul+0x56>
 8000c4e:	464c      	mov	r4, r9
 8000c50:	4658      	mov	r0, fp
 8000c52:	0017      	movs	r7, r2
 8000c54:	2802      	cmp	r0, #2
 8000c56:	d024      	beq.n	8000ca2 <__aeabi_fmul+0xf2>
 8000c58:	2803      	cmp	r0, #3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_fmul+0xae>
 8000c5c:	e0cf      	b.n	8000dfe <__aeabi_fmul+0x24e>
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	2801      	cmp	r0, #1
 8000c64:	d14d      	bne.n	8000d02 <__aeabi_fmul+0x152>
 8000c66:	0258      	lsls	r0, r3, #9
 8000c68:	05d2      	lsls	r2, r2, #23
 8000c6a:	0a40      	lsrs	r0, r0, #9
 8000c6c:	07ff      	lsls	r7, r7, #31
 8000c6e:	4310      	orrs	r0, r2
 8000c70:	4338      	orrs	r0, r7
 8000c72:	b003      	add	sp, #12
 8000c74:	bc3c      	pop	{r2, r3, r4, r5}
 8000c76:	4690      	mov	r8, r2
 8000c78:	4699      	mov	r9, r3
 8000c7a:	46a2      	mov	sl, r4
 8000c7c:	46ab      	mov	fp, r5
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d15b      	bne.n	8000d3c <__aeabi_fmul+0x18c>
 8000c84:	2304      	movs	r3, #4
 8000c86:	469a      	mov	sl, r3
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	469b      	mov	fp, r3
 8000c8e:	e7aa      	b.n	8000be6 <__aeabi_fmul+0x36>
 8000c90:	35ff      	adds	r5, #255	; 0xff
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d160      	bne.n	8000d58 <__aeabi_fmul+0x1a8>
 8000c96:	4652      	mov	r2, sl
 8000c98:	2302      	movs	r3, #2
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	4692      	mov	sl, r2
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	e7b1      	b.n	8000c06 <__aeabi_fmul+0x56>
 8000ca2:	22ff      	movs	r2, #255	; 0xff
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e7de      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000ca8:	464b      	mov	r3, r9
 8000caa:	0c1b      	lsrs	r3, r3, #16
 8000cac:	469c      	mov	ip, r3
 8000cae:	464b      	mov	r3, r9
 8000cb0:	0426      	lsls	r6, r4, #16
 8000cb2:	0c36      	lsrs	r6, r6, #16
 8000cb4:	0418      	lsls	r0, r3, #16
 8000cb6:	4661      	mov	r1, ip
 8000cb8:	0033      	movs	r3, r6
 8000cba:	0c22      	lsrs	r2, r4, #16
 8000cbc:	4664      	mov	r4, ip
 8000cbe:	0c00      	lsrs	r0, r0, #16
 8000cc0:	4343      	muls	r3, r0
 8000cc2:	434e      	muls	r6, r1
 8000cc4:	4350      	muls	r0, r2
 8000cc6:	4354      	muls	r4, r2
 8000cc8:	1980      	adds	r0, r0, r6
 8000cca:	0c1a      	lsrs	r2, r3, #16
 8000ccc:	1812      	adds	r2, r2, r0
 8000cce:	4296      	cmp	r6, r2
 8000cd0:	d903      	bls.n	8000cda <__aeabi_fmul+0x12a>
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	0249      	lsls	r1, r1, #9
 8000cd6:	468c      	mov	ip, r1
 8000cd8:	4464      	add	r4, ip
 8000cda:	041b      	lsls	r3, r3, #16
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	0410      	lsls	r0, r2, #16
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	0183      	lsls	r3, r0, #6
 8000ce4:	1e5e      	subs	r6, r3, #1
 8000ce6:	41b3      	sbcs	r3, r6
 8000ce8:	0e80      	lsrs	r0, r0, #26
 8000cea:	4318      	orrs	r0, r3
 8000cec:	0c13      	lsrs	r3, r2, #16
 8000cee:	191b      	adds	r3, r3, r4
 8000cf0:	019b      	lsls	r3, r3, #6
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	0123      	lsls	r3, r4, #4
 8000cf8:	d579      	bpl.n	8000dee <__aeabi_fmul+0x23e>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	0862      	lsrs	r2, r4, #1
 8000cfe:	401c      	ands	r4, r3
 8000d00:	4314      	orrs	r4, r2
 8000d02:	9a01      	ldr	r2, [sp, #4]
 8000d04:	327f      	adds	r2, #127	; 0x7f
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dd4d      	ble.n	8000da6 <__aeabi_fmul+0x1f6>
 8000d0a:	0763      	lsls	r3, r4, #29
 8000d0c:	d004      	beq.n	8000d18 <__aeabi_fmul+0x168>
 8000d0e:	230f      	movs	r3, #15
 8000d10:	4023      	ands	r3, r4
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d000      	beq.n	8000d18 <__aeabi_fmul+0x168>
 8000d16:	3404      	adds	r4, #4
 8000d18:	0123      	lsls	r3, r4, #4
 8000d1a:	d503      	bpl.n	8000d24 <__aeabi_fmul+0x174>
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <__aeabi_fmul+0x260>)
 8000d1e:	9a01      	ldr	r2, [sp, #4]
 8000d20:	401c      	ands	r4, r3
 8000d22:	3280      	adds	r2, #128	; 0x80
 8000d24:	2afe      	cmp	r2, #254	; 0xfe
 8000d26:	dcbc      	bgt.n	8000ca2 <__aeabi_fmul+0xf2>
 8000d28:	01a3      	lsls	r3, r4, #6
 8000d2a:	0a5b      	lsrs	r3, r3, #9
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	e79a      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000d30:	230c      	movs	r3, #12
 8000d32:	469a      	mov	sl, r3
 8000d34:	3b09      	subs	r3, #9
 8000d36:	25ff      	movs	r5, #255	; 0xff
 8000d38:	469b      	mov	fp, r3
 8000d3a:	e754      	b.n	8000be6 <__aeabi_fmul+0x36>
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f002 f8e1 	bl	8002f04 <__clzsi2>
 8000d42:	464a      	mov	r2, r9
 8000d44:	1f43      	subs	r3, r0, #5
 8000d46:	2576      	movs	r5, #118	; 0x76
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	426d      	negs	r5, r5
 8000d4e:	4691      	mov	r9, r2
 8000d50:	1a2d      	subs	r5, r5, r0
 8000d52:	469a      	mov	sl, r3
 8000d54:	469b      	mov	fp, r3
 8000d56:	e746      	b.n	8000be6 <__aeabi_fmul+0x36>
 8000d58:	4652      	mov	r2, sl
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4692      	mov	sl, r2
 8000d60:	2003      	movs	r0, #3
 8000d62:	e750      	b.n	8000c06 <__aeabi_fmul+0x56>
 8000d64:	0020      	movs	r0, r4
 8000d66:	f002 f8cd 	bl	8002f04 <__clzsi2>
 8000d6a:	1f43      	subs	r3, r0, #5
 8000d6c:	1a2d      	subs	r5, r5, r0
 8000d6e:	409c      	lsls	r4, r3
 8000d70:	3d76      	subs	r5, #118	; 0x76
 8000d72:	2000      	movs	r0, #0
 8000d74:	e747      	b.n	8000c06 <__aeabi_fmul+0x56>
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	2700      	movs	r7, #0
 8000d7a:	03db      	lsls	r3, r3, #15
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	e772      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000d80:	4642      	mov	r2, r8
 8000d82:	e766      	b.n	8000c52 <__aeabi_fmul+0xa2>
 8000d84:	464c      	mov	r4, r9
 8000d86:	0032      	movs	r2, r6
 8000d88:	4658      	mov	r0, fp
 8000d8a:	e762      	b.n	8000c52 <__aeabi_fmul+0xa2>
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	464a      	mov	r2, r9
 8000d90:	03db      	lsls	r3, r3, #15
 8000d92:	421a      	tst	r2, r3
 8000d94:	d022      	beq.n	8000ddc <__aeabi_fmul+0x22c>
 8000d96:	421c      	tst	r4, r3
 8000d98:	d120      	bne.n	8000ddc <__aeabi_fmul+0x22c>
 8000d9a:	4323      	orrs	r3, r4
 8000d9c:	025b      	lsls	r3, r3, #9
 8000d9e:	0a5b      	lsrs	r3, r3, #9
 8000da0:	4647      	mov	r7, r8
 8000da2:	22ff      	movs	r2, #255	; 0xff
 8000da4:	e75f      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000da6:	2301      	movs	r3, #1
 8000da8:	1a9a      	subs	r2, r3, r2
 8000daa:	2a1b      	cmp	r2, #27
 8000dac:	dc21      	bgt.n	8000df2 <__aeabi_fmul+0x242>
 8000dae:	0023      	movs	r3, r4
 8000db0:	9901      	ldr	r1, [sp, #4]
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	319e      	adds	r1, #158	; 0x9e
 8000db6:	408c      	lsls	r4, r1
 8000db8:	001a      	movs	r2, r3
 8000dba:	0023      	movs	r3, r4
 8000dbc:	1e5c      	subs	r4, r3, #1
 8000dbe:	41a3      	sbcs	r3, r4
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	075a      	lsls	r2, r3, #29
 8000dc4:	d004      	beq.n	8000dd0 <__aeabi_fmul+0x220>
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	401a      	ands	r2, r3
 8000dca:	2a04      	cmp	r2, #4
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_fmul+0x220>
 8000dce:	3304      	adds	r3, #4
 8000dd0:	015a      	lsls	r2, r3, #5
 8000dd2:	d411      	bmi.n	8000df8 <__aeabi_fmul+0x248>
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	0a5b      	lsrs	r3, r3, #9
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e744      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	464a      	mov	r2, r9
 8000de0:	03db      	lsls	r3, r3, #15
 8000de2:	4313      	orrs	r3, r2
 8000de4:	025b      	lsls	r3, r3, #9
 8000de6:	0a5b      	lsrs	r3, r3, #9
 8000de8:	0037      	movs	r7, r6
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	e73b      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000dee:	9501      	str	r5, [sp, #4]
 8000df0:	e787      	b.n	8000d02 <__aeabi_fmul+0x152>
 8000df2:	2200      	movs	r2, #0
 8000df4:	2300      	movs	r3, #0
 8000df6:	e736      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e733      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	03db      	lsls	r3, r3, #15
 8000e02:	4323      	orrs	r3, r4
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	0a5b      	lsrs	r3, r3, #9
 8000e08:	22ff      	movs	r2, #255	; 0xff
 8000e0a:	e72c      	b.n	8000c66 <__aeabi_fmul+0xb6>
 8000e0c:	0800a608 	.word	0x0800a608
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__aeabi_fsub>:
 8000e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e16:	4647      	mov	r7, r8
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	0044      	lsls	r4, r0, #1
 8000e1c:	0fc2      	lsrs	r2, r0, #31
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	0247      	lsls	r7, r0, #9
 8000e22:	0248      	lsls	r0, r1, #9
 8000e24:	0a40      	lsrs	r0, r0, #9
 8000e26:	4684      	mov	ip, r0
 8000e28:	4666      	mov	r6, ip
 8000e2a:	0048      	lsls	r0, r1, #1
 8000e2c:	0a7f      	lsrs	r7, r7, #9
 8000e2e:	0e24      	lsrs	r4, r4, #24
 8000e30:	00f6      	lsls	r6, r6, #3
 8000e32:	0025      	movs	r5, r4
 8000e34:	4690      	mov	r8, r2
 8000e36:	00fb      	lsls	r3, r7, #3
 8000e38:	0e00      	lsrs	r0, r0, #24
 8000e3a:	0fc9      	lsrs	r1, r1, #31
 8000e3c:	46b1      	mov	r9, r6
 8000e3e:	28ff      	cmp	r0, #255	; 0xff
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0x30>
 8000e42:	e085      	b.n	8000f50 <__aeabi_fsub+0x13c>
 8000e44:	2601      	movs	r6, #1
 8000e46:	4071      	eors	r1, r6
 8000e48:	1a26      	subs	r6, r4, r0
 8000e4a:	4291      	cmp	r1, r2
 8000e4c:	d057      	beq.n	8000efe <__aeabi_fsub+0xea>
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	dd43      	ble.n	8000eda <__aeabi_fsub+0xc6>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d000      	beq.n	8000e58 <__aeabi_fsub+0x44>
 8000e56:	e07f      	b.n	8000f58 <__aeabi_fsub+0x144>
 8000e58:	4649      	mov	r1, r9
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fsub+0x4c>
 8000e5e:	e0aa      	b.n	8000fb6 <__aeabi_fsub+0x1a2>
 8000e60:	3e01      	subs	r6, #1
 8000e62:	2e00      	cmp	r6, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x54>
 8000e66:	e0f7      	b.n	8001058 <__aeabi_fsub+0x244>
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	015a      	lsls	r2, r3, #5
 8000e6c:	d400      	bmi.n	8000e70 <__aeabi_fsub+0x5c>
 8000e6e:	e08b      	b.n	8000f88 <__aeabi_fsub+0x174>
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	099c      	lsrs	r4, r3, #6
 8000e74:	0020      	movs	r0, r4
 8000e76:	f002 f845 	bl	8002f04 <__clzsi2>
 8000e7a:	3805      	subs	r0, #5
 8000e7c:	4084      	lsls	r4, r0
 8000e7e:	4285      	cmp	r5, r0
 8000e80:	dd00      	ble.n	8000e84 <__aeabi_fsub+0x70>
 8000e82:	e0d3      	b.n	800102c <__aeabi_fsub+0x218>
 8000e84:	1b45      	subs	r5, r0, r5
 8000e86:	0023      	movs	r3, r4
 8000e88:	2020      	movs	r0, #32
 8000e8a:	3501      	adds	r5, #1
 8000e8c:	40eb      	lsrs	r3, r5
 8000e8e:	1b45      	subs	r5, r0, r5
 8000e90:	40ac      	lsls	r4, r5
 8000e92:	1e62      	subs	r2, r4, #1
 8000e94:	4194      	sbcs	r4, r2
 8000e96:	4323      	orrs	r3, r4
 8000e98:	2407      	movs	r4, #7
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	401c      	ands	r4, r3
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4641      	mov	r1, r8
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	2c00      	cmp	r4, #0
 8000ea6:	d004      	beq.n	8000eb2 <__aeabi_fsub+0x9e>
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	4019      	ands	r1, r3
 8000eac:	2904      	cmp	r1, #4
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fsub+0x9e>
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	0159      	lsls	r1, r3, #5
 8000eb4:	d400      	bmi.n	8000eb8 <__aeabi_fsub+0xa4>
 8000eb6:	e080      	b.n	8000fba <__aeabi_fsub+0x1a6>
 8000eb8:	3501      	adds	r5, #1
 8000eba:	b2ec      	uxtb	r4, r5
 8000ebc:	2dff      	cmp	r5, #255	; 0xff
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fsub+0xae>
 8000ec0:	e0a3      	b.n	800100a <__aeabi_fsub+0x1f6>
 8000ec2:	24ff      	movs	r4, #255	; 0xff
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	025b      	lsls	r3, r3, #9
 8000ec8:	05e4      	lsls	r4, r4, #23
 8000eca:	0a58      	lsrs	r0, r3, #9
 8000ecc:	07d2      	lsls	r2, r2, #31
 8000ece:	4320      	orrs	r0, r4
 8000ed0:	4310      	orrs	r0, r2
 8000ed2:	bc0c      	pop	{r2, r3}
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d174      	bne.n	8000fc8 <__aeabi_fsub+0x1b4>
 8000ede:	1c60      	adds	r0, r4, #1
 8000ee0:	b2c0      	uxtb	r0, r0
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	dc00      	bgt.n	8000ee8 <__aeabi_fsub+0xd4>
 8000ee6:	e0a7      	b.n	8001038 <__aeabi_fsub+0x224>
 8000ee8:	464a      	mov	r2, r9
 8000eea:	1a9c      	subs	r4, r3, r2
 8000eec:	0162      	lsls	r2, r4, #5
 8000eee:	d500      	bpl.n	8000ef2 <__aeabi_fsub+0xde>
 8000ef0:	e0b6      	b.n	8001060 <__aeabi_fsub+0x24c>
 8000ef2:	2c00      	cmp	r4, #0
 8000ef4:	d1be      	bne.n	8000e74 <__aeabi_fsub+0x60>
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2400      	movs	r4, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e7e3      	b.n	8000ec6 <__aeabi_fsub+0xb2>
 8000efe:	2e00      	cmp	r6, #0
 8000f00:	dc00      	bgt.n	8000f04 <__aeabi_fsub+0xf0>
 8000f02:	e085      	b.n	8001010 <__aeabi_fsub+0x1fc>
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d046      	beq.n	8000f96 <__aeabi_fsub+0x182>
 8000f08:	2cff      	cmp	r4, #255	; 0xff
 8000f0a:	d049      	beq.n	8000fa0 <__aeabi_fsub+0x18c>
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	4648      	mov	r0, r9
 8000f10:	04d2      	lsls	r2, r2, #19
 8000f12:	4310      	orrs	r0, r2
 8000f14:	4681      	mov	r9, r0
 8000f16:	2201      	movs	r2, #1
 8000f18:	2e1b      	cmp	r6, #27
 8000f1a:	dc09      	bgt.n	8000f30 <__aeabi_fsub+0x11c>
 8000f1c:	2020      	movs	r0, #32
 8000f1e:	464c      	mov	r4, r9
 8000f20:	1b80      	subs	r0, r0, r6
 8000f22:	4084      	lsls	r4, r0
 8000f24:	464a      	mov	r2, r9
 8000f26:	0020      	movs	r0, r4
 8000f28:	40f2      	lsrs	r2, r6
 8000f2a:	1e44      	subs	r4, r0, #1
 8000f2c:	41a0      	sbcs	r0, r4
 8000f2e:	4302      	orrs	r2, r0
 8000f30:	189b      	adds	r3, r3, r2
 8000f32:	015a      	lsls	r2, r3, #5
 8000f34:	d528      	bpl.n	8000f88 <__aeabi_fsub+0x174>
 8000f36:	3501      	adds	r5, #1
 8000f38:	2dff      	cmp	r5, #255	; 0xff
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x12a>
 8000f3c:	e0a8      	b.n	8001090 <__aeabi_fsub+0x27c>
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2407      	movs	r4, #7
 8000f42:	4994      	ldr	r1, [pc, #592]	; (8001194 <__aeabi_fsub+0x380>)
 8000f44:	401a      	ands	r2, r3
 8000f46:	085b      	lsrs	r3, r3, #1
 8000f48:	400b      	ands	r3, r1
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	401c      	ands	r4, r3
 8000f4e:	e7a6      	b.n	8000e9e <__aeabi_fsub+0x8a>
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d000      	beq.n	8000f56 <__aeabi_fsub+0x142>
 8000f54:	e778      	b.n	8000e48 <__aeabi_fsub+0x34>
 8000f56:	e775      	b.n	8000e44 <__aeabi_fsub+0x30>
 8000f58:	2cff      	cmp	r4, #255	; 0xff
 8000f5a:	d054      	beq.n	8001006 <__aeabi_fsub+0x1f2>
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	4649      	mov	r1, r9
 8000f60:	04d2      	lsls	r2, r2, #19
 8000f62:	4311      	orrs	r1, r2
 8000f64:	4689      	mov	r9, r1
 8000f66:	2201      	movs	r2, #1
 8000f68:	2e1b      	cmp	r6, #27
 8000f6a:	dc09      	bgt.n	8000f80 <__aeabi_fsub+0x16c>
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4648      	mov	r0, r9
 8000f70:	1b89      	subs	r1, r1, r6
 8000f72:	4088      	lsls	r0, r1
 8000f74:	464a      	mov	r2, r9
 8000f76:	0001      	movs	r1, r0
 8000f78:	40f2      	lsrs	r2, r6
 8000f7a:	1e48      	subs	r0, r1, #1
 8000f7c:	4181      	sbcs	r1, r0
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	015a      	lsls	r2, r3, #5
 8000f84:	d500      	bpl.n	8000f88 <__aeabi_fsub+0x174>
 8000f86:	e773      	b.n	8000e70 <__aeabi_fsub+0x5c>
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4641      	mov	r1, r8
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	0759      	lsls	r1, r3, #29
 8000f90:	d000      	beq.n	8000f94 <__aeabi_fsub+0x180>
 8000f92:	e789      	b.n	8000ea8 <__aeabi_fsub+0x94>
 8000f94:	e011      	b.n	8000fba <__aeabi_fsub+0x1a6>
 8000f96:	4648      	mov	r0, r9
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d158      	bne.n	800104e <__aeabi_fsub+0x23a>
 8000f9c:	2cff      	cmp	r4, #255	; 0xff
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_fsub+0x1a6>
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_fsub+0x194>
 8000fa6:	e78c      	b.n	8000ec2 <__aeabi_fsub+0xae>
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	03c0      	lsls	r0, r0, #15
 8000fac:	4303      	orrs	r3, r0
 8000fae:	025b      	lsls	r3, r3, #9
 8000fb0:	0a5b      	lsrs	r3, r3, #9
 8000fb2:	24ff      	movs	r4, #255	; 0xff
 8000fb4:	e787      	b.n	8000ec6 <__aeabi_fsub+0xb2>
 8000fb6:	2cff      	cmp	r4, #255	; 0xff
 8000fb8:	d025      	beq.n	8001006 <__aeabi_fsub+0x1f2>
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	2dff      	cmp	r5, #255	; 0xff
 8000fbe:	d0f0      	beq.n	8000fa2 <__aeabi_fsub+0x18e>
 8000fc0:	025b      	lsls	r3, r3, #9
 8000fc2:	0a5b      	lsrs	r3, r3, #9
 8000fc4:	b2ec      	uxtb	r4, r5
 8000fc6:	e77e      	b.n	8000ec6 <__aeabi_fsub+0xb2>
 8000fc8:	2c00      	cmp	r4, #0
 8000fca:	d04d      	beq.n	8001068 <__aeabi_fsub+0x254>
 8000fcc:	28ff      	cmp	r0, #255	; 0xff
 8000fce:	d018      	beq.n	8001002 <__aeabi_fsub+0x1ee>
 8000fd0:	2480      	movs	r4, #128	; 0x80
 8000fd2:	04e4      	lsls	r4, r4, #19
 8000fd4:	4272      	negs	r2, r6
 8000fd6:	4323      	orrs	r3, r4
 8000fd8:	2a1b      	cmp	r2, #27
 8000fda:	dd00      	ble.n	8000fde <__aeabi_fsub+0x1ca>
 8000fdc:	e0c4      	b.n	8001168 <__aeabi_fsub+0x354>
 8000fde:	001c      	movs	r4, r3
 8000fe0:	2520      	movs	r5, #32
 8000fe2:	40d4      	lsrs	r4, r2
 8000fe4:	1aaa      	subs	r2, r5, r2
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	4193      	sbcs	r3, r2
 8000fec:	4323      	orrs	r3, r4
 8000fee:	464a      	mov	r2, r9
 8000ff0:	0005      	movs	r5, r0
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	4688      	mov	r8, r1
 8000ff6:	e738      	b.n	8000e6a <__aeabi_fsub+0x56>
 8000ff8:	1c72      	adds	r2, r6, #1
 8000ffa:	d0f8      	beq.n	8000fee <__aeabi_fsub+0x1da>
 8000ffc:	43f2      	mvns	r2, r6
 8000ffe:	28ff      	cmp	r0, #255	; 0xff
 8001000:	d1ea      	bne.n	8000fd8 <__aeabi_fsub+0x1c4>
 8001002:	000a      	movs	r2, r1
 8001004:	464b      	mov	r3, r9
 8001006:	25ff      	movs	r5, #255	; 0xff
 8001008:	e7d7      	b.n	8000fba <__aeabi_fsub+0x1a6>
 800100a:	019b      	lsls	r3, r3, #6
 800100c:	0a5b      	lsrs	r3, r3, #9
 800100e:	e75a      	b.n	8000ec6 <__aeabi_fsub+0xb2>
 8001010:	2e00      	cmp	r6, #0
 8001012:	d141      	bne.n	8001098 <__aeabi_fsub+0x284>
 8001014:	1c65      	adds	r5, r4, #1
 8001016:	b2e9      	uxtb	r1, r5
 8001018:	2901      	cmp	r1, #1
 800101a:	dd45      	ble.n	80010a8 <__aeabi_fsub+0x294>
 800101c:	2dff      	cmp	r5, #255	; 0xff
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x20e>
 8001020:	e74f      	b.n	8000ec2 <__aeabi_fsub+0xae>
 8001022:	2407      	movs	r4, #7
 8001024:	444b      	add	r3, r9
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	401c      	ands	r4, r3
 800102a:	e738      	b.n	8000e9e <__aeabi_fsub+0x8a>
 800102c:	2207      	movs	r2, #7
 800102e:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <__aeabi_fsub+0x384>)
 8001030:	1a2d      	subs	r5, r5, r0
 8001032:	4023      	ands	r3, r4
 8001034:	4014      	ands	r4, r2
 8001036:	e732      	b.n	8000e9e <__aeabi_fsub+0x8a>
 8001038:	2c00      	cmp	r4, #0
 800103a:	d11d      	bne.n	8001078 <__aeabi_fsub+0x264>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d17a      	bne.n	8001136 <__aeabi_fsub+0x322>
 8001040:	464b      	mov	r3, r9
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x234>
 8001046:	e091      	b.n	800116c <__aeabi_fsub+0x358>
 8001048:	000a      	movs	r2, r1
 800104a:	2500      	movs	r5, #0
 800104c:	e7b5      	b.n	8000fba <__aeabi_fsub+0x1a6>
 800104e:	3e01      	subs	r6, #1
 8001050:	2e00      	cmp	r6, #0
 8001052:	d119      	bne.n	8001088 <__aeabi_fsub+0x274>
 8001054:	444b      	add	r3, r9
 8001056:	e76c      	b.n	8000f32 <__aeabi_fsub+0x11e>
 8001058:	2cff      	cmp	r4, #255	; 0xff
 800105a:	d184      	bne.n	8000f66 <__aeabi_fsub+0x152>
 800105c:	25ff      	movs	r5, #255	; 0xff
 800105e:	e7ac      	b.n	8000fba <__aeabi_fsub+0x1a6>
 8001060:	464a      	mov	r2, r9
 8001062:	4688      	mov	r8, r1
 8001064:	1ad4      	subs	r4, r2, r3
 8001066:	e705      	b.n	8000e74 <__aeabi_fsub+0x60>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1c5      	bne.n	8000ff8 <__aeabi_fsub+0x1e4>
 800106c:	000a      	movs	r2, r1
 800106e:	28ff      	cmp	r0, #255	; 0xff
 8001070:	d0c8      	beq.n	8001004 <__aeabi_fsub+0x1f0>
 8001072:	0005      	movs	r5, r0
 8001074:	464b      	mov	r3, r9
 8001076:	e7a0      	b.n	8000fba <__aeabi_fsub+0x1a6>
 8001078:	2b00      	cmp	r3, #0
 800107a:	d149      	bne.n	8001110 <__aeabi_fsub+0x2fc>
 800107c:	464b      	mov	r3, r9
 800107e:	2b00      	cmp	r3, #0
 8001080:	d077      	beq.n	8001172 <__aeabi_fsub+0x35e>
 8001082:	000a      	movs	r2, r1
 8001084:	25ff      	movs	r5, #255	; 0xff
 8001086:	e798      	b.n	8000fba <__aeabi_fsub+0x1a6>
 8001088:	2cff      	cmp	r4, #255	; 0xff
 800108a:	d000      	beq.n	800108e <__aeabi_fsub+0x27a>
 800108c:	e743      	b.n	8000f16 <__aeabi_fsub+0x102>
 800108e:	e787      	b.n	8000fa0 <__aeabi_fsub+0x18c>
 8001090:	000a      	movs	r2, r1
 8001092:	24ff      	movs	r4, #255	; 0xff
 8001094:	2300      	movs	r3, #0
 8001096:	e716      	b.n	8000ec6 <__aeabi_fsub+0xb2>
 8001098:	2c00      	cmp	r4, #0
 800109a:	d115      	bne.n	80010c8 <__aeabi_fsub+0x2b4>
 800109c:	2b00      	cmp	r3, #0
 800109e:	d157      	bne.n	8001150 <__aeabi_fsub+0x33c>
 80010a0:	28ff      	cmp	r0, #255	; 0xff
 80010a2:	d1e6      	bne.n	8001072 <__aeabi_fsub+0x25e>
 80010a4:	464b      	mov	r3, r9
 80010a6:	e77b      	b.n	8000fa0 <__aeabi_fsub+0x18c>
 80010a8:	2c00      	cmp	r4, #0
 80010aa:	d120      	bne.n	80010ee <__aeabi_fsub+0x2da>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d057      	beq.n	8001160 <__aeabi_fsub+0x34c>
 80010b0:	4649      	mov	r1, r9
 80010b2:	2900      	cmp	r1, #0
 80010b4:	d053      	beq.n	800115e <__aeabi_fsub+0x34a>
 80010b6:	444b      	add	r3, r9
 80010b8:	015a      	lsls	r2, r3, #5
 80010ba:	d568      	bpl.n	800118e <__aeabi_fsub+0x37a>
 80010bc:	2407      	movs	r4, #7
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <__aeabi_fsub+0x384>)
 80010c0:	401c      	ands	r4, r3
 80010c2:	2501      	movs	r5, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	e6ea      	b.n	8000e9e <__aeabi_fsub+0x8a>
 80010c8:	28ff      	cmp	r0, #255	; 0xff
 80010ca:	d0eb      	beq.n	80010a4 <__aeabi_fsub+0x290>
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	04d2      	lsls	r2, r2, #19
 80010d0:	4276      	negs	r6, r6
 80010d2:	4313      	orrs	r3, r2
 80010d4:	2e1b      	cmp	r6, #27
 80010d6:	dc53      	bgt.n	8001180 <__aeabi_fsub+0x36c>
 80010d8:	2520      	movs	r5, #32
 80010da:	1bad      	subs	r5, r5, r6
 80010dc:	001a      	movs	r2, r3
 80010de:	40ab      	lsls	r3, r5
 80010e0:	40f2      	lsrs	r2, r6
 80010e2:	1e5c      	subs	r4, r3, #1
 80010e4:	41a3      	sbcs	r3, r4
 80010e6:	4313      	orrs	r3, r2
 80010e8:	444b      	add	r3, r9
 80010ea:	0005      	movs	r5, r0
 80010ec:	e721      	b.n	8000f32 <__aeabi_fsub+0x11e>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0d8      	beq.n	80010a4 <__aeabi_fsub+0x290>
 80010f2:	4649      	mov	r1, r9
 80010f4:	2900      	cmp	r1, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x2e6>
 80010f8:	e752      	b.n	8000fa0 <__aeabi_fsub+0x18c>
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	03c9      	lsls	r1, r1, #15
 80010fe:	420f      	tst	r7, r1
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x2f0>
 8001102:	e74d      	b.n	8000fa0 <__aeabi_fsub+0x18c>
 8001104:	4660      	mov	r0, ip
 8001106:	4208      	tst	r0, r1
 8001108:	d000      	beq.n	800110c <__aeabi_fsub+0x2f8>
 800110a:	e749      	b.n	8000fa0 <__aeabi_fsub+0x18c>
 800110c:	464b      	mov	r3, r9
 800110e:	e747      	b.n	8000fa0 <__aeabi_fsub+0x18c>
 8001110:	4648      	mov	r0, r9
 8001112:	25ff      	movs	r5, #255	; 0xff
 8001114:	2800      	cmp	r0, #0
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0x306>
 8001118:	e74f      	b.n	8000fba <__aeabi_fsub+0x1a6>
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	03d2      	lsls	r2, r2, #15
 800111e:	4217      	tst	r7, r2
 8001120:	d004      	beq.n	800112c <__aeabi_fsub+0x318>
 8001122:	4660      	mov	r0, ip
 8001124:	4210      	tst	r0, r2
 8001126:	d101      	bne.n	800112c <__aeabi_fsub+0x318>
 8001128:	464b      	mov	r3, r9
 800112a:	4688      	mov	r8, r1
 800112c:	2201      	movs	r2, #1
 800112e:	4641      	mov	r1, r8
 8001130:	25ff      	movs	r5, #255	; 0xff
 8001132:	400a      	ands	r2, r1
 8001134:	e741      	b.n	8000fba <__aeabi_fsub+0x1a6>
 8001136:	4648      	mov	r0, r9
 8001138:	2800      	cmp	r0, #0
 800113a:	d01f      	beq.n	800117c <__aeabi_fsub+0x368>
 800113c:	1a1a      	subs	r2, r3, r0
 800113e:	0150      	lsls	r0, r2, #5
 8001140:	d520      	bpl.n	8001184 <__aeabi_fsub+0x370>
 8001142:	464a      	mov	r2, r9
 8001144:	2407      	movs	r4, #7
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	401c      	ands	r4, r3
 800114a:	4688      	mov	r8, r1
 800114c:	2500      	movs	r5, #0
 800114e:	e6a6      	b.n	8000e9e <__aeabi_fsub+0x8a>
 8001150:	1c74      	adds	r4, r6, #1
 8001152:	d0c9      	beq.n	80010e8 <__aeabi_fsub+0x2d4>
 8001154:	43f6      	mvns	r6, r6
 8001156:	28ff      	cmp	r0, #255	; 0xff
 8001158:	d1bc      	bne.n	80010d4 <__aeabi_fsub+0x2c0>
 800115a:	464b      	mov	r3, r9
 800115c:	e720      	b.n	8000fa0 <__aeabi_fsub+0x18c>
 800115e:	4699      	mov	r9, r3
 8001160:	464b      	mov	r3, r9
 8001162:	2500      	movs	r5, #0
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	e72b      	b.n	8000fc0 <__aeabi_fsub+0x1ac>
 8001168:	2301      	movs	r3, #1
 800116a:	e740      	b.n	8000fee <__aeabi_fsub+0x1da>
 800116c:	2200      	movs	r2, #0
 800116e:	2300      	movs	r3, #0
 8001170:	e6a9      	b.n	8000ec6 <__aeabi_fsub+0xb2>
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	2200      	movs	r2, #0
 8001176:	03db      	lsls	r3, r3, #15
 8001178:	24ff      	movs	r4, #255	; 0xff
 800117a:	e6a4      	b.n	8000ec6 <__aeabi_fsub+0xb2>
 800117c:	2500      	movs	r5, #0
 800117e:	e71c      	b.n	8000fba <__aeabi_fsub+0x1a6>
 8001180:	2301      	movs	r3, #1
 8001182:	e7b1      	b.n	80010e8 <__aeabi_fsub+0x2d4>
 8001184:	2a00      	cmp	r2, #0
 8001186:	d0f1      	beq.n	800116c <__aeabi_fsub+0x358>
 8001188:	0013      	movs	r3, r2
 800118a:	2500      	movs	r5, #0
 800118c:	e6fc      	b.n	8000f88 <__aeabi_fsub+0x174>
 800118e:	2500      	movs	r5, #0
 8001190:	e6fa      	b.n	8000f88 <__aeabi_fsub+0x174>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	7dffffff 	.word	0x7dffffff
 8001198:	fbffffff 	.word	0xfbffffff

0800119c <__aeabi_ui2f>:
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	1e04      	subs	r4, r0, #0
 80011a0:	d034      	beq.n	800120c <__aeabi_ui2f+0x70>
 80011a2:	f001 feaf 	bl	8002f04 <__clzsi2>
 80011a6:	229e      	movs	r2, #158	; 0x9e
 80011a8:	1a12      	subs	r2, r2, r0
 80011aa:	2a96      	cmp	r2, #150	; 0x96
 80011ac:	dc07      	bgt.n	80011be <__aeabi_ui2f+0x22>
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	2808      	cmp	r0, #8
 80011b2:	dd2e      	ble.n	8001212 <__aeabi_ui2f+0x76>
 80011b4:	3808      	subs	r0, #8
 80011b6:	4084      	lsls	r4, r0
 80011b8:	0260      	lsls	r0, r4, #9
 80011ba:	0a40      	lsrs	r0, r0, #9
 80011bc:	e021      	b.n	8001202 <__aeabi_ui2f+0x66>
 80011be:	2a99      	cmp	r2, #153	; 0x99
 80011c0:	dd09      	ble.n	80011d6 <__aeabi_ui2f+0x3a>
 80011c2:	0003      	movs	r3, r0
 80011c4:	0021      	movs	r1, r4
 80011c6:	331b      	adds	r3, #27
 80011c8:	4099      	lsls	r1, r3
 80011ca:	1e4b      	subs	r3, r1, #1
 80011cc:	4199      	sbcs	r1, r3
 80011ce:	2305      	movs	r3, #5
 80011d0:	1a1b      	subs	r3, r3, r0
 80011d2:	40dc      	lsrs	r4, r3
 80011d4:	430c      	orrs	r4, r1
 80011d6:	2805      	cmp	r0, #5
 80011d8:	dd01      	ble.n	80011de <__aeabi_ui2f+0x42>
 80011da:	1f43      	subs	r3, r0, #5
 80011dc:	409c      	lsls	r4, r3
 80011de:	0023      	movs	r3, r4
 80011e0:	490d      	ldr	r1, [pc, #52]	; (8001218 <__aeabi_ui2f+0x7c>)
 80011e2:	400b      	ands	r3, r1
 80011e4:	0765      	lsls	r5, r4, #29
 80011e6:	d009      	beq.n	80011fc <__aeabi_ui2f+0x60>
 80011e8:	250f      	movs	r5, #15
 80011ea:	402c      	ands	r4, r5
 80011ec:	2c04      	cmp	r4, #4
 80011ee:	d005      	beq.n	80011fc <__aeabi_ui2f+0x60>
 80011f0:	3304      	adds	r3, #4
 80011f2:	015c      	lsls	r4, r3, #5
 80011f4:	d502      	bpl.n	80011fc <__aeabi_ui2f+0x60>
 80011f6:	229f      	movs	r2, #159	; 0x9f
 80011f8:	400b      	ands	r3, r1
 80011fa:	1a12      	subs	r2, r2, r0
 80011fc:	019b      	lsls	r3, r3, #6
 80011fe:	0a58      	lsrs	r0, r3, #9
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	0240      	lsls	r0, r0, #9
 8001204:	05d2      	lsls	r2, r2, #23
 8001206:	0a40      	lsrs	r0, r0, #9
 8001208:	4310      	orrs	r0, r2
 800120a:	bd70      	pop	{r4, r5, r6, pc}
 800120c:	2200      	movs	r2, #0
 800120e:	2000      	movs	r0, #0
 8001210:	e7f7      	b.n	8001202 <__aeabi_ui2f+0x66>
 8001212:	0260      	lsls	r0, r4, #9
 8001214:	0a40      	lsrs	r0, r0, #9
 8001216:	e7f4      	b.n	8001202 <__aeabi_ui2f+0x66>
 8001218:	fbffffff 	.word	0xfbffffff

0800121c <__aeabi_dadd>:
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	464f      	mov	r7, r9
 8001220:	4646      	mov	r6, r8
 8001222:	46d6      	mov	lr, sl
 8001224:	000c      	movs	r4, r1
 8001226:	0309      	lsls	r1, r1, #12
 8001228:	b5c0      	push	{r6, r7, lr}
 800122a:	0a49      	lsrs	r1, r1, #9
 800122c:	0f47      	lsrs	r7, r0, #29
 800122e:	005e      	lsls	r6, r3, #1
 8001230:	4339      	orrs	r1, r7
 8001232:	031f      	lsls	r7, r3, #12
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	469c      	mov	ip, r3
 8001238:	0065      	lsls	r5, r4, #1
 800123a:	0a7b      	lsrs	r3, r7, #9
 800123c:	0f57      	lsrs	r7, r2, #29
 800123e:	431f      	orrs	r7, r3
 8001240:	0d6d      	lsrs	r5, r5, #21
 8001242:	0fe4      	lsrs	r4, r4, #31
 8001244:	0d76      	lsrs	r6, r6, #21
 8001246:	46a1      	mov	r9, r4
 8001248:	00c0      	lsls	r0, r0, #3
 800124a:	46b8      	mov	r8, r7
 800124c:	00d2      	lsls	r2, r2, #3
 800124e:	1bab      	subs	r3, r5, r6
 8001250:	4564      	cmp	r4, ip
 8001252:	d07b      	beq.n	800134c <__aeabi_dadd+0x130>
 8001254:	2b00      	cmp	r3, #0
 8001256:	dd5f      	ble.n	8001318 <__aeabi_dadd+0xfc>
 8001258:	2e00      	cmp	r6, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x42>
 800125c:	e0a4      	b.n	80013a8 <__aeabi_dadd+0x18c>
 800125e:	003e      	movs	r6, r7
 8001260:	4316      	orrs	r6, r2
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x4a>
 8001264:	e112      	b.n	800148c <__aeabi_dadd+0x270>
 8001266:	1e5e      	subs	r6, r3, #1
 8001268:	2e00      	cmp	r6, #0
 800126a:	d000      	beq.n	800126e <__aeabi_dadd+0x52>
 800126c:	e19e      	b.n	80015ac <__aeabi_dadd+0x390>
 800126e:	1a87      	subs	r7, r0, r2
 8001270:	4643      	mov	r3, r8
 8001272:	42b8      	cmp	r0, r7
 8001274:	4180      	sbcs	r0, r0
 8001276:	2501      	movs	r5, #1
 8001278:	1ac9      	subs	r1, r1, r3
 800127a:	4240      	negs	r0, r0
 800127c:	1a09      	subs	r1, r1, r0
 800127e:	020b      	lsls	r3, r1, #8
 8001280:	d400      	bmi.n	8001284 <__aeabi_dadd+0x68>
 8001282:	e131      	b.n	80014e8 <__aeabi_dadd+0x2cc>
 8001284:	0249      	lsls	r1, r1, #9
 8001286:	0a4e      	lsrs	r6, r1, #9
 8001288:	2e00      	cmp	r6, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x72>
 800128c:	e16e      	b.n	800156c <__aeabi_dadd+0x350>
 800128e:	0030      	movs	r0, r6
 8001290:	f001 fe38 	bl	8002f04 <__clzsi2>
 8001294:	0003      	movs	r3, r0
 8001296:	3b08      	subs	r3, #8
 8001298:	2b1f      	cmp	r3, #31
 800129a:	dd00      	ble.n	800129e <__aeabi_dadd+0x82>
 800129c:	e161      	b.n	8001562 <__aeabi_dadd+0x346>
 800129e:	2220      	movs	r2, #32
 80012a0:	0039      	movs	r1, r7
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	409e      	lsls	r6, r3
 80012a6:	40d1      	lsrs	r1, r2
 80012a8:	409f      	lsls	r7, r3
 80012aa:	430e      	orrs	r6, r1
 80012ac:	429d      	cmp	r5, r3
 80012ae:	dd00      	ble.n	80012b2 <__aeabi_dadd+0x96>
 80012b0:	e151      	b.n	8001556 <__aeabi_dadd+0x33a>
 80012b2:	1b5d      	subs	r5, r3, r5
 80012b4:	1c6b      	adds	r3, r5, #1
 80012b6:	2b1f      	cmp	r3, #31
 80012b8:	dd00      	ble.n	80012bc <__aeabi_dadd+0xa0>
 80012ba:	e17c      	b.n	80015b6 <__aeabi_dadd+0x39a>
 80012bc:	2120      	movs	r1, #32
 80012be:	1ac9      	subs	r1, r1, r3
 80012c0:	003d      	movs	r5, r7
 80012c2:	0030      	movs	r0, r6
 80012c4:	408f      	lsls	r7, r1
 80012c6:	4088      	lsls	r0, r1
 80012c8:	40dd      	lsrs	r5, r3
 80012ca:	1e79      	subs	r1, r7, #1
 80012cc:	418f      	sbcs	r7, r1
 80012ce:	0031      	movs	r1, r6
 80012d0:	2207      	movs	r2, #7
 80012d2:	4328      	orrs	r0, r5
 80012d4:	40d9      	lsrs	r1, r3
 80012d6:	2500      	movs	r5, #0
 80012d8:	4307      	orrs	r7, r0
 80012da:	403a      	ands	r2, r7
 80012dc:	2a00      	cmp	r2, #0
 80012de:	d009      	beq.n	80012f4 <__aeabi_dadd+0xd8>
 80012e0:	230f      	movs	r3, #15
 80012e2:	403b      	ands	r3, r7
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d005      	beq.n	80012f4 <__aeabi_dadd+0xd8>
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	42bb      	cmp	r3, r7
 80012ec:	41bf      	sbcs	r7, r7
 80012ee:	427f      	negs	r7, r7
 80012f0:	19c9      	adds	r1, r1, r7
 80012f2:	001f      	movs	r7, r3
 80012f4:	020b      	lsls	r3, r1, #8
 80012f6:	d400      	bmi.n	80012fa <__aeabi_dadd+0xde>
 80012f8:	e226      	b.n	8001748 <__aeabi_dadd+0x52c>
 80012fa:	1c6a      	adds	r2, r5, #1
 80012fc:	4bc6      	ldr	r3, [pc, #792]	; (8001618 <__aeabi_dadd+0x3fc>)
 80012fe:	0555      	lsls	r5, r2, #21
 8001300:	0d6d      	lsrs	r5, r5, #21
 8001302:	429a      	cmp	r2, r3
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0xec>
 8001306:	e106      	b.n	8001516 <__aeabi_dadd+0x2fa>
 8001308:	4ac4      	ldr	r2, [pc, #784]	; (800161c <__aeabi_dadd+0x400>)
 800130a:	08ff      	lsrs	r7, r7, #3
 800130c:	400a      	ands	r2, r1
 800130e:	0753      	lsls	r3, r2, #29
 8001310:	0252      	lsls	r2, r2, #9
 8001312:	433b      	orrs	r3, r7
 8001314:	0b12      	lsrs	r2, r2, #12
 8001316:	e08e      	b.n	8001436 <__aeabi_dadd+0x21a>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <__aeabi_dadd+0x102>
 800131c:	e0b8      	b.n	8001490 <__aeabi_dadd+0x274>
 800131e:	1c6b      	adds	r3, r5, #1
 8001320:	055b      	lsls	r3, r3, #21
 8001322:	0d5b      	lsrs	r3, r3, #21
 8001324:	2b01      	cmp	r3, #1
 8001326:	dc00      	bgt.n	800132a <__aeabi_dadd+0x10e>
 8001328:	e130      	b.n	800158c <__aeabi_dadd+0x370>
 800132a:	1a87      	subs	r7, r0, r2
 800132c:	4643      	mov	r3, r8
 800132e:	42b8      	cmp	r0, r7
 8001330:	41b6      	sbcs	r6, r6
 8001332:	1acb      	subs	r3, r1, r3
 8001334:	4276      	negs	r6, r6
 8001336:	1b9e      	subs	r6, r3, r6
 8001338:	0233      	lsls	r3, r6, #8
 800133a:	d500      	bpl.n	800133e <__aeabi_dadd+0x122>
 800133c:	e14c      	b.n	80015d8 <__aeabi_dadd+0x3bc>
 800133e:	003b      	movs	r3, r7
 8001340:	4333      	orrs	r3, r6
 8001342:	d1a1      	bne.n	8001288 <__aeabi_dadd+0x6c>
 8001344:	2200      	movs	r2, #0
 8001346:	2400      	movs	r4, #0
 8001348:	2500      	movs	r5, #0
 800134a:	e070      	b.n	800142e <__aeabi_dadd+0x212>
 800134c:	2b00      	cmp	r3, #0
 800134e:	dc00      	bgt.n	8001352 <__aeabi_dadd+0x136>
 8001350:	e0e5      	b.n	800151e <__aeabi_dadd+0x302>
 8001352:	2e00      	cmp	r6, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x13c>
 8001356:	e083      	b.n	8001460 <__aeabi_dadd+0x244>
 8001358:	4eaf      	ldr	r6, [pc, #700]	; (8001618 <__aeabi_dadd+0x3fc>)
 800135a:	42b5      	cmp	r5, r6
 800135c:	d060      	beq.n	8001420 <__aeabi_dadd+0x204>
 800135e:	2680      	movs	r6, #128	; 0x80
 8001360:	0436      	lsls	r6, r6, #16
 8001362:	4337      	orrs	r7, r6
 8001364:	46b8      	mov	r8, r7
 8001366:	2b38      	cmp	r3, #56	; 0x38
 8001368:	dc00      	bgt.n	800136c <__aeabi_dadd+0x150>
 800136a:	e13e      	b.n	80015ea <__aeabi_dadd+0x3ce>
 800136c:	4643      	mov	r3, r8
 800136e:	4313      	orrs	r3, r2
 8001370:	001f      	movs	r7, r3
 8001372:	1e7a      	subs	r2, r7, #1
 8001374:	4197      	sbcs	r7, r2
 8001376:	183f      	adds	r7, r7, r0
 8001378:	4287      	cmp	r7, r0
 800137a:	4180      	sbcs	r0, r0
 800137c:	4240      	negs	r0, r0
 800137e:	1809      	adds	r1, r1, r0
 8001380:	020b      	lsls	r3, r1, #8
 8001382:	d400      	bmi.n	8001386 <__aeabi_dadd+0x16a>
 8001384:	e0b0      	b.n	80014e8 <__aeabi_dadd+0x2cc>
 8001386:	4ba4      	ldr	r3, [pc, #656]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001388:	3501      	adds	r5, #1
 800138a:	429d      	cmp	r5, r3
 800138c:	d100      	bne.n	8001390 <__aeabi_dadd+0x174>
 800138e:	e0c3      	b.n	8001518 <__aeabi_dadd+0x2fc>
 8001390:	4aa2      	ldr	r2, [pc, #648]	; (800161c <__aeabi_dadd+0x400>)
 8001392:	087b      	lsrs	r3, r7, #1
 8001394:	400a      	ands	r2, r1
 8001396:	2101      	movs	r1, #1
 8001398:	400f      	ands	r7, r1
 800139a:	431f      	orrs	r7, r3
 800139c:	0851      	lsrs	r1, r2, #1
 800139e:	07d3      	lsls	r3, r2, #31
 80013a0:	2207      	movs	r2, #7
 80013a2:	431f      	orrs	r7, r3
 80013a4:	403a      	ands	r2, r7
 80013a6:	e799      	b.n	80012dc <__aeabi_dadd+0xc0>
 80013a8:	4e9b      	ldr	r6, [pc, #620]	; (8001618 <__aeabi_dadd+0x3fc>)
 80013aa:	42b5      	cmp	r5, r6
 80013ac:	d038      	beq.n	8001420 <__aeabi_dadd+0x204>
 80013ae:	2680      	movs	r6, #128	; 0x80
 80013b0:	0436      	lsls	r6, r6, #16
 80013b2:	4337      	orrs	r7, r6
 80013b4:	46b8      	mov	r8, r7
 80013b6:	2b38      	cmp	r3, #56	; 0x38
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x1a0>
 80013ba:	e0dc      	b.n	8001576 <__aeabi_dadd+0x35a>
 80013bc:	2b1f      	cmp	r3, #31
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_dadd+0x1a6>
 80013c0:	e130      	b.n	8001624 <__aeabi_dadd+0x408>
 80013c2:	001e      	movs	r6, r3
 80013c4:	4647      	mov	r7, r8
 80013c6:	3e20      	subs	r6, #32
 80013c8:	40f7      	lsrs	r7, r6
 80013ca:	46bc      	mov	ip, r7
 80013cc:	2b20      	cmp	r3, #32
 80013ce:	d004      	beq.n	80013da <__aeabi_dadd+0x1be>
 80013d0:	2640      	movs	r6, #64	; 0x40
 80013d2:	1af3      	subs	r3, r6, r3
 80013d4:	4646      	mov	r6, r8
 80013d6:	409e      	lsls	r6, r3
 80013d8:	4332      	orrs	r2, r6
 80013da:	0017      	movs	r7, r2
 80013dc:	4663      	mov	r3, ip
 80013de:	1e7a      	subs	r2, r7, #1
 80013e0:	4197      	sbcs	r7, r2
 80013e2:	431f      	orrs	r7, r3
 80013e4:	e0cc      	b.n	8001580 <__aeabi_dadd+0x364>
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <__aeabi_dadd+0x1d0>
 80013ea:	e204      	b.n	80017f6 <__aeabi_dadd+0x5da>
 80013ec:	4643      	mov	r3, r8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dadd+0x1d8>
 80013f2:	e159      	b.n	80016a8 <__aeabi_dadd+0x48c>
 80013f4:	074b      	lsls	r3, r1, #29
 80013f6:	08c0      	lsrs	r0, r0, #3
 80013f8:	4318      	orrs	r0, r3
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	08c9      	lsrs	r1, r1, #3
 80013fe:	031b      	lsls	r3, r3, #12
 8001400:	4219      	tst	r1, r3
 8001402:	d008      	beq.n	8001416 <__aeabi_dadd+0x1fa>
 8001404:	4645      	mov	r5, r8
 8001406:	08ed      	lsrs	r5, r5, #3
 8001408:	421d      	tst	r5, r3
 800140a:	d104      	bne.n	8001416 <__aeabi_dadd+0x1fa>
 800140c:	4643      	mov	r3, r8
 800140e:	08d0      	lsrs	r0, r2, #3
 8001410:	0759      	lsls	r1, r3, #29
 8001412:	4308      	orrs	r0, r1
 8001414:	0029      	movs	r1, r5
 8001416:	0f42      	lsrs	r2, r0, #29
 8001418:	00c9      	lsls	r1, r1, #3
 800141a:	4d7f      	ldr	r5, [pc, #508]	; (8001618 <__aeabi_dadd+0x3fc>)
 800141c:	4311      	orrs	r1, r2
 800141e:	00c0      	lsls	r0, r0, #3
 8001420:	074b      	lsls	r3, r1, #29
 8001422:	08ca      	lsrs	r2, r1, #3
 8001424:	497c      	ldr	r1, [pc, #496]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001426:	08c0      	lsrs	r0, r0, #3
 8001428:	4303      	orrs	r3, r0
 800142a:	428d      	cmp	r5, r1
 800142c:	d068      	beq.n	8001500 <__aeabi_dadd+0x2e4>
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	056d      	lsls	r5, r5, #21
 8001432:	0b12      	lsrs	r2, r2, #12
 8001434:	0d6d      	lsrs	r5, r5, #21
 8001436:	2100      	movs	r1, #0
 8001438:	0312      	lsls	r2, r2, #12
 800143a:	0018      	movs	r0, r3
 800143c:	0b13      	lsrs	r3, r2, #12
 800143e:	0d0a      	lsrs	r2, r1, #20
 8001440:	0512      	lsls	r2, r2, #20
 8001442:	431a      	orrs	r2, r3
 8001444:	4b76      	ldr	r3, [pc, #472]	; (8001620 <__aeabi_dadd+0x404>)
 8001446:	052d      	lsls	r5, r5, #20
 8001448:	4013      	ands	r3, r2
 800144a:	432b      	orrs	r3, r5
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	07e4      	lsls	r4, r4, #31
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	4323      	orrs	r3, r4
 8001454:	0019      	movs	r1, r3
 8001456:	bc1c      	pop	{r2, r3, r4}
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	46a2      	mov	sl, r4
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	003e      	movs	r6, r7
 8001462:	4316      	orrs	r6, r2
 8001464:	d012      	beq.n	800148c <__aeabi_dadd+0x270>
 8001466:	1e5e      	subs	r6, r3, #1
 8001468:	2e00      	cmp	r6, #0
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x252>
 800146c:	e100      	b.n	8001670 <__aeabi_dadd+0x454>
 800146e:	1887      	adds	r7, r0, r2
 8001470:	4287      	cmp	r7, r0
 8001472:	4180      	sbcs	r0, r0
 8001474:	4441      	add	r1, r8
 8001476:	4240      	negs	r0, r0
 8001478:	1809      	adds	r1, r1, r0
 800147a:	2501      	movs	r5, #1
 800147c:	020b      	lsls	r3, r1, #8
 800147e:	d533      	bpl.n	80014e8 <__aeabi_dadd+0x2cc>
 8001480:	2502      	movs	r5, #2
 8001482:	e785      	b.n	8001390 <__aeabi_dadd+0x174>
 8001484:	4664      	mov	r4, ip
 8001486:	0033      	movs	r3, r6
 8001488:	4641      	mov	r1, r8
 800148a:	0010      	movs	r0, r2
 800148c:	001d      	movs	r5, r3
 800148e:	e7c7      	b.n	8001420 <__aeabi_dadd+0x204>
 8001490:	2d00      	cmp	r5, #0
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x27a>
 8001494:	e0da      	b.n	800164c <__aeabi_dadd+0x430>
 8001496:	000c      	movs	r4, r1
 8001498:	4304      	orrs	r4, r0
 800149a:	d0f3      	beq.n	8001484 <__aeabi_dadd+0x268>
 800149c:	1c5c      	adds	r4, r3, #1
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x286>
 80014a0:	e19f      	b.n	80017e2 <__aeabi_dadd+0x5c6>
 80014a2:	4c5d      	ldr	r4, [pc, #372]	; (8001618 <__aeabi_dadd+0x3fc>)
 80014a4:	42a6      	cmp	r6, r4
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x28e>
 80014a8:	e12f      	b.n	800170a <__aeabi_dadd+0x4ee>
 80014aa:	43db      	mvns	r3, r3
 80014ac:	2b38      	cmp	r3, #56	; 0x38
 80014ae:	dd00      	ble.n	80014b2 <__aeabi_dadd+0x296>
 80014b0:	e166      	b.n	8001780 <__aeabi_dadd+0x564>
 80014b2:	2b1f      	cmp	r3, #31
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x29c>
 80014b6:	e183      	b.n	80017c0 <__aeabi_dadd+0x5a4>
 80014b8:	2420      	movs	r4, #32
 80014ba:	0005      	movs	r5, r0
 80014bc:	1ae4      	subs	r4, r4, r3
 80014be:	000f      	movs	r7, r1
 80014c0:	40dd      	lsrs	r5, r3
 80014c2:	40d9      	lsrs	r1, r3
 80014c4:	40a0      	lsls	r0, r4
 80014c6:	4643      	mov	r3, r8
 80014c8:	40a7      	lsls	r7, r4
 80014ca:	1a5b      	subs	r3, r3, r1
 80014cc:	1e44      	subs	r4, r0, #1
 80014ce:	41a0      	sbcs	r0, r4
 80014d0:	4698      	mov	r8, r3
 80014d2:	432f      	orrs	r7, r5
 80014d4:	4338      	orrs	r0, r7
 80014d6:	1a17      	subs	r7, r2, r0
 80014d8:	42ba      	cmp	r2, r7
 80014da:	4192      	sbcs	r2, r2
 80014dc:	4643      	mov	r3, r8
 80014de:	4252      	negs	r2, r2
 80014e0:	1a99      	subs	r1, r3, r2
 80014e2:	4664      	mov	r4, ip
 80014e4:	0035      	movs	r5, r6
 80014e6:	e6ca      	b.n	800127e <__aeabi_dadd+0x62>
 80014e8:	2207      	movs	r2, #7
 80014ea:	403a      	ands	r2, r7
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d000      	beq.n	80014f2 <__aeabi_dadd+0x2d6>
 80014f0:	e6f6      	b.n	80012e0 <__aeabi_dadd+0xc4>
 80014f2:	074b      	lsls	r3, r1, #29
 80014f4:	08ca      	lsrs	r2, r1, #3
 80014f6:	4948      	ldr	r1, [pc, #288]	; (8001618 <__aeabi_dadd+0x3fc>)
 80014f8:	08ff      	lsrs	r7, r7, #3
 80014fa:	433b      	orrs	r3, r7
 80014fc:	428d      	cmp	r5, r1
 80014fe:	d196      	bne.n	800142e <__aeabi_dadd+0x212>
 8001500:	0019      	movs	r1, r3
 8001502:	4311      	orrs	r1, r2
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x2ec>
 8001506:	e19e      	b.n	8001846 <__aeabi_dadd+0x62a>
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0309      	lsls	r1, r1, #12
 800150c:	430a      	orrs	r2, r1
 800150e:	0312      	lsls	r2, r2, #12
 8001510:	0b12      	lsrs	r2, r2, #12
 8001512:	4d41      	ldr	r5, [pc, #260]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001514:	e78f      	b.n	8001436 <__aeabi_dadd+0x21a>
 8001516:	0015      	movs	r5, r2
 8001518:	2200      	movs	r2, #0
 800151a:	2300      	movs	r3, #0
 800151c:	e78b      	b.n	8001436 <__aeabi_dadd+0x21a>
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <__aeabi_dadd+0x308>
 8001522:	e0c7      	b.n	80016b4 <__aeabi_dadd+0x498>
 8001524:	1c6b      	adds	r3, r5, #1
 8001526:	055f      	lsls	r7, r3, #21
 8001528:	0d7f      	lsrs	r7, r7, #21
 800152a:	2f01      	cmp	r7, #1
 800152c:	dc00      	bgt.n	8001530 <__aeabi_dadd+0x314>
 800152e:	e0f1      	b.n	8001714 <__aeabi_dadd+0x4f8>
 8001530:	4d39      	ldr	r5, [pc, #228]	; (8001618 <__aeabi_dadd+0x3fc>)
 8001532:	42ab      	cmp	r3, r5
 8001534:	d100      	bne.n	8001538 <__aeabi_dadd+0x31c>
 8001536:	e0b9      	b.n	80016ac <__aeabi_dadd+0x490>
 8001538:	1885      	adds	r5, r0, r2
 800153a:	000a      	movs	r2, r1
 800153c:	4285      	cmp	r5, r0
 800153e:	4189      	sbcs	r1, r1
 8001540:	4442      	add	r2, r8
 8001542:	4249      	negs	r1, r1
 8001544:	1851      	adds	r1, r2, r1
 8001546:	2207      	movs	r2, #7
 8001548:	07cf      	lsls	r7, r1, #31
 800154a:	086d      	lsrs	r5, r5, #1
 800154c:	432f      	orrs	r7, r5
 800154e:	0849      	lsrs	r1, r1, #1
 8001550:	403a      	ands	r2, r7
 8001552:	001d      	movs	r5, r3
 8001554:	e6c2      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001556:	2207      	movs	r2, #7
 8001558:	4930      	ldr	r1, [pc, #192]	; (800161c <__aeabi_dadd+0x400>)
 800155a:	1aed      	subs	r5, r5, r3
 800155c:	4031      	ands	r1, r6
 800155e:	403a      	ands	r2, r7
 8001560:	e6bc      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001562:	003e      	movs	r6, r7
 8001564:	3828      	subs	r0, #40	; 0x28
 8001566:	4086      	lsls	r6, r0
 8001568:	2700      	movs	r7, #0
 800156a:	e69f      	b.n	80012ac <__aeabi_dadd+0x90>
 800156c:	0038      	movs	r0, r7
 800156e:	f001 fcc9 	bl	8002f04 <__clzsi2>
 8001572:	3020      	adds	r0, #32
 8001574:	e68e      	b.n	8001294 <__aeabi_dadd+0x78>
 8001576:	4643      	mov	r3, r8
 8001578:	4313      	orrs	r3, r2
 800157a:	001f      	movs	r7, r3
 800157c:	1e7a      	subs	r2, r7, #1
 800157e:	4197      	sbcs	r7, r2
 8001580:	1bc7      	subs	r7, r0, r7
 8001582:	42b8      	cmp	r0, r7
 8001584:	4180      	sbcs	r0, r0
 8001586:	4240      	negs	r0, r0
 8001588:	1a09      	subs	r1, r1, r0
 800158a:	e678      	b.n	800127e <__aeabi_dadd+0x62>
 800158c:	000e      	movs	r6, r1
 800158e:	003b      	movs	r3, r7
 8001590:	4306      	orrs	r6, r0
 8001592:	4313      	orrs	r3, r2
 8001594:	2d00      	cmp	r5, #0
 8001596:	d161      	bne.n	800165c <__aeabi_dadd+0x440>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x382>
 800159c:	e0f4      	b.n	8001788 <__aeabi_dadd+0x56c>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x388>
 80015a2:	e11b      	b.n	80017dc <__aeabi_dadd+0x5c0>
 80015a4:	4664      	mov	r4, ip
 80015a6:	0039      	movs	r1, r7
 80015a8:	0010      	movs	r0, r2
 80015aa:	e739      	b.n	8001420 <__aeabi_dadd+0x204>
 80015ac:	4f1a      	ldr	r7, [pc, #104]	; (8001618 <__aeabi_dadd+0x3fc>)
 80015ae:	42bb      	cmp	r3, r7
 80015b0:	d07a      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 80015b2:	0033      	movs	r3, r6
 80015b4:	e6ff      	b.n	80013b6 <__aeabi_dadd+0x19a>
 80015b6:	0030      	movs	r0, r6
 80015b8:	3d1f      	subs	r5, #31
 80015ba:	40e8      	lsrs	r0, r5
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d003      	beq.n	80015c8 <__aeabi_dadd+0x3ac>
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	1acb      	subs	r3, r1, r3
 80015c4:	409e      	lsls	r6, r3
 80015c6:	4337      	orrs	r7, r6
 80015c8:	1e7b      	subs	r3, r7, #1
 80015ca:	419f      	sbcs	r7, r3
 80015cc:	2207      	movs	r2, #7
 80015ce:	4307      	orrs	r7, r0
 80015d0:	403a      	ands	r2, r7
 80015d2:	2100      	movs	r1, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	e789      	b.n	80014ec <__aeabi_dadd+0x2d0>
 80015d8:	1a17      	subs	r7, r2, r0
 80015da:	4643      	mov	r3, r8
 80015dc:	42ba      	cmp	r2, r7
 80015de:	41b6      	sbcs	r6, r6
 80015e0:	1a59      	subs	r1, r3, r1
 80015e2:	4276      	negs	r6, r6
 80015e4:	1b8e      	subs	r6, r1, r6
 80015e6:	4664      	mov	r4, ip
 80015e8:	e64e      	b.n	8001288 <__aeabi_dadd+0x6c>
 80015ea:	2b1f      	cmp	r3, #31
 80015ec:	dd00      	ble.n	80015f0 <__aeabi_dadd+0x3d4>
 80015ee:	e0ad      	b.n	800174c <__aeabi_dadd+0x530>
 80015f0:	2620      	movs	r6, #32
 80015f2:	4647      	mov	r7, r8
 80015f4:	1af6      	subs	r6, r6, r3
 80015f6:	40b7      	lsls	r7, r6
 80015f8:	46b9      	mov	r9, r7
 80015fa:	0017      	movs	r7, r2
 80015fc:	46b2      	mov	sl, r6
 80015fe:	40df      	lsrs	r7, r3
 8001600:	464e      	mov	r6, r9
 8001602:	433e      	orrs	r6, r7
 8001604:	0037      	movs	r7, r6
 8001606:	4656      	mov	r6, sl
 8001608:	40b2      	lsls	r2, r6
 800160a:	1e56      	subs	r6, r2, #1
 800160c:	41b2      	sbcs	r2, r6
 800160e:	4317      	orrs	r7, r2
 8001610:	4642      	mov	r2, r8
 8001612:	40da      	lsrs	r2, r3
 8001614:	1889      	adds	r1, r1, r2
 8001616:	e6ae      	b.n	8001376 <__aeabi_dadd+0x15a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff
 8001620:	800fffff 	.word	0x800fffff
 8001624:	2620      	movs	r6, #32
 8001626:	4647      	mov	r7, r8
 8001628:	1af6      	subs	r6, r6, r3
 800162a:	40b7      	lsls	r7, r6
 800162c:	46b9      	mov	r9, r7
 800162e:	0017      	movs	r7, r2
 8001630:	46b2      	mov	sl, r6
 8001632:	40df      	lsrs	r7, r3
 8001634:	464e      	mov	r6, r9
 8001636:	433e      	orrs	r6, r7
 8001638:	0037      	movs	r7, r6
 800163a:	4656      	mov	r6, sl
 800163c:	40b2      	lsls	r2, r6
 800163e:	1e56      	subs	r6, r2, #1
 8001640:	41b2      	sbcs	r2, r6
 8001642:	4317      	orrs	r7, r2
 8001644:	4642      	mov	r2, r8
 8001646:	40da      	lsrs	r2, r3
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	e799      	b.n	8001580 <__aeabi_dadd+0x364>
 800164c:	4c7f      	ldr	r4, [pc, #508]	; (800184c <__aeabi_dadd+0x630>)
 800164e:	42a6      	cmp	r6, r4
 8001650:	d05b      	beq.n	800170a <__aeabi_dadd+0x4ee>
 8001652:	2480      	movs	r4, #128	; 0x80
 8001654:	0424      	lsls	r4, r4, #16
 8001656:	425b      	negs	r3, r3
 8001658:	4321      	orrs	r1, r4
 800165a:	e727      	b.n	80014ac <__aeabi_dadd+0x290>
 800165c:	2e00      	cmp	r6, #0
 800165e:	d10c      	bne.n	800167a <__aeabi_dadd+0x45e>
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dadd+0x44a>
 8001664:	e0cb      	b.n	80017fe <__aeabi_dadd+0x5e2>
 8001666:	4664      	mov	r4, ip
 8001668:	0039      	movs	r1, r7
 800166a:	0010      	movs	r0, r2
 800166c:	4d77      	ldr	r5, [pc, #476]	; (800184c <__aeabi_dadd+0x630>)
 800166e:	e6d7      	b.n	8001420 <__aeabi_dadd+0x204>
 8001670:	4f76      	ldr	r7, [pc, #472]	; (800184c <__aeabi_dadd+0x630>)
 8001672:	42bb      	cmp	r3, r7
 8001674:	d018      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 8001676:	0033      	movs	r3, r6
 8001678:	e675      	b.n	8001366 <__aeabi_dadd+0x14a>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d014      	beq.n	80016a8 <__aeabi_dadd+0x48c>
 800167e:	074b      	lsls	r3, r1, #29
 8001680:	08c0      	lsrs	r0, r0, #3
 8001682:	4318      	orrs	r0, r3
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	08c9      	lsrs	r1, r1, #3
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	4219      	tst	r1, r3
 800168c:	d007      	beq.n	800169e <__aeabi_dadd+0x482>
 800168e:	08fc      	lsrs	r4, r7, #3
 8001690:	421c      	tst	r4, r3
 8001692:	d104      	bne.n	800169e <__aeabi_dadd+0x482>
 8001694:	0779      	lsls	r1, r7, #29
 8001696:	08d0      	lsrs	r0, r2, #3
 8001698:	4308      	orrs	r0, r1
 800169a:	46e1      	mov	r9, ip
 800169c:	0021      	movs	r1, r4
 800169e:	464c      	mov	r4, r9
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	00c9      	lsls	r1, r1, #3
 80016a4:	4311      	orrs	r1, r2
 80016a6:	00c0      	lsls	r0, r0, #3
 80016a8:	4d68      	ldr	r5, [pc, #416]	; (800184c <__aeabi_dadd+0x630>)
 80016aa:	e6b9      	b.n	8001420 <__aeabi_dadd+0x204>
 80016ac:	001d      	movs	r5, r3
 80016ae:	2200      	movs	r2, #0
 80016b0:	2300      	movs	r3, #0
 80016b2:	e6c0      	b.n	8001436 <__aeabi_dadd+0x21a>
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d15b      	bne.n	8001770 <__aeabi_dadd+0x554>
 80016b8:	000d      	movs	r5, r1
 80016ba:	4305      	orrs	r5, r0
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x4a4>
 80016be:	e6e2      	b.n	8001486 <__aeabi_dadd+0x26a>
 80016c0:	1c5d      	adds	r5, r3, #1
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x4aa>
 80016c4:	e0b0      	b.n	8001828 <__aeabi_dadd+0x60c>
 80016c6:	4d61      	ldr	r5, [pc, #388]	; (800184c <__aeabi_dadd+0x630>)
 80016c8:	42ae      	cmp	r6, r5
 80016ca:	d01f      	beq.n	800170c <__aeabi_dadd+0x4f0>
 80016cc:	43db      	mvns	r3, r3
 80016ce:	2b38      	cmp	r3, #56	; 0x38
 80016d0:	dc71      	bgt.n	80017b6 <__aeabi_dadd+0x59a>
 80016d2:	2b1f      	cmp	r3, #31
 80016d4:	dd00      	ble.n	80016d8 <__aeabi_dadd+0x4bc>
 80016d6:	e096      	b.n	8001806 <__aeabi_dadd+0x5ea>
 80016d8:	2520      	movs	r5, #32
 80016da:	000f      	movs	r7, r1
 80016dc:	1aed      	subs	r5, r5, r3
 80016de:	40af      	lsls	r7, r5
 80016e0:	46b9      	mov	r9, r7
 80016e2:	0007      	movs	r7, r0
 80016e4:	46aa      	mov	sl, r5
 80016e6:	40df      	lsrs	r7, r3
 80016e8:	464d      	mov	r5, r9
 80016ea:	433d      	orrs	r5, r7
 80016ec:	002f      	movs	r7, r5
 80016ee:	4655      	mov	r5, sl
 80016f0:	40a8      	lsls	r0, r5
 80016f2:	40d9      	lsrs	r1, r3
 80016f4:	1e45      	subs	r5, r0, #1
 80016f6:	41a8      	sbcs	r0, r5
 80016f8:	4488      	add	r8, r1
 80016fa:	4307      	orrs	r7, r0
 80016fc:	18bf      	adds	r7, r7, r2
 80016fe:	4297      	cmp	r7, r2
 8001700:	4192      	sbcs	r2, r2
 8001702:	4251      	negs	r1, r2
 8001704:	4441      	add	r1, r8
 8001706:	0035      	movs	r5, r6
 8001708:	e63a      	b.n	8001380 <__aeabi_dadd+0x164>
 800170a:	4664      	mov	r4, ip
 800170c:	0035      	movs	r5, r6
 800170e:	4641      	mov	r1, r8
 8001710:	0010      	movs	r0, r2
 8001712:	e685      	b.n	8001420 <__aeabi_dadd+0x204>
 8001714:	000b      	movs	r3, r1
 8001716:	4303      	orrs	r3, r0
 8001718:	2d00      	cmp	r5, #0
 800171a:	d000      	beq.n	800171e <__aeabi_dadd+0x502>
 800171c:	e663      	b.n	80013e6 <__aeabi_dadd+0x1ca>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f5      	beq.n	800170e <__aeabi_dadd+0x4f2>
 8001722:	4643      	mov	r3, r8
 8001724:	4313      	orrs	r3, r2
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0x50e>
 8001728:	e67a      	b.n	8001420 <__aeabi_dadd+0x204>
 800172a:	1887      	adds	r7, r0, r2
 800172c:	4287      	cmp	r7, r0
 800172e:	4180      	sbcs	r0, r0
 8001730:	2207      	movs	r2, #7
 8001732:	4441      	add	r1, r8
 8001734:	4240      	negs	r0, r0
 8001736:	1809      	adds	r1, r1, r0
 8001738:	403a      	ands	r2, r7
 800173a:	020b      	lsls	r3, r1, #8
 800173c:	d400      	bmi.n	8001740 <__aeabi_dadd+0x524>
 800173e:	e6d5      	b.n	80014ec <__aeabi_dadd+0x2d0>
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <__aeabi_dadd+0x634>)
 8001742:	3501      	adds	r5, #1
 8001744:	4019      	ands	r1, r3
 8001746:	e5c9      	b.n	80012dc <__aeabi_dadd+0xc0>
 8001748:	0038      	movs	r0, r7
 800174a:	e669      	b.n	8001420 <__aeabi_dadd+0x204>
 800174c:	001e      	movs	r6, r3
 800174e:	4647      	mov	r7, r8
 8001750:	3e20      	subs	r6, #32
 8001752:	40f7      	lsrs	r7, r6
 8001754:	46bc      	mov	ip, r7
 8001756:	2b20      	cmp	r3, #32
 8001758:	d004      	beq.n	8001764 <__aeabi_dadd+0x548>
 800175a:	2640      	movs	r6, #64	; 0x40
 800175c:	1af3      	subs	r3, r6, r3
 800175e:	4646      	mov	r6, r8
 8001760:	409e      	lsls	r6, r3
 8001762:	4332      	orrs	r2, r6
 8001764:	0017      	movs	r7, r2
 8001766:	4663      	mov	r3, ip
 8001768:	1e7a      	subs	r2, r7, #1
 800176a:	4197      	sbcs	r7, r2
 800176c:	431f      	orrs	r7, r3
 800176e:	e602      	b.n	8001376 <__aeabi_dadd+0x15a>
 8001770:	4d36      	ldr	r5, [pc, #216]	; (800184c <__aeabi_dadd+0x630>)
 8001772:	42ae      	cmp	r6, r5
 8001774:	d0ca      	beq.n	800170c <__aeabi_dadd+0x4f0>
 8001776:	2580      	movs	r5, #128	; 0x80
 8001778:	042d      	lsls	r5, r5, #16
 800177a:	425b      	negs	r3, r3
 800177c:	4329      	orrs	r1, r5
 800177e:	e7a6      	b.n	80016ce <__aeabi_dadd+0x4b2>
 8001780:	4308      	orrs	r0, r1
 8001782:	1e41      	subs	r1, r0, #1
 8001784:	4188      	sbcs	r0, r1
 8001786:	e6a6      	b.n	80014d6 <__aeabi_dadd+0x2ba>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d100      	bne.n	800178e <__aeabi_dadd+0x572>
 800178c:	e648      	b.n	8001420 <__aeabi_dadd+0x204>
 800178e:	1a87      	subs	r7, r0, r2
 8001790:	4643      	mov	r3, r8
 8001792:	42b8      	cmp	r0, r7
 8001794:	41b6      	sbcs	r6, r6
 8001796:	1acb      	subs	r3, r1, r3
 8001798:	4276      	negs	r6, r6
 800179a:	1b9e      	subs	r6, r3, r6
 800179c:	0233      	lsls	r3, r6, #8
 800179e:	d54b      	bpl.n	8001838 <__aeabi_dadd+0x61c>
 80017a0:	1a17      	subs	r7, r2, r0
 80017a2:	4643      	mov	r3, r8
 80017a4:	42ba      	cmp	r2, r7
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	1a59      	subs	r1, r3, r1
 80017aa:	4252      	negs	r2, r2
 80017ac:	1a89      	subs	r1, r1, r2
 80017ae:	2207      	movs	r2, #7
 80017b0:	4664      	mov	r4, ip
 80017b2:	403a      	ands	r2, r7
 80017b4:	e592      	b.n	80012dc <__aeabi_dadd+0xc0>
 80017b6:	4301      	orrs	r1, r0
 80017b8:	000f      	movs	r7, r1
 80017ba:	1e79      	subs	r1, r7, #1
 80017bc:	418f      	sbcs	r7, r1
 80017be:	e79d      	b.n	80016fc <__aeabi_dadd+0x4e0>
 80017c0:	001c      	movs	r4, r3
 80017c2:	000f      	movs	r7, r1
 80017c4:	3c20      	subs	r4, #32
 80017c6:	40e7      	lsrs	r7, r4
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d003      	beq.n	80017d4 <__aeabi_dadd+0x5b8>
 80017cc:	2440      	movs	r4, #64	; 0x40
 80017ce:	1ae3      	subs	r3, r4, r3
 80017d0:	4099      	lsls	r1, r3
 80017d2:	4308      	orrs	r0, r1
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4338      	orrs	r0, r7
 80017da:	e67c      	b.n	80014d6 <__aeabi_dadd+0x2ba>
 80017dc:	2200      	movs	r2, #0
 80017de:	2400      	movs	r4, #0
 80017e0:	e625      	b.n	800142e <__aeabi_dadd+0x212>
 80017e2:	1a17      	subs	r7, r2, r0
 80017e4:	4643      	mov	r3, r8
 80017e6:	42ba      	cmp	r2, r7
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	1a59      	subs	r1, r3, r1
 80017ec:	4252      	negs	r2, r2
 80017ee:	1a89      	subs	r1, r1, r2
 80017f0:	4664      	mov	r4, ip
 80017f2:	0035      	movs	r5, r6
 80017f4:	e543      	b.n	800127e <__aeabi_dadd+0x62>
 80017f6:	4641      	mov	r1, r8
 80017f8:	0010      	movs	r0, r2
 80017fa:	4d14      	ldr	r5, [pc, #80]	; (800184c <__aeabi_dadd+0x630>)
 80017fc:	e610      	b.n	8001420 <__aeabi_dadd+0x204>
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	2400      	movs	r4, #0
 8001802:	0312      	lsls	r2, r2, #12
 8001804:	e680      	b.n	8001508 <__aeabi_dadd+0x2ec>
 8001806:	001d      	movs	r5, r3
 8001808:	000f      	movs	r7, r1
 800180a:	3d20      	subs	r5, #32
 800180c:	40ef      	lsrs	r7, r5
 800180e:	46bc      	mov	ip, r7
 8001810:	2b20      	cmp	r3, #32
 8001812:	d003      	beq.n	800181c <__aeabi_dadd+0x600>
 8001814:	2540      	movs	r5, #64	; 0x40
 8001816:	1aeb      	subs	r3, r5, r3
 8001818:	4099      	lsls	r1, r3
 800181a:	4308      	orrs	r0, r1
 800181c:	0007      	movs	r7, r0
 800181e:	4663      	mov	r3, ip
 8001820:	1e78      	subs	r0, r7, #1
 8001822:	4187      	sbcs	r7, r0
 8001824:	431f      	orrs	r7, r3
 8001826:	e769      	b.n	80016fc <__aeabi_dadd+0x4e0>
 8001828:	1887      	adds	r7, r0, r2
 800182a:	4297      	cmp	r7, r2
 800182c:	419b      	sbcs	r3, r3
 800182e:	4441      	add	r1, r8
 8001830:	425b      	negs	r3, r3
 8001832:	18c9      	adds	r1, r1, r3
 8001834:	0035      	movs	r5, r6
 8001836:	e5a3      	b.n	8001380 <__aeabi_dadd+0x164>
 8001838:	003b      	movs	r3, r7
 800183a:	4333      	orrs	r3, r6
 800183c:	d0ce      	beq.n	80017dc <__aeabi_dadd+0x5c0>
 800183e:	2207      	movs	r2, #7
 8001840:	0031      	movs	r1, r6
 8001842:	403a      	ands	r2, r7
 8001844:	e652      	b.n	80014ec <__aeabi_dadd+0x2d0>
 8001846:	2300      	movs	r3, #0
 8001848:	001a      	movs	r2, r3
 800184a:	e5f4      	b.n	8001436 <__aeabi_dadd+0x21a>
 800184c:	000007ff 	.word	0x000007ff
 8001850:	ff7fffff 	.word	0xff7fffff

08001854 <__aeabi_ddiv>:
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	4657      	mov	r7, sl
 8001858:	46de      	mov	lr, fp
 800185a:	464e      	mov	r6, r9
 800185c:	4645      	mov	r5, r8
 800185e:	b5e0      	push	{r5, r6, r7, lr}
 8001860:	4683      	mov	fp, r0
 8001862:	0007      	movs	r7, r0
 8001864:	030e      	lsls	r6, r1, #12
 8001866:	0048      	lsls	r0, r1, #1
 8001868:	b085      	sub	sp, #20
 800186a:	4692      	mov	sl, r2
 800186c:	001c      	movs	r4, r3
 800186e:	0b36      	lsrs	r6, r6, #12
 8001870:	0d40      	lsrs	r0, r0, #21
 8001872:	0fcd      	lsrs	r5, r1, #31
 8001874:	2800      	cmp	r0, #0
 8001876:	d100      	bne.n	800187a <__aeabi_ddiv+0x26>
 8001878:	e09d      	b.n	80019b6 <__aeabi_ddiv+0x162>
 800187a:	4b95      	ldr	r3, [pc, #596]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 800187c:	4298      	cmp	r0, r3
 800187e:	d039      	beq.n	80018f4 <__aeabi_ddiv+0xa0>
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	00f6      	lsls	r6, r6, #3
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	431e      	orrs	r6, r3
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <__aeabi_ddiv+0x280>)
 800188a:	0f7b      	lsrs	r3, r7, #29
 800188c:	4333      	orrs	r3, r6
 800188e:	4699      	mov	r9, r3
 8001890:	4694      	mov	ip, r2
 8001892:	0003      	movs	r3, r0
 8001894:	4463      	add	r3, ip
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	2600      	movs	r6, #0
 800189c:	00ff      	lsls	r7, r7, #3
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	0323      	lsls	r3, r4, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4698      	mov	r8, r3
 80018a6:	0063      	lsls	r3, r4, #1
 80018a8:	0fe4      	lsrs	r4, r4, #31
 80018aa:	4652      	mov	r2, sl
 80018ac:	0d5b      	lsrs	r3, r3, #21
 80018ae:	9401      	str	r4, [sp, #4]
 80018b0:	d100      	bne.n	80018b4 <__aeabi_ddiv+0x60>
 80018b2:	e0b3      	b.n	8001a1c <__aeabi_ddiv+0x1c8>
 80018b4:	4986      	ldr	r1, [pc, #536]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 80018b6:	428b      	cmp	r3, r1
 80018b8:	d100      	bne.n	80018bc <__aeabi_ddiv+0x68>
 80018ba:	e09e      	b.n	80019fa <__aeabi_ddiv+0x1a6>
 80018bc:	4642      	mov	r2, r8
 80018be:	00d1      	lsls	r1, r2, #3
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	0412      	lsls	r2, r2, #16
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4651      	mov	r1, sl
 80018c8:	0f49      	lsrs	r1, r1, #29
 80018ca:	4311      	orrs	r1, r2
 80018cc:	468b      	mov	fp, r1
 80018ce:	4981      	ldr	r1, [pc, #516]	; (8001ad4 <__aeabi_ddiv+0x280>)
 80018d0:	4652      	mov	r2, sl
 80018d2:	468c      	mov	ip, r1
 80018d4:	9900      	ldr	r1, [sp, #0]
 80018d6:	4463      	add	r3, ip
 80018d8:	1acb      	subs	r3, r1, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	002b      	movs	r3, r5
 80018e2:	4063      	eors	r3, r4
 80018e4:	469a      	mov	sl, r3
 80018e6:	2e0f      	cmp	r6, #15
 80018e8:	d900      	bls.n	80018ec <__aeabi_ddiv+0x98>
 80018ea:	e105      	b.n	8001af8 <__aeabi_ddiv+0x2a4>
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <__aeabi_ddiv+0x284>)
 80018ee:	00b6      	lsls	r6, r6, #2
 80018f0:	599b      	ldr	r3, [r3, r6]
 80018f2:	469f      	mov	pc, r3
 80018f4:	465b      	mov	r3, fp
 80018f6:	4333      	orrs	r3, r6
 80018f8:	4699      	mov	r9, r3
 80018fa:	d000      	beq.n	80018fe <__aeabi_ddiv+0xaa>
 80018fc:	e0b8      	b.n	8001a70 <__aeabi_ddiv+0x21c>
 80018fe:	2302      	movs	r3, #2
 8001900:	2608      	movs	r6, #8
 8001902:	2700      	movs	r7, #0
 8001904:	9000      	str	r0, [sp, #0]
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	e7ca      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 800190a:	46cb      	mov	fp, r9
 800190c:	003a      	movs	r2, r7
 800190e:	9902      	ldr	r1, [sp, #8]
 8001910:	9501      	str	r5, [sp, #4]
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	469a      	mov	sl, r3
 8001916:	2902      	cmp	r1, #2
 8001918:	d027      	beq.n	800196a <__aeabi_ddiv+0x116>
 800191a:	2903      	cmp	r1, #3
 800191c:	d100      	bne.n	8001920 <__aeabi_ddiv+0xcc>
 800191e:	e280      	b.n	8001e22 <__aeabi_ddiv+0x5ce>
 8001920:	2901      	cmp	r1, #1
 8001922:	d044      	beq.n	80019ae <__aeabi_ddiv+0x15a>
 8001924:	496d      	ldr	r1, [pc, #436]	; (8001adc <__aeabi_ddiv+0x288>)
 8001926:	9b00      	ldr	r3, [sp, #0]
 8001928:	468c      	mov	ip, r1
 800192a:	4463      	add	r3, ip
 800192c:	001c      	movs	r4, r3
 800192e:	2c00      	cmp	r4, #0
 8001930:	dd38      	ble.n	80019a4 <__aeabi_ddiv+0x150>
 8001932:	0753      	lsls	r3, r2, #29
 8001934:	d000      	beq.n	8001938 <__aeabi_ddiv+0xe4>
 8001936:	e213      	b.n	8001d60 <__aeabi_ddiv+0x50c>
 8001938:	08d2      	lsrs	r2, r2, #3
 800193a:	465b      	mov	r3, fp
 800193c:	01db      	lsls	r3, r3, #7
 800193e:	d509      	bpl.n	8001954 <__aeabi_ddiv+0x100>
 8001940:	4659      	mov	r1, fp
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <__aeabi_ddiv+0x28c>)
 8001944:	4019      	ands	r1, r3
 8001946:	468b      	mov	fp, r1
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	00c9      	lsls	r1, r1, #3
 800194c:	468c      	mov	ip, r1
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	4463      	add	r3, ip
 8001952:	001c      	movs	r4, r3
 8001954:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <__aeabi_ddiv+0x290>)
 8001956:	429c      	cmp	r4, r3
 8001958:	dc07      	bgt.n	800196a <__aeabi_ddiv+0x116>
 800195a:	465b      	mov	r3, fp
 800195c:	0564      	lsls	r4, r4, #21
 800195e:	075f      	lsls	r7, r3, #29
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4317      	orrs	r7, r2
 8001964:	0b1b      	lsrs	r3, r3, #12
 8001966:	0d62      	lsrs	r2, r4, #21
 8001968:	e002      	b.n	8001970 <__aeabi_ddiv+0x11c>
 800196a:	2300      	movs	r3, #0
 800196c:	2700      	movs	r7, #0
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001970:	2100      	movs	r1, #0
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	0b1c      	lsrs	r4, r3, #12
 8001976:	0d0b      	lsrs	r3, r1, #20
 8001978:	051b      	lsls	r3, r3, #20
 800197a:	4323      	orrs	r3, r4
 800197c:	0514      	lsls	r4, r2, #20
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <__aeabi_ddiv+0x294>)
 8001980:	0038      	movs	r0, r7
 8001982:	4013      	ands	r3, r2
 8001984:	431c      	orrs	r4, r3
 8001986:	4653      	mov	r3, sl
 8001988:	0064      	lsls	r4, r4, #1
 800198a:	07db      	lsls	r3, r3, #31
 800198c:	0864      	lsrs	r4, r4, #1
 800198e:	431c      	orrs	r4, r3
 8001990:	0021      	movs	r1, r4
 8001992:	b005      	add	sp, #20
 8001994:	bc3c      	pop	{r2, r3, r4, r5}
 8001996:	4690      	mov	r8, r2
 8001998:	4699      	mov	r9, r3
 800199a:	46a2      	mov	sl, r4
 800199c:	46ab      	mov	fp, r5
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	2201      	movs	r2, #1
 80019a2:	4252      	negs	r2, r2
 80019a4:	2301      	movs	r3, #1
 80019a6:	1b1b      	subs	r3, r3, r4
 80019a8:	2b38      	cmp	r3, #56	; 0x38
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_ddiv+0x15a>
 80019ac:	e1ad      	b.n	8001d0a <__aeabi_ddiv+0x4b6>
 80019ae:	2200      	movs	r2, #0
 80019b0:	2300      	movs	r3, #0
 80019b2:	2700      	movs	r7, #0
 80019b4:	e7dc      	b.n	8001970 <__aeabi_ddiv+0x11c>
 80019b6:	465b      	mov	r3, fp
 80019b8:	4333      	orrs	r3, r6
 80019ba:	4699      	mov	r9, r3
 80019bc:	d05e      	beq.n	8001a7c <__aeabi_ddiv+0x228>
 80019be:	2e00      	cmp	r6, #0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x170>
 80019c2:	e18a      	b.n	8001cda <__aeabi_ddiv+0x486>
 80019c4:	0030      	movs	r0, r6
 80019c6:	f001 fa9d 	bl	8002f04 <__clzsi2>
 80019ca:	0003      	movs	r3, r0
 80019cc:	3b0b      	subs	r3, #11
 80019ce:	2b1c      	cmp	r3, #28
 80019d0:	dd00      	ble.n	80019d4 <__aeabi_ddiv+0x180>
 80019d2:	e17b      	b.n	8001ccc <__aeabi_ddiv+0x478>
 80019d4:	221d      	movs	r2, #29
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	465a      	mov	r2, fp
 80019da:	0001      	movs	r1, r0
 80019dc:	40da      	lsrs	r2, r3
 80019de:	3908      	subs	r1, #8
 80019e0:	408e      	lsls	r6, r1
 80019e2:	0013      	movs	r3, r2
 80019e4:	465f      	mov	r7, fp
 80019e6:	4333      	orrs	r3, r6
 80019e8:	4699      	mov	r9, r3
 80019ea:	408f      	lsls	r7, r1
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <__aeabi_ddiv+0x298>)
 80019ee:	2600      	movs	r6, #0
 80019f0:	1a1b      	subs	r3, r3, r0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	e752      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 80019fa:	4641      	mov	r1, r8
 80019fc:	4653      	mov	r3, sl
 80019fe:	430b      	orrs	r3, r1
 8001a00:	493b      	ldr	r1, [pc, #236]	; (8001af0 <__aeabi_ddiv+0x29c>)
 8001a02:	469b      	mov	fp, r3
 8001a04:	468c      	mov	ip, r1
 8001a06:	9b00      	ldr	r3, [sp, #0]
 8001a08:	4463      	add	r3, ip
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	465b      	mov	r3, fp
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13b      	bne.n	8001a8a <__aeabi_ddiv+0x236>
 8001a12:	2302      	movs	r3, #2
 8001a14:	2200      	movs	r2, #0
 8001a16:	431e      	orrs	r6, r3
 8001a18:	2102      	movs	r1, #2
 8001a1a:	e761      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	469b      	mov	fp, r3
 8001a22:	d037      	beq.n	8001a94 <__aeabi_ddiv+0x240>
 8001a24:	4643      	mov	r3, r8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_ddiv+0x1d8>
 8001a2a:	e162      	b.n	8001cf2 <__aeabi_ddiv+0x49e>
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	f001 fa69 	bl	8002f04 <__clzsi2>
 8001a32:	0003      	movs	r3, r0
 8001a34:	3b0b      	subs	r3, #11
 8001a36:	2b1c      	cmp	r3, #28
 8001a38:	dd00      	ble.n	8001a3c <__aeabi_ddiv+0x1e8>
 8001a3a:	e153      	b.n	8001ce4 <__aeabi_ddiv+0x490>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	4641      	mov	r1, r8
 8001a40:	3a08      	subs	r2, #8
 8001a42:	4091      	lsls	r1, r2
 8001a44:	4688      	mov	r8, r1
 8001a46:	211d      	movs	r1, #29
 8001a48:	1acb      	subs	r3, r1, r3
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	000b      	movs	r3, r1
 8001a50:	4641      	mov	r1, r8
 8001a52:	430b      	orrs	r3, r1
 8001a54:	469b      	mov	fp, r3
 8001a56:	4653      	mov	r3, sl
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	4925      	ldr	r1, [pc, #148]	; (8001af4 <__aeabi_ddiv+0x2a0>)
 8001a60:	469c      	mov	ip, r3
 8001a62:	4460      	add	r0, ip
 8001a64:	0003      	movs	r3, r0
 8001a66:	468c      	mov	ip, r1
 8001a68:	4463      	add	r3, ip
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	e737      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a70:	2303      	movs	r3, #3
 8001a72:	46b1      	mov	r9, r6
 8001a74:	9000      	str	r0, [sp, #0]
 8001a76:	260c      	movs	r6, #12
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	e711      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	2604      	movs	r6, #4
 8001a84:	2700      	movs	r7, #0
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	e70a      	b.n	80018a0 <__aeabi_ddiv+0x4c>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	46c3      	mov	fp, r8
 8001a8e:	431e      	orrs	r6, r3
 8001a90:	2103      	movs	r1, #3
 8001a92:	e725      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a94:	3301      	adds	r3, #1
 8001a96:	431e      	orrs	r6, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	e720      	b.n	80018e0 <__aeabi_ddiv+0x8c>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	469a      	mov	sl, r3
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	2700      	movs	r7, #0
 8001aa6:	031b      	lsls	r3, r3, #12
 8001aa8:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001aaa:	e761      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	4649      	mov	r1, r9
 8001ab0:	031b      	lsls	r3, r3, #12
 8001ab2:	4219      	tst	r1, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x264>
 8001ab6:	e0e2      	b.n	8001c7e <__aeabi_ddiv+0x42a>
 8001ab8:	4659      	mov	r1, fp
 8001aba:	4219      	tst	r1, r3
 8001abc:	d000      	beq.n	8001ac0 <__aeabi_ddiv+0x26c>
 8001abe:	e0de      	b.n	8001c7e <__aeabi_ddiv+0x42a>
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	031b      	lsls	r3, r3, #12
 8001ac4:	0017      	movs	r7, r2
 8001ac6:	0b1b      	lsrs	r3, r3, #12
 8001ac8:	46a2      	mov	sl, r4
 8001aca:	4a01      	ldr	r2, [pc, #4]	; (8001ad0 <__aeabi_ddiv+0x27c>)
 8001acc:	e750      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	fffffc01 	.word	0xfffffc01
 8001ad8:	0800a648 	.word	0x0800a648
 8001adc:	000003ff 	.word	0x000003ff
 8001ae0:	feffffff 	.word	0xfeffffff
 8001ae4:	000007fe 	.word	0x000007fe
 8001ae8:	800fffff 	.word	0x800fffff
 8001aec:	fffffc0d 	.word	0xfffffc0d
 8001af0:	fffff801 	.word	0xfffff801
 8001af4:	000003f3 	.word	0x000003f3
 8001af8:	45d9      	cmp	r9, fp
 8001afa:	d900      	bls.n	8001afe <__aeabi_ddiv+0x2aa>
 8001afc:	e0cb      	b.n	8001c96 <__aeabi_ddiv+0x442>
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x2ae>
 8001b00:	e0c6      	b.n	8001c90 <__aeabi_ddiv+0x43c>
 8001b02:	003c      	movs	r4, r7
 8001b04:	4648      	mov	r0, r9
 8001b06:	2700      	movs	r7, #0
 8001b08:	9b00      	ldr	r3, [sp, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	465b      	mov	r3, fp
 8001b10:	0e16      	lsrs	r6, r2, #24
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	431e      	orrs	r6, r3
 8001b16:	0213      	lsls	r3, r2, #8
 8001b18:	4698      	mov	r8, r3
 8001b1a:	0433      	lsls	r3, r6, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	4699      	mov	r9, r3
 8001b20:	0c31      	lsrs	r1, r6, #16
 8001b22:	9101      	str	r1, [sp, #4]
 8001b24:	f7fe fb88 	bl	8000238 <__aeabi_uidivmod>
 8001b28:	464a      	mov	r2, r9
 8001b2a:	4342      	muls	r2, r0
 8001b2c:	040b      	lsls	r3, r1, #16
 8001b2e:	0c21      	lsrs	r1, r4, #16
 8001b30:	0005      	movs	r5, r0
 8001b32:	4319      	orrs	r1, r3
 8001b34:	428a      	cmp	r2, r1
 8001b36:	d907      	bls.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b38:	1989      	adds	r1, r1, r6
 8001b3a:	3d01      	subs	r5, #1
 8001b3c:	428e      	cmp	r6, r1
 8001b3e:	d803      	bhi.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d901      	bls.n	8001b48 <__aeabi_ddiv+0x2f4>
 8001b44:	1e85      	subs	r5, r0, #2
 8001b46:	1989      	adds	r1, r1, r6
 8001b48:	1a88      	subs	r0, r1, r2
 8001b4a:	9901      	ldr	r1, [sp, #4]
 8001b4c:	f7fe fb74 	bl	8000238 <__aeabi_uidivmod>
 8001b50:	0409      	lsls	r1, r1, #16
 8001b52:	468c      	mov	ip, r1
 8001b54:	464a      	mov	r2, r9
 8001b56:	0421      	lsls	r1, r4, #16
 8001b58:	4664      	mov	r4, ip
 8001b5a:	4342      	muls	r2, r0
 8001b5c:	0c09      	lsrs	r1, r1, #16
 8001b5e:	0003      	movs	r3, r0
 8001b60:	4321      	orrs	r1, r4
 8001b62:	428a      	cmp	r2, r1
 8001b64:	d904      	bls.n	8001b70 <__aeabi_ddiv+0x31c>
 8001b66:	1989      	adds	r1, r1, r6
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	428e      	cmp	r6, r1
 8001b6c:	d800      	bhi.n	8001b70 <__aeabi_ddiv+0x31c>
 8001b6e:	e0f1      	b.n	8001d54 <__aeabi_ddiv+0x500>
 8001b70:	042d      	lsls	r5, r5, #16
 8001b72:	431d      	orrs	r5, r3
 8001b74:	46ab      	mov	fp, r5
 8001b76:	4643      	mov	r3, r8
 8001b78:	1a89      	subs	r1, r1, r2
 8001b7a:	4642      	mov	r2, r8
 8001b7c:	0c28      	lsrs	r0, r5, #16
 8001b7e:	0412      	lsls	r2, r2, #16
 8001b80:	0c1d      	lsrs	r5, r3, #16
 8001b82:	465b      	mov	r3, fp
 8001b84:	0c14      	lsrs	r4, r2, #16
 8001b86:	0022      	movs	r2, r4
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	435a      	muls	r2, r3
 8001b8e:	9403      	str	r4, [sp, #12]
 8001b90:	436b      	muls	r3, r5
 8001b92:	4344      	muls	r4, r0
 8001b94:	9502      	str	r5, [sp, #8]
 8001b96:	4368      	muls	r0, r5
 8001b98:	191b      	adds	r3, r3, r4
 8001b9a:	0c15      	lsrs	r5, r2, #16
 8001b9c:	18eb      	adds	r3, r5, r3
 8001b9e:	429c      	cmp	r4, r3
 8001ba0:	d903      	bls.n	8001baa <__aeabi_ddiv+0x356>
 8001ba2:	2480      	movs	r4, #128	; 0x80
 8001ba4:	0264      	lsls	r4, r4, #9
 8001ba6:	46a4      	mov	ip, r4
 8001ba8:	4460      	add	r0, ip
 8001baa:	0c1c      	lsrs	r4, r3, #16
 8001bac:	0415      	lsls	r5, r2, #16
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	0c2d      	lsrs	r5, r5, #16
 8001bb2:	1820      	adds	r0, r4, r0
 8001bb4:	195d      	adds	r5, r3, r5
 8001bb6:	4281      	cmp	r1, r0
 8001bb8:	d377      	bcc.n	8001caa <__aeabi_ddiv+0x456>
 8001bba:	d073      	beq.n	8001ca4 <__aeabi_ddiv+0x450>
 8001bbc:	1a0c      	subs	r4, r1, r0
 8001bbe:	4aa2      	ldr	r2, [pc, #648]	; (8001e48 <__aeabi_ddiv+0x5f4>)
 8001bc0:	1b7d      	subs	r5, r7, r5
 8001bc2:	42af      	cmp	r7, r5
 8001bc4:	41bf      	sbcs	r7, r7
 8001bc6:	4694      	mov	ip, r2
 8001bc8:	9b00      	ldr	r3, [sp, #0]
 8001bca:	427f      	negs	r7, r7
 8001bcc:	4463      	add	r3, ip
 8001bce:	1be0      	subs	r0, r4, r7
 8001bd0:	001c      	movs	r4, r3
 8001bd2:	4286      	cmp	r6, r0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_ddiv+0x384>
 8001bd6:	e0db      	b.n	8001d90 <__aeabi_ddiv+0x53c>
 8001bd8:	9901      	ldr	r1, [sp, #4]
 8001bda:	f7fe fb2d 	bl	8000238 <__aeabi_uidivmod>
 8001bde:	464a      	mov	r2, r9
 8001be0:	4342      	muls	r2, r0
 8001be2:	040b      	lsls	r3, r1, #16
 8001be4:	0c29      	lsrs	r1, r5, #16
 8001be6:	0007      	movs	r7, r0
 8001be8:	4319      	orrs	r1, r3
 8001bea:	428a      	cmp	r2, r1
 8001bec:	d907      	bls.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bee:	1989      	adds	r1, r1, r6
 8001bf0:	3f01      	subs	r7, #1
 8001bf2:	428e      	cmp	r6, r1
 8001bf4:	d803      	bhi.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bf6:	428a      	cmp	r2, r1
 8001bf8:	d901      	bls.n	8001bfe <__aeabi_ddiv+0x3aa>
 8001bfa:	1e87      	subs	r7, r0, #2
 8001bfc:	1989      	adds	r1, r1, r6
 8001bfe:	1a88      	subs	r0, r1, r2
 8001c00:	9901      	ldr	r1, [sp, #4]
 8001c02:	f7fe fb19 	bl	8000238 <__aeabi_uidivmod>
 8001c06:	0409      	lsls	r1, r1, #16
 8001c08:	464a      	mov	r2, r9
 8001c0a:	4689      	mov	r9, r1
 8001c0c:	0429      	lsls	r1, r5, #16
 8001c0e:	464d      	mov	r5, r9
 8001c10:	4342      	muls	r2, r0
 8001c12:	0c09      	lsrs	r1, r1, #16
 8001c14:	0003      	movs	r3, r0
 8001c16:	4329      	orrs	r1, r5
 8001c18:	428a      	cmp	r2, r1
 8001c1a:	d907      	bls.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c1c:	1989      	adds	r1, r1, r6
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	428e      	cmp	r6, r1
 8001c22:	d803      	bhi.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d901      	bls.n	8001c2c <__aeabi_ddiv+0x3d8>
 8001c28:	1e83      	subs	r3, r0, #2
 8001c2a:	1989      	adds	r1, r1, r6
 8001c2c:	043f      	lsls	r7, r7, #16
 8001c2e:	1a89      	subs	r1, r1, r2
 8001c30:	003a      	movs	r2, r7
 8001c32:	9f03      	ldr	r7, [sp, #12]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	0038      	movs	r0, r7
 8001c38:	0413      	lsls	r3, r2, #16
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	4358      	muls	r0, r3
 8001c3e:	4681      	mov	r9, r0
 8001c40:	9802      	ldr	r0, [sp, #8]
 8001c42:	0c15      	lsrs	r5, r2, #16
 8001c44:	436f      	muls	r7, r5
 8001c46:	4343      	muls	r3, r0
 8001c48:	4345      	muls	r5, r0
 8001c4a:	4648      	mov	r0, r9
 8001c4c:	0c00      	lsrs	r0, r0, #16
 8001c4e:	4684      	mov	ip, r0
 8001c50:	19db      	adds	r3, r3, r7
 8001c52:	4463      	add	r3, ip
 8001c54:	429f      	cmp	r7, r3
 8001c56:	d903      	bls.n	8001c60 <__aeabi_ddiv+0x40c>
 8001c58:	2080      	movs	r0, #128	; 0x80
 8001c5a:	0240      	lsls	r0, r0, #9
 8001c5c:	4684      	mov	ip, r0
 8001c5e:	4465      	add	r5, ip
 8001c60:	4648      	mov	r0, r9
 8001c62:	0c1f      	lsrs	r7, r3, #16
 8001c64:	0400      	lsls	r0, r0, #16
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	0c00      	lsrs	r0, r0, #16
 8001c6a:	197d      	adds	r5, r7, r5
 8001c6c:	1818      	adds	r0, r3, r0
 8001c6e:	42a9      	cmp	r1, r5
 8001c70:	d200      	bcs.n	8001c74 <__aeabi_ddiv+0x420>
 8001c72:	e084      	b.n	8001d7e <__aeabi_ddiv+0x52a>
 8001c74:	d100      	bne.n	8001c78 <__aeabi_ddiv+0x424>
 8001c76:	e07f      	b.n	8001d78 <__aeabi_ddiv+0x524>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	e657      	b.n	800192e <__aeabi_ddiv+0xda>
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	464a      	mov	r2, r9
 8001c82:	031b      	lsls	r3, r3, #12
 8001c84:	4313      	orrs	r3, r2
 8001c86:	031b      	lsls	r3, r3, #12
 8001c88:	0b1b      	lsrs	r3, r3, #12
 8001c8a:	46aa      	mov	sl, r5
 8001c8c:	4a6f      	ldr	r2, [pc, #444]	; (8001e4c <__aeabi_ddiv+0x5f8>)
 8001c8e:	e66f      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001c90:	42ba      	cmp	r2, r7
 8001c92:	d900      	bls.n	8001c96 <__aeabi_ddiv+0x442>
 8001c94:	e735      	b.n	8001b02 <__aeabi_ddiv+0x2ae>
 8001c96:	464b      	mov	r3, r9
 8001c98:	07dc      	lsls	r4, r3, #31
 8001c9a:	0858      	lsrs	r0, r3, #1
 8001c9c:	087b      	lsrs	r3, r7, #1
 8001c9e:	431c      	orrs	r4, r3
 8001ca0:	07ff      	lsls	r7, r7, #31
 8001ca2:	e734      	b.n	8001b0e <__aeabi_ddiv+0x2ba>
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	42af      	cmp	r7, r5
 8001ca8:	d289      	bcs.n	8001bbe <__aeabi_ddiv+0x36a>
 8001caa:	4447      	add	r7, r8
 8001cac:	4547      	cmp	r7, r8
 8001cae:	41a4      	sbcs	r4, r4
 8001cb0:	465b      	mov	r3, fp
 8001cb2:	4264      	negs	r4, r4
 8001cb4:	19a4      	adds	r4, r4, r6
 8001cb6:	1864      	adds	r4, r4, r1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	42a6      	cmp	r6, r4
 8001cbc:	d21e      	bcs.n	8001cfc <__aeabi_ddiv+0x4a8>
 8001cbe:	42a0      	cmp	r0, r4
 8001cc0:	d86d      	bhi.n	8001d9e <__aeabi_ddiv+0x54a>
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_ddiv+0x472>
 8001cc4:	e0b6      	b.n	8001e34 <__aeabi_ddiv+0x5e0>
 8001cc6:	1a24      	subs	r4, r4, r0
 8001cc8:	469b      	mov	fp, r3
 8001cca:	e778      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	465a      	mov	r2, fp
 8001cd0:	3b28      	subs	r3, #40	; 0x28
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	2700      	movs	r7, #0
 8001cd6:	4691      	mov	r9, r2
 8001cd8:	e688      	b.n	80019ec <__aeabi_ddiv+0x198>
 8001cda:	4658      	mov	r0, fp
 8001cdc:	f001 f912 	bl	8002f04 <__clzsi2>
 8001ce0:	3020      	adds	r0, #32
 8001ce2:	e672      	b.n	80019ca <__aeabi_ddiv+0x176>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3b28      	subs	r3, #40	; 0x28
 8001cea:	409a      	lsls	r2, r3
 8001cec:	4693      	mov	fp, r2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	e6b4      	b.n	8001a5c <__aeabi_ddiv+0x208>
 8001cf2:	4650      	mov	r0, sl
 8001cf4:	f001 f906 	bl	8002f04 <__clzsi2>
 8001cf8:	3020      	adds	r0, #32
 8001cfa:	e69a      	b.n	8001a32 <__aeabi_ddiv+0x1de>
 8001cfc:	42a6      	cmp	r6, r4
 8001cfe:	d1e2      	bne.n	8001cc6 <__aeabi_ddiv+0x472>
 8001d00:	45b8      	cmp	r8, r7
 8001d02:	d9dc      	bls.n	8001cbe <__aeabi_ddiv+0x46a>
 8001d04:	1a34      	subs	r4, r6, r0
 8001d06:	469b      	mov	fp, r3
 8001d08:	e759      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001d0a:	2b1f      	cmp	r3, #31
 8001d0c:	dc65      	bgt.n	8001dda <__aeabi_ddiv+0x586>
 8001d0e:	4c50      	ldr	r4, [pc, #320]	; (8001e50 <__aeabi_ddiv+0x5fc>)
 8001d10:	9900      	ldr	r1, [sp, #0]
 8001d12:	46a4      	mov	ip, r4
 8001d14:	465c      	mov	r4, fp
 8001d16:	4461      	add	r1, ip
 8001d18:	0008      	movs	r0, r1
 8001d1a:	408c      	lsls	r4, r1
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	4082      	lsls	r2, r0
 8001d20:	40d9      	lsrs	r1, r3
 8001d22:	1e50      	subs	r0, r2, #1
 8001d24:	4182      	sbcs	r2, r0
 8001d26:	430c      	orrs	r4, r1
 8001d28:	4314      	orrs	r4, r2
 8001d2a:	465a      	mov	r2, fp
 8001d2c:	40da      	lsrs	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	0762      	lsls	r2, r4, #29
 8001d32:	d009      	beq.n	8001d48 <__aeabi_ddiv+0x4f4>
 8001d34:	220f      	movs	r2, #15
 8001d36:	4022      	ands	r2, r4
 8001d38:	2a04      	cmp	r2, #4
 8001d3a:	d005      	beq.n	8001d48 <__aeabi_ddiv+0x4f4>
 8001d3c:	0022      	movs	r2, r4
 8001d3e:	1d14      	adds	r4, r2, #4
 8001d40:	4294      	cmp	r4, r2
 8001d42:	4189      	sbcs	r1, r1
 8001d44:	4249      	negs	r1, r1
 8001d46:	185b      	adds	r3, r3, r1
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	d562      	bpl.n	8001e12 <__aeabi_ddiv+0x5be>
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2700      	movs	r7, #0
 8001d52:	e60d      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001d54:	428a      	cmp	r2, r1
 8001d56:	d800      	bhi.n	8001d5a <__aeabi_ddiv+0x506>
 8001d58:	e70a      	b.n	8001b70 <__aeabi_ddiv+0x31c>
 8001d5a:	1e83      	subs	r3, r0, #2
 8001d5c:	1989      	adds	r1, r1, r6
 8001d5e:	e707      	b.n	8001b70 <__aeabi_ddiv+0x31c>
 8001d60:	230f      	movs	r3, #15
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d100      	bne.n	8001d6a <__aeabi_ddiv+0x516>
 8001d68:	e5e6      	b.n	8001938 <__aeabi_ddiv+0xe4>
 8001d6a:	1d17      	adds	r7, r2, #4
 8001d6c:	4297      	cmp	r7, r2
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4253      	negs	r3, r2
 8001d72:	449b      	add	fp, r3
 8001d74:	08fa      	lsrs	r2, r7, #3
 8001d76:	e5e0      	b.n	800193a <__aeabi_ddiv+0xe6>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_ddiv+0x52a>
 8001d7c:	e5d7      	b.n	800192e <__aeabi_ddiv+0xda>
 8001d7e:	1871      	adds	r1, r6, r1
 8001d80:	1e53      	subs	r3, r2, #1
 8001d82:	42b1      	cmp	r1, r6
 8001d84:	d327      	bcc.n	8001dd6 <__aeabi_ddiv+0x582>
 8001d86:	42a9      	cmp	r1, r5
 8001d88:	d315      	bcc.n	8001db6 <__aeabi_ddiv+0x562>
 8001d8a:	d058      	beq.n	8001e3e <__aeabi_ddiv+0x5ea>
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	e773      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dc00      	bgt.n	8001d96 <__aeabi_ddiv+0x542>
 8001d94:	e604      	b.n	80019a0 <__aeabi_ddiv+0x14c>
 8001d96:	2301      	movs	r3, #1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	449b      	add	fp, r3
 8001d9c:	e5cd      	b.n	800193a <__aeabi_ddiv+0xe6>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	4447      	add	r7, r8
 8001da2:	4547      	cmp	r7, r8
 8001da4:	4189      	sbcs	r1, r1
 8001da6:	425b      	negs	r3, r3
 8001da8:	469c      	mov	ip, r3
 8001daa:	4249      	negs	r1, r1
 8001dac:	1989      	adds	r1, r1, r6
 8001dae:	190c      	adds	r4, r1, r4
 8001db0:	44e3      	add	fp, ip
 8001db2:	1a24      	subs	r4, r4, r0
 8001db4:	e703      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001db6:	4643      	mov	r3, r8
 8001db8:	005f      	lsls	r7, r3, #1
 8001dba:	4547      	cmp	r7, r8
 8001dbc:	419b      	sbcs	r3, r3
 8001dbe:	46b8      	mov	r8, r7
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	199e      	adds	r6, r3, r6
 8001dc4:	3a02      	subs	r2, #2
 8001dc6:	1989      	adds	r1, r1, r6
 8001dc8:	42a9      	cmp	r1, r5
 8001dca:	d000      	beq.n	8001dce <__aeabi_ddiv+0x57a>
 8001dcc:	e754      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001dce:	4540      	cmp	r0, r8
 8001dd0:	d000      	beq.n	8001dd4 <__aeabi_ddiv+0x580>
 8001dd2:	e751      	b.n	8001c78 <__aeabi_ddiv+0x424>
 8001dd4:	e5ab      	b.n	800192e <__aeabi_ddiv+0xda>
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	e7f6      	b.n	8001dc8 <__aeabi_ddiv+0x574>
 8001dda:	211f      	movs	r1, #31
 8001ddc:	465f      	mov	r7, fp
 8001dde:	4249      	negs	r1, r1
 8001de0:	1b0c      	subs	r4, r1, r4
 8001de2:	40e7      	lsrs	r7, r4
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d007      	beq.n	8001df8 <__aeabi_ddiv+0x5a4>
 8001de8:	491a      	ldr	r1, [pc, #104]	; (8001e54 <__aeabi_ddiv+0x600>)
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	468c      	mov	ip, r1
 8001dee:	4463      	add	r3, ip
 8001df0:	0018      	movs	r0, r3
 8001df2:	465b      	mov	r3, fp
 8001df4:	4083      	lsls	r3, r0
 8001df6:	431a      	orrs	r2, r3
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	4182      	sbcs	r2, r0
 8001dfc:	433a      	orrs	r2, r7
 8001dfe:	2707      	movs	r7, #7
 8001e00:	2300      	movs	r3, #0
 8001e02:	4017      	ands	r7, r2
 8001e04:	d009      	beq.n	8001e1a <__aeabi_ddiv+0x5c6>
 8001e06:	210f      	movs	r1, #15
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4011      	ands	r1, r2
 8001e0c:	0014      	movs	r4, r2
 8001e0e:	2904      	cmp	r1, #4
 8001e10:	d195      	bne.n	8001d3e <__aeabi_ddiv+0x4ea>
 8001e12:	0022      	movs	r2, r4
 8001e14:	075f      	lsls	r7, r3, #29
 8001e16:	025b      	lsls	r3, r3, #9
 8001e18:	0b1b      	lsrs	r3, r3, #12
 8001e1a:	08d2      	lsrs	r2, r2, #3
 8001e1c:	4317      	orrs	r7, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	e5a6      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	4659      	mov	r1, fp
 8001e26:	031b      	lsls	r3, r3, #12
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	0017      	movs	r7, r2
 8001e2e:	0b1b      	lsrs	r3, r3, #12
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <__aeabi_ddiv+0x5f8>)
 8001e32:	e59d      	b.n	8001970 <__aeabi_ddiv+0x11c>
 8001e34:	42bd      	cmp	r5, r7
 8001e36:	d8b2      	bhi.n	8001d9e <__aeabi_ddiv+0x54a>
 8001e38:	469b      	mov	fp, r3
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	e6bf      	b.n	8001bbe <__aeabi_ddiv+0x36a>
 8001e3e:	4580      	cmp	r8, r0
 8001e40:	d3b9      	bcc.n	8001db6 <__aeabi_ddiv+0x562>
 8001e42:	001a      	movs	r2, r3
 8001e44:	e7c3      	b.n	8001dce <__aeabi_ddiv+0x57a>
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	000003ff 	.word	0x000003ff
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	0000041e 	.word	0x0000041e
 8001e54:	0000043e 	.word	0x0000043e

08001e58 <__eqdf2>:
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	464f      	mov	r7, r9
 8001e5c:	4646      	mov	r6, r8
 8001e5e:	46d6      	mov	lr, sl
 8001e60:	4684      	mov	ip, r0
 8001e62:	b5c0      	push	{r6, r7, lr}
 8001e64:	4680      	mov	r8, r0
 8001e66:	4e19      	ldr	r6, [pc, #100]	; (8001ecc <__eqdf2+0x74>)
 8001e68:	0318      	lsls	r0, r3, #12
 8001e6a:	030f      	lsls	r7, r1, #12
 8001e6c:	004d      	lsls	r5, r1, #1
 8001e6e:	0b00      	lsrs	r0, r0, #12
 8001e70:	005c      	lsls	r4, r3, #1
 8001e72:	4682      	mov	sl, r0
 8001e74:	0b3f      	lsrs	r7, r7, #12
 8001e76:	0d6d      	lsrs	r5, r5, #21
 8001e78:	0fc9      	lsrs	r1, r1, #31
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	0d64      	lsrs	r4, r4, #21
 8001e7e:	0fdb      	lsrs	r3, r3, #31
 8001e80:	2001      	movs	r0, #1
 8001e82:	42b5      	cmp	r5, r6
 8001e84:	d00a      	beq.n	8001e9c <__eqdf2+0x44>
 8001e86:	42b4      	cmp	r4, r6
 8001e88:	d003      	beq.n	8001e92 <__eqdf2+0x3a>
 8001e8a:	42a5      	cmp	r5, r4
 8001e8c:	d101      	bne.n	8001e92 <__eqdf2+0x3a>
 8001e8e:	4557      	cmp	r7, sl
 8001e90:	d00c      	beq.n	8001eac <__eqdf2+0x54>
 8001e92:	bc1c      	pop	{r2, r3, r4}
 8001e94:	4690      	mov	r8, r2
 8001e96:	4699      	mov	r9, r3
 8001e98:	46a2      	mov	sl, r4
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9c:	4666      	mov	r6, ip
 8001e9e:	433e      	orrs	r6, r7
 8001ea0:	d1f7      	bne.n	8001e92 <__eqdf2+0x3a>
 8001ea2:	42ac      	cmp	r4, r5
 8001ea4:	d1f5      	bne.n	8001e92 <__eqdf2+0x3a>
 8001ea6:	4654      	mov	r4, sl
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	d1f2      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eac:	2001      	movs	r0, #1
 8001eae:	45c8      	cmp	r8, r9
 8001eb0:	d1ef      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	d007      	beq.n	8001ec6 <__eqdf2+0x6e>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d1eb      	bne.n	8001e92 <__eqdf2+0x3a>
 8001eba:	4663      	mov	r3, ip
 8001ebc:	431f      	orrs	r7, r3
 8001ebe:	0038      	movs	r0, r7
 8001ec0:	1e47      	subs	r7, r0, #1
 8001ec2:	41b8      	sbcs	r0, r7
 8001ec4:	e7e5      	b.n	8001e92 <__eqdf2+0x3a>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e7e3      	b.n	8001e92 <__eqdf2+0x3a>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007ff 	.word	0x000007ff

08001ed0 <__gedf2>:
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	464f      	mov	r7, r9
 8001ed4:	4646      	mov	r6, r8
 8001ed6:	46d6      	mov	lr, sl
 8001ed8:	004d      	lsls	r5, r1, #1
 8001eda:	b5c0      	push	{r6, r7, lr}
 8001edc:	030e      	lsls	r6, r1, #12
 8001ede:	0fc9      	lsrs	r1, r1, #31
 8001ee0:	468a      	mov	sl, r1
 8001ee2:	492c      	ldr	r1, [pc, #176]	; (8001f94 <__gedf2+0xc4>)
 8001ee4:	031f      	lsls	r7, r3, #12
 8001ee6:	005c      	lsls	r4, r3, #1
 8001ee8:	4680      	mov	r8, r0
 8001eea:	0b36      	lsrs	r6, r6, #12
 8001eec:	0d6d      	lsrs	r5, r5, #21
 8001eee:	4691      	mov	r9, r2
 8001ef0:	0b3f      	lsrs	r7, r7, #12
 8001ef2:	0d64      	lsrs	r4, r4, #21
 8001ef4:	0fdb      	lsrs	r3, r3, #31
 8001ef6:	428d      	cmp	r5, r1
 8001ef8:	d01e      	beq.n	8001f38 <__gedf2+0x68>
 8001efa:	428c      	cmp	r4, r1
 8001efc:	d016      	beq.n	8001f2c <__gedf2+0x5c>
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d11e      	bne.n	8001f40 <__gedf2+0x70>
 8001f02:	4330      	orrs	r0, r6
 8001f04:	4684      	mov	ip, r0
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d101      	bne.n	8001f0e <__gedf2+0x3e>
 8001f0a:	433a      	orrs	r2, r7
 8001f0c:	d023      	beq.n	8001f56 <__gedf2+0x86>
 8001f0e:	4662      	mov	r2, ip
 8001f10:	2a00      	cmp	r2, #0
 8001f12:	d01a      	beq.n	8001f4a <__gedf2+0x7a>
 8001f14:	459a      	cmp	sl, r3
 8001f16:	d029      	beq.n	8001f6c <__gedf2+0x9c>
 8001f18:	4651      	mov	r1, sl
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	3901      	subs	r1, #1
 8001f1e:	4008      	ands	r0, r1
 8001f20:	3801      	subs	r0, #1
 8001f22:	bc1c      	pop	{r2, r3, r4}
 8001f24:	4690      	mov	r8, r2
 8001f26:	4699      	mov	r9, r3
 8001f28:	46a2      	mov	sl, r4
 8001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2c:	0039      	movs	r1, r7
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	d0e5      	beq.n	8001efe <__gedf2+0x2e>
 8001f32:	2002      	movs	r0, #2
 8001f34:	4240      	negs	r0, r0
 8001f36:	e7f4      	b.n	8001f22 <__gedf2+0x52>
 8001f38:	4330      	orrs	r0, r6
 8001f3a:	d1fa      	bne.n	8001f32 <__gedf2+0x62>
 8001f3c:	42ac      	cmp	r4, r5
 8001f3e:	d00f      	beq.n	8001f60 <__gedf2+0x90>
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	d10f      	bne.n	8001f64 <__gedf2+0x94>
 8001f44:	433a      	orrs	r2, r7
 8001f46:	d0e7      	beq.n	8001f18 <__gedf2+0x48>
 8001f48:	e00c      	b.n	8001f64 <__gedf2+0x94>
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4393      	bics	r3, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	3001      	adds	r0, #1
 8001f54:	e7e5      	b.n	8001f22 <__gedf2+0x52>
 8001f56:	4663      	mov	r3, ip
 8001f58:	2000      	movs	r0, #0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0e1      	beq.n	8001f22 <__gedf2+0x52>
 8001f5e:	e7db      	b.n	8001f18 <__gedf2+0x48>
 8001f60:	433a      	orrs	r2, r7
 8001f62:	d1e6      	bne.n	8001f32 <__gedf2+0x62>
 8001f64:	459a      	cmp	sl, r3
 8001f66:	d1d7      	bne.n	8001f18 <__gedf2+0x48>
 8001f68:	42a5      	cmp	r5, r4
 8001f6a:	dcd5      	bgt.n	8001f18 <__gedf2+0x48>
 8001f6c:	42a5      	cmp	r5, r4
 8001f6e:	db05      	blt.n	8001f7c <__gedf2+0xac>
 8001f70:	42be      	cmp	r6, r7
 8001f72:	d8d1      	bhi.n	8001f18 <__gedf2+0x48>
 8001f74:	d008      	beq.n	8001f88 <__gedf2+0xb8>
 8001f76:	2000      	movs	r0, #0
 8001f78:	42be      	cmp	r6, r7
 8001f7a:	d2d2      	bcs.n	8001f22 <__gedf2+0x52>
 8001f7c:	4650      	mov	r0, sl
 8001f7e:	2301      	movs	r3, #1
 8001f80:	3801      	subs	r0, #1
 8001f82:	4398      	bics	r0, r3
 8001f84:	3001      	adds	r0, #1
 8001f86:	e7cc      	b.n	8001f22 <__gedf2+0x52>
 8001f88:	45c8      	cmp	r8, r9
 8001f8a:	d8c5      	bhi.n	8001f18 <__gedf2+0x48>
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	45c8      	cmp	r8, r9
 8001f90:	d3f4      	bcc.n	8001f7c <__gedf2+0xac>
 8001f92:	e7c6      	b.n	8001f22 <__gedf2+0x52>
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__ledf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	464f      	mov	r7, r9
 8001f9c:	4646      	mov	r6, r8
 8001f9e:	46d6      	mov	lr, sl
 8001fa0:	004d      	lsls	r5, r1, #1
 8001fa2:	b5c0      	push	{r6, r7, lr}
 8001fa4:	030e      	lsls	r6, r1, #12
 8001fa6:	0fc9      	lsrs	r1, r1, #31
 8001fa8:	468a      	mov	sl, r1
 8001faa:	492e      	ldr	r1, [pc, #184]	; (8002064 <__ledf2+0xcc>)
 8001fac:	031f      	lsls	r7, r3, #12
 8001fae:	005c      	lsls	r4, r3, #1
 8001fb0:	4680      	mov	r8, r0
 8001fb2:	0b36      	lsrs	r6, r6, #12
 8001fb4:	0d6d      	lsrs	r5, r5, #21
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	0b3f      	lsrs	r7, r7, #12
 8001fba:	0d64      	lsrs	r4, r4, #21
 8001fbc:	0fdb      	lsrs	r3, r3, #31
 8001fbe:	428d      	cmp	r5, r1
 8001fc0:	d018      	beq.n	8001ff4 <__ledf2+0x5c>
 8001fc2:	428c      	cmp	r4, r1
 8001fc4:	d011      	beq.n	8001fea <__ledf2+0x52>
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d118      	bne.n	8001ffc <__ledf2+0x64>
 8001fca:	4330      	orrs	r0, r6
 8001fcc:	4684      	mov	ip, r0
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	d11e      	bne.n	8002010 <__ledf2+0x78>
 8001fd2:	433a      	orrs	r2, r7
 8001fd4:	d11c      	bne.n	8002010 <__ledf2+0x78>
 8001fd6:	4663      	mov	r3, ip
 8001fd8:	2000      	movs	r0, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d030      	beq.n	8002040 <__ledf2+0xa8>
 8001fde:	4651      	mov	r1, sl
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	3901      	subs	r1, #1
 8001fe4:	4008      	ands	r0, r1
 8001fe6:	3801      	subs	r0, #1
 8001fe8:	e02a      	b.n	8002040 <__ledf2+0xa8>
 8001fea:	0039      	movs	r1, r7
 8001fec:	4311      	orrs	r1, r2
 8001fee:	d0ea      	beq.n	8001fc6 <__ledf2+0x2e>
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	e025      	b.n	8002040 <__ledf2+0xa8>
 8001ff4:	4330      	orrs	r0, r6
 8001ff6:	d1fb      	bne.n	8001ff0 <__ledf2+0x58>
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	d026      	beq.n	800204a <__ledf2+0xb2>
 8001ffc:	2c00      	cmp	r4, #0
 8001ffe:	d126      	bne.n	800204e <__ledf2+0xb6>
 8002000:	433a      	orrs	r2, r7
 8002002:	d124      	bne.n	800204e <__ledf2+0xb6>
 8002004:	4651      	mov	r1, sl
 8002006:	2002      	movs	r0, #2
 8002008:	3901      	subs	r1, #1
 800200a:	4008      	ands	r0, r1
 800200c:	3801      	subs	r0, #1
 800200e:	e017      	b.n	8002040 <__ledf2+0xa8>
 8002010:	4662      	mov	r2, ip
 8002012:	2a00      	cmp	r2, #0
 8002014:	d00f      	beq.n	8002036 <__ledf2+0x9e>
 8002016:	459a      	cmp	sl, r3
 8002018:	d1e1      	bne.n	8001fde <__ledf2+0x46>
 800201a:	42a5      	cmp	r5, r4
 800201c:	db05      	blt.n	800202a <__ledf2+0x92>
 800201e:	42be      	cmp	r6, r7
 8002020:	d8dd      	bhi.n	8001fde <__ledf2+0x46>
 8002022:	d019      	beq.n	8002058 <__ledf2+0xc0>
 8002024:	2000      	movs	r0, #0
 8002026:	42be      	cmp	r6, r7
 8002028:	d20a      	bcs.n	8002040 <__ledf2+0xa8>
 800202a:	4650      	mov	r0, sl
 800202c:	2301      	movs	r3, #1
 800202e:	3801      	subs	r0, #1
 8002030:	4398      	bics	r0, r3
 8002032:	3001      	adds	r0, #1
 8002034:	e004      	b.n	8002040 <__ledf2+0xa8>
 8002036:	2201      	movs	r2, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	4393      	bics	r3, r2
 800203c:	0018      	movs	r0, r3
 800203e:	3001      	adds	r0, #1
 8002040:	bc1c      	pop	{r2, r3, r4}
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	46a2      	mov	sl, r4
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204a:	433a      	orrs	r2, r7
 800204c:	d1d0      	bne.n	8001ff0 <__ledf2+0x58>
 800204e:	459a      	cmp	sl, r3
 8002050:	d1c5      	bne.n	8001fde <__ledf2+0x46>
 8002052:	42a5      	cmp	r5, r4
 8002054:	dcc3      	bgt.n	8001fde <__ledf2+0x46>
 8002056:	e7e0      	b.n	800201a <__ledf2+0x82>
 8002058:	45c8      	cmp	r8, r9
 800205a:	d8c0      	bhi.n	8001fde <__ledf2+0x46>
 800205c:	2000      	movs	r0, #0
 800205e:	45c8      	cmp	r8, r9
 8002060:	d3e3      	bcc.n	800202a <__ledf2+0x92>
 8002062:	e7ed      	b.n	8002040 <__ledf2+0xa8>
 8002064:	000007ff 	.word	0x000007ff

08002068 <__aeabi_dmul>:
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	4657      	mov	r7, sl
 800206c:	46de      	mov	lr, fp
 800206e:	464e      	mov	r6, r9
 8002070:	4645      	mov	r5, r8
 8002072:	b5e0      	push	{r5, r6, r7, lr}
 8002074:	4683      	mov	fp, r0
 8002076:	0006      	movs	r6, r0
 8002078:	030f      	lsls	r7, r1, #12
 800207a:	0048      	lsls	r0, r1, #1
 800207c:	b087      	sub	sp, #28
 800207e:	4692      	mov	sl, r2
 8002080:	001d      	movs	r5, r3
 8002082:	0b3f      	lsrs	r7, r7, #12
 8002084:	0d40      	lsrs	r0, r0, #21
 8002086:	0fcc      	lsrs	r4, r1, #31
 8002088:	2800      	cmp	r0, #0
 800208a:	d100      	bne.n	800208e <__aeabi_dmul+0x26>
 800208c:	e06f      	b.n	800216e <__aeabi_dmul+0x106>
 800208e:	4bde      	ldr	r3, [pc, #888]	; (8002408 <__aeabi_dmul+0x3a0>)
 8002090:	4298      	cmp	r0, r3
 8002092:	d038      	beq.n	8002106 <__aeabi_dmul+0x9e>
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	00ff      	lsls	r7, r7, #3
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431f      	orrs	r7, r3
 800209c:	0f73      	lsrs	r3, r6, #29
 800209e:	433b      	orrs	r3, r7
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	4bda      	ldr	r3, [pc, #872]	; (800240c <__aeabi_dmul+0x3a4>)
 80020a4:	2700      	movs	r7, #0
 80020a6:	4699      	mov	r9, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	469b      	mov	fp, r3
 80020ac:	00f6      	lsls	r6, r6, #3
 80020ae:	4481      	add	r9, r0
 80020b0:	032b      	lsls	r3, r5, #12
 80020b2:	0069      	lsls	r1, r5, #1
 80020b4:	0b1b      	lsrs	r3, r3, #12
 80020b6:	4652      	mov	r2, sl
 80020b8:	4698      	mov	r8, r3
 80020ba:	0d49      	lsrs	r1, r1, #21
 80020bc:	0fed      	lsrs	r5, r5, #31
 80020be:	2900      	cmp	r1, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dmul+0x5c>
 80020c2:	e085      	b.n	80021d0 <__aeabi_dmul+0x168>
 80020c4:	4bd0      	ldr	r3, [pc, #832]	; (8002408 <__aeabi_dmul+0x3a0>)
 80020c6:	4299      	cmp	r1, r3
 80020c8:	d100      	bne.n	80020cc <__aeabi_dmul+0x64>
 80020ca:	e073      	b.n	80021b4 <__aeabi_dmul+0x14c>
 80020cc:	4643      	mov	r3, r8
 80020ce:	00da      	lsls	r2, r3, #3
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	4313      	orrs	r3, r2
 80020d6:	4652      	mov	r2, sl
 80020d8:	48cc      	ldr	r0, [pc, #816]	; (800240c <__aeabi_dmul+0x3a4>)
 80020da:	0f52      	lsrs	r2, r2, #29
 80020dc:	4684      	mov	ip, r0
 80020de:	4313      	orrs	r3, r2
 80020e0:	4652      	mov	r2, sl
 80020e2:	2000      	movs	r0, #0
 80020e4:	4461      	add	r1, ip
 80020e6:	00d2      	lsls	r2, r2, #3
 80020e8:	4489      	add	r9, r1
 80020ea:	0021      	movs	r1, r4
 80020ec:	4069      	eors	r1, r5
 80020ee:	9100      	str	r1, [sp, #0]
 80020f0:	468c      	mov	ip, r1
 80020f2:	2101      	movs	r1, #1
 80020f4:	4449      	add	r1, r9
 80020f6:	468a      	mov	sl, r1
 80020f8:	2f0f      	cmp	r7, #15
 80020fa:	d900      	bls.n	80020fe <__aeabi_dmul+0x96>
 80020fc:	e090      	b.n	8002220 <__aeabi_dmul+0x1b8>
 80020fe:	49c4      	ldr	r1, [pc, #784]	; (8002410 <__aeabi_dmul+0x3a8>)
 8002100:	00bf      	lsls	r7, r7, #2
 8002102:	59cf      	ldr	r7, [r1, r7]
 8002104:	46bf      	mov	pc, r7
 8002106:	465b      	mov	r3, fp
 8002108:	433b      	orrs	r3, r7
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	d000      	beq.n	8002110 <__aeabi_dmul+0xa8>
 800210e:	e16a      	b.n	80023e6 <__aeabi_dmul+0x37e>
 8002110:	2302      	movs	r3, #2
 8002112:	2708      	movs	r7, #8
 8002114:	2600      	movs	r6, #0
 8002116:	4681      	mov	r9, r0
 8002118:	469b      	mov	fp, r3
 800211a:	e7c9      	b.n	80020b0 <__aeabi_dmul+0x48>
 800211c:	0032      	movs	r2, r6
 800211e:	4658      	mov	r0, fp
 8002120:	9b01      	ldr	r3, [sp, #4]
 8002122:	4661      	mov	r1, ip
 8002124:	9100      	str	r1, [sp, #0]
 8002126:	2802      	cmp	r0, #2
 8002128:	d100      	bne.n	800212c <__aeabi_dmul+0xc4>
 800212a:	e075      	b.n	8002218 <__aeabi_dmul+0x1b0>
 800212c:	2803      	cmp	r0, #3
 800212e:	d100      	bne.n	8002132 <__aeabi_dmul+0xca>
 8002130:	e1fe      	b.n	8002530 <__aeabi_dmul+0x4c8>
 8002132:	2801      	cmp	r0, #1
 8002134:	d000      	beq.n	8002138 <__aeabi_dmul+0xd0>
 8002136:	e12c      	b.n	8002392 <__aeabi_dmul+0x32a>
 8002138:	2300      	movs	r3, #0
 800213a:	2700      	movs	r7, #0
 800213c:	2600      	movs	r6, #0
 800213e:	2500      	movs	r5, #0
 8002140:	033f      	lsls	r7, r7, #12
 8002142:	0d2a      	lsrs	r2, r5, #20
 8002144:	0b3f      	lsrs	r7, r7, #12
 8002146:	48b3      	ldr	r0, [pc, #716]	; (8002414 <__aeabi_dmul+0x3ac>)
 8002148:	0512      	lsls	r2, r2, #20
 800214a:	433a      	orrs	r2, r7
 800214c:	4002      	ands	r2, r0
 800214e:	051b      	lsls	r3, r3, #20
 8002150:	4313      	orrs	r3, r2
 8002152:	9a00      	ldr	r2, [sp, #0]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	07d1      	lsls	r1, r2, #31
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	430b      	orrs	r3, r1
 800215c:	0030      	movs	r0, r6
 800215e:	0019      	movs	r1, r3
 8002160:	b007      	add	sp, #28
 8002162:	bc3c      	pop	{r2, r3, r4, r5}
 8002164:	4690      	mov	r8, r2
 8002166:	4699      	mov	r9, r3
 8002168:	46a2      	mov	sl, r4
 800216a:	46ab      	mov	fp, r5
 800216c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216e:	465b      	mov	r3, fp
 8002170:	433b      	orrs	r3, r7
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	d100      	bne.n	8002178 <__aeabi_dmul+0x110>
 8002176:	e12f      	b.n	80023d8 <__aeabi_dmul+0x370>
 8002178:	2f00      	cmp	r7, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dmul+0x116>
 800217c:	e1a5      	b.n	80024ca <__aeabi_dmul+0x462>
 800217e:	0038      	movs	r0, r7
 8002180:	f000 fec0 	bl	8002f04 <__clzsi2>
 8002184:	0003      	movs	r3, r0
 8002186:	3b0b      	subs	r3, #11
 8002188:	2b1c      	cmp	r3, #28
 800218a:	dd00      	ble.n	800218e <__aeabi_dmul+0x126>
 800218c:	e196      	b.n	80024bc <__aeabi_dmul+0x454>
 800218e:	221d      	movs	r2, #29
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	465a      	mov	r2, fp
 8002194:	0001      	movs	r1, r0
 8002196:	40da      	lsrs	r2, r3
 8002198:	465e      	mov	r6, fp
 800219a:	3908      	subs	r1, #8
 800219c:	408f      	lsls	r7, r1
 800219e:	0013      	movs	r3, r2
 80021a0:	408e      	lsls	r6, r1
 80021a2:	433b      	orrs	r3, r7
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	4b9c      	ldr	r3, [pc, #624]	; (8002418 <__aeabi_dmul+0x3b0>)
 80021a8:	2700      	movs	r7, #0
 80021aa:	1a1b      	subs	r3, r3, r0
 80021ac:	4699      	mov	r9, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	469b      	mov	fp, r3
 80021b2:	e77d      	b.n	80020b0 <__aeabi_dmul+0x48>
 80021b4:	4641      	mov	r1, r8
 80021b6:	4653      	mov	r3, sl
 80021b8:	430b      	orrs	r3, r1
 80021ba:	4993      	ldr	r1, [pc, #588]	; (8002408 <__aeabi_dmul+0x3a0>)
 80021bc:	468c      	mov	ip, r1
 80021be:	44e1      	add	r9, ip
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d000      	beq.n	80021c6 <__aeabi_dmul+0x15e>
 80021c4:	e11a      	b.n	80023fc <__aeabi_dmul+0x394>
 80021c6:	2202      	movs	r2, #2
 80021c8:	2002      	movs	r0, #2
 80021ca:	4317      	orrs	r7, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	e78c      	b.n	80020ea <__aeabi_dmul+0x82>
 80021d0:	4313      	orrs	r3, r2
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dmul+0x16e>
 80021d4:	e10d      	b.n	80023f2 <__aeabi_dmul+0x38a>
 80021d6:	4643      	mov	r3, r8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d100      	bne.n	80021de <__aeabi_dmul+0x176>
 80021dc:	e181      	b.n	80024e2 <__aeabi_dmul+0x47a>
 80021de:	4640      	mov	r0, r8
 80021e0:	f000 fe90 	bl	8002f04 <__clzsi2>
 80021e4:	0002      	movs	r2, r0
 80021e6:	3a0b      	subs	r2, #11
 80021e8:	2a1c      	cmp	r2, #28
 80021ea:	dd00      	ble.n	80021ee <__aeabi_dmul+0x186>
 80021ec:	e172      	b.n	80024d4 <__aeabi_dmul+0x46c>
 80021ee:	0001      	movs	r1, r0
 80021f0:	4643      	mov	r3, r8
 80021f2:	3908      	subs	r1, #8
 80021f4:	408b      	lsls	r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	231d      	movs	r3, #29
 80021fa:	1a9a      	subs	r2, r3, r2
 80021fc:	4653      	mov	r3, sl
 80021fe:	40d3      	lsrs	r3, r2
 8002200:	001a      	movs	r2, r3
 8002202:	4643      	mov	r3, r8
 8002204:	4313      	orrs	r3, r2
 8002206:	4652      	mov	r2, sl
 8002208:	408a      	lsls	r2, r1
 800220a:	4649      	mov	r1, r9
 800220c:	1a08      	subs	r0, r1, r0
 800220e:	4982      	ldr	r1, [pc, #520]	; (8002418 <__aeabi_dmul+0x3b0>)
 8002210:	4689      	mov	r9, r1
 8002212:	4481      	add	r9, r0
 8002214:	2000      	movs	r0, #0
 8002216:	e768      	b.n	80020ea <__aeabi_dmul+0x82>
 8002218:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <__aeabi_dmul+0x3a0>)
 800221a:	2700      	movs	r7, #0
 800221c:	2600      	movs	r6, #0
 800221e:	e78e      	b.n	800213e <__aeabi_dmul+0xd6>
 8002220:	0c14      	lsrs	r4, r2, #16
 8002222:	0412      	lsls	r2, r2, #16
 8002224:	0c12      	lsrs	r2, r2, #16
 8002226:	0011      	movs	r1, r2
 8002228:	0c37      	lsrs	r7, r6, #16
 800222a:	0436      	lsls	r6, r6, #16
 800222c:	0c35      	lsrs	r5, r6, #16
 800222e:	4379      	muls	r1, r7
 8002230:	0028      	movs	r0, r5
 8002232:	468c      	mov	ip, r1
 8002234:	002e      	movs	r6, r5
 8002236:	4360      	muls	r0, r4
 8002238:	4460      	add	r0, ip
 800223a:	4683      	mov	fp, r0
 800223c:	4356      	muls	r6, r2
 800223e:	0021      	movs	r1, r4
 8002240:	0c30      	lsrs	r0, r6, #16
 8002242:	4680      	mov	r8, r0
 8002244:	4658      	mov	r0, fp
 8002246:	4379      	muls	r1, r7
 8002248:	4440      	add	r0, r8
 800224a:	9102      	str	r1, [sp, #8]
 800224c:	4584      	cmp	ip, r0
 800224e:	d906      	bls.n	800225e <__aeabi_dmul+0x1f6>
 8002250:	4688      	mov	r8, r1
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0249      	lsls	r1, r1, #9
 8002256:	468c      	mov	ip, r1
 8002258:	44e0      	add	r8, ip
 800225a:	4641      	mov	r1, r8
 800225c:	9102      	str	r1, [sp, #8]
 800225e:	0436      	lsls	r6, r6, #16
 8002260:	0c01      	lsrs	r1, r0, #16
 8002262:	0c36      	lsrs	r6, r6, #16
 8002264:	0400      	lsls	r0, r0, #16
 8002266:	468b      	mov	fp, r1
 8002268:	1981      	adds	r1, r0, r6
 800226a:	0c1e      	lsrs	r6, r3, #16
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	9103      	str	r1, [sp, #12]
 8002272:	0019      	movs	r1, r3
 8002274:	4379      	muls	r1, r7
 8002276:	468c      	mov	ip, r1
 8002278:	0028      	movs	r0, r5
 800227a:	4375      	muls	r5, r6
 800227c:	4465      	add	r5, ip
 800227e:	46a8      	mov	r8, r5
 8002280:	4358      	muls	r0, r3
 8002282:	0c05      	lsrs	r5, r0, #16
 8002284:	4445      	add	r5, r8
 8002286:	4377      	muls	r7, r6
 8002288:	42a9      	cmp	r1, r5
 800228a:	d903      	bls.n	8002294 <__aeabi_dmul+0x22c>
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0249      	lsls	r1, r1, #9
 8002290:	468c      	mov	ip, r1
 8002292:	4467      	add	r7, ip
 8002294:	0c29      	lsrs	r1, r5, #16
 8002296:	468c      	mov	ip, r1
 8002298:	0039      	movs	r1, r7
 800229a:	0400      	lsls	r0, r0, #16
 800229c:	0c00      	lsrs	r0, r0, #16
 800229e:	042d      	lsls	r5, r5, #16
 80022a0:	182d      	adds	r5, r5, r0
 80022a2:	4461      	add	r1, ip
 80022a4:	44ab      	add	fp, r5
 80022a6:	9105      	str	r1, [sp, #20]
 80022a8:	4659      	mov	r1, fp
 80022aa:	9104      	str	r1, [sp, #16]
 80022ac:	9901      	ldr	r1, [sp, #4]
 80022ae:	040f      	lsls	r7, r1, #16
 80022b0:	0c3f      	lsrs	r7, r7, #16
 80022b2:	0c08      	lsrs	r0, r1, #16
 80022b4:	0039      	movs	r1, r7
 80022b6:	4351      	muls	r1, r2
 80022b8:	4342      	muls	r2, r0
 80022ba:	4690      	mov	r8, r2
 80022bc:	0002      	movs	r2, r0
 80022be:	468c      	mov	ip, r1
 80022c0:	0c09      	lsrs	r1, r1, #16
 80022c2:	468b      	mov	fp, r1
 80022c4:	4362      	muls	r2, r4
 80022c6:	437c      	muls	r4, r7
 80022c8:	4444      	add	r4, r8
 80022ca:	445c      	add	r4, fp
 80022cc:	45a0      	cmp	r8, r4
 80022ce:	d903      	bls.n	80022d8 <__aeabi_dmul+0x270>
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	4688      	mov	r8, r1
 80022d6:	4442      	add	r2, r8
 80022d8:	0c21      	lsrs	r1, r4, #16
 80022da:	4688      	mov	r8, r1
 80022dc:	4661      	mov	r1, ip
 80022de:	0409      	lsls	r1, r1, #16
 80022e0:	0c09      	lsrs	r1, r1, #16
 80022e2:	468c      	mov	ip, r1
 80022e4:	0039      	movs	r1, r7
 80022e6:	4359      	muls	r1, r3
 80022e8:	4343      	muls	r3, r0
 80022ea:	4370      	muls	r0, r6
 80022ec:	437e      	muls	r6, r7
 80022ee:	0c0f      	lsrs	r7, r1, #16
 80022f0:	18f6      	adds	r6, r6, r3
 80022f2:	0424      	lsls	r4, r4, #16
 80022f4:	19be      	adds	r6, r7, r6
 80022f6:	4464      	add	r4, ip
 80022f8:	4442      	add	r2, r8
 80022fa:	468c      	mov	ip, r1
 80022fc:	42b3      	cmp	r3, r6
 80022fe:	d903      	bls.n	8002308 <__aeabi_dmul+0x2a0>
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	025b      	lsls	r3, r3, #9
 8002304:	4698      	mov	r8, r3
 8002306:	4440      	add	r0, r8
 8002308:	9b02      	ldr	r3, [sp, #8]
 800230a:	4661      	mov	r1, ip
 800230c:	4698      	mov	r8, r3
 800230e:	9b04      	ldr	r3, [sp, #16]
 8002310:	0437      	lsls	r7, r6, #16
 8002312:	4443      	add	r3, r8
 8002314:	469b      	mov	fp, r3
 8002316:	45ab      	cmp	fp, r5
 8002318:	41ad      	sbcs	r5, r5
 800231a:	426b      	negs	r3, r5
 800231c:	040d      	lsls	r5, r1, #16
 800231e:	9905      	ldr	r1, [sp, #20]
 8002320:	0c2d      	lsrs	r5, r5, #16
 8002322:	468c      	mov	ip, r1
 8002324:	197f      	adds	r7, r7, r5
 8002326:	4467      	add	r7, ip
 8002328:	18fd      	adds	r5, r7, r3
 800232a:	46a8      	mov	r8, r5
 800232c:	465d      	mov	r5, fp
 800232e:	192d      	adds	r5, r5, r4
 8002330:	42a5      	cmp	r5, r4
 8002332:	41a4      	sbcs	r4, r4
 8002334:	4693      	mov	fp, r2
 8002336:	4264      	negs	r4, r4
 8002338:	46a4      	mov	ip, r4
 800233a:	44c3      	add	fp, r8
 800233c:	44dc      	add	ip, fp
 800233e:	428f      	cmp	r7, r1
 8002340:	41bf      	sbcs	r7, r7
 8002342:	4598      	cmp	r8, r3
 8002344:	419b      	sbcs	r3, r3
 8002346:	4593      	cmp	fp, r2
 8002348:	4192      	sbcs	r2, r2
 800234a:	45a4      	cmp	ip, r4
 800234c:	41a4      	sbcs	r4, r4
 800234e:	425b      	negs	r3, r3
 8002350:	427f      	negs	r7, r7
 8002352:	431f      	orrs	r7, r3
 8002354:	0c36      	lsrs	r6, r6, #16
 8002356:	4252      	negs	r2, r2
 8002358:	4264      	negs	r4, r4
 800235a:	19bf      	adds	r7, r7, r6
 800235c:	4322      	orrs	r2, r4
 800235e:	18bf      	adds	r7, r7, r2
 8002360:	4662      	mov	r2, ip
 8002362:	1838      	adds	r0, r7, r0
 8002364:	0243      	lsls	r3, r0, #9
 8002366:	0dd2      	lsrs	r2, r2, #23
 8002368:	9903      	ldr	r1, [sp, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	026a      	lsls	r2, r5, #9
 800236e:	430a      	orrs	r2, r1
 8002370:	1e50      	subs	r0, r2, #1
 8002372:	4182      	sbcs	r2, r0
 8002374:	4661      	mov	r1, ip
 8002376:	0ded      	lsrs	r5, r5, #23
 8002378:	432a      	orrs	r2, r5
 800237a:	024e      	lsls	r6, r1, #9
 800237c:	4332      	orrs	r2, r6
 800237e:	01d9      	lsls	r1, r3, #7
 8002380:	d400      	bmi.n	8002384 <__aeabi_dmul+0x31c>
 8002382:	e0b3      	b.n	80024ec <__aeabi_dmul+0x484>
 8002384:	2601      	movs	r6, #1
 8002386:	0850      	lsrs	r0, r2, #1
 8002388:	4032      	ands	r2, r6
 800238a:	4302      	orrs	r2, r0
 800238c:	07de      	lsls	r6, r3, #31
 800238e:	4332      	orrs	r2, r6
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	4c22      	ldr	r4, [pc, #136]	; (800241c <__aeabi_dmul+0x3b4>)
 8002394:	4454      	add	r4, sl
 8002396:	2c00      	cmp	r4, #0
 8002398:	dd62      	ble.n	8002460 <__aeabi_dmul+0x3f8>
 800239a:	0751      	lsls	r1, r2, #29
 800239c:	d009      	beq.n	80023b2 <__aeabi_dmul+0x34a>
 800239e:	200f      	movs	r0, #15
 80023a0:	4010      	ands	r0, r2
 80023a2:	2804      	cmp	r0, #4
 80023a4:	d005      	beq.n	80023b2 <__aeabi_dmul+0x34a>
 80023a6:	1d10      	adds	r0, r2, #4
 80023a8:	4290      	cmp	r0, r2
 80023aa:	4192      	sbcs	r2, r2
 80023ac:	4252      	negs	r2, r2
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	0002      	movs	r2, r0
 80023b2:	01d9      	lsls	r1, r3, #7
 80023b4:	d504      	bpl.n	80023c0 <__aeabi_dmul+0x358>
 80023b6:	2480      	movs	r4, #128	; 0x80
 80023b8:	4819      	ldr	r0, [pc, #100]	; (8002420 <__aeabi_dmul+0x3b8>)
 80023ba:	00e4      	lsls	r4, r4, #3
 80023bc:	4003      	ands	r3, r0
 80023be:	4454      	add	r4, sl
 80023c0:	4818      	ldr	r0, [pc, #96]	; (8002424 <__aeabi_dmul+0x3bc>)
 80023c2:	4284      	cmp	r4, r0
 80023c4:	dd00      	ble.n	80023c8 <__aeabi_dmul+0x360>
 80023c6:	e727      	b.n	8002218 <__aeabi_dmul+0x1b0>
 80023c8:	075e      	lsls	r6, r3, #29
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	08d2      	lsrs	r2, r2, #3
 80023ce:	0b1f      	lsrs	r7, r3, #12
 80023d0:	0563      	lsls	r3, r4, #21
 80023d2:	4316      	orrs	r6, r2
 80023d4:	0d5b      	lsrs	r3, r3, #21
 80023d6:	e6b2      	b.n	800213e <__aeabi_dmul+0xd6>
 80023d8:	2300      	movs	r3, #0
 80023da:	4699      	mov	r9, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	2704      	movs	r7, #4
 80023e0:	2600      	movs	r6, #0
 80023e2:	469b      	mov	fp, r3
 80023e4:	e664      	b.n	80020b0 <__aeabi_dmul+0x48>
 80023e6:	2303      	movs	r3, #3
 80023e8:	9701      	str	r7, [sp, #4]
 80023ea:	4681      	mov	r9, r0
 80023ec:	270c      	movs	r7, #12
 80023ee:	469b      	mov	fp, r3
 80023f0:	e65e      	b.n	80020b0 <__aeabi_dmul+0x48>
 80023f2:	2201      	movs	r2, #1
 80023f4:	2001      	movs	r0, #1
 80023f6:	4317      	orrs	r7, r2
 80023f8:	2200      	movs	r2, #0
 80023fa:	e676      	b.n	80020ea <__aeabi_dmul+0x82>
 80023fc:	2303      	movs	r3, #3
 80023fe:	2003      	movs	r0, #3
 8002400:	431f      	orrs	r7, r3
 8002402:	4643      	mov	r3, r8
 8002404:	e671      	b.n	80020ea <__aeabi_dmul+0x82>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	000007ff 	.word	0x000007ff
 800240c:	fffffc01 	.word	0xfffffc01
 8002410:	0800a688 	.word	0x0800a688
 8002414:	800fffff 	.word	0x800fffff
 8002418:	fffffc0d 	.word	0xfffffc0d
 800241c:	000003ff 	.word	0x000003ff
 8002420:	feffffff 	.word	0xfeffffff
 8002424:	000007fe 	.word	0x000007fe
 8002428:	2300      	movs	r3, #0
 800242a:	2780      	movs	r7, #128	; 0x80
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	033f      	lsls	r7, r7, #12
 8002430:	2600      	movs	r6, #0
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <__aeabi_dmul+0x4d8>)
 8002434:	e683      	b.n	800213e <__aeabi_dmul+0xd6>
 8002436:	9b01      	ldr	r3, [sp, #4]
 8002438:	0032      	movs	r2, r6
 800243a:	46a4      	mov	ip, r4
 800243c:	4658      	mov	r0, fp
 800243e:	e670      	b.n	8002122 <__aeabi_dmul+0xba>
 8002440:	46ac      	mov	ip, r5
 8002442:	e66e      	b.n	8002122 <__aeabi_dmul+0xba>
 8002444:	2780      	movs	r7, #128	; 0x80
 8002446:	9901      	ldr	r1, [sp, #4]
 8002448:	033f      	lsls	r7, r7, #12
 800244a:	4239      	tst	r1, r7
 800244c:	d02d      	beq.n	80024aa <__aeabi_dmul+0x442>
 800244e:	423b      	tst	r3, r7
 8002450:	d12b      	bne.n	80024aa <__aeabi_dmul+0x442>
 8002452:	431f      	orrs	r7, r3
 8002454:	033f      	lsls	r7, r7, #12
 8002456:	0b3f      	lsrs	r7, r7, #12
 8002458:	9500      	str	r5, [sp, #0]
 800245a:	0016      	movs	r6, r2
 800245c:	4b38      	ldr	r3, [pc, #224]	; (8002540 <__aeabi_dmul+0x4d8>)
 800245e:	e66e      	b.n	800213e <__aeabi_dmul+0xd6>
 8002460:	2501      	movs	r5, #1
 8002462:	1b2d      	subs	r5, r5, r4
 8002464:	2d38      	cmp	r5, #56	; 0x38
 8002466:	dd00      	ble.n	800246a <__aeabi_dmul+0x402>
 8002468:	e666      	b.n	8002138 <__aeabi_dmul+0xd0>
 800246a:	2d1f      	cmp	r5, #31
 800246c:	dc40      	bgt.n	80024f0 <__aeabi_dmul+0x488>
 800246e:	4835      	ldr	r0, [pc, #212]	; (8002544 <__aeabi_dmul+0x4dc>)
 8002470:	001c      	movs	r4, r3
 8002472:	4450      	add	r0, sl
 8002474:	0016      	movs	r6, r2
 8002476:	4082      	lsls	r2, r0
 8002478:	4084      	lsls	r4, r0
 800247a:	40ee      	lsrs	r6, r5
 800247c:	1e50      	subs	r0, r2, #1
 800247e:	4182      	sbcs	r2, r0
 8002480:	4334      	orrs	r4, r6
 8002482:	4314      	orrs	r4, r2
 8002484:	40eb      	lsrs	r3, r5
 8002486:	0762      	lsls	r2, r4, #29
 8002488:	d009      	beq.n	800249e <__aeabi_dmul+0x436>
 800248a:	220f      	movs	r2, #15
 800248c:	4022      	ands	r2, r4
 800248e:	2a04      	cmp	r2, #4
 8002490:	d005      	beq.n	800249e <__aeabi_dmul+0x436>
 8002492:	0022      	movs	r2, r4
 8002494:	1d14      	adds	r4, r2, #4
 8002496:	4294      	cmp	r4, r2
 8002498:	4180      	sbcs	r0, r0
 800249a:	4240      	negs	r0, r0
 800249c:	181b      	adds	r3, r3, r0
 800249e:	021a      	lsls	r2, r3, #8
 80024a0:	d53e      	bpl.n	8002520 <__aeabi_dmul+0x4b8>
 80024a2:	2301      	movs	r3, #1
 80024a4:	2700      	movs	r7, #0
 80024a6:	2600      	movs	r6, #0
 80024a8:	e649      	b.n	800213e <__aeabi_dmul+0xd6>
 80024aa:	2780      	movs	r7, #128	; 0x80
 80024ac:	9b01      	ldr	r3, [sp, #4]
 80024ae:	033f      	lsls	r7, r7, #12
 80024b0:	431f      	orrs	r7, r3
 80024b2:	033f      	lsls	r7, r7, #12
 80024b4:	0b3f      	lsrs	r7, r7, #12
 80024b6:	9400      	str	r4, [sp, #0]
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <__aeabi_dmul+0x4d8>)
 80024ba:	e640      	b.n	800213e <__aeabi_dmul+0xd6>
 80024bc:	0003      	movs	r3, r0
 80024be:	465a      	mov	r2, fp
 80024c0:	3b28      	subs	r3, #40	; 0x28
 80024c2:	409a      	lsls	r2, r3
 80024c4:	2600      	movs	r6, #0
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	e66d      	b.n	80021a6 <__aeabi_dmul+0x13e>
 80024ca:	4658      	mov	r0, fp
 80024cc:	f000 fd1a 	bl	8002f04 <__clzsi2>
 80024d0:	3020      	adds	r0, #32
 80024d2:	e657      	b.n	8002184 <__aeabi_dmul+0x11c>
 80024d4:	0003      	movs	r3, r0
 80024d6:	4652      	mov	r2, sl
 80024d8:	3b28      	subs	r3, #40	; 0x28
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	e693      	b.n	800220a <__aeabi_dmul+0x1a2>
 80024e2:	4650      	mov	r0, sl
 80024e4:	f000 fd0e 	bl	8002f04 <__clzsi2>
 80024e8:	3020      	adds	r0, #32
 80024ea:	e67b      	b.n	80021e4 <__aeabi_dmul+0x17c>
 80024ec:	46ca      	mov	sl, r9
 80024ee:	e750      	b.n	8002392 <__aeabi_dmul+0x32a>
 80024f0:	201f      	movs	r0, #31
 80024f2:	001e      	movs	r6, r3
 80024f4:	4240      	negs	r0, r0
 80024f6:	1b04      	subs	r4, r0, r4
 80024f8:	40e6      	lsrs	r6, r4
 80024fa:	2d20      	cmp	r5, #32
 80024fc:	d003      	beq.n	8002506 <__aeabi_dmul+0x49e>
 80024fe:	4c12      	ldr	r4, [pc, #72]	; (8002548 <__aeabi_dmul+0x4e0>)
 8002500:	4454      	add	r4, sl
 8002502:	40a3      	lsls	r3, r4
 8002504:	431a      	orrs	r2, r3
 8002506:	1e50      	subs	r0, r2, #1
 8002508:	4182      	sbcs	r2, r0
 800250a:	4332      	orrs	r2, r6
 800250c:	2607      	movs	r6, #7
 800250e:	2700      	movs	r7, #0
 8002510:	4016      	ands	r6, r2
 8002512:	d009      	beq.n	8002528 <__aeabi_dmul+0x4c0>
 8002514:	200f      	movs	r0, #15
 8002516:	2300      	movs	r3, #0
 8002518:	4010      	ands	r0, r2
 800251a:	0014      	movs	r4, r2
 800251c:	2804      	cmp	r0, #4
 800251e:	d1b9      	bne.n	8002494 <__aeabi_dmul+0x42c>
 8002520:	0022      	movs	r2, r4
 8002522:	075e      	lsls	r6, r3, #29
 8002524:	025b      	lsls	r3, r3, #9
 8002526:	0b1f      	lsrs	r7, r3, #12
 8002528:	08d2      	lsrs	r2, r2, #3
 800252a:	4316      	orrs	r6, r2
 800252c:	2300      	movs	r3, #0
 800252e:	e606      	b.n	800213e <__aeabi_dmul+0xd6>
 8002530:	2780      	movs	r7, #128	; 0x80
 8002532:	033f      	lsls	r7, r7, #12
 8002534:	431f      	orrs	r7, r3
 8002536:	033f      	lsls	r7, r7, #12
 8002538:	0b3f      	lsrs	r7, r7, #12
 800253a:	0016      	movs	r6, r2
 800253c:	4b00      	ldr	r3, [pc, #0]	; (8002540 <__aeabi_dmul+0x4d8>)
 800253e:	e5fe      	b.n	800213e <__aeabi_dmul+0xd6>
 8002540:	000007ff 	.word	0x000007ff
 8002544:	0000041e 	.word	0x0000041e
 8002548:	0000043e 	.word	0x0000043e

0800254c <__aeabi_dsub>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	4657      	mov	r7, sl
 8002550:	464e      	mov	r6, r9
 8002552:	4645      	mov	r5, r8
 8002554:	46de      	mov	lr, fp
 8002556:	000c      	movs	r4, r1
 8002558:	0309      	lsls	r1, r1, #12
 800255a:	b5e0      	push	{r5, r6, r7, lr}
 800255c:	0a49      	lsrs	r1, r1, #9
 800255e:	0f46      	lsrs	r6, r0, #29
 8002560:	005f      	lsls	r7, r3, #1
 8002562:	4331      	orrs	r1, r6
 8002564:	031e      	lsls	r6, r3, #12
 8002566:	0fdb      	lsrs	r3, r3, #31
 8002568:	0a76      	lsrs	r6, r6, #9
 800256a:	469b      	mov	fp, r3
 800256c:	0f53      	lsrs	r3, r2, #29
 800256e:	4333      	orrs	r3, r6
 8002570:	4ec8      	ldr	r6, [pc, #800]	; (8002894 <__aeabi_dsub+0x348>)
 8002572:	0065      	lsls	r5, r4, #1
 8002574:	00c0      	lsls	r0, r0, #3
 8002576:	0fe4      	lsrs	r4, r4, #31
 8002578:	00d2      	lsls	r2, r2, #3
 800257a:	0d6d      	lsrs	r5, r5, #21
 800257c:	46a2      	mov	sl, r4
 800257e:	4681      	mov	r9, r0
 8002580:	0d7f      	lsrs	r7, r7, #21
 8002582:	469c      	mov	ip, r3
 8002584:	4690      	mov	r8, r2
 8002586:	42b7      	cmp	r7, r6
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x40>
 800258a:	e0b9      	b.n	8002700 <__aeabi_dsub+0x1b4>
 800258c:	465b      	mov	r3, fp
 800258e:	2601      	movs	r6, #1
 8002590:	4073      	eors	r3, r6
 8002592:	469b      	mov	fp, r3
 8002594:	1bee      	subs	r6, r5, r7
 8002596:	45a3      	cmp	fp, r4
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x50>
 800259a:	e083      	b.n	80026a4 <__aeabi_dsub+0x158>
 800259c:	2e00      	cmp	r6, #0
 800259e:	dd63      	ble.n	8002668 <__aeabi_dsub+0x11c>
 80025a0:	2f00      	cmp	r7, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x5a>
 80025a4:	e0b1      	b.n	800270a <__aeabi_dsub+0x1be>
 80025a6:	4663      	mov	r3, ip
 80025a8:	4313      	orrs	r3, r2
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x62>
 80025ac:	e123      	b.n	80027f6 <__aeabi_dsub+0x2aa>
 80025ae:	1e73      	subs	r3, r6, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d000      	beq.n	80025b6 <__aeabi_dsub+0x6a>
 80025b4:	e1ba      	b.n	800292c <__aeabi_dsub+0x3e0>
 80025b6:	1a86      	subs	r6, r0, r2
 80025b8:	4663      	mov	r3, ip
 80025ba:	42b0      	cmp	r0, r6
 80025bc:	4180      	sbcs	r0, r0
 80025be:	2501      	movs	r5, #1
 80025c0:	1ac9      	subs	r1, r1, r3
 80025c2:	4240      	negs	r0, r0
 80025c4:	1a09      	subs	r1, r1, r0
 80025c6:	020b      	lsls	r3, r1, #8
 80025c8:	d400      	bmi.n	80025cc <__aeabi_dsub+0x80>
 80025ca:	e147      	b.n	800285c <__aeabi_dsub+0x310>
 80025cc:	0249      	lsls	r1, r1, #9
 80025ce:	0a4b      	lsrs	r3, r1, #9
 80025d0:	4698      	mov	r8, r3
 80025d2:	4643      	mov	r3, r8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x8e>
 80025d8:	e189      	b.n	80028ee <__aeabi_dsub+0x3a2>
 80025da:	4640      	mov	r0, r8
 80025dc:	f000 fc92 	bl	8002f04 <__clzsi2>
 80025e0:	0003      	movs	r3, r0
 80025e2:	3b08      	subs	r3, #8
 80025e4:	2b1f      	cmp	r3, #31
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x9e>
 80025e8:	e17c      	b.n	80028e4 <__aeabi_dsub+0x398>
 80025ea:	2220      	movs	r2, #32
 80025ec:	0030      	movs	r0, r6
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	4641      	mov	r1, r8
 80025f2:	40d0      	lsrs	r0, r2
 80025f4:	4099      	lsls	r1, r3
 80025f6:	0002      	movs	r2, r0
 80025f8:	409e      	lsls	r6, r3
 80025fa:	430a      	orrs	r2, r1
 80025fc:	429d      	cmp	r5, r3
 80025fe:	dd00      	ble.n	8002602 <__aeabi_dsub+0xb6>
 8002600:	e16a      	b.n	80028d8 <__aeabi_dsub+0x38c>
 8002602:	1b5d      	subs	r5, r3, r5
 8002604:	1c6b      	adds	r3, r5, #1
 8002606:	2b1f      	cmp	r3, #31
 8002608:	dd00      	ble.n	800260c <__aeabi_dsub+0xc0>
 800260a:	e194      	b.n	8002936 <__aeabi_dsub+0x3ea>
 800260c:	2120      	movs	r1, #32
 800260e:	0010      	movs	r0, r2
 8002610:	0035      	movs	r5, r6
 8002612:	1ac9      	subs	r1, r1, r3
 8002614:	408e      	lsls	r6, r1
 8002616:	40da      	lsrs	r2, r3
 8002618:	4088      	lsls	r0, r1
 800261a:	40dd      	lsrs	r5, r3
 800261c:	1e71      	subs	r1, r6, #1
 800261e:	418e      	sbcs	r6, r1
 8002620:	0011      	movs	r1, r2
 8002622:	2207      	movs	r2, #7
 8002624:	4328      	orrs	r0, r5
 8002626:	2500      	movs	r5, #0
 8002628:	4306      	orrs	r6, r0
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d009      	beq.n	8002644 <__aeabi_dsub+0xf8>
 8002630:	230f      	movs	r3, #15
 8002632:	4033      	ands	r3, r6
 8002634:	2b04      	cmp	r3, #4
 8002636:	d005      	beq.n	8002644 <__aeabi_dsub+0xf8>
 8002638:	1d33      	adds	r3, r6, #4
 800263a:	42b3      	cmp	r3, r6
 800263c:	41b6      	sbcs	r6, r6
 800263e:	4276      	negs	r6, r6
 8002640:	1989      	adds	r1, r1, r6
 8002642:	001e      	movs	r6, r3
 8002644:	020b      	lsls	r3, r1, #8
 8002646:	d400      	bmi.n	800264a <__aeabi_dsub+0xfe>
 8002648:	e23d      	b.n	8002ac6 <__aeabi_dsub+0x57a>
 800264a:	1c6a      	adds	r2, r5, #1
 800264c:	4b91      	ldr	r3, [pc, #580]	; (8002894 <__aeabi_dsub+0x348>)
 800264e:	0555      	lsls	r5, r2, #21
 8002650:	0d6d      	lsrs	r5, r5, #21
 8002652:	429a      	cmp	r2, r3
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x10c>
 8002656:	e119      	b.n	800288c <__aeabi_dsub+0x340>
 8002658:	4a8f      	ldr	r2, [pc, #572]	; (8002898 <__aeabi_dsub+0x34c>)
 800265a:	08f6      	lsrs	r6, r6, #3
 800265c:	400a      	ands	r2, r1
 800265e:	0757      	lsls	r7, r2, #29
 8002660:	0252      	lsls	r2, r2, #9
 8002662:	4337      	orrs	r7, r6
 8002664:	0b12      	lsrs	r2, r2, #12
 8002666:	e09b      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002668:	2e00      	cmp	r6, #0
 800266a:	d000      	beq.n	800266e <__aeabi_dsub+0x122>
 800266c:	e0c5      	b.n	80027fa <__aeabi_dsub+0x2ae>
 800266e:	1c6e      	adds	r6, r5, #1
 8002670:	0576      	lsls	r6, r6, #21
 8002672:	0d76      	lsrs	r6, r6, #21
 8002674:	2e01      	cmp	r6, #1
 8002676:	dc00      	bgt.n	800267a <__aeabi_dsub+0x12e>
 8002678:	e148      	b.n	800290c <__aeabi_dsub+0x3c0>
 800267a:	4667      	mov	r7, ip
 800267c:	1a86      	subs	r6, r0, r2
 800267e:	1bcb      	subs	r3, r1, r7
 8002680:	42b0      	cmp	r0, r6
 8002682:	41bf      	sbcs	r7, r7
 8002684:	427f      	negs	r7, r7
 8002686:	46b8      	mov	r8, r7
 8002688:	001f      	movs	r7, r3
 800268a:	4643      	mov	r3, r8
 800268c:	1aff      	subs	r7, r7, r3
 800268e:	003b      	movs	r3, r7
 8002690:	46b8      	mov	r8, r7
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	d500      	bpl.n	8002698 <__aeabi_dsub+0x14c>
 8002696:	e15f      	b.n	8002958 <__aeabi_dsub+0x40c>
 8002698:	4337      	orrs	r7, r6
 800269a:	d19a      	bne.n	80025d2 <__aeabi_dsub+0x86>
 800269c:	2200      	movs	r2, #0
 800269e:	2400      	movs	r4, #0
 80026a0:	2500      	movs	r5, #0
 80026a2:	e079      	b.n	8002798 <__aeabi_dsub+0x24c>
 80026a4:	2e00      	cmp	r6, #0
 80026a6:	dc00      	bgt.n	80026aa <__aeabi_dsub+0x15e>
 80026a8:	e0fa      	b.n	80028a0 <__aeabi_dsub+0x354>
 80026aa:	2f00      	cmp	r7, #0
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x164>
 80026ae:	e08d      	b.n	80027cc <__aeabi_dsub+0x280>
 80026b0:	4b78      	ldr	r3, [pc, #480]	; (8002894 <__aeabi_dsub+0x348>)
 80026b2:	429d      	cmp	r5, r3
 80026b4:	d067      	beq.n	8002786 <__aeabi_dsub+0x23a>
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	4667      	mov	r7, ip
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	431f      	orrs	r7, r3
 80026be:	46bc      	mov	ip, r7
 80026c0:	2e38      	cmp	r6, #56	; 0x38
 80026c2:	dc00      	bgt.n	80026c6 <__aeabi_dsub+0x17a>
 80026c4:	e152      	b.n	800296c <__aeabi_dsub+0x420>
 80026c6:	4663      	mov	r3, ip
 80026c8:	4313      	orrs	r3, r2
 80026ca:	1e5a      	subs	r2, r3, #1
 80026cc:	4193      	sbcs	r3, r2
 80026ce:	181e      	adds	r6, r3, r0
 80026d0:	4286      	cmp	r6, r0
 80026d2:	4180      	sbcs	r0, r0
 80026d4:	4240      	negs	r0, r0
 80026d6:	1809      	adds	r1, r1, r0
 80026d8:	020b      	lsls	r3, r1, #8
 80026da:	d400      	bmi.n	80026de <__aeabi_dsub+0x192>
 80026dc:	e0be      	b.n	800285c <__aeabi_dsub+0x310>
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <__aeabi_dsub+0x348>)
 80026e0:	3501      	adds	r5, #1
 80026e2:	429d      	cmp	r5, r3
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x19c>
 80026e6:	e0d2      	b.n	800288e <__aeabi_dsub+0x342>
 80026e8:	4a6b      	ldr	r2, [pc, #428]	; (8002898 <__aeabi_dsub+0x34c>)
 80026ea:	0873      	lsrs	r3, r6, #1
 80026ec:	400a      	ands	r2, r1
 80026ee:	2101      	movs	r1, #1
 80026f0:	400e      	ands	r6, r1
 80026f2:	431e      	orrs	r6, r3
 80026f4:	0851      	lsrs	r1, r2, #1
 80026f6:	07d3      	lsls	r3, r2, #31
 80026f8:	2207      	movs	r2, #7
 80026fa:	431e      	orrs	r6, r3
 80026fc:	4032      	ands	r2, r6
 80026fe:	e795      	b.n	800262c <__aeabi_dsub+0xe0>
 8002700:	001e      	movs	r6, r3
 8002702:	4316      	orrs	r6, r2
 8002704:	d000      	beq.n	8002708 <__aeabi_dsub+0x1bc>
 8002706:	e745      	b.n	8002594 <__aeabi_dsub+0x48>
 8002708:	e740      	b.n	800258c <__aeabi_dsub+0x40>
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <__aeabi_dsub+0x348>)
 800270c:	429d      	cmp	r5, r3
 800270e:	d03a      	beq.n	8002786 <__aeabi_dsub+0x23a>
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	4667      	mov	r7, ip
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431f      	orrs	r7, r3
 8002718:	46bc      	mov	ip, r7
 800271a:	2e38      	cmp	r6, #56	; 0x38
 800271c:	dd00      	ble.n	8002720 <__aeabi_dsub+0x1d4>
 800271e:	e0eb      	b.n	80028f8 <__aeabi_dsub+0x3ac>
 8002720:	2e1f      	cmp	r6, #31
 8002722:	dc00      	bgt.n	8002726 <__aeabi_dsub+0x1da>
 8002724:	e13a      	b.n	800299c <__aeabi_dsub+0x450>
 8002726:	0033      	movs	r3, r6
 8002728:	4667      	mov	r7, ip
 800272a:	3b20      	subs	r3, #32
 800272c:	40df      	lsrs	r7, r3
 800272e:	003b      	movs	r3, r7
 8002730:	2e20      	cmp	r6, #32
 8002732:	d005      	beq.n	8002740 <__aeabi_dsub+0x1f4>
 8002734:	2740      	movs	r7, #64	; 0x40
 8002736:	1bbf      	subs	r7, r7, r6
 8002738:	4666      	mov	r6, ip
 800273a:	40be      	lsls	r6, r7
 800273c:	4332      	orrs	r2, r6
 800273e:	4690      	mov	r8, r2
 8002740:	4646      	mov	r6, r8
 8002742:	1e72      	subs	r2, r6, #1
 8002744:	4196      	sbcs	r6, r2
 8002746:	4333      	orrs	r3, r6
 8002748:	e0da      	b.n	8002900 <__aeabi_dsub+0x3b4>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x204>
 800274e:	e214      	b.n	8002b7a <__aeabi_dsub+0x62e>
 8002750:	4663      	mov	r3, ip
 8002752:	4313      	orrs	r3, r2
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x20c>
 8002756:	e168      	b.n	8002a2a <__aeabi_dsub+0x4de>
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	074e      	lsls	r6, r1, #29
 800275c:	08c0      	lsrs	r0, r0, #3
 800275e:	08c9      	lsrs	r1, r1, #3
 8002760:	031b      	lsls	r3, r3, #12
 8002762:	4306      	orrs	r6, r0
 8002764:	4219      	tst	r1, r3
 8002766:	d008      	beq.n	800277a <__aeabi_dsub+0x22e>
 8002768:	4660      	mov	r0, ip
 800276a:	08c0      	lsrs	r0, r0, #3
 800276c:	4218      	tst	r0, r3
 800276e:	d104      	bne.n	800277a <__aeabi_dsub+0x22e>
 8002770:	4663      	mov	r3, ip
 8002772:	0001      	movs	r1, r0
 8002774:	08d2      	lsrs	r2, r2, #3
 8002776:	075e      	lsls	r6, r3, #29
 8002778:	4316      	orrs	r6, r2
 800277a:	00f3      	lsls	r3, r6, #3
 800277c:	4699      	mov	r9, r3
 800277e:	00c9      	lsls	r1, r1, #3
 8002780:	0f72      	lsrs	r2, r6, #29
 8002782:	4d44      	ldr	r5, [pc, #272]	; (8002894 <__aeabi_dsub+0x348>)
 8002784:	4311      	orrs	r1, r2
 8002786:	464b      	mov	r3, r9
 8002788:	08de      	lsrs	r6, r3, #3
 800278a:	4b42      	ldr	r3, [pc, #264]	; (8002894 <__aeabi_dsub+0x348>)
 800278c:	074f      	lsls	r7, r1, #29
 800278e:	4337      	orrs	r7, r6
 8002790:	08ca      	lsrs	r2, r1, #3
 8002792:	429d      	cmp	r5, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x24c>
 8002796:	e06e      	b.n	8002876 <__aeabi_dsub+0x32a>
 8002798:	0312      	lsls	r2, r2, #12
 800279a:	056d      	lsls	r5, r5, #21
 800279c:	0b12      	lsrs	r2, r2, #12
 800279e:	0d6d      	lsrs	r5, r5, #21
 80027a0:	2100      	movs	r1, #0
 80027a2:	0312      	lsls	r2, r2, #12
 80027a4:	0b13      	lsrs	r3, r2, #12
 80027a6:	0d0a      	lsrs	r2, r1, #20
 80027a8:	0512      	lsls	r2, r2, #20
 80027aa:	431a      	orrs	r2, r3
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <__aeabi_dsub+0x350>)
 80027ae:	052d      	lsls	r5, r5, #20
 80027b0:	4013      	ands	r3, r2
 80027b2:	432b      	orrs	r3, r5
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	07e4      	lsls	r4, r4, #31
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	4323      	orrs	r3, r4
 80027bc:	0038      	movs	r0, r7
 80027be:	0019      	movs	r1, r3
 80027c0:	bc3c      	pop	{r2, r3, r4, r5}
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	46a2      	mov	sl, r4
 80027c8:	46ab      	mov	fp, r5
 80027ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027cc:	4663      	mov	r3, ip
 80027ce:	4313      	orrs	r3, r2
 80027d0:	d011      	beq.n	80027f6 <__aeabi_dsub+0x2aa>
 80027d2:	1e73      	subs	r3, r6, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d000      	beq.n	80027da <__aeabi_dsub+0x28e>
 80027d8:	e107      	b.n	80029ea <__aeabi_dsub+0x49e>
 80027da:	1886      	adds	r6, r0, r2
 80027dc:	4286      	cmp	r6, r0
 80027de:	4180      	sbcs	r0, r0
 80027e0:	4461      	add	r1, ip
 80027e2:	4240      	negs	r0, r0
 80027e4:	1809      	adds	r1, r1, r0
 80027e6:	2501      	movs	r5, #1
 80027e8:	020b      	lsls	r3, r1, #8
 80027ea:	d537      	bpl.n	800285c <__aeabi_dsub+0x310>
 80027ec:	2502      	movs	r5, #2
 80027ee:	e77b      	b.n	80026e8 <__aeabi_dsub+0x19c>
 80027f0:	003e      	movs	r6, r7
 80027f2:	4661      	mov	r1, ip
 80027f4:	4691      	mov	r9, r2
 80027f6:	0035      	movs	r5, r6
 80027f8:	e7c5      	b.n	8002786 <__aeabi_dsub+0x23a>
 80027fa:	465c      	mov	r4, fp
 80027fc:	2d00      	cmp	r5, #0
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x2b6>
 8002800:	e0e1      	b.n	80029c6 <__aeabi_dsub+0x47a>
 8002802:	000b      	movs	r3, r1
 8002804:	4303      	orrs	r3, r0
 8002806:	d0f3      	beq.n	80027f0 <__aeabi_dsub+0x2a4>
 8002808:	1c73      	adds	r3, r6, #1
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x2c2>
 800280c:	e1ac      	b.n	8002b68 <__aeabi_dsub+0x61c>
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <__aeabi_dsub+0x348>)
 8002810:	429f      	cmp	r7, r3
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x2ca>
 8002814:	e13a      	b.n	8002a8c <__aeabi_dsub+0x540>
 8002816:	43f3      	mvns	r3, r6
 8002818:	2b38      	cmp	r3, #56	; 0x38
 800281a:	dd00      	ble.n	800281e <__aeabi_dsub+0x2d2>
 800281c:	e16f      	b.n	8002afe <__aeabi_dsub+0x5b2>
 800281e:	2b1f      	cmp	r3, #31
 8002820:	dd00      	ble.n	8002824 <__aeabi_dsub+0x2d8>
 8002822:	e18c      	b.n	8002b3e <__aeabi_dsub+0x5f2>
 8002824:	2520      	movs	r5, #32
 8002826:	000e      	movs	r6, r1
 8002828:	1aed      	subs	r5, r5, r3
 800282a:	40ae      	lsls	r6, r5
 800282c:	46b0      	mov	r8, r6
 800282e:	0006      	movs	r6, r0
 8002830:	46aa      	mov	sl, r5
 8002832:	40de      	lsrs	r6, r3
 8002834:	4645      	mov	r5, r8
 8002836:	4335      	orrs	r5, r6
 8002838:	002e      	movs	r6, r5
 800283a:	4655      	mov	r5, sl
 800283c:	40d9      	lsrs	r1, r3
 800283e:	40a8      	lsls	r0, r5
 8002840:	4663      	mov	r3, ip
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	1a5b      	subs	r3, r3, r1
 8002848:	469c      	mov	ip, r3
 800284a:	4330      	orrs	r0, r6
 800284c:	1a16      	subs	r6, r2, r0
 800284e:	42b2      	cmp	r2, r6
 8002850:	4192      	sbcs	r2, r2
 8002852:	4663      	mov	r3, ip
 8002854:	4252      	negs	r2, r2
 8002856:	1a99      	subs	r1, r3, r2
 8002858:	003d      	movs	r5, r7
 800285a:	e6b4      	b.n	80025c6 <__aeabi_dsub+0x7a>
 800285c:	2207      	movs	r2, #7
 800285e:	4032      	ands	r2, r6
 8002860:	2a00      	cmp	r2, #0
 8002862:	d000      	beq.n	8002866 <__aeabi_dsub+0x31a>
 8002864:	e6e4      	b.n	8002630 <__aeabi_dsub+0xe4>
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <__aeabi_dsub+0x348>)
 8002868:	08f6      	lsrs	r6, r6, #3
 800286a:	074f      	lsls	r7, r1, #29
 800286c:	4337      	orrs	r7, r6
 800286e:	08ca      	lsrs	r2, r1, #3
 8002870:	429d      	cmp	r5, r3
 8002872:	d000      	beq.n	8002876 <__aeabi_dsub+0x32a>
 8002874:	e790      	b.n	8002798 <__aeabi_dsub+0x24c>
 8002876:	003b      	movs	r3, r7
 8002878:	4313      	orrs	r3, r2
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x332>
 800287c:	e1a6      	b.n	8002bcc <__aeabi_dsub+0x680>
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	031b      	lsls	r3, r3, #12
 8002882:	431a      	orrs	r2, r3
 8002884:	0312      	lsls	r2, r2, #12
 8002886:	0b12      	lsrs	r2, r2, #12
 8002888:	4d02      	ldr	r5, [pc, #8]	; (8002894 <__aeabi_dsub+0x348>)
 800288a:	e789      	b.n	80027a0 <__aeabi_dsub+0x254>
 800288c:	0015      	movs	r5, r2
 800288e:	2200      	movs	r2, #0
 8002890:	2700      	movs	r7, #0
 8002892:	e785      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002894:	000007ff 	.word	0x000007ff
 8002898:	ff7fffff 	.word	0xff7fffff
 800289c:	800fffff 	.word	0x800fffff
 80028a0:	2e00      	cmp	r6, #0
 80028a2:	d000      	beq.n	80028a6 <__aeabi_dsub+0x35a>
 80028a4:	e0c7      	b.n	8002a36 <__aeabi_dsub+0x4ea>
 80028a6:	1c6b      	adds	r3, r5, #1
 80028a8:	055e      	lsls	r6, r3, #21
 80028aa:	0d76      	lsrs	r6, r6, #21
 80028ac:	2e01      	cmp	r6, #1
 80028ae:	dc00      	bgt.n	80028b2 <__aeabi_dsub+0x366>
 80028b0:	e0f0      	b.n	8002a94 <__aeabi_dsub+0x548>
 80028b2:	4dc8      	ldr	r5, [pc, #800]	; (8002bd4 <__aeabi_dsub+0x688>)
 80028b4:	42ab      	cmp	r3, r5
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x36e>
 80028b8:	e0b9      	b.n	8002a2e <__aeabi_dsub+0x4e2>
 80028ba:	1885      	adds	r5, r0, r2
 80028bc:	000a      	movs	r2, r1
 80028be:	4285      	cmp	r5, r0
 80028c0:	4189      	sbcs	r1, r1
 80028c2:	4462      	add	r2, ip
 80028c4:	4249      	negs	r1, r1
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	2207      	movs	r2, #7
 80028ca:	07ce      	lsls	r6, r1, #31
 80028cc:	086d      	lsrs	r5, r5, #1
 80028ce:	432e      	orrs	r6, r5
 80028d0:	0849      	lsrs	r1, r1, #1
 80028d2:	4032      	ands	r2, r6
 80028d4:	001d      	movs	r5, r3
 80028d6:	e6a9      	b.n	800262c <__aeabi_dsub+0xe0>
 80028d8:	49bf      	ldr	r1, [pc, #764]	; (8002bd8 <__aeabi_dsub+0x68c>)
 80028da:	1aed      	subs	r5, r5, r3
 80028dc:	4011      	ands	r1, r2
 80028de:	2207      	movs	r2, #7
 80028e0:	4032      	ands	r2, r6
 80028e2:	e6a3      	b.n	800262c <__aeabi_dsub+0xe0>
 80028e4:	0032      	movs	r2, r6
 80028e6:	3828      	subs	r0, #40	; 0x28
 80028e8:	4082      	lsls	r2, r0
 80028ea:	2600      	movs	r6, #0
 80028ec:	e686      	b.n	80025fc <__aeabi_dsub+0xb0>
 80028ee:	0030      	movs	r0, r6
 80028f0:	f000 fb08 	bl	8002f04 <__clzsi2>
 80028f4:	3020      	adds	r0, #32
 80028f6:	e673      	b.n	80025e0 <__aeabi_dsub+0x94>
 80028f8:	4663      	mov	r3, ip
 80028fa:	4313      	orrs	r3, r2
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	4193      	sbcs	r3, r2
 8002900:	1ac6      	subs	r6, r0, r3
 8002902:	42b0      	cmp	r0, r6
 8002904:	4180      	sbcs	r0, r0
 8002906:	4240      	negs	r0, r0
 8002908:	1a09      	subs	r1, r1, r0
 800290a:	e65c      	b.n	80025c6 <__aeabi_dsub+0x7a>
 800290c:	000e      	movs	r6, r1
 800290e:	4667      	mov	r7, ip
 8002910:	4306      	orrs	r6, r0
 8002912:	4317      	orrs	r7, r2
 8002914:	2d00      	cmp	r5, #0
 8002916:	d15e      	bne.n	80029d6 <__aeabi_dsub+0x48a>
 8002918:	2e00      	cmp	r6, #0
 800291a:	d000      	beq.n	800291e <__aeabi_dsub+0x3d2>
 800291c:	e0f3      	b.n	8002b06 <__aeabi_dsub+0x5ba>
 800291e:	2f00      	cmp	r7, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x3d8>
 8002922:	e11e      	b.n	8002b62 <__aeabi_dsub+0x616>
 8002924:	465c      	mov	r4, fp
 8002926:	4661      	mov	r1, ip
 8002928:	4691      	mov	r9, r2
 800292a:	e72c      	b.n	8002786 <__aeabi_dsub+0x23a>
 800292c:	4fa9      	ldr	r7, [pc, #676]	; (8002bd4 <__aeabi_dsub+0x688>)
 800292e:	42be      	cmp	r6, r7
 8002930:	d07b      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 8002932:	001e      	movs	r6, r3
 8002934:	e6f1      	b.n	800271a <__aeabi_dsub+0x1ce>
 8002936:	0010      	movs	r0, r2
 8002938:	3d1f      	subs	r5, #31
 800293a:	40e8      	lsrs	r0, r5
 800293c:	2b20      	cmp	r3, #32
 800293e:	d003      	beq.n	8002948 <__aeabi_dsub+0x3fc>
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	1acb      	subs	r3, r1, r3
 8002944:	409a      	lsls	r2, r3
 8002946:	4316      	orrs	r6, r2
 8002948:	1e73      	subs	r3, r6, #1
 800294a:	419e      	sbcs	r6, r3
 800294c:	2207      	movs	r2, #7
 800294e:	4306      	orrs	r6, r0
 8002950:	4032      	ands	r2, r6
 8002952:	2100      	movs	r1, #0
 8002954:	2500      	movs	r5, #0
 8002956:	e783      	b.n	8002860 <__aeabi_dsub+0x314>
 8002958:	1a16      	subs	r6, r2, r0
 800295a:	4663      	mov	r3, ip
 800295c:	42b2      	cmp	r2, r6
 800295e:	4180      	sbcs	r0, r0
 8002960:	1a59      	subs	r1, r3, r1
 8002962:	4240      	negs	r0, r0
 8002964:	1a0b      	subs	r3, r1, r0
 8002966:	4698      	mov	r8, r3
 8002968:	465c      	mov	r4, fp
 800296a:	e632      	b.n	80025d2 <__aeabi_dsub+0x86>
 800296c:	2e1f      	cmp	r6, #31
 800296e:	dd00      	ble.n	8002972 <__aeabi_dsub+0x426>
 8002970:	e0ab      	b.n	8002aca <__aeabi_dsub+0x57e>
 8002972:	2720      	movs	r7, #32
 8002974:	1bbb      	subs	r3, r7, r6
 8002976:	469a      	mov	sl, r3
 8002978:	4663      	mov	r3, ip
 800297a:	4657      	mov	r7, sl
 800297c:	40bb      	lsls	r3, r7
 800297e:	4699      	mov	r9, r3
 8002980:	0013      	movs	r3, r2
 8002982:	464f      	mov	r7, r9
 8002984:	40f3      	lsrs	r3, r6
 8002986:	431f      	orrs	r7, r3
 8002988:	003b      	movs	r3, r7
 800298a:	4657      	mov	r7, sl
 800298c:	40ba      	lsls	r2, r7
 800298e:	1e57      	subs	r7, r2, #1
 8002990:	41ba      	sbcs	r2, r7
 8002992:	4313      	orrs	r3, r2
 8002994:	4662      	mov	r2, ip
 8002996:	40f2      	lsrs	r2, r6
 8002998:	1889      	adds	r1, r1, r2
 800299a:	e698      	b.n	80026ce <__aeabi_dsub+0x182>
 800299c:	2720      	movs	r7, #32
 800299e:	1bbb      	subs	r3, r7, r6
 80029a0:	469a      	mov	sl, r3
 80029a2:	4663      	mov	r3, ip
 80029a4:	4657      	mov	r7, sl
 80029a6:	40bb      	lsls	r3, r7
 80029a8:	4699      	mov	r9, r3
 80029aa:	0013      	movs	r3, r2
 80029ac:	464f      	mov	r7, r9
 80029ae:	40f3      	lsrs	r3, r6
 80029b0:	431f      	orrs	r7, r3
 80029b2:	003b      	movs	r3, r7
 80029b4:	4657      	mov	r7, sl
 80029b6:	40ba      	lsls	r2, r7
 80029b8:	1e57      	subs	r7, r2, #1
 80029ba:	41ba      	sbcs	r2, r7
 80029bc:	4313      	orrs	r3, r2
 80029be:	4662      	mov	r2, ip
 80029c0:	40f2      	lsrs	r2, r6
 80029c2:	1a89      	subs	r1, r1, r2
 80029c4:	e79c      	b.n	8002900 <__aeabi_dsub+0x3b4>
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029c8:	429f      	cmp	r7, r3
 80029ca:	d05f      	beq.n	8002a8c <__aeabi_dsub+0x540>
 80029cc:	2580      	movs	r5, #128	; 0x80
 80029ce:	042d      	lsls	r5, r5, #16
 80029d0:	4273      	negs	r3, r6
 80029d2:	4329      	orrs	r1, r5
 80029d4:	e720      	b.n	8002818 <__aeabi_dsub+0x2cc>
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	d10c      	bne.n	80029f4 <__aeabi_dsub+0x4a8>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x494>
 80029de:	e0d0      	b.n	8002b82 <__aeabi_dsub+0x636>
 80029e0:	465c      	mov	r4, fp
 80029e2:	4661      	mov	r1, ip
 80029e4:	4691      	mov	r9, r2
 80029e6:	4d7b      	ldr	r5, [pc, #492]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029e8:	e6cd      	b.n	8002786 <__aeabi_dsub+0x23a>
 80029ea:	4f7a      	ldr	r7, [pc, #488]	; (8002bd4 <__aeabi_dsub+0x688>)
 80029ec:	42be      	cmp	r6, r7
 80029ee:	d01c      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 80029f0:	001e      	movs	r6, r3
 80029f2:	e665      	b.n	80026c0 <__aeabi_dsub+0x174>
 80029f4:	2f00      	cmp	r7, #0
 80029f6:	d018      	beq.n	8002a2a <__aeabi_dsub+0x4de>
 80029f8:	08c0      	lsrs	r0, r0, #3
 80029fa:	074e      	lsls	r6, r1, #29
 80029fc:	4306      	orrs	r6, r0
 80029fe:	2080      	movs	r0, #128	; 0x80
 8002a00:	08c9      	lsrs	r1, r1, #3
 8002a02:	0300      	lsls	r0, r0, #12
 8002a04:	4201      	tst	r1, r0
 8002a06:	d008      	beq.n	8002a1a <__aeabi_dsub+0x4ce>
 8002a08:	4663      	mov	r3, ip
 8002a0a:	08dc      	lsrs	r4, r3, #3
 8002a0c:	4204      	tst	r4, r0
 8002a0e:	d104      	bne.n	8002a1a <__aeabi_dsub+0x4ce>
 8002a10:	0021      	movs	r1, r4
 8002a12:	46da      	mov	sl, fp
 8002a14:	08d2      	lsrs	r2, r2, #3
 8002a16:	075e      	lsls	r6, r3, #29
 8002a18:	4316      	orrs	r6, r2
 8002a1a:	00f3      	lsls	r3, r6, #3
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	2401      	movs	r4, #1
 8002a20:	4653      	mov	r3, sl
 8002a22:	00c9      	lsls	r1, r1, #3
 8002a24:	0f72      	lsrs	r2, r6, #29
 8002a26:	4311      	orrs	r1, r2
 8002a28:	401c      	ands	r4, r3
 8002a2a:	4d6a      	ldr	r5, [pc, #424]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002a2c:	e6ab      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002a2e:	001d      	movs	r5, r3
 8002a30:	2200      	movs	r2, #0
 8002a32:	2700      	movs	r7, #0
 8002a34:	e6b4      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	d159      	bne.n	8002aee <__aeabi_dsub+0x5a2>
 8002a3a:	000b      	movs	r3, r1
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	d100      	bne.n	8002a42 <__aeabi_dsub+0x4f6>
 8002a40:	e6d6      	b.n	80027f0 <__aeabi_dsub+0x2a4>
 8002a42:	1c73      	adds	r3, r6, #1
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x4fc>
 8002a46:	e0b2      	b.n	8002bae <__aeabi_dsub+0x662>
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002a4a:	429f      	cmp	r7, r3
 8002a4c:	d01e      	beq.n	8002a8c <__aeabi_dsub+0x540>
 8002a4e:	43f3      	mvns	r3, r6
 8002a50:	2b38      	cmp	r3, #56	; 0x38
 8002a52:	dc6f      	bgt.n	8002b34 <__aeabi_dsub+0x5e8>
 8002a54:	2b1f      	cmp	r3, #31
 8002a56:	dd00      	ble.n	8002a5a <__aeabi_dsub+0x50e>
 8002a58:	e097      	b.n	8002b8a <__aeabi_dsub+0x63e>
 8002a5a:	2520      	movs	r5, #32
 8002a5c:	000e      	movs	r6, r1
 8002a5e:	1aed      	subs	r5, r5, r3
 8002a60:	40ae      	lsls	r6, r5
 8002a62:	46b0      	mov	r8, r6
 8002a64:	0006      	movs	r6, r0
 8002a66:	46aa      	mov	sl, r5
 8002a68:	40de      	lsrs	r6, r3
 8002a6a:	4645      	mov	r5, r8
 8002a6c:	4335      	orrs	r5, r6
 8002a6e:	002e      	movs	r6, r5
 8002a70:	4655      	mov	r5, sl
 8002a72:	40a8      	lsls	r0, r5
 8002a74:	40d9      	lsrs	r1, r3
 8002a76:	1e45      	subs	r5, r0, #1
 8002a78:	41a8      	sbcs	r0, r5
 8002a7a:	448c      	add	ip, r1
 8002a7c:	4306      	orrs	r6, r0
 8002a7e:	18b6      	adds	r6, r6, r2
 8002a80:	4296      	cmp	r6, r2
 8002a82:	4192      	sbcs	r2, r2
 8002a84:	4251      	negs	r1, r2
 8002a86:	4461      	add	r1, ip
 8002a88:	003d      	movs	r5, r7
 8002a8a:	e625      	b.n	80026d8 <__aeabi_dsub+0x18c>
 8002a8c:	003d      	movs	r5, r7
 8002a8e:	4661      	mov	r1, ip
 8002a90:	4691      	mov	r9, r2
 8002a92:	e678      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002a94:	000b      	movs	r3, r1
 8002a96:	4303      	orrs	r3, r0
 8002a98:	2d00      	cmp	r5, #0
 8002a9a:	d000      	beq.n	8002a9e <__aeabi_dsub+0x552>
 8002a9c:	e655      	b.n	800274a <__aeabi_dsub+0x1fe>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f5      	beq.n	8002a8e <__aeabi_dsub+0x542>
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x55e>
 8002aa8:	e66d      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002aaa:	1886      	adds	r6, r0, r2
 8002aac:	4286      	cmp	r6, r0
 8002aae:	4180      	sbcs	r0, r0
 8002ab0:	4461      	add	r1, ip
 8002ab2:	4240      	negs	r0, r0
 8002ab4:	1809      	adds	r1, r1, r0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	020b      	lsls	r3, r1, #8
 8002aba:	d400      	bmi.n	8002abe <__aeabi_dsub+0x572>
 8002abc:	e6d0      	b.n	8002860 <__aeabi_dsub+0x314>
 8002abe:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <__aeabi_dsub+0x68c>)
 8002ac0:	3501      	adds	r5, #1
 8002ac2:	4019      	ands	r1, r3
 8002ac4:	e5b2      	b.n	800262c <__aeabi_dsub+0xe0>
 8002ac6:	46b1      	mov	r9, r6
 8002ac8:	e65d      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002aca:	0033      	movs	r3, r6
 8002acc:	4667      	mov	r7, ip
 8002ace:	3b20      	subs	r3, #32
 8002ad0:	40df      	lsrs	r7, r3
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	2e20      	cmp	r6, #32
 8002ad6:	d005      	beq.n	8002ae4 <__aeabi_dsub+0x598>
 8002ad8:	2740      	movs	r7, #64	; 0x40
 8002ada:	1bbf      	subs	r7, r7, r6
 8002adc:	4666      	mov	r6, ip
 8002ade:	40be      	lsls	r6, r7
 8002ae0:	4332      	orrs	r2, r6
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4646      	mov	r6, r8
 8002ae6:	1e72      	subs	r2, r6, #1
 8002ae8:	4196      	sbcs	r6, r2
 8002aea:	4333      	orrs	r3, r6
 8002aec:	e5ef      	b.n	80026ce <__aeabi_dsub+0x182>
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002af0:	429f      	cmp	r7, r3
 8002af2:	d0cb      	beq.n	8002a8c <__aeabi_dsub+0x540>
 8002af4:	2580      	movs	r5, #128	; 0x80
 8002af6:	042d      	lsls	r5, r5, #16
 8002af8:	4273      	negs	r3, r6
 8002afa:	4329      	orrs	r1, r5
 8002afc:	e7a8      	b.n	8002a50 <__aeabi_dsub+0x504>
 8002afe:	4308      	orrs	r0, r1
 8002b00:	1e41      	subs	r1, r0, #1
 8002b02:	4188      	sbcs	r0, r1
 8002b04:	e6a2      	b.n	800284c <__aeabi_dsub+0x300>
 8002b06:	2f00      	cmp	r7, #0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x5c0>
 8002b0a:	e63c      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	1a86      	subs	r6, r0, r2
 8002b10:	1acf      	subs	r7, r1, r3
 8002b12:	42b0      	cmp	r0, r6
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	425b      	negs	r3, r3
 8002b18:	1afb      	subs	r3, r7, r3
 8002b1a:	4698      	mov	r8, r3
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	d54e      	bpl.n	8002bbe <__aeabi_dsub+0x672>
 8002b20:	1a16      	subs	r6, r2, r0
 8002b22:	4663      	mov	r3, ip
 8002b24:	42b2      	cmp	r2, r6
 8002b26:	4192      	sbcs	r2, r2
 8002b28:	1a59      	subs	r1, r3, r1
 8002b2a:	4252      	negs	r2, r2
 8002b2c:	1a89      	subs	r1, r1, r2
 8002b2e:	465c      	mov	r4, fp
 8002b30:	2200      	movs	r2, #0
 8002b32:	e57b      	b.n	800262c <__aeabi_dsub+0xe0>
 8002b34:	4301      	orrs	r1, r0
 8002b36:	000e      	movs	r6, r1
 8002b38:	1e71      	subs	r1, r6, #1
 8002b3a:	418e      	sbcs	r6, r1
 8002b3c:	e79f      	b.n	8002a7e <__aeabi_dsub+0x532>
 8002b3e:	001d      	movs	r5, r3
 8002b40:	000e      	movs	r6, r1
 8002b42:	3d20      	subs	r5, #32
 8002b44:	40ee      	lsrs	r6, r5
 8002b46:	46b0      	mov	r8, r6
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d004      	beq.n	8002b56 <__aeabi_dsub+0x60a>
 8002b4c:	2540      	movs	r5, #64	; 0x40
 8002b4e:	1aeb      	subs	r3, r5, r3
 8002b50:	4099      	lsls	r1, r3
 8002b52:	4308      	orrs	r0, r1
 8002b54:	4681      	mov	r9, r0
 8002b56:	4648      	mov	r0, r9
 8002b58:	4643      	mov	r3, r8
 8002b5a:	1e41      	subs	r1, r0, #1
 8002b5c:	4188      	sbcs	r0, r1
 8002b5e:	4318      	orrs	r0, r3
 8002b60:	e674      	b.n	800284c <__aeabi_dsub+0x300>
 8002b62:	2200      	movs	r2, #0
 8002b64:	2400      	movs	r4, #0
 8002b66:	e617      	b.n	8002798 <__aeabi_dsub+0x24c>
 8002b68:	1a16      	subs	r6, r2, r0
 8002b6a:	4663      	mov	r3, ip
 8002b6c:	42b2      	cmp	r2, r6
 8002b6e:	4192      	sbcs	r2, r2
 8002b70:	1a59      	subs	r1, r3, r1
 8002b72:	4252      	negs	r2, r2
 8002b74:	1a89      	subs	r1, r1, r2
 8002b76:	003d      	movs	r5, r7
 8002b78:	e525      	b.n	80025c6 <__aeabi_dsub+0x7a>
 8002b7a:	4661      	mov	r1, ip
 8002b7c:	4691      	mov	r9, r2
 8002b7e:	4d15      	ldr	r5, [pc, #84]	; (8002bd4 <__aeabi_dsub+0x688>)
 8002b80:	e601      	b.n	8002786 <__aeabi_dsub+0x23a>
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	2400      	movs	r4, #0
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	e679      	b.n	800287e <__aeabi_dsub+0x332>
 8002b8a:	001d      	movs	r5, r3
 8002b8c:	000e      	movs	r6, r1
 8002b8e:	3d20      	subs	r5, #32
 8002b90:	40ee      	lsrs	r6, r5
 8002b92:	46b0      	mov	r8, r6
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d004      	beq.n	8002ba2 <__aeabi_dsub+0x656>
 8002b98:	2540      	movs	r5, #64	; 0x40
 8002b9a:	1aeb      	subs	r3, r5, r3
 8002b9c:	4099      	lsls	r1, r3
 8002b9e:	4308      	orrs	r0, r1
 8002ba0:	4681      	mov	r9, r0
 8002ba2:	464e      	mov	r6, r9
 8002ba4:	4643      	mov	r3, r8
 8002ba6:	1e71      	subs	r1, r6, #1
 8002ba8:	418e      	sbcs	r6, r1
 8002baa:	431e      	orrs	r6, r3
 8002bac:	e767      	b.n	8002a7e <__aeabi_dsub+0x532>
 8002bae:	1886      	adds	r6, r0, r2
 8002bb0:	4296      	cmp	r6, r2
 8002bb2:	419b      	sbcs	r3, r3
 8002bb4:	4461      	add	r1, ip
 8002bb6:	425b      	negs	r3, r3
 8002bb8:	18c9      	adds	r1, r1, r3
 8002bba:	003d      	movs	r5, r7
 8002bbc:	e58c      	b.n	80026d8 <__aeabi_dsub+0x18c>
 8002bbe:	4647      	mov	r7, r8
 8002bc0:	4337      	orrs	r7, r6
 8002bc2:	d0ce      	beq.n	8002b62 <__aeabi_dsub+0x616>
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	4641      	mov	r1, r8
 8002bc8:	4032      	ands	r2, r6
 8002bca:	e649      	b.n	8002860 <__aeabi_dsub+0x314>
 8002bcc:	2700      	movs	r7, #0
 8002bce:	003a      	movs	r2, r7
 8002bd0:	e5e6      	b.n	80027a0 <__aeabi_dsub+0x254>
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	000007ff 	.word	0x000007ff
 8002bd8:	ff7fffff 	.word	0xff7fffff

08002bdc <__aeabi_dcmpun>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4e0c      	ldr	r6, [pc, #48]	; (8002c10 <__aeabi_dcmpun+0x34>)
 8002be0:	030d      	lsls	r5, r1, #12
 8002be2:	031c      	lsls	r4, r3, #12
 8002be4:	0049      	lsls	r1, r1, #1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	0b2d      	lsrs	r5, r5, #12
 8002bea:	0d49      	lsrs	r1, r1, #21
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	0d5b      	lsrs	r3, r3, #21
 8002bf0:	42b1      	cmp	r1, r6
 8002bf2:	d008      	beq.n	8002c06 <__aeabi_dcmpun+0x2a>
 8002bf4:	4906      	ldr	r1, [pc, #24]	; (8002c10 <__aeabi_dcmpun+0x34>)
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	428b      	cmp	r3, r1
 8002bfa:	d103      	bne.n	8002c04 <__aeabi_dcmpun+0x28>
 8002bfc:	4314      	orrs	r4, r2
 8002bfe:	0020      	movs	r0, r4
 8002c00:	1e44      	subs	r4, r0, #1
 8002c02:	41a0      	sbcs	r0, r4
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	4305      	orrs	r5, r0
 8002c08:	2001      	movs	r0, #1
 8002c0a:	2d00      	cmp	r5, #0
 8002c0c:	d1fa      	bne.n	8002c04 <__aeabi_dcmpun+0x28>
 8002c0e:	e7f1      	b.n	8002bf4 <__aeabi_dcmpun+0x18>
 8002c10:	000007ff 	.word	0x000007ff

08002c14 <__aeabi_d2iz>:
 8002c14:	b530      	push	{r4, r5, lr}
 8002c16:	4d14      	ldr	r5, [pc, #80]	; (8002c68 <__aeabi_d2iz+0x54>)
 8002c18:	030a      	lsls	r2, r1, #12
 8002c1a:	004b      	lsls	r3, r1, #1
 8002c1c:	0b12      	lsrs	r2, r2, #12
 8002c1e:	0d5b      	lsrs	r3, r3, #21
 8002c20:	0fc9      	lsrs	r1, r1, #31
 8002c22:	2400      	movs	r4, #0
 8002c24:	42ab      	cmp	r3, r5
 8002c26:	dd11      	ble.n	8002c4c <__aeabi_d2iz+0x38>
 8002c28:	4c10      	ldr	r4, [pc, #64]	; (8002c6c <__aeabi_d2iz+0x58>)
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	dc10      	bgt.n	8002c50 <__aeabi_d2iz+0x3c>
 8002c2e:	2480      	movs	r4, #128	; 0x80
 8002c30:	0364      	lsls	r4, r4, #13
 8002c32:	4322      	orrs	r2, r4
 8002c34:	4c0e      	ldr	r4, [pc, #56]	; (8002c70 <__aeabi_d2iz+0x5c>)
 8002c36:	1ae4      	subs	r4, r4, r3
 8002c38:	2c1f      	cmp	r4, #31
 8002c3a:	dd0c      	ble.n	8002c56 <__aeabi_d2iz+0x42>
 8002c3c:	480d      	ldr	r0, [pc, #52]	; (8002c74 <__aeabi_d2iz+0x60>)
 8002c3e:	1ac3      	subs	r3, r0, r3
 8002c40:	40da      	lsrs	r2, r3
 8002c42:	0013      	movs	r3, r2
 8002c44:	425c      	negs	r4, r3
 8002c46:	2900      	cmp	r1, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_d2iz+0x38>
 8002c4a:	001c      	movs	r4, r3
 8002c4c:	0020      	movs	r0, r4
 8002c4e:	bd30      	pop	{r4, r5, pc}
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <__aeabi_d2iz+0x64>)
 8002c52:	18cc      	adds	r4, r1, r3
 8002c54:	e7fa      	b.n	8002c4c <__aeabi_d2iz+0x38>
 8002c56:	4d09      	ldr	r5, [pc, #36]	; (8002c7c <__aeabi_d2iz+0x68>)
 8002c58:	40e0      	lsrs	r0, r4
 8002c5a:	46ac      	mov	ip, r5
 8002c5c:	4463      	add	r3, ip
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	0013      	movs	r3, r2
 8002c62:	4303      	orrs	r3, r0
 8002c64:	e7ee      	b.n	8002c44 <__aeabi_d2iz+0x30>
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	000003fe 	.word	0x000003fe
 8002c6c:	0000041d 	.word	0x0000041d
 8002c70:	00000433 	.word	0x00000433
 8002c74:	00000413 	.word	0x00000413
 8002c78:	7fffffff 	.word	0x7fffffff
 8002c7c:	fffffbed 	.word	0xfffffbed

08002c80 <__aeabi_i2d>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d02d      	beq.n	8002ce2 <__aeabi_i2d+0x62>
 8002c86:	17c3      	asrs	r3, r0, #31
 8002c88:	18c5      	adds	r5, r0, r3
 8002c8a:	405d      	eors	r5, r3
 8002c8c:	0fc4      	lsrs	r4, r0, #31
 8002c8e:	0028      	movs	r0, r5
 8002c90:	f000 f938 	bl	8002f04 <__clzsi2>
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <__aeabi_i2d+0x6c>)
 8002c96:	1a1b      	subs	r3, r3, r0
 8002c98:	055b      	lsls	r3, r3, #21
 8002c9a:	0d5b      	lsrs	r3, r3, #21
 8002c9c:	280a      	cmp	r0, #10
 8002c9e:	dd15      	ble.n	8002ccc <__aeabi_i2d+0x4c>
 8002ca0:	380b      	subs	r0, #11
 8002ca2:	4085      	lsls	r5, r0
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	032d      	lsls	r5, r5, #12
 8002ca8:	0b2d      	lsrs	r5, r5, #12
 8002caa:	2100      	movs	r1, #0
 8002cac:	0010      	movs	r0, r2
 8002cae:	032d      	lsls	r5, r5, #12
 8002cb0:	0d0a      	lsrs	r2, r1, #20
 8002cb2:	0b2d      	lsrs	r5, r5, #12
 8002cb4:	0512      	lsls	r2, r2, #20
 8002cb6:	432a      	orrs	r2, r5
 8002cb8:	4d0d      	ldr	r5, [pc, #52]	; (8002cf0 <__aeabi_i2d+0x70>)
 8002cba:	051b      	lsls	r3, r3, #20
 8002cbc:	402a      	ands	r2, r5
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	07e4      	lsls	r4, r4, #31
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	0019      	movs	r1, r3
 8002cca:	bd70      	pop	{r4, r5, r6, pc}
 8002ccc:	0002      	movs	r2, r0
 8002cce:	0029      	movs	r1, r5
 8002cd0:	3215      	adds	r2, #21
 8002cd2:	4091      	lsls	r1, r2
 8002cd4:	000a      	movs	r2, r1
 8002cd6:	210b      	movs	r1, #11
 8002cd8:	1a08      	subs	r0, r1, r0
 8002cda:	40c5      	lsrs	r5, r0
 8002cdc:	032d      	lsls	r5, r5, #12
 8002cde:	0b2d      	lsrs	r5, r5, #12
 8002ce0:	e7e3      	b.n	8002caa <__aeabi_i2d+0x2a>
 8002ce2:	2400      	movs	r4, #0
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	2200      	movs	r2, #0
 8002cea:	e7de      	b.n	8002caa <__aeabi_i2d+0x2a>
 8002cec:	0000041e 	.word	0x0000041e
 8002cf0:	800fffff 	.word	0x800fffff

08002cf4 <__aeabi_ui2d>:
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	1e04      	subs	r4, r0, #0
 8002cf8:	d025      	beq.n	8002d46 <__aeabi_ui2d+0x52>
 8002cfa:	f000 f903 	bl	8002f04 <__clzsi2>
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <__aeabi_ui2d+0x5c>)
 8002d00:	1a1b      	subs	r3, r3, r0
 8002d02:	055b      	lsls	r3, r3, #21
 8002d04:	0d5b      	lsrs	r3, r3, #21
 8002d06:	280a      	cmp	r0, #10
 8002d08:	dd12      	ble.n	8002d30 <__aeabi_ui2d+0x3c>
 8002d0a:	380b      	subs	r0, #11
 8002d0c:	4084      	lsls	r4, r0
 8002d0e:	2200      	movs	r2, #0
 8002d10:	0324      	lsls	r4, r4, #12
 8002d12:	0b24      	lsrs	r4, r4, #12
 8002d14:	2100      	movs	r1, #0
 8002d16:	0010      	movs	r0, r2
 8002d18:	0324      	lsls	r4, r4, #12
 8002d1a:	0d0a      	lsrs	r2, r1, #20
 8002d1c:	0b24      	lsrs	r4, r4, #12
 8002d1e:	0512      	lsls	r2, r2, #20
 8002d20:	4322      	orrs	r2, r4
 8002d22:	4c0c      	ldr	r4, [pc, #48]	; (8002d54 <__aeabi_ui2d+0x60>)
 8002d24:	051b      	lsls	r3, r3, #20
 8002d26:	4022      	ands	r2, r4
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	0859      	lsrs	r1, r3, #1
 8002d2e:	bd10      	pop	{r4, pc}
 8002d30:	0002      	movs	r2, r0
 8002d32:	0021      	movs	r1, r4
 8002d34:	3215      	adds	r2, #21
 8002d36:	4091      	lsls	r1, r2
 8002d38:	000a      	movs	r2, r1
 8002d3a:	210b      	movs	r1, #11
 8002d3c:	1a08      	subs	r0, r1, r0
 8002d3e:	40c4      	lsrs	r4, r0
 8002d40:	0324      	lsls	r4, r4, #12
 8002d42:	0b24      	lsrs	r4, r4, #12
 8002d44:	e7e6      	b.n	8002d14 <__aeabi_ui2d+0x20>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2400      	movs	r4, #0
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	e7e2      	b.n	8002d14 <__aeabi_ui2d+0x20>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	0000041e 	.word	0x0000041e
 8002d54:	800fffff 	.word	0x800fffff

08002d58 <__aeabi_f2d>:
 8002d58:	0041      	lsls	r1, r0, #1
 8002d5a:	0e09      	lsrs	r1, r1, #24
 8002d5c:	1c4b      	adds	r3, r1, #1
 8002d5e:	b570      	push	{r4, r5, r6, lr}
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	0246      	lsls	r6, r0, #9
 8002d64:	0a75      	lsrs	r5, r6, #9
 8002d66:	0fc4      	lsrs	r4, r0, #31
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	dd14      	ble.n	8002d96 <__aeabi_f2d+0x3e>
 8002d6c:	23e0      	movs	r3, #224	; 0xe0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	076d      	lsls	r5, r5, #29
 8002d72:	0b36      	lsrs	r6, r6, #12
 8002d74:	18cb      	adds	r3, r1, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	0d0a      	lsrs	r2, r1, #20
 8002d7a:	0028      	movs	r0, r5
 8002d7c:	0512      	lsls	r2, r2, #20
 8002d7e:	4d1c      	ldr	r5, [pc, #112]	; (8002df0 <__aeabi_f2d+0x98>)
 8002d80:	4332      	orrs	r2, r6
 8002d82:	055b      	lsls	r3, r3, #21
 8002d84:	402a      	ands	r2, r5
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	07e4      	lsls	r4, r4, #31
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	4323      	orrs	r3, r4
 8002d92:	0019      	movs	r1, r3
 8002d94:	bd70      	pop	{r4, r5, r6, pc}
 8002d96:	2900      	cmp	r1, #0
 8002d98:	d114      	bne.n	8002dc4 <__aeabi_f2d+0x6c>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d01e      	beq.n	8002ddc <__aeabi_f2d+0x84>
 8002d9e:	0028      	movs	r0, r5
 8002da0:	f000 f8b0 	bl	8002f04 <__clzsi2>
 8002da4:	280a      	cmp	r0, #10
 8002da6:	dc1c      	bgt.n	8002de2 <__aeabi_f2d+0x8a>
 8002da8:	230b      	movs	r3, #11
 8002daa:	002a      	movs	r2, r5
 8002dac:	1a1b      	subs	r3, r3, r0
 8002dae:	40da      	lsrs	r2, r3
 8002db0:	0003      	movs	r3, r0
 8002db2:	3315      	adds	r3, #21
 8002db4:	409d      	lsls	r5, r3
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <__aeabi_f2d+0x9c>)
 8002db8:	0312      	lsls	r2, r2, #12
 8002dba:	1a1b      	subs	r3, r3, r0
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	0b16      	lsrs	r6, r2, #12
 8002dc0:	0d5b      	lsrs	r3, r3, #21
 8002dc2:	e7d8      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002dc4:	2d00      	cmp	r5, #0
 8002dc6:	d006      	beq.n	8002dd6 <__aeabi_f2d+0x7e>
 8002dc8:	0b32      	lsrs	r2, r6, #12
 8002dca:	2680      	movs	r6, #128	; 0x80
 8002dcc:	0336      	lsls	r6, r6, #12
 8002dce:	076d      	lsls	r5, r5, #29
 8002dd0:	4316      	orrs	r6, r2
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <__aeabi_f2d+0xa0>)
 8002dd4:	e7cf      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <__aeabi_f2d+0xa0>)
 8002dd8:	2600      	movs	r6, #0
 8002dda:	e7cc      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2600      	movs	r6, #0
 8002de0:	e7c9      	b.n	8002d76 <__aeabi_f2d+0x1e>
 8002de2:	0003      	movs	r3, r0
 8002de4:	002a      	movs	r2, r5
 8002de6:	3b0b      	subs	r3, #11
 8002de8:	409a      	lsls	r2, r3
 8002dea:	2500      	movs	r5, #0
 8002dec:	e7e3      	b.n	8002db6 <__aeabi_f2d+0x5e>
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	800fffff 	.word	0x800fffff
 8002df4:	00000389 	.word	0x00000389
 8002df8:	000007ff 	.word	0x000007ff

08002dfc <__aeabi_d2f>:
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	004c      	lsls	r4, r1, #1
 8002e00:	0d64      	lsrs	r4, r4, #21
 8002e02:	030b      	lsls	r3, r1, #12
 8002e04:	1c62      	adds	r2, r4, #1
 8002e06:	0a5b      	lsrs	r3, r3, #9
 8002e08:	0f46      	lsrs	r6, r0, #29
 8002e0a:	0552      	lsls	r2, r2, #21
 8002e0c:	0fc9      	lsrs	r1, r1, #31
 8002e0e:	431e      	orrs	r6, r3
 8002e10:	00c5      	lsls	r5, r0, #3
 8002e12:	0d52      	lsrs	r2, r2, #21
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	dd29      	ble.n	8002e6c <__aeabi_d2f+0x70>
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <__aeabi_d2f+0xfc>)
 8002e1a:	18e7      	adds	r7, r4, r3
 8002e1c:	2ffe      	cmp	r7, #254	; 0xfe
 8002e1e:	dc1c      	bgt.n	8002e5a <__aeabi_d2f+0x5e>
 8002e20:	2f00      	cmp	r7, #0
 8002e22:	dd3b      	ble.n	8002e9c <__aeabi_d2f+0xa0>
 8002e24:	0180      	lsls	r0, r0, #6
 8002e26:	1e43      	subs	r3, r0, #1
 8002e28:	4198      	sbcs	r0, r3
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	00f3      	lsls	r3, r6, #3
 8002e2e:	0f6d      	lsrs	r5, r5, #29
 8002e30:	4303      	orrs	r3, r0
 8002e32:	432b      	orrs	r3, r5
 8002e34:	401a      	ands	r2, r3
 8002e36:	2a00      	cmp	r2, #0
 8002e38:	d004      	beq.n	8002e44 <__aeabi_d2f+0x48>
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	2a04      	cmp	r2, #4
 8002e40:	d000      	beq.n	8002e44 <__aeabi_d2f+0x48>
 8002e42:	3304      	adds	r3, #4
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	04d2      	lsls	r2, r2, #19
 8002e48:	401a      	ands	r2, r3
 8002e4a:	d024      	beq.n	8002e96 <__aeabi_d2f+0x9a>
 8002e4c:	3701      	adds	r7, #1
 8002e4e:	b2fa      	uxtb	r2, r7
 8002e50:	2fff      	cmp	r7, #255	; 0xff
 8002e52:	d002      	beq.n	8002e5a <__aeabi_d2f+0x5e>
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	0a58      	lsrs	r0, r3, #9
 8002e58:	e001      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	0240      	lsls	r0, r0, #9
 8002e60:	05d2      	lsls	r2, r2, #23
 8002e62:	0a40      	lsrs	r0, r0, #9
 8002e64:	07c9      	lsls	r1, r1, #31
 8002e66:	4310      	orrs	r0, r2
 8002e68:	4308      	orrs	r0, r1
 8002e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6c:	4335      	orrs	r5, r6
 8002e6e:	2c00      	cmp	r4, #0
 8002e70:	d104      	bne.n	8002e7c <__aeabi_d2f+0x80>
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	d10a      	bne.n	8002e8c <__aeabi_d2f+0x90>
 8002e76:	2200      	movs	r2, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e7f0      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e7c:	2d00      	cmp	r5, #0
 8002e7e:	d0ec      	beq.n	8002e5a <__aeabi_d2f+0x5e>
 8002e80:	2080      	movs	r0, #128	; 0x80
 8002e82:	03c0      	lsls	r0, r0, #15
 8002e84:	4330      	orrs	r0, r6
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	e7e9      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	025b      	lsls	r3, r3, #9
 8002e90:	0a58      	lsrs	r0, r3, #9
 8002e92:	b2e2      	uxtb	r2, r4
 8002e94:	e7e3      	b.n	8002e5e <__aeabi_d2f+0x62>
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	003c      	movs	r4, r7
 8002e9a:	e7f8      	b.n	8002e8e <__aeabi_d2f+0x92>
 8002e9c:	003b      	movs	r3, r7
 8002e9e:	3317      	adds	r3, #23
 8002ea0:	dbf3      	blt.n	8002e8a <__aeabi_d2f+0x8e>
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	4333      	orrs	r3, r6
 8002ea8:	261e      	movs	r6, #30
 8002eaa:	1bf6      	subs	r6, r6, r7
 8002eac:	2e1f      	cmp	r6, #31
 8002eae:	dd14      	ble.n	8002eda <__aeabi_d2f+0xde>
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4252      	negs	r2, r2
 8002eb4:	1bd7      	subs	r7, r2, r7
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	40fa      	lsrs	r2, r7
 8002eba:	0017      	movs	r7, r2
 8002ebc:	2e20      	cmp	r6, #32
 8002ebe:	d004      	beq.n	8002eca <__aeabi_d2f+0xce>
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <__aeabi_d2f+0x100>)
 8002ec2:	4694      	mov	ip, r2
 8002ec4:	4464      	add	r4, ip
 8002ec6:	40a3      	lsls	r3, r4
 8002ec8:	431d      	orrs	r5, r3
 8002eca:	002b      	movs	r3, r5
 8002ecc:	1e5d      	subs	r5, r3, #1
 8002ece:	41ab      	sbcs	r3, r5
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	433b      	orrs	r3, r7
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	2700      	movs	r7, #0
 8002ed8:	e7ad      	b.n	8002e36 <__aeabi_d2f+0x3a>
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <__aeabi_d2f+0x104>)
 8002edc:	0028      	movs	r0, r5
 8002ede:	18a2      	adds	r2, r4, r2
 8002ee0:	4095      	lsls	r5, r2
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	1e6c      	subs	r4, r5, #1
 8002ee6:	41a5      	sbcs	r5, r4
 8002ee8:	40f0      	lsrs	r0, r6
 8002eea:	2207      	movs	r2, #7
 8002eec:	432b      	orrs	r3, r5
 8002eee:	4303      	orrs	r3, r0
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	2700      	movs	r7, #0
 8002ef4:	e79f      	b.n	8002e36 <__aeabi_d2f+0x3a>
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	fffffc80 	.word	0xfffffc80
 8002efc:	fffffca2 	.word	0xfffffca2
 8002f00:	fffffc82 	.word	0xfffffc82

08002f04 <__clzsi2>:
 8002f04:	211c      	movs	r1, #28
 8002f06:	2301      	movs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	4298      	cmp	r0, r3
 8002f0c:	d301      	bcc.n	8002f12 <__clzsi2+0xe>
 8002f0e:	0c00      	lsrs	r0, r0, #16
 8002f10:	3910      	subs	r1, #16
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d301      	bcc.n	8002f1c <__clzsi2+0x18>
 8002f18:	0a00      	lsrs	r0, r0, #8
 8002f1a:	3908      	subs	r1, #8
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	4298      	cmp	r0, r3
 8002f20:	d301      	bcc.n	8002f26 <__clzsi2+0x22>
 8002f22:	0900      	lsrs	r0, r0, #4
 8002f24:	3904      	subs	r1, #4
 8002f26:	a202      	add	r2, pc, #8	; (adr r2, 8002f30 <__clzsi2+0x2c>)
 8002f28:	5c10      	ldrb	r0, [r2, r0]
 8002f2a:	1840      	adds	r0, r0, r1
 8002f2c:	4770      	bx	lr
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	02020304 	.word	0x02020304
 8002f34:	01010101 	.word	0x01010101
	...

08002f40 <__clzdi2>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	2900      	cmp	r1, #0
 8002f44:	d103      	bne.n	8002f4e <__clzdi2+0xe>
 8002f46:	f7ff ffdd 	bl	8002f04 <__clzsi2>
 8002f4a:	3020      	adds	r0, #32
 8002f4c:	e002      	b.n	8002f54 <__clzdi2+0x14>
 8002f4e:	1c08      	adds	r0, r1, #0
 8002f50:	f7ff ffd8 	bl	8002f04 <__clzsi2>
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)

08002f58 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af04      	add	r7, sp, #16
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002f70:	4808      	ldr	r0, [pc, #32]	; (8002f94 <ssd1306_WriteCommand+0x30>)
 8002f72:	2301      	movs	r3, #1
 8002f74:	425b      	negs	r3, r3
 8002f76:	9302      	str	r3, [sp, #8]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	1dfb      	adds	r3, r7, #7
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	2200      	movs	r2, #0
 8002f84:	2178      	movs	r1, #120	; 0x78
 8002f86:	f002 fc37 	bl	80057f8 <HAL_I2C_Mem_Write>
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	20000738 	.word	0x20000738

08002f98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4808      	ldr	r0, [pc, #32]	; (8002fc8 <ssd1306_WriteData+0x30>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4252      	negs	r2, r2
 8002fac:	9202      	str	r2, [sp, #8]
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	2240      	movs	r2, #64	; 0x40
 8002fb8:	2178      	movs	r1, #120	; 0x78
 8002fba:	f002 fc1d 	bl	80057f8 <HAL_I2C_Mem_Write>
}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	20000738 	.word	0x20000738

08002fcc <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8002fd0:	f7ff ffc2 	bl	8002f58 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002fd4:	2064      	movs	r0, #100	; 0x64
 8002fd6:	f001 fa3f 	bl	8004458 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8002fda:	20ae      	movs	r0, #174	; 0xae
 8002fdc:	f7ff ffc2 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002fe0:	2020      	movs	r0, #32
 8002fe2:	f7ff ffbf 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7ff ffbc 	bl	8002f64 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002fec:	20b0      	movs	r0, #176	; 0xb0
 8002fee:	f7ff ffb9 	bl	8002f64 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002ff2:	20c8      	movs	r0, #200	; 0xc8
 8002ff4:	f7ff ffb6 	bl	8002f64 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7ff ffb3 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002ffe:	2010      	movs	r0, #16
 8003000:	f7ff ffb0 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003004:	2040      	movs	r0, #64	; 0x40
 8003006:	f7ff ffad 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800300a:	2081      	movs	r0, #129	; 0x81
 800300c:	f7ff ffaa 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8003010:	20ff      	movs	r0, #255	; 0xff
 8003012:	f7ff ffa7 	bl	8002f64 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003016:	20a1      	movs	r0, #161	; 0xa1
 8003018:	f7ff ffa4 	bl	8002f64 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800301c:	20a6      	movs	r0, #166	; 0xa6
 800301e:	f7ff ffa1 	bl	8002f64 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003022:	20a8      	movs	r0, #168	; 0xa8
 8003024:	f7ff ff9e 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8003028:	203f      	movs	r0, #63	; 0x3f
 800302a:	f7ff ff9b 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800302e:	20a4      	movs	r0, #164	; 0xa4
 8003030:	f7ff ff98 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003034:	20d3      	movs	r0, #211	; 0xd3
 8003036:	f7ff ff95 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800303a:	2000      	movs	r0, #0
 800303c:	f7ff ff92 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003040:	20d5      	movs	r0, #213	; 0xd5
 8003042:	f7ff ff8f 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003046:	20f0      	movs	r0, #240	; 0xf0
 8003048:	f7ff ff8c 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800304c:	20d9      	movs	r0, #217	; 0xd9
 800304e:	f7ff ff89 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003052:	2022      	movs	r0, #34	; 0x22
 8003054:	f7ff ff86 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003058:	20da      	movs	r0, #218	; 0xda
 800305a:	f7ff ff83 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800305e:	2012      	movs	r0, #18
 8003060:	f7ff ff80 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003064:	20db      	movs	r0, #219	; 0xdb
 8003066:	f7ff ff7d 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800306a:	2020      	movs	r0, #32
 800306c:	f7ff ff7a 	bl	8002f64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003070:	208d      	movs	r0, #141	; 0x8d
 8003072:	f7ff ff77 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003076:	2014      	movs	r0, #20
 8003078:	f7ff ff74 	bl	8002f64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800307c:	20af      	movs	r0, #175	; 0xaf
 800307e:	f7ff ff71 	bl	8002f64 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8003082:	2000      	movs	r0, #0
 8003084:	f000 f810 	bl	80030a8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003088:	f000 f832 	bl	80030f0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <ssd1306_Init+0xd8>)
 800308e:	2200      	movs	r2, #0
 8003090:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <ssd1306_Init+0xd8>)
 8003094:	2200      	movs	r2, #0
 8003096:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003098:	4b02      	ldr	r3, [pc, #8]	; (80030a4 <ssd1306_Init+0xd8>)
 800309a:	2201      	movs	r2, #1
 800309c:	715a      	strb	r2, [r3, #5]
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000618 	.word	0x20000618

080030a8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	0002      	movs	r2, r0
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e00e      	b.n	80030d8 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <ssd1306_Fill+0x1e>
 80030c2:	2100      	movs	r1, #0
 80030c4:	e000      	b.n	80030c8 <ssd1306_Fill+0x20>
 80030c6:	21ff      	movs	r1, #255	; 0xff
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <ssd1306_Fill+0x40>)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	18d3      	adds	r3, r2, r3
 80030ce:	1c0a      	adds	r2, r1, #0
 80030d0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3301      	adds	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <ssd1306_Fill+0x44>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d9ec      	bls.n	80030ba <ssd1306_Fill+0x12>
    }
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000208 	.word	0x20000208
 80030ec:	0000040f 	.word	0x0000040f

080030f0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e01e      	b.n	800313c <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i);
 80030fe:	1dfb      	adds	r3, r7, #7
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	3b50      	subs	r3, #80	; 0x50
 8003104:	b2db      	uxtb	r3, r3
 8003106:	0018      	movs	r0, r3
 8003108:	f7ff ff2c 	bl	8002f64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7ff ff29 	bl	8002f64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8003112:	2010      	movs	r0, #16
 8003114:	f7ff ff26 	bl	8002f64 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	0013      	movs	r3, r2
 800311e:	019b      	lsls	r3, r3, #6
 8003120:	189b      	adds	r3, r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	001a      	movs	r2, r3
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <ssd1306_UpdateScreen+0x5c>)
 8003128:	18d3      	adds	r3, r2, r3
 800312a:	2182      	movs	r1, #130	; 0x82
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ff33 	bl	8002f98 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	3201      	adds	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	1dfb      	adds	r3, r7, #7
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b07      	cmp	r3, #7
 8003142:	d9dc      	bls.n	80030fe <ssd1306_UpdateScreen+0xe>
    }
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000208 	.word	0x20000208

08003150 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	0004      	movs	r4, r0
 8003158:	0008      	movs	r0, r1
 800315a:	0011      	movs	r1, r2
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	1c22      	adds	r2, r4, #0
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	1dbb      	adds	r3, r7, #6
 8003164:	1c02      	adds	r2, r0, #0
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	1d7b      	adds	r3, r7, #5
 800316a:	1c0a      	adds	r2, r1, #0
 800316c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b81      	cmp	r3, #129	; 0x81
 8003174:	d85e      	bhi.n	8003234 <ssd1306_DrawPixel+0xe4>
 8003176:	1dbb      	adds	r3, r7, #6
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b3f      	cmp	r3, #63	; 0x3f
 800317c:	d85a      	bhi.n	8003234 <ssd1306_DrawPixel+0xe4>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800317e:	4b2f      	ldr	r3, [pc, #188]	; (800323c <ssd1306_DrawPixel+0xec>)
 8003180:	791b      	ldrb	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <ssd1306_DrawPixel+0x44>
        color = (SSD1306_COLOR)!color;
 8003186:	1d7b      	adds	r3, r7, #5
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	425a      	negs	r2, r3
 800318c:	4153      	adcs	r3, r2
 800318e:	b2da      	uxtb	r2, r3
 8003190:	1d7b      	adds	r3, r7, #5
 8003192:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8003194:	1d7b      	adds	r3, r7, #5
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d124      	bne.n	80031e6 <ssd1306_DrawPixel+0x96>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	781a      	ldrb	r2, [r3, #0]
 80031a0:	1dbb      	adds	r3, r7, #6
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	b2d8      	uxtb	r0, r3
 80031a8:	0001      	movs	r1, r0
 80031aa:	000b      	movs	r3, r1
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	185b      	adds	r3, r3, r1
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	18d3      	adds	r3, r2, r3
 80031b4:	4a22      	ldr	r2, [pc, #136]	; (8003240 <ssd1306_DrawPixel+0xf0>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	b25a      	sxtb	r2, r3
 80031ba:	1dbb      	adds	r3, r7, #6
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2107      	movs	r1, #7
 80031c0:	400b      	ands	r3, r1
 80031c2:	2101      	movs	r1, #1
 80031c4:	4099      	lsls	r1, r3
 80031c6:	000b      	movs	r3, r1
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b25c      	sxtb	r4, r3
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	0001      	movs	r1, r0
 80031d4:	000b      	movs	r3, r1
 80031d6:	019b      	lsls	r3, r3, #6
 80031d8:	185b      	adds	r3, r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	b2e1      	uxtb	r1, r4
 80031e0:	4a17      	ldr	r2, [pc, #92]	; (8003240 <ssd1306_DrawPixel+0xf0>)
 80031e2:	54d1      	strb	r1, [r2, r3]
 80031e4:	e027      	b.n	8003236 <ssd1306_DrawPixel+0xe6>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80031e6:	1dfb      	adds	r3, r7, #7
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	1dbb      	adds	r3, r7, #6
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	b2d8      	uxtb	r0, r3
 80031f2:	0001      	movs	r1, r0
 80031f4:	000b      	movs	r3, r1
 80031f6:	019b      	lsls	r3, r3, #6
 80031f8:	185b      	adds	r3, r3, r1
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	18d3      	adds	r3, r2, r3
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <ssd1306_DrawPixel+0xf0>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	1dba      	adds	r2, r7, #6
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	2107      	movs	r1, #7
 800320a:	400a      	ands	r2, r1
 800320c:	2101      	movs	r1, #1
 800320e:	4091      	lsls	r1, r2
 8003210:	000a      	movs	r2, r1
 8003212:	b252      	sxtb	r2, r2
 8003214:	43d2      	mvns	r2, r2
 8003216:	b252      	sxtb	r2, r2
 8003218:	4013      	ands	r3, r2
 800321a:	b25c      	sxtb	r4, r3
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	781a      	ldrb	r2, [r3, #0]
 8003220:	0001      	movs	r1, r0
 8003222:	000b      	movs	r3, r1
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	185b      	adds	r3, r3, r1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	18d3      	adds	r3, r2, r3
 800322c:	b2e1      	uxtb	r1, r4
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <ssd1306_DrawPixel+0xf0>)
 8003230:	54d1      	strb	r1, [r2, r3]
 8003232:	e000      	b.n	8003236 <ssd1306_DrawPixel+0xe6>
        return;
 8003234:	46c0      	nop			; (mov r8, r8)
    }
}
 8003236:	46bd      	mov	sp, r7
 8003238:	b003      	add	sp, #12
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	20000618 	.word	0x20000618
 8003240:	20000208 	.word	0x20000208

08003244 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	0004      	movs	r4, r0
 800324c:	1d38      	adds	r0, r7, #4
 800324e:	6001      	str	r1, [r0, #0]
 8003250:	6042      	str	r2, [r0, #4]
 8003252:	0019      	movs	r1, r3
 8003254:	200f      	movs	r0, #15
 8003256:	183b      	adds	r3, r7, r0
 8003258:	1c22      	adds	r2, r4, #0
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	230e      	movs	r3, #14
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	1c0a      	adds	r2, r1, #0
 8003262:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003264:	183b      	adds	r3, r7, r0
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b1f      	cmp	r3, #31
 800326a:	d904      	bls.n	8003276 <ssd1306_WriteChar+0x32>
 800326c:	230f      	movs	r3, #15
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b7e      	cmp	r3, #126	; 0x7e
 8003274:	d901      	bls.n	800327a <ssd1306_WriteChar+0x36>
        return 0;
 8003276:	2300      	movs	r3, #0
 8003278:	e078      	b.n	800336c <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800327a:	4b3e      	ldr	r3, [pc, #248]	; (8003374 <ssd1306_WriteChar+0x130>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	001a      	movs	r2, r3
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	18d3      	adds	r3, r2, r3
 8003286:	2b82      	cmp	r3, #130	; 0x82
 8003288:	dc07      	bgt.n	800329a <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <ssd1306_WriteChar+0x130>)
 800328c:	885b      	ldrh	r3, [r3, #2]
 800328e:	001a      	movs	r2, r3
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	dd01      	ble.n	800329e <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 800329a:	2300      	movs	r3, #0
 800329c:	e066      	b.n	800336c <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e051      	b.n	8003348 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	3b20      	subs	r3, #32
 80032b0:	1d39      	adds	r1, r7, #4
 80032b2:	7849      	ldrb	r1, [r1, #1]
 80032b4:	434b      	muls	r3, r1
 80032b6:	0019      	movs	r1, r3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	18cb      	adds	r3, r1, r3
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	18d3      	adds	r3, r2, r3
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e035      	b.n	8003336 <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	409a      	lsls	r2, r3
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	4013      	ands	r3, r2
 80032d6:	d014      	beq.n	8003302 <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80032d8:	4b26      	ldr	r3, [pc, #152]	; (8003374 <ssd1306_WriteChar+0x130>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	18d3      	adds	r3, r2, r3
 80032e4:	b2d8      	uxtb	r0, r3
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <ssd1306_WriteChar+0x130>)
 80032e8:	885b      	ldrh	r3, [r3, #2]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	18d3      	adds	r3, r2, r3
 80032f2:	b2d9      	uxtb	r1, r3
 80032f4:	230e      	movs	r3, #14
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	001a      	movs	r2, r3
 80032fc:	f7ff ff28 	bl	8003150 <ssd1306_DrawPixel>
 8003300:	e016      	b.n	8003330 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <ssd1306_WriteChar+0x130>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	18d3      	adds	r3, r2, r3
 800330e:	b2d8      	uxtb	r0, r3
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <ssd1306_WriteChar+0x130>)
 8003312:	885b      	ldrh	r3, [r3, #2]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	18d3      	adds	r3, r2, r3
 800331c:	b2d9      	uxtb	r1, r3
 800331e:	230e      	movs	r3, #14
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	425a      	negs	r2, r3
 8003326:	4153      	adcs	r3, r2
 8003328:	b2db      	uxtb	r3, r3
 800332a:	001a      	movs	r2, r3
 800332c:	f7ff ff10 	bl	8003150 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	3301      	adds	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	001a      	movs	r2, r3
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4293      	cmp	r3, r2
 8003340:	d3c3      	bcc.n	80032ca <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	001a      	movs	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4293      	cmp	r3, r2
 8003352:	d3a7      	bcc.n	80032a4 <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <ssd1306_WriteChar+0x130>)
 8003356:	881a      	ldrh	r2, [r3, #0]
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	18d3      	adds	r3, r2, r3
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <ssd1306_WriteChar+0x130>)
 8003364:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003366:	230f      	movs	r3, #15
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	781b      	ldrb	r3, [r3, #0]
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b009      	add	sp, #36	; 0x24
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	20000618 	.word	0x20000618

08003378 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	1d38      	adds	r0, r7, #4
 8003382:	6001      	str	r1, [r0, #0]
 8003384:	6042      	str	r2, [r0, #4]
 8003386:	001a      	movs	r2, r3
 8003388:	1cfb      	adds	r3, r7, #3
 800338a:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 800338c:	e014      	b.n	80033b8 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	7818      	ldrb	r0, [r3, #0]
 8003392:	1cfb      	adds	r3, r7, #3
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	1d3a      	adds	r2, r7, #4
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	6852      	ldr	r2, [r2, #4]
 800339c:	f7ff ff52 	bl	8003244 <ssd1306_WriteChar>
 80033a0:	0003      	movs	r3, r0
 80033a2:	001a      	movs	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d002      	beq.n	80033b2 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	e008      	b.n	80033c4 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e6      	bne.n	800338e <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	781b      	ldrb	r3, [r3, #0]
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}

080033cc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	0002      	movs	r2, r0
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	1dbb      	adds	r3, r7, #6
 80033da:	1c0a      	adds	r2, r1, #0
 80033dc:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <ssd1306_SetCursor+0x30>)
 80033e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80033e8:	1dbb      	adds	r3, r7, #6
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	4b03      	ldr	r3, [pc, #12]	; (80033fc <ssd1306_SetCursor+0x30>)
 80033f0:	805a      	strh	r2, [r3, #2]
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b002      	add	sp, #8
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	20000618 	.word	0x20000618

08003400 <initCom1>:

uint8_t DMA_RX_Tail=0;
uint8_t DMA_RX_Head=0;
int NRxReceived;

void initCom1() {
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	0159      	lsls	r1, r3, #5
 8003408:	23a0      	movs	r3, #160	; 0xa0
 800340a:	05db      	lsls	r3, r3, #23
 800340c:	2200      	movs	r2, #0
 800340e:	0018      	movs	r0, r3
 8003410:	f002 f93e 	bl	8005690 <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&huart1, &DMA_RX_Buffer[0], DMA_RX_BUFFER_SIZE);
 8003414:	490e      	ldr	r1, [pc, #56]	; (8003450 <initCom1+0x50>)
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <initCom1+0x54>)
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	0018      	movs	r0, r3
 800341c:	f004 f8bc 	bl	8007598 <HAL_UART_Receive_DMA>
	hdma_usart1_rx.Instance->CCR &= ~DMA_CCR_HTIE; // disable uart half rx interrupt
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <initCom1+0x58>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <initCom1+0x58>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2104      	movs	r1, #4
 800342c:	438a      	bics	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_IDLEFLAG(&huart1);            //sørg for at flaget er clearet
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <initCom1+0x54>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	621a      	str	r2, [r3, #32]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <initCom1+0x54>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <initCom1+0x54>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2110      	movs	r1, #16
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	200006f0 	.word	0x200006f0
 8003454:	200007d0 	.word	0x200007d0
 8003458:	20000788 	.word	0x20000788

0800345c <crc8>:

uint8_t crc8(const unsigned char* data_p, unsigned char length) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	000a      	movs	r2, r1
 8003466:	1cfb      	adds	r3, r7, #3
 8003468:	701a      	strb	r2, [r3, #0]
	uint8_t x = 0;
 800346a:	230f      	movs	r3, #15
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
	while (length--) {
 8003472:	e009      	b.n	8003488 <crc8+0x2c>
		x ^= *data_p++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	7819      	ldrb	r1, [r3, #0]
 800347c:	220f      	movs	r2, #15
 800347e:	18bb      	adds	r3, r7, r2
 8003480:	18ba      	adds	r2, r7, r2
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	404a      	eors	r2, r1
 8003486:	701a      	strb	r2, [r3, #0]
	while (length--) {
 8003488:	1cfb      	adds	r3, r7, #3
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	1cfa      	adds	r2, r7, #3
 800348e:	1e59      	subs	r1, r3, #1
 8003490:	7011      	strb	r1, [r2, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1ee      	bne.n	8003474 <crc8+0x18>
	}
	return x;
 8003496:	230f      	movs	r3, #15
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	781b      	ldrb	r3, [r3, #0]
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b004      	add	sp, #16
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <TxRawframe>:

void TxRawframe(uint8_t *data, uint8_t frametype, int Datasize) {
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	240b      	movs	r4, #11
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	1c0a      	adds	r2, r1, #0
 80034b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	0159      	lsls	r1, r3, #5
 80034ba:	23a0      	movs	r3, #160	; 0xa0
 80034bc:	05db      	lsls	r3, r3, #23
 80034be:	2201      	movs	r2, #1
 80034c0:	0018      	movs	r0, r3
 80034c2:	f002 f8e5 	bl	8005690 <HAL_GPIO_WritePin>
	USART_txBuff[0] = 0x02;
 80034c6:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <TxRawframe+0x94>)
 80034c8:	2202      	movs	r2, #2
 80034ca:	701a      	strb	r2, [r3, #0]
	USART_txBuff[1] = Datasize + HeaderSize;   //Data length
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3303      	adds	r3, #3
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <TxRawframe+0x94>)
 80034d6:	705a      	strb	r2, [r3, #1]
	USART_txBuff[2] = frametype;
 80034d8:	4b17      	ldr	r3, [pc, #92]	; (8003538 <TxRawframe+0x94>)
 80034da:	193a      	adds	r2, r7, r4
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	709a      	strb	r2, [r3, #2]
	memcpy(&USART_txBuff[3], data, Datasize);
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <TxRawframe+0x98>)
 80034e6:	0018      	movs	r0, r3
 80034e8:	f004 ffac 	bl	8008444 <memcpy>
	USART_txBuff[USART_txBuff[1]] = crc8(&USART_txBuff[0],
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3303      	adds	r3, #3
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <TxRawframe+0x94>)
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	001c      	movs	r4, r3
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <TxRawframe+0x94>)
 80034fc:	0011      	movs	r1, r2
 80034fe:	0018      	movs	r0, r3
 8003500:	f7ff ffac 	bl	800345c <crc8>
 8003504:	0003      	movs	r3, r0
 8003506:	001a      	movs	r2, r3
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <TxRawframe+0x94>)
 800350a:	551a      	strb	r2, [r3, r4]
			Datasize + HeaderSize); //CRC
	HAL_UART_Transmit(&huart1, &USART_txBuff[0], USART_txBuff[1] + 1, 0xFFFF);
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <TxRawframe+0x94>)
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	b29b      	uxth	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <TxRawframe+0x9c>)
 8003518:	4907      	ldr	r1, [pc, #28]	; (8003538 <TxRawframe+0x94>)
 800351a:	480a      	ldr	r0, [pc, #40]	; (8003544 <TxRawframe+0xa0>)
 800351c:	f003 ff94 	bl	8007448 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	0159      	lsls	r1, r3, #5
 8003524:	23a0      	movs	r3, #160	; 0xa0
 8003526:	05db      	lsls	r3, r3, #23
 8003528:	2200      	movs	r2, #0
 800352a:	0018      	movs	r0, r3
 800352c:	f002 f8b0 	bl	8005690 <HAL_GPIO_WritePin>
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b005      	add	sp, #20
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	20000674 	.word	0x20000674
 800353c:	20000677 	.word	0x20000677
 8003540:	0000ffff 	.word	0x0000ffff
 8003544:	200007d0 	.word	0x200007d0

08003548 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) { //500ms
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	05db      	lsls	r3, r3, #23
 8003558:	429a      	cmp	r2, r3
 800355a:	d103      	bne.n	8003564 <HAL_TIM_PeriodElapsedCallback+0x1c>
		//if (AdcChan==2) chanSel(1); else chanSel(2);
		HAL_ADC_Start_IT(&hadc);
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800355e:	0018      	movs	r0, r3
 8003560:	f001 f950 	bl	8004804 <HAL_ADC_Start_IT>
	}
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200008a4 	.word	0x200008a4

08003570 <mean>:

float mean(float avg, float new_sample){
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  avg -= avg / N;
 800357a:	490d      	ldr	r1, [pc, #52]	; (80035b0 <mean+0x40>)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fd fa05 	bl	800098c <__aeabi_fdiv>
 8003582:	1c03      	adds	r3, r0, #0
 8003584:	1c19      	adds	r1, r3, #0
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd fc44 	bl	8000e14 <__aeabi_fsub>
 800358c:	1c03      	adds	r3, r0, #0
 800358e:	607b      	str	r3, [r7, #4]
  avg += new_sample / N;
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <mean+0x40>)
 8003592:	6838      	ldr	r0, [r7, #0]
 8003594:	f7fd f9fa 	bl	800098c <__aeabi_fdiv>
 8003598:	1c03      	adds	r3, r0, #0
 800359a:	1c19      	adds	r1, r3, #0
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fd f85b 	bl	8000658 <__aeabi_fadd>
 80035a2:	1c03      	adds	r3, r0, #0
 80035a4:	607b      	str	r3, [r7, #4]
  return avg;
 80035a6:	687b      	ldr	r3, [r7, #4]
}
 80035a8:	1c18      	adds	r0, r3, #0
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	41a00000 	.word	0x41a00000

080035b4 <RawToFloat>:


void RawToFloat(){
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	af00      	add	r7, sp, #0
 BatData.ID =255;
 80035b8:	4bb6      	ldr	r3, [pc, #728]	; (8003894 <RawToFloat+0x2e0>)
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	701a      	strb	r2, [r3, #0]
 BatData.V =mean(BatData.V,ADC1_Raw[0]*VprCount*11);
 80035be:	4bb5      	ldr	r3, [pc, #724]	; (8003894 <RawToFloat+0x2e0>)
 80035c0:	785a      	ldrb	r2, [r3, #1]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	7899      	ldrb	r1, [r3, #2]
 80035c6:	b2c9      	uxtb	r1, r1
 80035c8:	0209      	lsls	r1, r1, #8
 80035ca:	430a      	orrs	r2, r1
 80035cc:	78d9      	ldrb	r1, [r3, #3]
 80035ce:	b2c9      	uxtb	r1, r1
 80035d0:	0409      	lsls	r1, r1, #16
 80035d2:	430a      	orrs	r2, r1
 80035d4:	791b      	ldrb	r3, [r3, #4]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	4313      	orrs	r3, r2
 80035dc:	1c1c      	adds	r4, r3, #0
 80035de:	4bae      	ldr	r3, [pc, #696]	; (8003898 <RawToFloat+0x2e4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fd fdda 	bl	800119c <__aeabi_ui2f>
 80035e8:	1c02      	adds	r2, r0, #0
 80035ea:	4bac      	ldr	r3, [pc, #688]	; (800389c <RawToFloat+0x2e8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	1c19      	adds	r1, r3, #0
 80035f0:	1c10      	adds	r0, r2, #0
 80035f2:	f7fd fadd 	bl	8000bb0 <__aeabi_fmul>
 80035f6:	1c03      	adds	r3, r0, #0
 80035f8:	49a9      	ldr	r1, [pc, #676]	; (80038a0 <RawToFloat+0x2ec>)
 80035fa:	1c18      	adds	r0, r3, #0
 80035fc:	f7fd fad8 	bl	8000bb0 <__aeabi_fmul>
 8003600:	1c03      	adds	r3, r0, #0
 8003602:	1c19      	adds	r1, r3, #0
 8003604:	1c20      	adds	r0, r4, #0
 8003606:	f7ff ffb3 	bl	8003570 <mean>
 800360a:	1c02      	adds	r2, r0, #0
 800360c:	4ba1      	ldr	r3, [pc, #644]	; (8003894 <RawToFloat+0x2e0>)
 800360e:	3301      	adds	r3, #1
 8003610:	21ff      	movs	r1, #255	; 0xff
 8003612:	4011      	ands	r1, r2
 8003614:	000c      	movs	r4, r1
 8003616:	7819      	ldrb	r1, [r3, #0]
 8003618:	2000      	movs	r0, #0
 800361a:	4001      	ands	r1, r0
 800361c:	1c08      	adds	r0, r1, #0
 800361e:	1c21      	adds	r1, r4, #0
 8003620:	4301      	orrs	r1, r0
 8003622:	7019      	strb	r1, [r3, #0]
 8003624:	0a11      	lsrs	r1, r2, #8
 8003626:	20ff      	movs	r0, #255	; 0xff
 8003628:	4001      	ands	r1, r0
 800362a:	000c      	movs	r4, r1
 800362c:	7859      	ldrb	r1, [r3, #1]
 800362e:	2000      	movs	r0, #0
 8003630:	4001      	ands	r1, r0
 8003632:	1c08      	adds	r0, r1, #0
 8003634:	1c21      	adds	r1, r4, #0
 8003636:	4301      	orrs	r1, r0
 8003638:	7059      	strb	r1, [r3, #1]
 800363a:	0c11      	lsrs	r1, r2, #16
 800363c:	20ff      	movs	r0, #255	; 0xff
 800363e:	4001      	ands	r1, r0
 8003640:	000c      	movs	r4, r1
 8003642:	7899      	ldrb	r1, [r3, #2]
 8003644:	2000      	movs	r0, #0
 8003646:	4001      	ands	r1, r0
 8003648:	1c08      	adds	r0, r1, #0
 800364a:	1c21      	adds	r1, r4, #0
 800364c:	4301      	orrs	r1, r0
 800364e:	7099      	strb	r1, [r3, #2]
 8003650:	0e10      	lsrs	r0, r2, #24
 8003652:	78da      	ldrb	r2, [r3, #3]
 8003654:	2100      	movs	r1, #0
 8003656:	400a      	ands	r2, r1
 8003658:	1c11      	adds	r1, r2, #0
 800365a:	1c02      	adds	r2, r0, #0
 800365c:	430a      	orrs	r2, r1
 800365e:	70da      	strb	r2, [r3, #3]
 BatData.I =mean(BatData.I,(ADC1_Raw[1]-2048.0)*VprCount*147);
 8003660:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <RawToFloat+0x2e0>)
 8003662:	795a      	ldrb	r2, [r3, #5]
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	7999      	ldrb	r1, [r3, #6]
 8003668:	b2c9      	uxtb	r1, r1
 800366a:	0209      	lsls	r1, r1, #8
 800366c:	430a      	orrs	r2, r1
 800366e:	79d9      	ldrb	r1, [r3, #7]
 8003670:	b2c9      	uxtb	r1, r1
 8003672:	0409      	lsls	r1, r1, #16
 8003674:	430a      	orrs	r2, r1
 8003676:	7a1b      	ldrb	r3, [r3, #8]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	061b      	lsls	r3, r3, #24
 800367c:	4313      	orrs	r3, r2
 800367e:	1c1e      	adds	r6, r3, #0
 8003680:	4b85      	ldr	r3, [pc, #532]	; (8003898 <RawToFloat+0x2e4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f7ff fb35 	bl	8002cf4 <__aeabi_ui2d>
 800368a:	2200      	movs	r2, #0
 800368c:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <RawToFloat+0x2f0>)
 800368e:	f7fe ff5d 	bl	800254c <__aeabi_dsub>
 8003692:	0003      	movs	r3, r0
 8003694:	000c      	movs	r4, r1
 8003696:	0025      	movs	r5, r4
 8003698:	001c      	movs	r4, r3
 800369a:	4b80      	ldr	r3, [pc, #512]	; (800389c <RawToFloat+0x2e8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	1c18      	adds	r0, r3, #0
 80036a0:	f7ff fb5a 	bl	8002d58 <__aeabi_f2d>
 80036a4:	0002      	movs	r2, r0
 80036a6:	000b      	movs	r3, r1
 80036a8:	0020      	movs	r0, r4
 80036aa:	0029      	movs	r1, r5
 80036ac:	f7fe fcdc 	bl	8002068 <__aeabi_dmul>
 80036b0:	0003      	movs	r3, r0
 80036b2:	000c      	movs	r4, r1
 80036b4:	0018      	movs	r0, r3
 80036b6:	0021      	movs	r1, r4
 80036b8:	2200      	movs	r2, #0
 80036ba:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <RawToFloat+0x2f4>)
 80036bc:	f7fe fcd4 	bl	8002068 <__aeabi_dmul>
 80036c0:	0003      	movs	r3, r0
 80036c2:	000c      	movs	r4, r1
 80036c4:	0018      	movs	r0, r3
 80036c6:	0021      	movs	r1, r4
 80036c8:	f7ff fb98 	bl	8002dfc <__aeabi_d2f>
 80036cc:	1c03      	adds	r3, r0, #0
 80036ce:	1c19      	adds	r1, r3, #0
 80036d0:	1c30      	adds	r0, r6, #0
 80036d2:	f7ff ff4d 	bl	8003570 <mean>
 80036d6:	1c02      	adds	r2, r0, #0
 80036d8:	4b6e      	ldr	r3, [pc, #440]	; (8003894 <RawToFloat+0x2e0>)
 80036da:	3305      	adds	r3, #5
 80036dc:	21ff      	movs	r1, #255	; 0xff
 80036de:	4011      	ands	r1, r2
 80036e0:	000c      	movs	r4, r1
 80036e2:	7819      	ldrb	r1, [r3, #0]
 80036e4:	2000      	movs	r0, #0
 80036e6:	4001      	ands	r1, r0
 80036e8:	1c08      	adds	r0, r1, #0
 80036ea:	1c21      	adds	r1, r4, #0
 80036ec:	4301      	orrs	r1, r0
 80036ee:	7019      	strb	r1, [r3, #0]
 80036f0:	0a11      	lsrs	r1, r2, #8
 80036f2:	20ff      	movs	r0, #255	; 0xff
 80036f4:	4001      	ands	r1, r0
 80036f6:	000c      	movs	r4, r1
 80036f8:	7859      	ldrb	r1, [r3, #1]
 80036fa:	2000      	movs	r0, #0
 80036fc:	4001      	ands	r1, r0
 80036fe:	1c08      	adds	r0, r1, #0
 8003700:	1c21      	adds	r1, r4, #0
 8003702:	4301      	orrs	r1, r0
 8003704:	7059      	strb	r1, [r3, #1]
 8003706:	0c11      	lsrs	r1, r2, #16
 8003708:	20ff      	movs	r0, #255	; 0xff
 800370a:	4001      	ands	r1, r0
 800370c:	000c      	movs	r4, r1
 800370e:	7899      	ldrb	r1, [r3, #2]
 8003710:	2000      	movs	r0, #0
 8003712:	4001      	ands	r1, r0
 8003714:	1c08      	adds	r0, r1, #0
 8003716:	1c21      	adds	r1, r4, #0
 8003718:	4301      	orrs	r1, r0
 800371a:	7099      	strb	r1, [r3, #2]
 800371c:	0e10      	lsrs	r0, r2, #24
 800371e:	78da      	ldrb	r2, [r3, #3]
 8003720:	2100      	movs	r1, #0
 8003722:	400a      	ands	r2, r1
 8003724:	1c11      	adds	r1, r2, #0
 8003726:	1c02      	adds	r2, r0, #0
 8003728:	430a      	orrs	r2, r1
 800372a:	70da      	strb	r2, [r3, #3]
// BatData.I =mean(BatData.I,ADC1_Raw[1]-2048);
 BatData.AH+=BatData.I/7200.0;
 800372c:	4b59      	ldr	r3, [pc, #356]	; (8003894 <RawToFloat+0x2e0>)
 800372e:	795a      	ldrb	r2, [r3, #5]
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	7999      	ldrb	r1, [r3, #6]
 8003734:	b2c9      	uxtb	r1, r1
 8003736:	0209      	lsls	r1, r1, #8
 8003738:	430a      	orrs	r2, r1
 800373a:	79d9      	ldrb	r1, [r3, #7]
 800373c:	b2c9      	uxtb	r1, r1
 800373e:	0409      	lsls	r1, r1, #16
 8003740:	430a      	orrs	r2, r1
 8003742:	7a1b      	ldrb	r3, [r3, #8]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	061b      	lsls	r3, r3, #24
 8003748:	4313      	orrs	r3, r2
 800374a:	1c18      	adds	r0, r3, #0
 800374c:	f7ff fb04 	bl	8002d58 <__aeabi_f2d>
 8003750:	2200      	movs	r2, #0
 8003752:	4b56      	ldr	r3, [pc, #344]	; (80038ac <RawToFloat+0x2f8>)
 8003754:	f7fe f87e 	bl	8001854 <__aeabi_ddiv>
 8003758:	0003      	movs	r3, r0
 800375a:	000c      	movs	r4, r1
 800375c:	0025      	movs	r5, r4
 800375e:	001c      	movs	r4, r3
 8003760:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <RawToFloat+0x2e0>)
 8003762:	7b5a      	ldrb	r2, [r3, #13]
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	7b99      	ldrb	r1, [r3, #14]
 8003768:	b2c9      	uxtb	r1, r1
 800376a:	0209      	lsls	r1, r1, #8
 800376c:	430a      	orrs	r2, r1
 800376e:	7bd9      	ldrb	r1, [r3, #15]
 8003770:	b2c9      	uxtb	r1, r1
 8003772:	0409      	lsls	r1, r1, #16
 8003774:	430a      	orrs	r2, r1
 8003776:	7c1b      	ldrb	r3, [r3, #16]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	4313      	orrs	r3, r2
 800377e:	1c18      	adds	r0, r3, #0
 8003780:	f7ff faea 	bl	8002d58 <__aeabi_f2d>
 8003784:	0002      	movs	r2, r0
 8003786:	000b      	movs	r3, r1
 8003788:	0020      	movs	r0, r4
 800378a:	0029      	movs	r1, r5
 800378c:	f7fd fd46 	bl	800121c <__aeabi_dadd>
 8003790:	0003      	movs	r3, r0
 8003792:	000c      	movs	r4, r1
 8003794:	0018      	movs	r0, r3
 8003796:	0021      	movs	r1, r4
 8003798:	f7ff fb30 	bl	8002dfc <__aeabi_d2f>
 800379c:	1c02      	adds	r2, r0, #0
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <RawToFloat+0x2e0>)
 80037a0:	330d      	adds	r3, #13
 80037a2:	21ff      	movs	r1, #255	; 0xff
 80037a4:	4011      	ands	r1, r2
 80037a6:	000c      	movs	r4, r1
 80037a8:	7819      	ldrb	r1, [r3, #0]
 80037aa:	2000      	movs	r0, #0
 80037ac:	4001      	ands	r1, r0
 80037ae:	1c08      	adds	r0, r1, #0
 80037b0:	1c21      	adds	r1, r4, #0
 80037b2:	4301      	orrs	r1, r0
 80037b4:	7019      	strb	r1, [r3, #0]
 80037b6:	0a11      	lsrs	r1, r2, #8
 80037b8:	20ff      	movs	r0, #255	; 0xff
 80037ba:	4001      	ands	r1, r0
 80037bc:	000c      	movs	r4, r1
 80037be:	7859      	ldrb	r1, [r3, #1]
 80037c0:	2000      	movs	r0, #0
 80037c2:	4001      	ands	r1, r0
 80037c4:	1c08      	adds	r0, r1, #0
 80037c6:	1c21      	adds	r1, r4, #0
 80037c8:	4301      	orrs	r1, r0
 80037ca:	7059      	strb	r1, [r3, #1]
 80037cc:	0c11      	lsrs	r1, r2, #16
 80037ce:	20ff      	movs	r0, #255	; 0xff
 80037d0:	4001      	ands	r1, r0
 80037d2:	000c      	movs	r4, r1
 80037d4:	7899      	ldrb	r1, [r3, #2]
 80037d6:	2000      	movs	r0, #0
 80037d8:	4001      	ands	r1, r0
 80037da:	1c08      	adds	r0, r1, #0
 80037dc:	1c21      	adds	r1, r4, #0
 80037de:	4301      	orrs	r1, r0
 80037e0:	7099      	strb	r1, [r3, #2]
 80037e2:	0e10      	lsrs	r0, r2, #24
 80037e4:	78da      	ldrb	r2, [r3, #3]
 80037e6:	2100      	movs	r1, #0
 80037e8:	400a      	ands	r2, r1
 80037ea:	1c11      	adds	r1, r2, #0
 80037ec:	1c02      	adds	r2, r0, #0
 80037ee:	430a      	orrs	r2, r1
 80037f0:	70da      	strb	r2, [r3, #3]
 BatData.Power=BatData.V*BatData.I;
 80037f2:	4b28      	ldr	r3, [pc, #160]	; (8003894 <RawToFloat+0x2e0>)
 80037f4:	785a      	ldrb	r2, [r3, #1]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	7899      	ldrb	r1, [r3, #2]
 80037fa:	b2c9      	uxtb	r1, r1
 80037fc:	0209      	lsls	r1, r1, #8
 80037fe:	430a      	orrs	r2, r1
 8003800:	78d9      	ldrb	r1, [r3, #3]
 8003802:	b2c9      	uxtb	r1, r1
 8003804:	0409      	lsls	r1, r1, #16
 8003806:	430a      	orrs	r2, r1
 8003808:	791b      	ldrb	r3, [r3, #4]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	4313      	orrs	r3, r2
 8003810:	1c18      	adds	r0, r3, #0
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <RawToFloat+0x2e0>)
 8003814:	795a      	ldrb	r2, [r3, #5]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	7999      	ldrb	r1, [r3, #6]
 800381a:	b2c9      	uxtb	r1, r1
 800381c:	0209      	lsls	r1, r1, #8
 800381e:	430a      	orrs	r2, r1
 8003820:	79d9      	ldrb	r1, [r3, #7]
 8003822:	b2c9      	uxtb	r1, r1
 8003824:	0409      	lsls	r1, r1, #16
 8003826:	430a      	orrs	r2, r1
 8003828:	7a1b      	ldrb	r3, [r3, #8]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	4313      	orrs	r3, r2
 8003830:	1c19      	adds	r1, r3, #0
 8003832:	f7fd f9bd 	bl	8000bb0 <__aeabi_fmul>
 8003836:	1c03      	adds	r3, r0, #0
 8003838:	1c1a      	adds	r2, r3, #0
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <RawToFloat+0x2e0>)
 800383c:	3309      	adds	r3, #9
 800383e:	21ff      	movs	r1, #255	; 0xff
 8003840:	4011      	ands	r1, r2
 8003842:	000c      	movs	r4, r1
 8003844:	7819      	ldrb	r1, [r3, #0]
 8003846:	2000      	movs	r0, #0
 8003848:	4001      	ands	r1, r0
 800384a:	1c08      	adds	r0, r1, #0
 800384c:	1c21      	adds	r1, r4, #0
 800384e:	4301      	orrs	r1, r0
 8003850:	7019      	strb	r1, [r3, #0]
 8003852:	0a11      	lsrs	r1, r2, #8
 8003854:	20ff      	movs	r0, #255	; 0xff
 8003856:	4001      	ands	r1, r0
 8003858:	000c      	movs	r4, r1
 800385a:	7859      	ldrb	r1, [r3, #1]
 800385c:	2000      	movs	r0, #0
 800385e:	4001      	ands	r1, r0
 8003860:	1c08      	adds	r0, r1, #0
 8003862:	1c21      	adds	r1, r4, #0
 8003864:	4301      	orrs	r1, r0
 8003866:	7059      	strb	r1, [r3, #1]
 8003868:	0c11      	lsrs	r1, r2, #16
 800386a:	20ff      	movs	r0, #255	; 0xff
 800386c:	4001      	ands	r1, r0
 800386e:	000c      	movs	r4, r1
 8003870:	7899      	ldrb	r1, [r3, #2]
 8003872:	2000      	movs	r0, #0
 8003874:	4001      	ands	r1, r0
 8003876:	1c08      	adds	r0, r1, #0
 8003878:	1c21      	adds	r1, r4, #0
 800387a:	4301      	orrs	r1, r0
 800387c:	7099      	strb	r1, [r3, #2]
 800387e:	0e10      	lsrs	r0, r2, #24
 8003880:	78da      	ldrb	r2, [r3, #3]
 8003882:	2100      	movs	r1, #0
 8003884:	400a      	ands	r2, r1
 8003886:	1c11      	adds	r1, r2, #0
 8003888:	1c02      	adds	r2, r0, #0
 800388a:	430a      	orrs	r2, r1
 800388c:	70da      	strb	r2, [r3, #3]
// BatData.Tempeture=(((ADC1_Raw[2]-1652)*(vref/4095))/0.0043)+30;
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003894:	20000850 	.word	0x20000850
 8003898:	20000730 	.word	0x20000730
 800389c:	20000784 	.word	0x20000784
 80038a0:	41300000 	.word	0x41300000
 80038a4:	40a00000 	.word	0x40a00000
 80038a8:	40626000 	.word	0x40626000
 80038ac:	40bc2000 	.word	0x40bc2000

080038b0 <HAL_ADC_ConvCpltCallback>:
	  ADC1_Raw[i]= HAL_ADC_GetValue (&hadc);
    }
	HAL_ADC_Stop (&hadc);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
static int ADC1_index;
ADC_ChannelConfTypeDef sConfig = {0};
 80038b8:	2308      	movs	r3, #8
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	0018      	movs	r0, r3
 80038be:	2308      	movs	r3, #8
 80038c0:	001a      	movs	r2, r3
 80038c2:	2100      	movs	r1, #0
 80038c4:	f004 fdda 	bl	800847c <memset>
	ADC1_Raw[ADC1_index++] = HAL_ADC_GetValue(AdcHandle);
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <HAL_ADC_ConvCpltCallback+0x74>)
 80038ca:	681c      	ldr	r4, [r3, #0]
 80038cc:	1c62      	adds	r2, r4, #1
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_ADC_ConvCpltCallback+0x74>)
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f001 f807 	bl	80048e8 <HAL_ADC_GetValue>
 80038da:	0001      	movs	r1, r0
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_ADC_ConvCpltCallback+0x78>)
 80038de:	00a2      	lsls	r2, r4, #2
 80038e0:	50d1      	str	r1, [r2, r3]
	if (ADC1_index>=NAdcCh) {
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_ADC_ConvCpltCallback+0x74>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	dd17      	ble.n	800391a <HAL_ADC_ConvCpltCallback+0x6a>
	//	VprCount=1.23/ADC1_Raw[2];
		ADC1_Raw[0]-=50;
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_ADC_ConvCpltCallback+0x78>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3b32      	subs	r3, #50	; 0x32
 80038f0:	001a      	movs	r2, r3
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_ADC_ConvCpltCallback+0x78>)
 80038f4:	601a      	str	r2, [r3, #0]
		ADC1_Raw[1]-=65; //offset
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_ADC_ConvCpltCallback+0x78>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b41      	subs	r3, #65	; 0x41
 80038fc:	001a      	movs	r2, r3
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_ADC_ConvCpltCallback+0x78>)
 8003900:	605a      	str	r2, [r3, #4]
		RawToFloat();
 8003902:	f7ff fe57 	bl	80035b4 <RawToFloat>
		ADC1_index=0; NewData=true;
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_ADC_ConvCpltCallback+0x74>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_ADC_ConvCpltCallback+0x7c>)
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop (&hadc);
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_ADC_ConvCpltCallback+0x80>)
 8003914:	0018      	movs	r0, r3
 8003916:	f000 ff35 	bl	8004784 <HAL_ADC_Stop>
	}
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b005      	add	sp, #20
 8003920:	bd90      	pop	{r4, r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	20000620 	.word	0x20000620
 8003928:	20000730 	.word	0x20000730
 800392c:	20000900 	.word	0x20000900
 8003930:	200008a4 	.word	0x200008a4

08003934 <DisplayData>:




void DisplayData() {
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	b08b      	sub	sp, #44	; 0x2c
 8003938:	af02      	add	r7, sp, #8
 char str[25];
    ssd1306_Fill(Black);
 800393a:	2000      	movs	r0, #0
 800393c:	f7ff fbb4 	bl	80030a8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8003940:	2100      	movs	r1, #0
 8003942:	2002      	movs	r0, #2
 8003944:	f7ff fd42 	bl	80033cc <ssd1306_SetCursor>
    sprintf(&str[0],"%2.1fV",BatData.V);
 8003948:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <DisplayData+0x124>)
 800394a:	785a      	ldrb	r2, [r3, #1]
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	7899      	ldrb	r1, [r3, #2]
 8003950:	b2c9      	uxtb	r1, r1
 8003952:	0209      	lsls	r1, r1, #8
 8003954:	430a      	orrs	r2, r1
 8003956:	78d9      	ldrb	r1, [r3, #3]
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	0409      	lsls	r1, r1, #16
 800395c:	430a      	orrs	r2, r1
 800395e:	791b      	ldrb	r3, [r3, #4]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	4313      	orrs	r3, r2
 8003966:	1c18      	adds	r0, r3, #0
 8003968:	f7ff f9f6 	bl	8002d58 <__aeabi_f2d>
 800396c:	0003      	movs	r3, r0
 800396e:	000c      	movs	r4, r1
 8003970:	493a      	ldr	r1, [pc, #232]	; (8003a5c <DisplayData+0x128>)
 8003972:	1d38      	adds	r0, r7, #4
 8003974:	001a      	movs	r2, r3
 8003976:	0023      	movs	r3, r4
 8003978:	f005 f9e6 	bl	8008d48 <siprintf>
    ssd1306_WriteString(str, Font_16x26, White);
 800397c:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <DisplayData+0x12c>)
 800397e:	1d38      	adds	r0, r7, #4
 8003980:	2301      	movs	r3, #1
 8003982:	6811      	ldr	r1, [r2, #0]
 8003984:	6852      	ldr	r2, [r2, #4]
 8003986:	f7ff fcf7 	bl	8003378 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 26);
 800398a:	211a      	movs	r1, #26
 800398c:	2002      	movs	r0, #2
 800398e:	f7ff fd1d 	bl	80033cc <ssd1306_SetCursor>
    sprintf(&str[0],"%.1fA",BatData.I);
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <DisplayData+0x124>)
 8003994:	795a      	ldrb	r2, [r3, #5]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	7999      	ldrb	r1, [r3, #6]
 800399a:	b2c9      	uxtb	r1, r1
 800399c:	0209      	lsls	r1, r1, #8
 800399e:	430a      	orrs	r2, r1
 80039a0:	79d9      	ldrb	r1, [r3, #7]
 80039a2:	b2c9      	uxtb	r1, r1
 80039a4:	0409      	lsls	r1, r1, #16
 80039a6:	430a      	orrs	r2, r1
 80039a8:	7a1b      	ldrb	r3, [r3, #8]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	4313      	orrs	r3, r2
 80039b0:	1c18      	adds	r0, r3, #0
 80039b2:	f7ff f9d1 	bl	8002d58 <__aeabi_f2d>
 80039b6:	0003      	movs	r3, r0
 80039b8:	000c      	movs	r4, r1
 80039ba:	492a      	ldr	r1, [pc, #168]	; (8003a64 <DisplayData+0x130>)
 80039bc:	1d38      	adds	r0, r7, #4
 80039be:	001a      	movs	r2, r3
 80039c0:	0023      	movs	r3, r4
 80039c2:	f005 f9c1 	bl	8008d48 <siprintf>
    ssd1306_WriteString(str, Font_16x26, White);
 80039c6:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <DisplayData+0x12c>)
 80039c8:	1d38      	adds	r0, r7, #4
 80039ca:	2301      	movs	r3, #1
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	6852      	ldr	r2, [r2, #4]
 80039d0:	f7ff fcd2 	bl	8003378 <ssd1306_WriteString>

    ssd1306_SetCursor(10, 26+26);
 80039d4:	2134      	movs	r1, #52	; 0x34
 80039d6:	200a      	movs	r0, #10
 80039d8:	f7ff fcf8 	bl	80033cc <ssd1306_SetCursor>
    sprintf(&str[0],"%.1fAH %.1fW",BatData.AH, BatData.Power);
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <DisplayData+0x124>)
 80039de:	7b5a      	ldrb	r2, [r3, #13]
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	7b99      	ldrb	r1, [r3, #14]
 80039e4:	b2c9      	uxtb	r1, r1
 80039e6:	0209      	lsls	r1, r1, #8
 80039e8:	430a      	orrs	r2, r1
 80039ea:	7bd9      	ldrb	r1, [r3, #15]
 80039ec:	b2c9      	uxtb	r1, r1
 80039ee:	0409      	lsls	r1, r1, #16
 80039f0:	430a      	orrs	r2, r1
 80039f2:	7c1b      	ldrb	r3, [r3, #16]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	4313      	orrs	r3, r2
 80039fa:	1c18      	adds	r0, r3, #0
 80039fc:	f7ff f9ac 	bl	8002d58 <__aeabi_f2d>
 8003a00:	0005      	movs	r5, r0
 8003a02:	000e      	movs	r6, r1
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <DisplayData+0x124>)
 8003a06:	7a5a      	ldrb	r2, [r3, #9]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	7a99      	ldrb	r1, [r3, #10]
 8003a0c:	b2c9      	uxtb	r1, r1
 8003a0e:	0209      	lsls	r1, r1, #8
 8003a10:	430a      	orrs	r2, r1
 8003a12:	7ad9      	ldrb	r1, [r3, #11]
 8003a14:	b2c9      	uxtb	r1, r1
 8003a16:	0409      	lsls	r1, r1, #16
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	7b1b      	ldrb	r3, [r3, #12]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	4313      	orrs	r3, r2
 8003a22:	1c18      	adds	r0, r3, #0
 8003a24:	f7ff f998 	bl	8002d58 <__aeabi_f2d>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	000c      	movs	r4, r1
 8003a2c:	490e      	ldr	r1, [pc, #56]	; (8003a68 <DisplayData+0x134>)
 8003a2e:	1d38      	adds	r0, r7, #4
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	9401      	str	r4, [sp, #4]
 8003a34:	002a      	movs	r2, r5
 8003a36:	0033      	movs	r3, r6
 8003a38:	f005 f986 	bl	8008d48 <siprintf>
    ssd1306_WriteString(str, Font_7x10, White);
 8003a3c:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <DisplayData+0x138>)
 8003a3e:	1d38      	adds	r0, r7, #4
 8003a40:	2301      	movs	r3, #1
 8003a42:	6811      	ldr	r1, [r2, #0]
 8003a44:	6852      	ldr	r2, [r2, #4]
 8003a46:	f7ff fc97 	bl	8003378 <ssd1306_WriteString>

  //  sprintf(&str[0],"%.1fAH %.1f°C",BatData.AH, BatData.Tempeture);
  //  ssd1306_WriteString(str, Font_7x10, White);
    ssd1306_UpdateScreen();
 8003a4a:	f7ff fb51 	bl	80030f0 <ssd1306_UpdateScreen>
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b009      	add	sp, #36	; 0x24
 8003a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000850 	.word	0x20000850
 8003a5c:	0800a568 	.word	0x0800a568
 8003a60:	20000008 	.word	0x20000008
 8003a64:	0800a570 	.word	0x0800a570
 8003a68:	0800a578 	.word	0x0800a578
 8003a6c:	20000000 	.word	0x20000000

08003a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a74:	f000 fc80 	bl	8004378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a78:	f000 f838 	bl	8003aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a7c:	f000 f9fe 	bl	8003e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8003a80:	f000 f9de 	bl	8003e40 <MX_DMA_Init>
  MX_ADC_Init();
 8003a84:	f000 f8a6 	bl	8003bd4 <MX_ADC_Init>
  MX_I2C1_Init();
 8003a88:	f000 f916 	bl	8003cb8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003a8c:	f000 f954 	bl	8003d38 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003a90:	f000 f9a6 	bl	8003de0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initCom1();
 8003a94:	f7ff fcb4 	bl	8003400 <initCom1>
  ssd1306_Init();
 8003a98:	f7ff fa98 	bl	8002fcc <ssd1306_Init>
  HAL_ADC_Start_IT(&hadc);
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <main+0x64>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 feb0 	bl	8004804 <HAL_ADC_Start_IT>
  VprCount=vref/4095;
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <main+0x68>)
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <main+0x6c>)
 8003aa8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2); //start timer 2
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <main+0x70>)
 8003aac:	0018      	movs	r0, r3
 8003aae:	f003 f95d 	bl	8006d6c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (NewData) {
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <main+0x74>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0fa      	beq.n	8003ab2 <main+0x42>
			NewData=false;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <main+0x74>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
			DisplayData();
 8003ac2:	f7ff ff37 	bl	8003934 <DisplayData>
			TxRawframe(&BatData.ID,1,sizeof(BatData));
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <main+0x78>)
 8003ac8:	2215      	movs	r2, #21
 8003aca:	2101      	movs	r1, #1
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7ff fce9 	bl	80034a4 <TxRawframe>
		if (NewData) {
 8003ad2:	e7ee      	b.n	8003ab2 <main+0x42>
 8003ad4:	200008a4 	.word	0x200008a4
 8003ad8:	20000784 	.word	0x20000784
 8003adc:	3a534067 	.word	0x3a534067
 8003ae0:	20000868 	.word	0x20000868
 8003ae4:	20000900 	.word	0x20000900
 8003ae8:	20000850 	.word	0x20000850

08003aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b09d      	sub	sp, #116	; 0x74
 8003af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003af2:	2438      	movs	r4, #56	; 0x38
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	0018      	movs	r0, r3
 8003af8:	2338      	movs	r3, #56	; 0x38
 8003afa:	001a      	movs	r2, r3
 8003afc:	2100      	movs	r1, #0
 8003afe:	f004 fcbd 	bl	800847c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b02:	2324      	movs	r3, #36	; 0x24
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	0018      	movs	r0, r3
 8003b08:	2314      	movs	r3, #20
 8003b0a:	001a      	movs	r2, r3
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	f004 fcb5 	bl	800847c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	0018      	movs	r0, r3
 8003b16:	2320      	movs	r3, #32
 8003b18:	001a      	movs	r2, r3
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f004 fcae 	bl	800847c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b20:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <SystemClock_Config+0xe0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2a      	ldr	r2, [pc, #168]	; (8003bd0 <SystemClock_Config+0xe4>)
 8003b26:	401a      	ands	r2, r3
 8003b28:	4b28      	ldr	r3, [pc, #160]	; (8003bcc <SystemClock_Config+0xe0>)
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	0109      	lsls	r1, r1, #4
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b32:	0021      	movs	r1, r4
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	2202      	movs	r2, #2
 8003b38:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2210      	movs	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2202      	movs	r2, #2
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	0412      	lsls	r2, r2, #16
 8003b5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	0018      	movs	r0, r3
 8003b64:	f002 f9ea 	bl	8005f3c <HAL_RCC_OscConfig>
 8003b68:	1e03      	subs	r3, r0, #0
 8003b6a:	d001      	beq.n	8003b70 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003b6c:	f000 f9e0 	bl	8003f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b70:	2124      	movs	r1, #36	; 0x24
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	220f      	movs	r2, #15
 8003b76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b8a:	187b      	adds	r3, r7, r1
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	2100      	movs	r1, #0
 8003b94:	0018      	movs	r0, r3
 8003b96:	f002 fd91 	bl	80066bc <HAL_RCC_ClockConfig>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d001      	beq.n	8003ba2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003b9e:	f000 f9c7 	bl	8003f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	2209      	movs	r2, #9
 8003ba6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f002 ff64 	bl	8006a84 <HAL_RCCEx_PeriphCLKConfig>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8003bc0:	f000 f9b6 	bl	8003f30 <Error_Handler>
  }
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b01d      	add	sp, #116	; 0x74
 8003bca:	bd90      	pop	{r4, r7, pc}
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	ffffe7ff 	.word	0xffffe7ff

08003bd4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	0018      	movs	r0, r3
 8003bde:	2308      	movs	r3, #8
 8003be0:	001a      	movs	r2, r3
 8003be2:	2100      	movs	r1, #0
 8003be4:	f004 fc4a 	bl	800847c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003be8:	4b30      	ldr	r3, [pc, #192]	; (8003cac <MX_ADC_Init+0xd8>)
 8003bea:	4a31      	ldr	r2, [pc, #196]	; (8003cb0 <MX_ADC_Init+0xdc>)
 8003bec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003bee:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <MX_ADC_Init+0xd8>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <MX_ADC_Init+0xd8>)
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	0612      	lsls	r2, r2, #24
 8003bfa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <MX_ADC_Init+0xd8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c04:	2207      	movs	r2, #7
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c08:	4b28      	ldr	r3, [pc, #160]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c0e:	4b27      	ldr	r3, [pc, #156]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c16:	2220      	movs	r2, #32
 8003c18:	2101      	movs	r1, #1
 8003c1a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c1c:	4b23      	ldr	r3, [pc, #140]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c1e:	2221      	movs	r2, #33	; 0x21
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c2c:	22c2      	movs	r2, #194	; 0xc2
 8003c2e:	32ff      	adds	r2, #255	; 0xff
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c34:	222c      	movs	r2, #44	; 0x2c
 8003c36:	2100      	movs	r1, #0
 8003c38:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c40:	4b1a      	ldr	r3, [pc, #104]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003c4c:	4b17      	ldr	r3, [pc, #92]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003c58:	4b14      	ldr	r3, [pc, #80]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fc1e 	bl	800449c <HAL_ADC_Init>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d001      	beq.n	8003c68 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003c64:	f000 f964 	bl	8003f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c68:	003b      	movs	r3, r7
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003c6e:	003b      	movs	r3, r7
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	0152      	lsls	r2, r2, #5
 8003c74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c76:	003a      	movs	r2, r7
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 ff0b 	bl	8004a98 <HAL_ADC_ConfigChannel>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003c86:	f000 f953 	bl	8003f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c8a:	003b      	movs	r3, r7
 8003c8c:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <MX_ADC_Init+0xe0>)
 8003c8e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c90:	003a      	movs	r2, r7
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <MX_ADC_Init+0xd8>)
 8003c94:	0011      	movs	r1, r2
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fefe 	bl	8004a98 <HAL_ADC_ConfigChannel>
 8003c9c:	1e03      	subs	r3, r0, #0
 8003c9e:	d001      	beq.n	8003ca4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003ca0:	f000 f946 	bl	8003f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	200008a4 	.word	0x200008a4
 8003cb0:	40012400 	.word	0x40012400
 8003cb4:	04000002 	.word	0x04000002

08003cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <MX_I2C1_Init+0x78>)
 8003cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <MX_I2C1_Init+0x7c>)
 8003cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cd4:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f001 fce9 	bl	80056cc <HAL_I2C_Init>
 8003cfa:	1e03      	subs	r3, r0, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003cfe:	f000 f917 	bl	8003f30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003d04:	2100      	movs	r1, #0
 8003d06:	0018      	movs	r0, r3
 8003d08:	f002 f880 	bl	8005e0c <HAL_I2CEx_ConfigAnalogFilter>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d10:	f000 f90e 	bl	8003f30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <MX_I2C1_Init+0x74>)
 8003d16:	2100      	movs	r1, #0
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f002 f8c3 	bl	8005ea4 <HAL_I2CEx_ConfigDigitalFilter>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d001      	beq.n	8003d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d22:	f000 f905 	bl	8003f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000738 	.word	0x20000738
 8003d30:	40005400 	.word	0x40005400
 8003d34:	2000090e 	.word	0x2000090e

08003d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d3e:	2308      	movs	r3, #8
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	0018      	movs	r0, r3
 8003d44:	2310      	movs	r3, #16
 8003d46:	001a      	movs	r2, r3
 8003d48:	2100      	movs	r1, #0
 8003d4a:	f004 fb97 	bl	800847c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d4e:	003b      	movs	r3, r7
 8003d50:	0018      	movs	r0, r3
 8003d52:	2308      	movs	r3, #8
 8003d54:	001a      	movs	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	f004 fb90 	bl	800847c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003d5e:	2280      	movs	r2, #128	; 0x80
 8003d60:	05d2      	lsls	r2, r2, #23
 8003d62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003d66:	22fa      	movs	r2, #250	; 0xfa
 8003d68:	0152      	lsls	r2, r2, #5
 8003d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003d74:	2231      	movs	r2, #49	; 0x31
 8003d76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f002 ffc4 	bl	8006d14 <HAL_TIM_Base_Init>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003d90:	f000 f8ce 	bl	8003f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d94:	2108      	movs	r1, #8
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	2280      	movs	r2, #128	; 0x80
 8003d9a:	0152      	lsls	r2, r2, #5
 8003d9c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d9e:	187a      	adds	r2, r7, r1
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003da2:	0011      	movs	r1, r2
 8003da4:	0018      	movs	r0, r3
 8003da6:	f003 f8eb 	bl	8006f80 <HAL_TIM_ConfigClockSource>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003dae:	f000 f8bf 	bl	8003f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db2:	003b      	movs	r3, r7
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db8:	003b      	movs	r3, r7
 8003dba:	2200      	movs	r2, #0
 8003dbc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003dbe:	003a      	movs	r2, r7
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <MX_TIM2_Init+0xa4>)
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f003 faa7 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003dce:	f000 f8af 	bl	8003f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b006      	add	sp, #24
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	20000868 	.word	0x20000868

08003de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <MX_USART1_UART_Init+0x5c>)
 8003de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003dec:	22e1      	movs	r2, #225	; 0xe1
 8003dee:	0252      	lsls	r2, r2, #9
 8003df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003e06:	220c      	movs	r2, #12
 8003e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <MX_USART1_UART_Init+0x58>)
 8003e24:	0018      	movs	r0, r3
 8003e26:	f003 fabb 	bl	80073a0 <HAL_UART_Init>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003e2e:	f000 f87f 	bl	8003f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200007d0 	.word	0x200007d0
 8003e3c:	40013800 	.word	0x40013800

08003e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <MX_DMA_Init+0x38>)
 8003e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <MX_DMA_Init+0x38>)
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <MX_DMA_Init+0x38>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	2201      	movs	r2, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2100      	movs	r1, #0
 8003e62:	200a      	movs	r0, #10
 8003e64:	f001 f86a 	bl	8004f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003e68:	200a      	movs	r0, #10
 8003e6a:	f001 f87c 	bl	8004f66 <HAL_NVIC_EnableIRQ>

}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b002      	add	sp, #8
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	40021000 	.word	0x40021000

08003e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e82:	240c      	movs	r4, #12
 8003e84:	193b      	adds	r3, r7, r4
 8003e86:	0018      	movs	r0, r3
 8003e88:	2314      	movs	r3, #20
 8003e8a:	001a      	movs	r2, r3
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	f004 faf5 	bl	800847c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <MX_GPIO_Init+0xa8>)
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <MX_GPIO_Init+0xa8>)
 8003e98:	2101      	movs	r1, #1
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e9e:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <MX_GPIO_Init+0xa8>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <MX_GPIO_Init+0xa8>)
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <MX_GPIO_Init+0xa8>)
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <MX_GPIO_Init+0xa8>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	2202      	movs	r2, #2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzz_Pin|DIR_Pin, GPIO_PIN_RESET);
 8003ec2:	23c0      	movs	r3, #192	; 0xc0
 8003ec4:	0159      	lsls	r1, r3, #5
 8003ec6:	23a0      	movs	r3, #160	; 0xa0
 8003ec8:	05db      	lsls	r3, r3, #23
 8003eca:	2200      	movs	r2, #0
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f001 fbdf 	bl	8005690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ed2:	193b      	adds	r3, r7, r4
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ed8:	193b      	adds	r3, r7, r4
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <MX_GPIO_Init+0xac>)
 8003edc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <MX_GPIO_Init+0xb0>)
 8003ee8:	0019      	movs	r1, r3
 8003eea:	0010      	movs	r0, r2
 8003eec:	f001 fa5a 	bl	80053a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzz_Pin DIR_Pin */
  GPIO_InitStruct.Pin = Buzz_Pin|DIR_Pin;
 8003ef0:	0021      	movs	r1, r4
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	22c0      	movs	r2, #192	; 0xc0
 8003ef6:	0152      	lsls	r2, r2, #5
 8003ef8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2201      	movs	r2, #1
 8003efe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0c:	187a      	adds	r2, r7, r1
 8003f0e:	23a0      	movs	r3, #160	; 0xa0
 8003f10:	05db      	lsls	r3, r3, #23
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f001 fa45 	bl	80053a4 <HAL_GPIO_Init>

}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b009      	add	sp, #36	; 0x24
 8003f20:	bd90      	pop	{r4, r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	40021000 	.word	0x40021000
 8003f28:	10110000 	.word	0x10110000
 8003f2c:	50000400 	.word	0x50000400

08003f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f34:	46c0      	nop			; (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <HAL_MspInit+0x24>)
 8003f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_MspInit+0x24>)
 8003f46:	2101      	movs	r1, #1
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <HAL_MspInit+0x24>)
 8003f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_MspInit+0x24>)
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	0549      	lsls	r1, r1, #21
 8003f56:	430a      	orrs	r2, r1
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	230c      	movs	r3, #12
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	0018      	movs	r0, r3
 8003f72:	2314      	movs	r3, #20
 8003f74:	001a      	movs	r2, r3
 8003f76:	2100      	movs	r1, #0
 8003f78:	f004 fa80 	bl	800847c <memset>
  if(hadc->Instance==ADC1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_ADC_MspInit+0x84>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d12b      	bne.n	8003fde <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f86:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_ADC_MspInit+0x88>)
 8003f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_ADC_MspInit+0x88>)
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	0089      	lsls	r1, r1, #2
 8003f90:	430a      	orrs	r2, r1
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_ADC_MspInit+0x88>)
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_ADC_MspInit+0x88>)
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_ADC_MspInit+0x88>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fac:	210c      	movs	r1, #12
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc0:	187a      	adds	r2, r7, r1
 8003fc2:	23a0      	movs	r3, #160	; 0xa0
 8003fc4:	05db      	lsls	r3, r3, #23
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f001 f9eb 	bl	80053a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	200c      	movs	r0, #12
 8003fd4:	f000 ffb2 	bl	8004f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003fd8:	200c      	movs	r0, #12
 8003fda:	f000 ffc4 	bl	8004f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b008      	add	sp, #32
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	40012400 	.word	0x40012400
 8003fec:	40021000 	.word	0x40021000

08003ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	2314      	movs	r3, #20
 8004000:	001a      	movs	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	f004 fa3a 	bl	800847c <memset>
  if(hi2c->Instance==I2C1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a17      	ldr	r2, [pc, #92]	; (800406c <HAL_I2C_MspInit+0x7c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d128      	bne.n	8004064 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_I2C_MspInit+0x80>)
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <HAL_I2C_MspInit+0x80>)
 8004018:	2102      	movs	r1, #2
 800401a:	430a      	orrs	r2, r1
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c
 800401e:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_I2C_MspInit+0x80>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	2202      	movs	r2, #2
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800402a:	210c      	movs	r1, #12
 800402c:	187b      	adds	r3, r7, r1
 800402e:	22c0      	movs	r2, #192	; 0xc0
 8004030:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004032:	187b      	adds	r3, r7, r1
 8004034:	2212      	movs	r2, #18
 8004036:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004038:	187b      	adds	r3, r7, r1
 800403a:	2201      	movs	r2, #1
 800403c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403e:	187b      	adds	r3, r7, r1
 8004040:	2203      	movs	r2, #3
 8004042:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004044:	187b      	adds	r3, r7, r1
 8004046:	2201      	movs	r2, #1
 8004048:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404a:	187b      	adds	r3, r7, r1
 800404c:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_I2C_MspInit+0x84>)
 800404e:	0019      	movs	r1, r3
 8004050:	0010      	movs	r0, r2
 8004052:	f001 f9a7 	bl	80053a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_I2C_MspInit+0x80>)
 8004058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_I2C_MspInit+0x80>)
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0389      	lsls	r1, r1, #14
 8004060:	430a      	orrs	r2, r1
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b008      	add	sp, #32
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40005400 	.word	0x40005400
 8004070:	40021000 	.word	0x40021000
 8004074:	50000400 	.word	0x50000400

08004078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	05db      	lsls	r3, r3, #23
 8004088:	429a      	cmp	r2, r3
 800408a:	d10d      	bne.n	80040a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800408c:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_TIM_Base_MspInit+0x38>)
 800408e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <HAL_TIM_Base_MspInit+0x38>)
 8004092:	2101      	movs	r1, #1
 8004094:	430a      	orrs	r2, r1
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004098:	2200      	movs	r2, #0
 800409a:	2100      	movs	r1, #0
 800409c:	200f      	movs	r0, #15
 800409e:	f000 ff4d 	bl	8004f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040a2:	200f      	movs	r0, #15
 80040a4:	f000 ff5f 	bl	8004f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000

080040b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	230c      	movs	r3, #12
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	0018      	movs	r0, r3
 80040c2:	2314      	movs	r3, #20
 80040c4:	001a      	movs	r2, r3
 80040c6:	2100      	movs	r1, #0
 80040c8:	f004 f9d8 	bl	800847c <memset>
  if(huart->Instance==USART1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a31      	ldr	r2, [pc, #196]	; (8004198 <HAL_UART_MspInit+0xe4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d15b      	bne.n	800418e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040d6:	4b31      	ldr	r3, [pc, #196]	; (800419c <HAL_UART_MspInit+0xe8>)
 80040d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040da:	4b30      	ldr	r3, [pc, #192]	; (800419c <HAL_UART_MspInit+0xe8>)
 80040dc:	2180      	movs	r1, #128	; 0x80
 80040de:	01c9      	lsls	r1, r1, #7
 80040e0:	430a      	orrs	r2, r1
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e4:	4b2d      	ldr	r3, [pc, #180]	; (800419c <HAL_UART_MspInit+0xe8>)
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	4b2c      	ldr	r3, [pc, #176]	; (800419c <HAL_UART_MspInit+0xe8>)
 80040ea:	2101      	movs	r1, #1
 80040ec:	430a      	orrs	r2, r1
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80040f0:	4b2a      	ldr	r3, [pc, #168]	; (800419c <HAL_UART_MspInit+0xe8>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2201      	movs	r2, #1
 80040f6:	4013      	ands	r3, r2
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040fc:	210c      	movs	r1, #12
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	22c0      	movs	r2, #192	; 0xc0
 8004102:	00d2      	lsls	r2, r2, #3
 8004104:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	187b      	adds	r3, r7, r1
 8004108:	2202      	movs	r2, #2
 800410a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	187b      	adds	r3, r7, r1
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004112:	187b      	adds	r3, r7, r1
 8004114:	2203      	movs	r2, #3
 8004116:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004118:	187b      	adds	r3, r7, r1
 800411a:	2204      	movs	r2, #4
 800411c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411e:	187a      	adds	r2, r7, r1
 8004120:	23a0      	movs	r3, #160	; 0xa0
 8004122:	05db      	lsls	r3, r3, #23
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f001 f93c 	bl	80053a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_UART_MspInit+0xec>)
 800412e:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <HAL_UART_MspInit+0xf0>)
 8004130:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_UART_MspInit+0xec>)
 8004134:	2203      	movs	r2, #3
 8004136:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_UART_MspInit+0xec>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800413e:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <HAL_UART_MspInit+0xec>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_UART_MspInit+0xec>)
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_UART_MspInit+0xec>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_UART_MspInit+0xec>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_UART_MspInit+0xec>)
 8004158:	2220      	movs	r2, #32
 800415a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_UART_MspInit+0xec>)
 800415e:	2200      	movs	r2, #0
 8004160:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_UART_MspInit+0xec>)
 8004164:	0018      	movs	r0, r3
 8004166:	f000 ff1b 	bl	8004fa0 <HAL_DMA_Init>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800416e:	f7ff fedf 	bl	8003f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <HAL_UART_MspInit+0xec>)
 8004176:	66da      	str	r2, [r3, #108]	; 0x6c
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_UART_MspInit+0xec>)
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800417e:	2200      	movs	r2, #0
 8004180:	2100      	movs	r1, #0
 8004182:	201b      	movs	r0, #27
 8004184:	f000 feda 	bl	8004f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004188:	201b      	movs	r0, #27
 800418a:	f000 feec 	bl	8004f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b008      	add	sp, #32
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	40013800 	.word	0x40013800
 800419c:	40021000 	.word	0x40021000
 80041a0:	20000788 	.word	0x20000788
 80041a4:	40020030 	.word	0x40020030

080041a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041b6:	e7fe      	b.n	80041b6 <HardFault_Handler+0x4>

080041b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041d0:	f000 f926 	bl	8004420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80041e2:	0018      	movs	r0, r3
 80041e4:	f001 f802 	bl	80051ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	20000788 	.word	0x20000788

080041f4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <ADC1_COMP_IRQHandler+0x14>)
 80041fa:	0018      	movs	r0, r3
 80041fc:	f000 fb80 	bl	8004900 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	200008a4 	.word	0x200008a4

0800420c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <TIM2_IRQHandler+0x14>)
 8004212:	0018      	movs	r0, r3
 8004214:	f002 fdcc 	bl	8006db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	20000868 	.word	0x20000868

08004224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <USART1_IRQHandler+0x14>)
 800422a:	0018      	movs	r0, r3
 800422c:	f003 fa4c 	bl	80076c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	200007d0 	.word	0x200007d0

0800423c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004244:	4a14      	ldr	r2, [pc, #80]	; (8004298 <_sbrk+0x5c>)
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <_sbrk+0x60>)
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <_sbrk+0x64>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <_sbrk+0x64>)
 800425a:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <_sbrk+0x68>)
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <_sbrk+0x64>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	18d3      	adds	r3, r2, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d207      	bcs.n	800427c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800426c:	f004 f8c0 	bl	80083f0 <__errno>
 8004270:	0003      	movs	r3, r0
 8004272:	220c      	movs	r2, #12
 8004274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004276:	2301      	movs	r3, #1
 8004278:	425b      	negs	r3, r3
 800427a:	e009      	b.n	8004290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800427c:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <_sbrk+0x64>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <_sbrk+0x64>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	18d2      	adds	r2, r2, r3
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <_sbrk+0x64>)
 800428c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b006      	add	sp, #24
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20002000 	.word	0x20002000
 800429c:	00000400 	.word	0x00000400
 80042a0:	20000624 	.word	0x20000624
 80042a4:	20000910 	.word	0x20000910

080042a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <SystemInit+0x64>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b16      	ldr	r3, [pc, #88]	; (800430c <SystemInit+0x64>)
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	0049      	lsls	r1, r1, #1
 80042b6:	430a      	orrs	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <SystemInit+0x64>)
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <SystemInit+0x64>)
 80042c0:	4913      	ldr	r1, [pc, #76]	; (8004310 <SystemInit+0x68>)
 80042c2:	400a      	ands	r2, r1
 80042c4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <SystemInit+0x64>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <SystemInit+0x64>)
 80042cc:	4911      	ldr	r1, [pc, #68]	; (8004314 <SystemInit+0x6c>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <SystemInit+0x64>)
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <SystemInit+0x64>)
 80042d8:	2101      	movs	r1, #1
 80042da:	438a      	bics	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <SystemInit+0x64>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <SystemInit+0x64>)
 80042e4:	490c      	ldr	r1, [pc, #48]	; (8004318 <SystemInit+0x70>)
 80042e6:	400a      	ands	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <SystemInit+0x64>)
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <SystemInit+0x64>)
 80042f0:	490a      	ldr	r1, [pc, #40]	; (800431c <SystemInit+0x74>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <SystemInit+0x64>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <SystemInit+0x78>)
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	0512      	lsls	r2, r2, #20
 8004302:	609a      	str	r2, [r3, #8]
#endif
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	40021000 	.word	0x40021000
 8004310:	88ff400c 	.word	0x88ff400c
 8004314:	fef6fff6 	.word	0xfef6fff6
 8004318:	fffbffff 	.word	0xfffbffff
 800431c:	ff02ffff 	.word	0xff02ffff
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004324:	480d      	ldr	r0, [pc, #52]	; (800435c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004326:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800432a:	e003      	b.n	8004334 <LoopCopyDataInit>

0800432c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800432e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004332:	3104      	adds	r1, #4

08004334 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004334:	480b      	ldr	r0, [pc, #44]	; (8004364 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800433a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800433c:	d3f6      	bcc.n	800432c <CopyDataInit>
  ldr  r2, =_sbss
 800433e:	4a0b      	ldr	r2, [pc, #44]	; (800436c <LoopForever+0x12>)
  b  LoopFillZerobss
 8004340:	e002      	b.n	8004348 <LoopFillZerobss>

08004342 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004342:	2300      	movs	r3, #0
  str  r3, [r2]
 8004344:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004346:	3204      	adds	r2, #4

08004348 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <LoopForever+0x16>)
  cmp  r2, r3
 800434a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800434c:	d3f9      	bcc.n	8004342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800434e:	f7ff ffab 	bl	80042a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004352:	f004 f853 	bl	80083fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004356:	f7ff fb8b 	bl	8003a70 <main>

0800435a <LoopForever>:

LoopForever:
    b LoopForever
 800435a:	e7fe      	b.n	800435a <LoopForever>
   ldr   r0, =_estack
 800435c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8004360:	0800c458 	.word	0x0800c458
  ldr  r0, =_sdata
 8004364:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004368:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800436c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8004370:	2000090c 	.word	0x2000090c

08004374 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <DMA1_Channel1_IRQHandler>
	...

08004378 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800437e:	1dfb      	adds	r3, r7, #7
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_Init+0x3c>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_Init+0x3c>)
 800438a:	2140      	movs	r1, #64	; 0x40
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004390:	2000      	movs	r0, #0
 8004392:	f000 f811 	bl	80043b8 <HAL_InitTick>
 8004396:	1e03      	subs	r3, r0, #0
 8004398:	d003      	beq.n	80043a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800439a:	1dfb      	adds	r3, r7, #7
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e001      	b.n	80043a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043a2:	f7ff fdcb 	bl	8003f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043a6:	1dfb      	adds	r3, r7, #7
 80043a8:	781b      	ldrb	r3, [r3, #0]
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	40022000 	.word	0x40022000

080043b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_InitTick+0x5c>)
 80043c2:	681c      	ldr	r4, [r3, #0]
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <HAL_InitTick+0x60>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	0019      	movs	r1, r3
 80043ca:	23fa      	movs	r3, #250	; 0xfa
 80043cc:	0098      	lsls	r0, r3, #2
 80043ce:	f7fb fead 	bl	800012c <__udivsi3>
 80043d2:	0003      	movs	r3, r0
 80043d4:	0019      	movs	r1, r3
 80043d6:	0020      	movs	r0, r4
 80043d8:	f7fb fea8 	bl	800012c <__udivsi3>
 80043dc:	0003      	movs	r3, r0
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 fdd1 	bl	8004f86 <HAL_SYSTICK_Config>
 80043e4:	1e03      	subs	r3, r0, #0
 80043e6:	d001      	beq.n	80043ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e00f      	b.n	800440c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d80b      	bhi.n	800440a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	2301      	movs	r3, #1
 80043f6:	425b      	negs	r3, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	0018      	movs	r0, r3
 80043fc:	f000 fd9e 	bl	8004f3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_InitTick+0x64>)
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b003      	add	sp, #12
 8004412:	bd90      	pop	{r4, r7, pc}
 8004414:	20000010 	.word	0x20000010
 8004418:	20000018 	.word	0x20000018
 800441c:	20000014 	.word	0x20000014

08004420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_IncTick+0x1c>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	001a      	movs	r2, r3
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_IncTick+0x20>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	18d2      	adds	r2, r2, r3
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_IncTick+0x20>)
 8004432:	601a      	str	r2, [r3, #0]
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	20000018 	.word	0x20000018
 8004440:	20000904 	.word	0x20000904

08004444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  return uwTick;
 8004448:	4b02      	ldr	r3, [pc, #8]	; (8004454 <HAL_GetTick+0x10>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	0018      	movs	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	20000904 	.word	0x20000904

08004458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004460:	f7ff fff0 	bl	8004444 <HAL_GetTick>
 8004464:	0003      	movs	r3, r0
 8004466:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	d005      	beq.n	800447e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_Delay+0x40>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	001a      	movs	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	189b      	adds	r3, r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	f7ff ffe0 	bl	8004444 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	429a      	cmp	r2, r3
 800448e:	d8f7      	bhi.n	8004480 <HAL_Delay+0x28>
  {
  }
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b004      	add	sp, #16
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000018 	.word	0x20000018

0800449c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e159      	b.n	8004762 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2250      	movs	r2, #80	; 0x50
 80044c0:	2100      	movs	r1, #0
 80044c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7ff fd4c 	bl	8003f64 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	2210      	movs	r2, #16
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d005      	beq.n	80044e4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2204      	movs	r2, #4
 80044e0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80044e2:	d00b      	beq.n	80044fc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	2210      	movs	r2, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2250      	movs	r2, #80	; 0x50
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e132      	b.n	8004762 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	4a9a      	ldr	r2, [pc, #616]	; (800476c <HAL_ADC_Init+0x2d0>)
 8004502:	4013      	ands	r3, r2
 8004504:	2202      	movs	r2, #2
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2203      	movs	r2, #3
 8004514:	4013      	ands	r3, r2
 8004516:	2b01      	cmp	r3, #1
 8004518:	d108      	bne.n	800452c <HAL_ADC_Init+0x90>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	4013      	ands	r3, r2
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_ADC_Init+0x90>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_ADC_Init+0x92>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d149      	bne.n	80045c6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	23c0      	movs	r3, #192	; 0xc0
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	429a      	cmp	r2, r3
 800453c:	d00b      	beq.n	8004556 <HAL_ADC_Init+0xba>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	429a      	cmp	r2, r3
 8004548:	d005      	beq.n	8004556 <HAL_ADC_Init+0xba>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	429a      	cmp	r2, r3
 8004554:	d111      	bne.n	800457a <HAL_ADC_Init+0xde>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0092      	lsls	r2, r2, #2
 8004562:	0892      	lsrs	r2, r2, #2
 8004564:	611a      	str	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6919      	ldr	r1, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	611a      	str	r2, [r3, #16]
 8004578:	e014      	b.n	80045a4 <HAL_ADC_Init+0x108>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0092      	lsls	r2, r2, #2
 8004586:	0892      	lsrs	r2, r2, #2
 8004588:	611a      	str	r2, [r3, #16]
 800458a:	4b79      	ldr	r3, [pc, #484]	; (8004770 <HAL_ADC_Init+0x2d4>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b78      	ldr	r3, [pc, #480]	; (8004770 <HAL_ADC_Init+0x2d4>)
 8004590:	4978      	ldr	r1, [pc, #480]	; (8004774 <HAL_ADC_Init+0x2d8>)
 8004592:	400a      	ands	r2, r1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_ADC_Init+0x2d4>)
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4b74      	ldr	r3, [pc, #464]	; (8004770 <HAL_ADC_Init+0x2d4>)
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2118      	movs	r1, #24
 80045b0:	438a      	bics	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80045c6:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <HAL_ADC_Init+0x2d4>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b69      	ldr	r3, [pc, #420]	; (8004770 <HAL_ADC_Init+0x2d4>)
 80045cc:	496a      	ldr	r1, [pc, #424]	; (8004778 <HAL_ADC_Init+0x2dc>)
 80045ce:	400a      	ands	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80045d2:	4b67      	ldr	r3, [pc, #412]	; (8004770 <HAL_ADC_Init+0x2d4>)
 80045d4:	6819      	ldr	r1, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	065a      	lsls	r2, r3, #25
 80045dc:	4b64      	ldr	r3, [pc, #400]	; (8004770 <HAL_ADC_Init+0x2d4>)
 80045de:	430a      	orrs	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	055b      	lsls	r3, r3, #21
 80045ec:	4013      	ands	r3, r2
 80045ee:	d108      	bne.n	8004602 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2180      	movs	r1, #128	; 0x80
 80045fc:	0549      	lsls	r1, r1, #21
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	495b      	ldr	r1, [pc, #364]	; (800477c <HAL_ADC_Init+0x2e0>)
 800460e:	400a      	ands	r2, r1
 8004610:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68d9      	ldr	r1, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d101      	bne.n	8004628 <HAL_ADC_Init+0x18c>
 8004624:	2304      	movs	r3, #4
 8004626:	e000      	b.n	800462a <HAL_ADC_Init+0x18e>
 8004628:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800462a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2020      	movs	r0, #32
 8004630:	5c1b      	ldrb	r3, [r3, r0]
 8004632:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004634:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	202c      	movs	r0, #44	; 0x2c
 800463a:	5c1b      	ldrb	r3, [r3, r0]
 800463c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800463e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004644:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800464c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004654:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004662:	23c2      	movs	r3, #194	; 0xc2
 8004664:	33ff      	adds	r3, #255	; 0xff
 8004666:	429a      	cmp	r2, r3
 8004668:	d00b      	beq.n	8004682 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68d9      	ldr	r1, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2221      	movs	r2, #33	; 0x21
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d11a      	bne.n	80046c2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	5c9b      	ldrb	r3, [r3, r2]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	0249      	lsls	r1, r1, #9
 80046a4:	430a      	orrs	r2, r1
 80046a6:	60da      	str	r2, [r3, #12]
 80046a8:	e00b      	b.n	80046c2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	2220      	movs	r2, #32
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	2201      	movs	r2, #1
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d11f      	bne.n	800470a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	492a      	ldr	r1, [pc, #168]	; (8004780 <HAL_ADC_Init+0x2e4>)
 80046d6:	400a      	ands	r2, r1
 80046d8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6919      	ldr	r1, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046e8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80046ee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2101      	movs	r1, #1
 8004704:	430a      	orrs	r2, r1
 8004706:	611a      	str	r2, [r3, #16]
 8004708:	e00e      	b.n	8004728 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2201      	movs	r2, #1
 8004712:	4013      	ands	r3, r2
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2101      	movs	r1, #1
 8004724:	438a      	bics	r2, r1
 8004726:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2107      	movs	r1, #7
 8004734:	438a      	bics	r2, r1
 8004736:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6959      	ldr	r1, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	2203      	movs	r2, #3
 8004756:	4393      	bics	r3, r2
 8004758:	2201      	movs	r2, #1
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	0018      	movs	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	b002      	add	sp, #8
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	fffffefd 	.word	0xfffffefd
 8004770:	40012708 	.word	0x40012708
 8004774:	ffc3ffff 	.word	0xffc3ffff
 8004778:	fdffffff 	.word	0xfdffffff
 800477c:	fffe0219 	.word	0xfffe0219
 8004780:	fffffc03 	.word	0xfffffc03

08004784 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004784:	b5b0      	push	{r4, r5, r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800478c:	230f      	movs	r3, #15
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2250      	movs	r2, #80	; 0x50
 8004798:	5c9b      	ldrb	r3, [r3, r2]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_ADC_Stop+0x1e>
 800479e:	2302      	movs	r3, #2
 80047a0:	e02a      	b.n	80047f8 <HAL_ADC_Stop+0x74>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2250      	movs	r2, #80	; 0x50
 80047a6:	2101      	movs	r1, #1
 80047a8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80047aa:	250f      	movs	r5, #15
 80047ac:	197c      	adds	r4, r7, r5
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 fab7 	bl	8004d24 <ADC_ConversionStop>
 80047b6:	0003      	movs	r3, r0
 80047b8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80047ba:	197b      	adds	r3, r7, r5
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80047c2:	250f      	movs	r5, #15
 80047c4:	197c      	adds	r4, r7, r5
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f000 fa4b 	bl	8004c64 <ADC_Disable>
 80047ce:	0003      	movs	r3, r0
 80047d0:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80047d2:	197b      	adds	r3, r7, r5
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d107      	bne.n	80047ea <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	4a08      	ldr	r2, [pc, #32]	; (8004800 <HAL_ADC_Stop+0x7c>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	2201      	movs	r2, #1
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2250      	movs	r2, #80	; 0x50
 80047ee:	2100      	movs	r1, #0
 80047f0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80047f2:	230f      	movs	r3, #15
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	781b      	ldrb	r3, [r3, #0]
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b004      	add	sp, #16
 80047fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004800:	fffffefe 	.word	0xfffffefe

08004804 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800480c:	230f      	movs	r3, #15
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2204      	movs	r2, #4
 800481c:	4013      	ands	r3, r2
 800481e:	d156      	bne.n	80048ce <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2250      	movs	r2, #80	; 0x50
 8004824:	5c9b      	ldrb	r3, [r3, r2]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_ADC_Start_IT+0x2a>
 800482a:	2302      	movs	r3, #2
 800482c:	e056      	b.n	80048dc <HAL_ADC_Start_IT+0xd8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2250      	movs	r2, #80	; 0x50
 8004832:	2101      	movs	r1, #1
 8004834:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d007      	beq.n	800484e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800483e:	230f      	movs	r3, #15
 8004840:	18fc      	adds	r4, r7, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f9ad 	bl	8004ba4 <ADC_Enable>
 800484a:	0003      	movs	r3, r0
 800484c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800484e:	230f      	movs	r3, #15
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d13e      	bne.n	80048d6 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <HAL_ADC_Start_IT+0xe0>)
 800485e:	4013      	ands	r3, r2
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	0052      	lsls	r2, r2, #1
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2250      	movs	r2, #80	; 0x50
 8004874:	2100      	movs	r1, #0
 8004876:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	221c      	movs	r2, #28
 800487e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d110      	bne.n	80048aa <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2104      	movs	r1, #4
 8004894:	438a      	bics	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2118      	movs	r1, #24
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
          break;
 80048a8:	e008      	b.n	80048bc <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	211c      	movs	r1, #28
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
          break;
 80048ba:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2104      	movs	r1, #4
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	e003      	b.n	80048d6 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80048ce:	230f      	movs	r3, #15
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	2202      	movs	r2, #2
 80048d4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80048d6:	230f      	movs	r3, #15
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b005      	add	sp, #20
 80048e2:	bd90      	pop	{r4, r7, pc}
 80048e4:	fffff0fe 	.word	0xfffff0fe

080048e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2204      	movs	r2, #4
 8004910:	4013      	ands	r3, r2
 8004912:	2b04      	cmp	r3, #4
 8004914:	d106      	bne.n	8004924 <HAL_ADC_IRQHandler+0x24>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2204      	movs	r2, #4
 800491e:	4013      	ands	r3, r2
 8004920:	2b04      	cmp	r3, #4
 8004922:	d00d      	beq.n	8004940 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2208      	movs	r2, #8
 800492c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800492e:	2b08      	cmp	r3, #8
 8004930:	d154      	bne.n	80049dc <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2208      	movs	r2, #8
 800493a:	4013      	ands	r3, r2
 800493c:	2b08      	cmp	r3, #8
 800493e:	d14d      	bne.n	80049dc <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	2210      	movs	r2, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d106      	bne.n	8004958 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	2280      	movs	r2, #128	; 0x80
 8004950:	0092      	lsls	r2, r2, #2
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	23c0      	movs	r3, #192	; 0xc0
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	4013      	ands	r3, r2
 8004964:	d12e      	bne.n	80049c4 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800496c:	2b00      	cmp	r3, #0
 800496e:	d129      	bne.n	80049c4 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2208      	movs	r2, #8
 8004978:	4013      	ands	r3, r2
 800497a:	2b08      	cmp	r3, #8
 800497c:	d122      	bne.n	80049c4 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2204      	movs	r2, #4
 8004986:	4013      	ands	r3, r2
 8004988:	d110      	bne.n	80049ac <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	210c      	movs	r1, #12
 8004996:	438a      	bics	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	4a35      	ldr	r2, [pc, #212]	; (8004a74 <HAL_ADC_IRQHandler+0x174>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	2201      	movs	r2, #1
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
 80049aa:	e00b      	b.n	80049c4 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	2220      	movs	r2, #32
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	2201      	movs	r2, #1
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fe ff72 	bl	80038b0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d003      	beq.n	80049dc <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	220c      	movs	r2, #12
 80049da:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2280      	movs	r2, #128	; 0x80
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d115      	bne.n	8004a16 <HAL_ADC_IRQHandler+0x116>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2280      	movs	r2, #128	; 0x80
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d10e      	bne.n	8004a16 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	0252      	lsls	r2, r2, #9
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f835 	bl	8004a78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2280      	movs	r2, #128	; 0x80
 8004a14:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d123      	bne.n	8004a6c <HAL_ADC_IRQHandler+0x16c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d11c      	bne.n	8004a6c <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d006      	beq.n	8004a48 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d10d      	bne.n	8004a64 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2210      	movs	r2, #16
 8004a5a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 f812 	bl	8004a88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2210      	movs	r2, #16
 8004a6a:	601a      	str	r2, [r3, #0]
  }
  
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b002      	add	sp, #8
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	fffffefe 	.word	0xfffffefe

08004a78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b002      	add	sp, #8
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2250      	movs	r2, #80	; 0x50
 8004aa6:	5c9b      	ldrb	r3, [r3, r2]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x18>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e06c      	b.n	8004b8a <HAL_ADC_ConfigChannel+0xf2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2250      	movs	r2, #80	; 0x50
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	2220      	movs	r2, #32
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2250      	movs	r2, #80	; 0x50
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e056      	b.n	8004b8a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a2c      	ldr	r2, [pc, #176]	; (8004b94 <HAL_ADC_ConfigChannel+0xfc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d028      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	035b      	lsls	r3, r3, #13
 8004af2:	0b5a      	lsrs	r2, r3, #13
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	02db      	lsls	r3, r3, #11
 8004b04:	4013      	ands	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004b08:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b22      	ldr	r3, [pc, #136]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b0e:	2180      	movs	r1, #128	; 0x80
 8004b10:	0409      	lsls	r1, r1, #16
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004b16:	200a      	movs	r0, #10
 8004b18:	f000 f94a 	bl	8004db0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	4013      	ands	r3, r2
 8004b26:	d02b      	beq.n	8004b80 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	03c9      	lsls	r1, r1, #15
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e023      	b.n	8004b80 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	035b      	lsls	r3, r3, #13
 8004b44:	0b5b      	lsrs	r3, r3, #13
 8004b46:	43d9      	mvns	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	02db      	lsls	r3, r3, #11
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d005      	beq.n	8004b68 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b62:	490e      	ldr	r1, [pc, #56]	; (8004b9c <HAL_ADC_ConfigChannel+0x104>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	029b      	lsls	r3, r3, #10
 8004b70:	4013      	ands	r3, r2
 8004b72:	d005      	beq.n	8004b80 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <HAL_ADC_ConfigChannel+0x100>)
 8004b7a:	4909      	ldr	r1, [pc, #36]	; (8004ba0 <HAL_ADC_ConfigChannel+0x108>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2250      	movs	r2, #80	; 0x50
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b002      	add	sp, #8
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	00001001 	.word	0x00001001
 8004b98:	40012708 	.word	0x40012708
 8004b9c:	ff7fffff 	.word	0xff7fffff
 8004ba0:	ffbfffff 	.word	0xffbfffff

08004ba4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d108      	bne.n	8004bd0 <ADC_Enable+0x2c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <ADC_Enable+0x2c>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <ADC_Enable+0x2e>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13f      	bne.n	8004c56 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <ADC_Enable+0xbc>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	d00d      	beq.n	8004bfe <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	2210      	movs	r2, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e02c      	b.n	8004c58 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2101      	movs	r1, #1
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004c0e:	2001      	movs	r0, #1
 8004c10:	f000 f8ce 	bl	8004db0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c14:	f7ff fc16 	bl	8004444 <HAL_GetTick>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004c1c:	e014      	b.n	8004c48 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c1e:	f7ff fc11 	bl	8004444 <HAL_GetTick>
 8004c22:	0002      	movs	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b0a      	cmp	r3, #10
 8004c2a:	d90d      	bls.n	8004c48 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	2210      	movs	r2, #16
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e007      	b.n	8004c58 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d1e3      	bne.n	8004c1e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b004      	add	sp, #16
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	80000017 	.word	0x80000017

08004c64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2203      	movs	r2, #3
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d108      	bne.n	8004c90 <ADC_Disable+0x2c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <ADC_Disable+0x2c>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <ADC_Disable+0x2e>
 8004c90:	2300      	movs	r3, #0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d041      	beq.n	8004d1a <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d110      	bne.n	8004cc6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2102      	movs	r1, #2
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cbc:	f7ff fbc2 	bl	8004444 <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004cc4:	e022      	b.n	8004d0c <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	2210      	movs	r2, #16
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e01c      	b.n	8004d1c <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ce2:	f7ff fbaf 	bl	8004444 <HAL_GetTick>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b0a      	cmp	r3, #10
 8004cee:	d90d      	bls.n	8004d0c <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	2201      	movs	r2, #1
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e007      	b.n	8004d1c <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2201      	movs	r2, #1
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d0e3      	beq.n	8004ce2 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b004      	add	sp, #16
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2204      	movs	r2, #4
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d034      	beq.n	8004da6 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2204      	movs	r2, #4
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d10d      	bne.n	8004d66 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2202      	movs	r2, #2
 8004d52:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004d54:	d107      	bne.n	8004d66 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2110      	movs	r1, #16
 8004d62:	430a      	orrs	r2, r1
 8004d64:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d66:	f7ff fb6d 	bl	8004444 <HAL_GetTick>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004d6e:	e014      	b.n	8004d9a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004d70:	f7ff fb68 	bl	8004444 <HAL_GetTick>
 8004d74:	0002      	movs	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b0a      	cmp	r3, #10
 8004d7c:	d90d      	bls.n	8004d9a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d82:	2210      	movs	r2, #16
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8e:	2201      	movs	r2, #1
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e006      	b.n	8004da8 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2204      	movs	r2, #4
 8004da2:	4013      	ands	r3, r2
 8004da4:	d1e4      	bne.n	8004d70 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <ADC_DelayMicroSecond+0x34>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	490a      	ldr	r1, [pc, #40]	; (8004de8 <ADC_DelayMicroSecond+0x38>)
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f7fb f9b4 	bl	800012c <__udivsi3>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4353      	muls	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004dce:	e002      	b.n	8004dd6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f9      	bne.n	8004dd0 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b004      	add	sp, #16
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000010 	.word	0x20000010
 8004de8:	000f4240 	.word	0x000f4240

08004dec <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	0002      	movs	r2, r0
 8004df4:	1dfb      	adds	r3, r7, #7
 8004df6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004df8:	1dfb      	adds	r3, r7, #7
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	231f      	movs	r3, #31
 8004e00:	401a      	ands	r2, r3
 8004e02:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <NVIC_EnableIRQ+0x28>)
 8004e04:	2101      	movs	r1, #1
 8004e06:	4091      	lsls	r1, r2
 8004e08:	000a      	movs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	e000e100 	.word	0xe000e100

08004e18 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	0002      	movs	r2, r0
 8004e20:	6039      	str	r1, [r7, #0]
 8004e22:	1dfb      	adds	r3, r7, #7
 8004e24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004e26:	1dfb      	adds	r3, r7, #7
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2c:	d932      	bls.n	8004e94 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e2e:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <NVIC_SetPriority+0xd4>)
 8004e30:	1dfb      	adds	r3, r7, #7
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	0019      	movs	r1, r3
 8004e36:	230f      	movs	r3, #15
 8004e38:	400b      	ands	r3, r1
 8004e3a:	3b08      	subs	r3, #8
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	3306      	adds	r3, #6
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	18d3      	adds	r3, r2, r3
 8004e44:	3304      	adds	r3, #4
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	1dfa      	adds	r2, r7, #7
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	2203      	movs	r2, #3
 8004e50:	400a      	ands	r2, r1
 8004e52:	00d2      	lsls	r2, r2, #3
 8004e54:	21ff      	movs	r1, #255	; 0xff
 8004e56:	4091      	lsls	r1, r2
 8004e58:	000a      	movs	r2, r1
 8004e5a:	43d2      	mvns	r2, r2
 8004e5c:	401a      	ands	r2, r3
 8004e5e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	019b      	lsls	r3, r3, #6
 8004e64:	22ff      	movs	r2, #255	; 0xff
 8004e66:	401a      	ands	r2, r3
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	2303      	movs	r3, #3
 8004e70:	4003      	ands	r3, r0
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e76:	481d      	ldr	r0, [pc, #116]	; (8004eec <NVIC_SetPriority+0xd4>)
 8004e78:	1dfb      	adds	r3, r7, #7
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	001c      	movs	r4, r3
 8004e7e:	230f      	movs	r3, #15
 8004e80:	4023      	ands	r3, r4
 8004e82:	3b08      	subs	r3, #8
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	430a      	orrs	r2, r1
 8004e88:	3306      	adds	r3, #6
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	18c3      	adds	r3, r0, r3
 8004e8e:	3304      	adds	r3, #4
 8004e90:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e92:	e027      	b.n	8004ee4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e94:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <NVIC_SetPriority+0xd8>)
 8004e96:	1dfb      	adds	r3, r7, #7
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	33c0      	adds	r3, #192	; 0xc0
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	589b      	ldr	r3, [r3, r2]
 8004ea4:	1dfa      	adds	r2, r7, #7
 8004ea6:	7812      	ldrb	r2, [r2, #0]
 8004ea8:	0011      	movs	r1, r2
 8004eaa:	2203      	movs	r2, #3
 8004eac:	400a      	ands	r2, r1
 8004eae:	00d2      	lsls	r2, r2, #3
 8004eb0:	21ff      	movs	r1, #255	; 0xff
 8004eb2:	4091      	lsls	r1, r2
 8004eb4:	000a      	movs	r2, r1
 8004eb6:	43d2      	mvns	r2, r2
 8004eb8:	401a      	ands	r2, r3
 8004eba:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	019b      	lsls	r3, r3, #6
 8004ec0:	22ff      	movs	r2, #255	; 0xff
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	1dfb      	adds	r3, r7, #7
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	0018      	movs	r0, r3
 8004eca:	2303      	movs	r3, #3
 8004ecc:	4003      	ands	r3, r0
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ed2:	4807      	ldr	r0, [pc, #28]	; (8004ef0 <NVIC_SetPriority+0xd8>)
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	430a      	orrs	r2, r1
 8004ede:	33c0      	adds	r3, #192	; 0xc0
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	501a      	str	r2, [r3, r0]
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b003      	add	sp, #12
 8004eea:	bd90      	pop	{r4, r7, pc}
 8004eec:	e000ed00 	.word	0xe000ed00
 8004ef0:	e000e100 	.word	0xe000e100

08004ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <SysTick_Config+0x40>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f06:	2301      	movs	r3, #1
 8004f08:	e010      	b.n	8004f2c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <SysTick_Config+0x44>)
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	3a01      	subs	r2, #1
 8004f10:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f12:	2301      	movs	r3, #1
 8004f14:	425b      	negs	r3, r3
 8004f16:	2103      	movs	r1, #3
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7ff ff7d 	bl	8004e18 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <SysTick_Config+0x44>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <SysTick_Config+0x44>)
 8004f26:	2207      	movs	r2, #7
 8004f28:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	00ffffff 	.word	0x00ffffff
 8004f38:	e000e010 	.word	0xe000e010

08004f3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	210f      	movs	r1, #15
 8004f48:	187b      	adds	r3, r7, r1
 8004f4a:	1c02      	adds	r2, r0, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	187b      	adds	r3, r7, r1
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b25b      	sxtb	r3, r3
 8004f56:	0011      	movs	r1, r2
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7ff ff5d 	bl	8004e18 <NVIC_SetPriority>
}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b004      	add	sp, #16
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	0002      	movs	r2, r0
 8004f6e:	1dfb      	adds	r3, r7, #7
 8004f70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f72:	1dfb      	adds	r3, r7, #7
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b25b      	sxtb	r3, r3
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f7ff ff37 	bl	8004dec <NVIC_EnableIRQ>
}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f7ff ffaf 	bl	8004ef4 <SysTick_Config>
 8004f96:	0003      	movs	r3, r0
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e061      	b.n	8005076 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a32      	ldr	r2, [pc, #200]	; (8005080 <HAL_DMA_Init+0xe0>)
 8004fb8:	4694      	mov	ip, r2
 8004fba:	4463      	add	r3, ip
 8004fbc:	2114      	movs	r1, #20
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7fb f8b4 	bl	800012c <__udivsi3>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	009a      	lsls	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <HAL_DMA_Init+0xe4>)
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2225      	movs	r2, #37	; 0x25
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a28      	ldr	r2, [pc, #160]	; (8005088 <HAL_DMA_Init+0xe8>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	01db      	lsls	r3, r3, #7
 8005028:	429a      	cmp	r2, r3
 800502a:	d018      	beq.n	800505e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800502c:	4b17      	ldr	r3, [pc, #92]	; (800508c <HAL_DMA_Init+0xec>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005034:	211c      	movs	r1, #28
 8005036:	400b      	ands	r3, r1
 8005038:	210f      	movs	r1, #15
 800503a:	4099      	lsls	r1, r3
 800503c:	000b      	movs	r3, r1
 800503e:	43d9      	mvns	r1, r3
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_DMA_Init+0xec>)
 8005042:	400a      	ands	r2, r1
 8005044:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005046:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_DMA_Init+0xec>)
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	201c      	movs	r0, #28
 8005054:	4003      	ands	r3, r0
 8005056:	409a      	lsls	r2, r3
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_DMA_Init+0xec>)
 800505a:	430a      	orrs	r2, r1
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2225      	movs	r2, #37	; 0x25
 8005068:	2101      	movs	r1, #1
 800506a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2224      	movs	r2, #36	; 0x24
 8005070:	2100      	movs	r1, #0
 8005072:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	b004      	add	sp, #16
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	bffdfff8 	.word	0xbffdfff8
 8005084:	40020000 	.word	0x40020000
 8005088:	ffff800f 	.word	0xffff800f
 800508c:	400200a8 	.word	0x400200a8

08005090 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2317      	movs	r3, #23
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	2200      	movs	r2, #0
 80050a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2224      	movs	r2, #36	; 0x24
 80050aa:	5c9b      	ldrb	r3, [r3, r2]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Start_IT+0x24>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e04f      	b.n	8005154 <HAL_DMA_Start_IT+0xc4>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2224      	movs	r2, #36	; 0x24
 80050b8:	2101      	movs	r1, #1
 80050ba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2225      	movs	r2, #37	; 0x25
 80050c0:	5c9b      	ldrb	r3, [r3, r2]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d13a      	bne.n	800513e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2225      	movs	r2, #37	; 0x25
 80050cc:	2102      	movs	r1, #2
 80050ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	438a      	bics	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f92b 	bl	8005348 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	210e      	movs	r1, #14
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e00f      	b.n	800512c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2104      	movs	r1, #4
 8005118:	438a      	bics	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	210a      	movs	r1, #10
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2101      	movs	r1, #1
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e007      	b.n	800514e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	2100      	movs	r1, #0
 8005144:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005146:	2317      	movs	r3, #23
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	2202      	movs	r2, #2
 800514c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800514e:	2317      	movs	r3, #23
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	781b      	ldrb	r3, [r3, #0]
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b006      	add	sp, #24
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005164:	230f      	movs	r3, #15
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2225      	movs	r2, #37	; 0x25
 8005170:	5c9b      	ldrb	r3, [r3, r2]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d007      	beq.n	8005188 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2204      	movs	r2, #4
 800517c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800517e:	230f      	movs	r3, #15
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e02a      	b.n	80051de <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	210e      	movs	r1, #14
 8005194:	438a      	bics	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2101      	movs	r1, #1
 80051a4:	438a      	bics	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	221c      	movs	r2, #28
 80051ae:	401a      	ands	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	2101      	movs	r1, #1
 80051b6:	4091      	lsls	r1, r2
 80051b8:	000a      	movs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2225      	movs	r2, #37	; 0x25
 80051c0:	2101      	movs	r1, #1
 80051c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2224      	movs	r2, #36	; 0x24
 80051c8:	2100      	movs	r1, #0
 80051ca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	0010      	movs	r0, r2
 80051dc:	4798      	blx	r3
    }
  }
  return status;
 80051de:	230f      	movs	r3, #15
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	781b      	ldrb	r3, [r3, #0]
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b004      	add	sp, #16
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	221c      	movs	r2, #28
 800520a:	4013      	ands	r3, r2
 800520c:	2204      	movs	r2, #4
 800520e:	409a      	lsls	r2, r3
 8005210:	0013      	movs	r3, r2
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	d026      	beq.n	8005266 <HAL_DMA_IRQHandler+0x7a>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2204      	movs	r2, #4
 800521c:	4013      	ands	r3, r2
 800521e:	d022      	beq.n	8005266 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2220      	movs	r2, #32
 8005228:	4013      	ands	r3, r2
 800522a:	d107      	bne.n	800523c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2104      	movs	r1, #4
 8005238:	438a      	bics	r2, r1
 800523a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	221c      	movs	r2, #28
 8005242:	401a      	ands	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	2104      	movs	r1, #4
 800524a:	4091      	lsls	r1, r2
 800524c:	000a      	movs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	2b00      	cmp	r3, #0
 8005256:	d100      	bne.n	800525a <HAL_DMA_IRQHandler+0x6e>
 8005258:	e071      	b.n	800533e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	0010      	movs	r0, r2
 8005262:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005264:	e06b      	b.n	800533e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	221c      	movs	r2, #28
 800526c:	4013      	ands	r3, r2
 800526e:	2202      	movs	r2, #2
 8005270:	409a      	lsls	r2, r3
 8005272:	0013      	movs	r3, r2
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4013      	ands	r3, r2
 8005278:	d02d      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xea>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2202      	movs	r2, #2
 800527e:	4013      	ands	r3, r2
 8005280:	d029      	beq.n	80052d6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2220      	movs	r2, #32
 800528a:	4013      	ands	r3, r2
 800528c:	d10b      	bne.n	80052a6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	210a      	movs	r1, #10
 800529a:	438a      	bics	r2, r1
 800529c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2225      	movs	r2, #37	; 0x25
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	221c      	movs	r2, #28
 80052ac:	401a      	ands	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2102      	movs	r1, #2
 80052b4:	4091      	lsls	r1, r2
 80052b6:	000a      	movs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2224      	movs	r2, #36	; 0x24
 80052be:	2100      	movs	r1, #0
 80052c0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d039      	beq.n	800533e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	0010      	movs	r0, r2
 80052d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052d4:	e033      	b.n	800533e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	221c      	movs	r2, #28
 80052dc:	4013      	ands	r3, r2
 80052de:	2208      	movs	r2, #8
 80052e0:	409a      	lsls	r2, r3
 80052e2:	0013      	movs	r3, r2
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4013      	ands	r3, r2
 80052e8:	d02a      	beq.n	8005340 <HAL_DMA_IRQHandler+0x154>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2208      	movs	r2, #8
 80052ee:	4013      	ands	r3, r2
 80052f0:	d026      	beq.n	8005340 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	210e      	movs	r1, #14
 80052fe:	438a      	bics	r2, r1
 8005300:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	221c      	movs	r2, #28
 8005308:	401a      	ands	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2101      	movs	r1, #1
 8005310:	4091      	lsls	r1, r2
 8005312:	000a      	movs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2225      	movs	r2, #37	; 0x25
 8005320:	2101      	movs	r1, #1
 8005322:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	; 0x24
 8005328:	2100      	movs	r1, #0
 800532a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	0010      	movs	r0, r2
 800533c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	46c0      	nop			; (mov r8, r8)
}
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bd80      	pop	{r7, pc}

08005348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	221c      	movs	r2, #28
 800535c:	401a      	ands	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2101      	movs	r1, #1
 8005364:	4091      	lsls	r1, r2
 8005366:	000a      	movs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b10      	cmp	r3, #16
 8005378:	d108      	bne.n	800538c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800538a:	e007      	b.n	800539c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b004      	add	sp, #16
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80053ba:	e14f      	b.n	800565c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2101      	movs	r1, #1
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4091      	lsls	r1, r2
 80053c6:	000a      	movs	r2, r1
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d100      	bne.n	80053d4 <HAL_GPIO_Init+0x30>
 80053d2:	e140      	b.n	8005656 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d00b      	beq.n	80053f4 <HAL_GPIO_Init+0x50>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d007      	beq.n	80053f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053e8:	2b11      	cmp	r3, #17
 80053ea:	d003      	beq.n	80053f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b12      	cmp	r3, #18
 80053f2:	d130      	bne.n	8005456 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	2203      	movs	r2, #3
 8005400:	409a      	lsls	r2, r3
 8005402:	0013      	movs	r3, r2
 8005404:	43da      	mvns	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4013      	ands	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	409a      	lsls	r2, r3
 8005416:	0013      	movs	r3, r2
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800542a:	2201      	movs	r2, #1
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	409a      	lsls	r2, r3
 8005430:	0013      	movs	r3, r2
 8005432:	43da      	mvns	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4013      	ands	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	091b      	lsrs	r3, r3, #4
 8005440:	2201      	movs	r2, #1
 8005442:	401a      	ands	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	409a      	lsls	r2, r3
 8005448:	0013      	movs	r3, r2
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	2203      	movs	r2, #3
 8005462:	409a      	lsls	r2, r3
 8005464:	0013      	movs	r3, r2
 8005466:	43da      	mvns	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	409a      	lsls	r2, r3
 8005478:	0013      	movs	r3, r2
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d003      	beq.n	8005496 <HAL_GPIO_Init+0xf2>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b12      	cmp	r3, #18
 8005494:	d123      	bne.n	80054de <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	08da      	lsrs	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3208      	adds	r2, #8
 800549e:	0092      	lsls	r2, r2, #2
 80054a0:	58d3      	ldr	r3, [r2, r3]
 80054a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2207      	movs	r2, #7
 80054a8:	4013      	ands	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	220f      	movs	r2, #15
 80054ae:	409a      	lsls	r2, r3
 80054b0:	0013      	movs	r3, r2
 80054b2:	43da      	mvns	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4013      	ands	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2107      	movs	r1, #7
 80054c2:	400b      	ands	r3, r1
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	409a      	lsls	r2, r3
 80054c8:	0013      	movs	r3, r2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	08da      	lsrs	r2, r3, #3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3208      	adds	r2, #8
 80054d8:	0092      	lsls	r2, r2, #2
 80054da:	6939      	ldr	r1, [r7, #16]
 80054dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2203      	movs	r2, #3
 80054ea:	409a      	lsls	r2, r3
 80054ec:	0013      	movs	r3, r2
 80054ee:	43da      	mvns	r2, r3
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4013      	ands	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2203      	movs	r2, #3
 80054fc:	401a      	ands	r2, r3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	409a      	lsls	r2, r3
 8005504:	0013      	movs	r3, r2
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	055b      	lsls	r3, r3, #21
 800551a:	4013      	ands	r3, r2
 800551c:	d100      	bne.n	8005520 <HAL_GPIO_Init+0x17c>
 800551e:	e09a      	b.n	8005656 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005520:	4b54      	ldr	r3, [pc, #336]	; (8005674 <HAL_GPIO_Init+0x2d0>)
 8005522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005524:	4b53      	ldr	r3, [pc, #332]	; (8005674 <HAL_GPIO_Init+0x2d0>)
 8005526:	2101      	movs	r1, #1
 8005528:	430a      	orrs	r2, r1
 800552a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800552c:	4a52      	ldr	r2, [pc, #328]	; (8005678 <HAL_GPIO_Init+0x2d4>)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	3302      	adds	r3, #2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	589b      	ldr	r3, [r3, r2]
 8005538:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2203      	movs	r2, #3
 800553e:	4013      	ands	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	220f      	movs	r2, #15
 8005544:	409a      	lsls	r2, r3
 8005546:	0013      	movs	r3, r2
 8005548:	43da      	mvns	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	23a0      	movs	r3, #160	; 0xa0
 8005554:	05db      	lsls	r3, r3, #23
 8005556:	429a      	cmp	r2, r3
 8005558:	d019      	beq.n	800558e <HAL_GPIO_Init+0x1ea>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a47      	ldr	r2, [pc, #284]	; (800567c <HAL_GPIO_Init+0x2d8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_GPIO_Init+0x1e6>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a46      	ldr	r2, [pc, #280]	; (8005680 <HAL_GPIO_Init+0x2dc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00d      	beq.n	8005586 <HAL_GPIO_Init+0x1e2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a45      	ldr	r2, [pc, #276]	; (8005684 <HAL_GPIO_Init+0x2e0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <HAL_GPIO_Init+0x1de>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a44      	ldr	r2, [pc, #272]	; (8005688 <HAL_GPIO_Init+0x2e4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <HAL_GPIO_Init+0x1da>
 800557a:	2305      	movs	r3, #5
 800557c:	e008      	b.n	8005590 <HAL_GPIO_Init+0x1ec>
 800557e:	2306      	movs	r3, #6
 8005580:	e006      	b.n	8005590 <HAL_GPIO_Init+0x1ec>
 8005582:	2303      	movs	r3, #3
 8005584:	e004      	b.n	8005590 <HAL_GPIO_Init+0x1ec>
 8005586:	2302      	movs	r3, #2
 8005588:	e002      	b.n	8005590 <HAL_GPIO_Init+0x1ec>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_GPIO_Init+0x1ec>
 800558e:	2300      	movs	r3, #0
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	2103      	movs	r1, #3
 8005594:	400a      	ands	r2, r1
 8005596:	0092      	lsls	r2, r2, #2
 8005598:	4093      	lsls	r3, r2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a0:	4935      	ldr	r1, [pc, #212]	; (8005678 <HAL_GPIO_Init+0x2d4>)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_GPIO_Init+0x2e8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	43da      	mvns	r2, r3
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4013      	ands	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	025b      	lsls	r3, r3, #9
 80055c6:	4013      	ands	r3, r2
 80055c8:	d003      	beq.n	80055d2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80055d2:	4b2e      	ldr	r3, [pc, #184]	; (800568c <HAL_GPIO_Init+0x2e8>)
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80055d8:	4b2c      	ldr	r3, [pc, #176]	; (800568c <HAL_GPIO_Init+0x2e8>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	43da      	mvns	r2, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4013      	ands	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	029b      	lsls	r3, r3, #10
 80055f0:	4013      	ands	r3, r2
 80055f2:	d003      	beq.n	80055fc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80055fc:	4b23      	ldr	r3, [pc, #140]	; (800568c <HAL_GPIO_Init+0x2e8>)
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005602:	4b22      	ldr	r3, [pc, #136]	; (800568c <HAL_GPIO_Init+0x2e8>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	43da      	mvns	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4013      	ands	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	035b      	lsls	r3, r3, #13
 800561a:	4013      	ands	r3, r2
 800561c:	d003      	beq.n	8005626 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005626:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_GPIO_Init+0x2e8>)
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800562c:	4b17      	ldr	r3, [pc, #92]	; (800568c <HAL_GPIO_Init+0x2e8>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	43da      	mvns	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	039b      	lsls	r3, r3, #14
 8005644:	4013      	ands	r3, r2
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005650:	4b0e      	ldr	r3, [pc, #56]	; (800568c <HAL_GPIO_Init+0x2e8>)
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	3301      	adds	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	40da      	lsrs	r2, r3
 8005664:	1e13      	subs	r3, r2, #0
 8005666:	d000      	beq.n	800566a <HAL_GPIO_Init+0x2c6>
 8005668:	e6a8      	b.n	80053bc <HAL_GPIO_Init+0x18>
  }
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b006      	add	sp, #24
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	40021000 	.word	0x40021000
 8005678:	40010000 	.word	0x40010000
 800567c:	50000400 	.word	0x50000400
 8005680:	50000800 	.word	0x50000800
 8005684:	50000c00 	.word	0x50000c00
 8005688:	50001c00 	.word	0x50001c00
 800568c:	40010400 	.word	0x40010400

08005690 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	0008      	movs	r0, r1
 800569a:	0011      	movs	r1, r2
 800569c:	1cbb      	adds	r3, r7, #2
 800569e:	1c02      	adds	r2, r0, #0
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	1c7b      	adds	r3, r7, #1
 80056a4:	1c0a      	adds	r2, r1, #0
 80056a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056a8:	1c7b      	adds	r3, r7, #1
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056b0:	1cbb      	adds	r3, r7, #2
 80056b2:	881a      	ldrh	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80056b8:	e003      	b.n	80056c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80056ba:	1cbb      	adds	r3, r7, #2
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b002      	add	sp, #8
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e082      	b.n	80057e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2241      	movs	r2, #65	; 0x41
 80056e2:	5c9b      	ldrb	r3, [r3, r2]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2240      	movs	r2, #64	; 0x40
 80056ee:	2100      	movs	r1, #0
 80056f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7fe fc7b 	bl	8003ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2241      	movs	r2, #65	; 0x41
 80056fe:	2124      	movs	r1, #36	; 0x24
 8005700:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2101      	movs	r1, #1
 800570e:	438a      	bics	r2, r1
 8005710:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4934      	ldr	r1, [pc, #208]	; (80057ec <HAL_I2C_Init+0x120>)
 800571c:	400a      	ands	r2, r1
 800571e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4931      	ldr	r1, [pc, #196]	; (80057f0 <HAL_I2C_Init+0x124>)
 800572c:	400a      	ands	r2, r1
 800572e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d108      	bne.n	800574a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	0209      	lsls	r1, r1, #8
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	e007      	b.n	800575a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2184      	movs	r1, #132	; 0x84
 8005754:	0209      	lsls	r1, r1, #8
 8005756:	430a      	orrs	r2, r1
 8005758:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d104      	bne.n	800576c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	0112      	lsls	r2, r2, #4
 800576a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	491f      	ldr	r1, [pc, #124]	; (80057f4 <HAL_I2C_Init+0x128>)
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	491a      	ldr	r1, [pc, #104]	; (80057f0 <HAL_I2C_Init+0x124>)
 8005788:	400a      	ands	r2, r1
 800578a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	431a      	orrs	r2, r3
 8005796:	0011      	movs	r1, r2
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	021a      	lsls	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69d9      	ldr	r1, [r3, #28]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1a      	ldr	r2, [r3, #32]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2101      	movs	r1, #1
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2241      	movs	r2, #65	; 0x41
 80057d0:	2120      	movs	r1, #32
 80057d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2242      	movs	r2, #66	; 0x42
 80057de:	2100      	movs	r1, #0
 80057e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	0018      	movs	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	f0ffffff 	.word	0xf0ffffff
 80057f0:	ffff7fff 	.word	0xffff7fff
 80057f4:	02008000 	.word	0x02008000

080057f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b089      	sub	sp, #36	; 0x24
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	000c      	movs	r4, r1
 8005802:	0010      	movs	r0, r2
 8005804:	0019      	movs	r1, r3
 8005806:	230a      	movs	r3, #10
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	1c22      	adds	r2, r4, #0
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	2308      	movs	r3, #8
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	1c02      	adds	r2, r0, #0
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	1dbb      	adds	r3, r7, #6
 8005818:	1c0a      	adds	r2, r1, #0
 800581a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2241      	movs	r2, #65	; 0x41
 8005820:	5c9b      	ldrb	r3, [r3, r2]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b20      	cmp	r3, #32
 8005826:	d000      	beq.n	800582a <HAL_I2C_Mem_Write+0x32>
 8005828:	e10c      	b.n	8005a44 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_I2C_Mem_Write+0x42>
 8005830:	232c      	movs	r3, #44	; 0x2c
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	0092      	lsls	r2, r2, #2
 8005840:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e0ff      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2240      	movs	r2, #64	; 0x40
 800584a:	5c9b      	ldrb	r3, [r3, r2]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_I2C_Mem_Write+0x5c>
 8005850:	2302      	movs	r3, #2
 8005852:	e0f8      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2240      	movs	r2, #64	; 0x40
 8005858:	2101      	movs	r1, #1
 800585a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800585c:	f7fe fdf2 	bl	8004444 <HAL_GetTick>
 8005860:	0003      	movs	r3, r0
 8005862:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	0219      	lsls	r1, r3, #8
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	2319      	movs	r3, #25
 8005870:	2201      	movs	r2, #1
 8005872:	f000 f975 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005876:	1e03      	subs	r3, r0, #0
 8005878:	d001      	beq.n	800587e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0e3      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2241      	movs	r2, #65	; 0x41
 8005882:	2121      	movs	r1, #33	; 0x21
 8005884:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2242      	movs	r2, #66	; 0x42
 800588a:	2140      	movs	r1, #64	; 0x40
 800588c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	222c      	movs	r2, #44	; 0x2c
 800589e:	18ba      	adds	r2, r7, r2
 80058a0:	8812      	ldrh	r2, [r2, #0]
 80058a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058aa:	1dbb      	adds	r3, r7, #6
 80058ac:	881c      	ldrh	r4, [r3, #0]
 80058ae:	2308      	movs	r3, #8
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	230a      	movs	r3, #10
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	8819      	ldrh	r1, [r3, #0]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	0023      	movs	r3, r4
 80058c6:	f000 f8c5 	bl	8005a54 <I2C_RequestMemoryWrite>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d005      	beq.n	80058da <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2240      	movs	r2, #64	; 0x40
 80058d2:	2100      	movs	r1, #0
 80058d4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e0b5      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2bff      	cmp	r3, #255	; 0xff
 80058e2:	d911      	bls.n	8005908 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	22ff      	movs	r2, #255	; 0xff
 80058e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	045c      	lsls	r4, r3, #17
 80058f4:	230a      	movs	r3, #10
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	8819      	ldrh	r1, [r3, #0]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	2300      	movs	r3, #0
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	0023      	movs	r3, r4
 8005902:	f000 fa4d 	bl	8005da0 <I2C_TransferConfig>
 8005906:	e012      	b.n	800592e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	b2da      	uxtb	r2, r3
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	049c      	lsls	r4, r3, #18
 800591c:	230a      	movs	r3, #10
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	8819      	ldrh	r1, [r3, #0]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	0023      	movs	r3, r4
 800592a:	f000 fa39 	bl	8005da0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f952 	bl	8005bde <I2C_WaitOnTXISFlagUntilTimeout>
 800593a:	1e03      	subs	r3, r0, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e081      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d03a      	beq.n	80059f2 <HAL_I2C_Mem_Write+0x1fa>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	d136      	bne.n	80059f2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	0013      	movs	r3, r2
 800598e:	2200      	movs	r2, #0
 8005990:	2180      	movs	r1, #128	; 0x80
 8005992:	f000 f8e5 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005996:	1e03      	subs	r3, r0, #0
 8005998:	d001      	beq.n	800599e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e053      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2bff      	cmp	r3, #255	; 0xff
 80059a6:	d911      	bls.n	80059cc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	22ff      	movs	r2, #255	; 0xff
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	045c      	lsls	r4, r3, #17
 80059b8:	230a      	movs	r3, #10
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	8819      	ldrh	r1, [r3, #0]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	2300      	movs	r3, #0
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	0023      	movs	r3, r4
 80059c6:	f000 f9eb 	bl	8005da0 <I2C_TransferConfig>
 80059ca:	e012      	b.n	80059f2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	049c      	lsls	r4, r3, #18
 80059e0:	230a      	movs	r3, #10
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	8819      	ldrh	r1, [r3, #0]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	2300      	movs	r3, #0
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	0023      	movs	r3, r4
 80059ee:	f000 f9d7 	bl	8005da0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d198      	bne.n	800592e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f92a 	bl	8005c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e01a      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2220      	movs	r2, #32
 8005a16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	490b      	ldr	r1, [pc, #44]	; (8005a50 <HAL_I2C_Mem_Write+0x258>)
 8005a24:	400a      	ands	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2241      	movs	r2, #65	; 0x41
 8005a2c:	2120      	movs	r1, #32
 8005a2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2242      	movs	r2, #66	; 0x42
 8005a34:	2100      	movs	r1, #0
 8005a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2240      	movs	r2, #64	; 0x40
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	0018      	movs	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b007      	add	sp, #28
 8005a4c:	bd90      	pop	{r4, r7, pc}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	fe00e800 	.word	0xfe00e800

08005a54 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	000c      	movs	r4, r1
 8005a5e:	0010      	movs	r0, r2
 8005a60:	0019      	movs	r1, r3
 8005a62:	250a      	movs	r5, #10
 8005a64:	197b      	adds	r3, r7, r5
 8005a66:	1c22      	adds	r2, r4, #0
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	1c02      	adds	r2, r0, #0
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	1dbb      	adds	r3, r7, #6
 8005a74:	1c0a      	adds	r2, r1, #0
 8005a76:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a78:	1dbb      	adds	r3, r7, #6
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	045c      	lsls	r4, r3, #17
 8005a82:	197b      	adds	r3, r7, r5
 8005a84:	8819      	ldrh	r1, [r3, #0]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <I2C_RequestMemoryWrite+0xc4>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	0023      	movs	r3, r4
 8005a8e:	f000 f987 	bl	8005da0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a94:	6a39      	ldr	r1, [r7, #32]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f000 f8a0 	bl	8005bde <I2C_WaitOnTXISFlagUntilTimeout>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d001      	beq.n	8005aa6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e033      	b.n	8005b0e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aa6:	1dbb      	adds	r3, r7, #6
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d107      	bne.n	8005abe <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aae:	2308      	movs	r3, #8
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
 8005abc:	e019      	b.n	8005af2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005abe:	2308      	movs	r3, #8
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad2:	6a39      	ldr	r1, [r7, #32]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f000 f881 	bl	8005bde <I2C_WaitOnTXISFlagUntilTimeout>
 8005adc:	1e03      	subs	r3, r0, #0
 8005ade:	d001      	beq.n	8005ae4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e014      	b.n	8005b0e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	0013      	movs	r3, r2
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	f000 f82e 	bl	8005b60 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	1e03      	subs	r3, r0, #0
 8005b06:	d001      	beq.n	8005b0c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b004      	add	sp, #16
 8005b14:	bdb0      	pop	{r4, r5, r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	80002000 	.word	0x80002000

08005b1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d103      	bne.n	8005b3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2201      	movs	r2, #1
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d007      	beq.n	8005b58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2101      	movs	r1, #1
 8005b54:	430a      	orrs	r2, r1
 8005b56:	619a      	str	r2, [r3, #24]
  }
}
 8005b58:	46c0      	nop			; (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	1dfb      	adds	r3, r7, #7
 8005b6e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b70:	e021      	b.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	d01e      	beq.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b78:	f7fe fc64 	bl	8004444 <HAL_GetTick>
 8005b7c:	0002      	movs	r2, r0
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d302      	bcc.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d113      	bne.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	2220      	movs	r2, #32
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2241      	movs	r2, #65	; 0x41
 8005b9e:	2120      	movs	r1, #32
 8005ba0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2242      	movs	r2, #66	; 0x42
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2240      	movs	r2, #64	; 0x40
 8005bae:	2100      	movs	r1, #0
 8005bb0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e00f      	b.n	8005bd6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	425a      	negs	r2, r3
 8005bc6:	4153      	adcs	r3, r2
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	001a      	movs	r2, r3
 8005bcc:	1dfb      	adds	r3, r7, #7
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d0ce      	beq.n	8005b72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	b004      	add	sp, #16
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bea:	e02b      	b.n	8005c44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f000 f86e 	bl	8005cd4 <I2C_IsAcknowledgeFailed>
 8005bf8:	1e03      	subs	r3, r0, #0
 8005bfa:	d001      	beq.n	8005c00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e029      	b.n	8005c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	3301      	adds	r3, #1
 8005c04:	d01e      	beq.n	8005c44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c06:	f7fe fc1d 	bl	8004444 <HAL_GetTick>
 8005c0a:	0002      	movs	r2, r0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d113      	bne.n	8005c44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c20:	2220      	movs	r2, #32
 8005c22:	431a      	orrs	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2241      	movs	r2, #65	; 0x41
 8005c2c:	2120      	movs	r1, #32
 8005c2e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2242      	movs	r2, #66	; 0x42
 8005c34:	2100      	movs	r1, #0
 8005c36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2240      	movs	r2, #64	; 0x40
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e007      	b.n	8005c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d1cc      	bne.n	8005bec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	0018      	movs	r0, r3
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b004      	add	sp, #16
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c68:	e028      	b.n	8005cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f000 f82f 	bl	8005cd4 <I2C_IsAcknowledgeFailed>
 8005c76:	1e03      	subs	r3, r0, #0
 8005c78:	d001      	beq.n	8005c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e026      	b.n	8005ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7e:	f7fe fbe1 	bl	8004444 <HAL_GetTick>
 8005c82:	0002      	movs	r2, r0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d302      	bcc.n	8005c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d113      	bne.n	8005cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c98:	2220      	movs	r2, #32
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2241      	movs	r2, #65	; 0x41
 8005ca4:	2120      	movs	r1, #32
 8005ca6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2242      	movs	r2, #66	; 0x42
 8005cac:	2100      	movs	r1, #0
 8005cae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2240      	movs	r2, #64	; 0x40
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e007      	b.n	8005ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d1cf      	bne.n	8005c6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b004      	add	sp, #16
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d151      	bne.n	8005d92 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cee:	e021      	b.n	8005d34 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	d01e      	beq.n	8005d34 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf6:	f7fe fba5 	bl	8004444 <HAL_GetTick>
 8005cfa:	0002      	movs	r2, r0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <I2C_IsAcknowledgeFailed+0x38>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d113      	bne.n	8005d34 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	2220      	movs	r2, #32
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2241      	movs	r2, #65	; 0x41
 8005d1c:	2120      	movs	r1, #32
 8005d1e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2242      	movs	r2, #66	; 0x42
 8005d24:	2100      	movs	r1, #0
 8005d26:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e02f      	b.n	8005d94 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d1d6      	bne.n	8005cf0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2210      	movs	r2, #16
 8005d48:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f7ff fee1 	bl	8005b1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	490d      	ldr	r1, [pc, #52]	; (8005d9c <I2C_IsAcknowledgeFailed+0xc8>)
 8005d66:	400a      	ands	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	2204      	movs	r2, #4
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2241      	movs	r2, #65	; 0x41
 8005d7a:	2120      	movs	r1, #32
 8005d7c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2242      	movs	r2, #66	; 0x42
 8005d82:	2100      	movs	r1, #0
 8005d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2240      	movs	r2, #64	; 0x40
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b004      	add	sp, #16
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	fe00e800 	.word	0xfe00e800

08005da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	0008      	movs	r0, r1
 8005daa:	0011      	movs	r1, r2
 8005dac:	607b      	str	r3, [r7, #4]
 8005dae:	240a      	movs	r4, #10
 8005db0:	193b      	adds	r3, r7, r4
 8005db2:	1c02      	adds	r2, r0, #0
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	2009      	movs	r0, #9
 8005db8:	183b      	adds	r3, r7, r0
 8005dba:	1c0a      	adds	r2, r1, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	0d51      	lsrs	r1, r2, #21
 8005dc8:	2280      	movs	r2, #128	; 0x80
 8005dca:	00d2      	lsls	r2, r2, #3
 8005dcc:	400a      	ands	r2, r1
 8005dce:	490e      	ldr	r1, [pc, #56]	; (8005e08 <I2C_TransferConfig+0x68>)
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	43d2      	mvns	r2, r2
 8005dd4:	401a      	ands	r2, r3
 8005dd6:	0011      	movs	r1, r2
 8005dd8:	193b      	adds	r3, r7, r4
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	059b      	lsls	r3, r3, #22
 8005dde:	0d9a      	lsrs	r2, r3, #22
 8005de0:	183b      	adds	r3, r7, r0
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	0418      	lsls	r0, r3, #16
 8005de6:	23ff      	movs	r3, #255	; 0xff
 8005de8:	041b      	lsls	r3, r3, #16
 8005dea:	4003      	ands	r3, r0
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b005      	add	sp, #20
 8005e04:	bd90      	pop	{r4, r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	03ff63ff 	.word	0x03ff63ff

08005e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2241      	movs	r2, #65	; 0x41
 8005e1a:	5c9b      	ldrb	r3, [r3, r2]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d138      	bne.n	8005e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2240      	movs	r2, #64	; 0x40
 8005e26:	5c9b      	ldrb	r3, [r3, r2]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e032      	b.n	8005e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2240      	movs	r2, #64	; 0x40
 8005e34:	2101      	movs	r1, #1
 8005e36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2241      	movs	r2, #65	; 0x41
 8005e3c:	2124      	movs	r1, #36	; 0x24
 8005e3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4911      	ldr	r1, [pc, #68]	; (8005ea0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005e5c:	400a      	ands	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2241      	movs	r2, #65	; 0x41
 8005e84:	2120      	movs	r1, #32
 8005e86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2240      	movs	r2, #64	; 0x40
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e000      	b.n	8005e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
  }
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b002      	add	sp, #8
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	ffffefff 	.word	0xffffefff

08005ea4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2241      	movs	r2, #65	; 0x41
 8005eb2:	5c9b      	ldrb	r3, [r3, r2]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d139      	bne.n	8005f2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2240      	movs	r2, #64	; 0x40
 8005ebe:	5c9b      	ldrb	r3, [r3, r2]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e033      	b.n	8005f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2240      	movs	r2, #64	; 0x40
 8005ecc:	2101      	movs	r1, #1
 8005ece:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2241      	movs	r2, #65	; 0x41
 8005ed4:	2124      	movs	r1, #36	; 0x24
 8005ed6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	438a      	bics	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a11      	ldr	r2, [pc, #68]	; (8005f38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2101      	movs	r1, #1
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2241      	movs	r2, #65	; 0x41
 8005f1e:	2120      	movs	r1, #32
 8005f20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2240      	movs	r2, #64	; 0x40
 8005f26:	2100      	movs	r1, #0
 8005f28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
  }
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b004      	add	sp, #16
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	fffff0ff 	.word	0xfffff0ff

08005f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f3c:	b5b0      	push	{r4, r5, r7, lr}
 8005f3e:	b08a      	sub	sp, #40	; 0x28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d102      	bne.n	8005f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f000 fbab 	bl	80066a6 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f50:	4bce      	ldr	r3, [pc, #824]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	220c      	movs	r2, #12
 8005f56:	4013      	ands	r3, r2
 8005f58:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f5a:	4bcc      	ldr	r3, [pc, #816]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	2380      	movs	r3, #128	; 0x80
 8005f60:	025b      	lsls	r3, r3, #9
 8005f62:	4013      	ands	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d100      	bne.n	8005f72 <HAL_RCC_OscConfig+0x36>
 8005f70:	e07e      	b.n	8006070 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d007      	beq.n	8005f88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d112      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x68>
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	025b      	lsls	r3, r3, #9
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d10d      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f88:	4bc0      	ldr	r3, [pc, #768]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	4013      	ands	r3, r2
 8005f92:	d100      	bne.n	8005f96 <HAL_RCC_OscConfig+0x5a>
 8005f94:	e06b      	b.n	800606e <HAL_RCC_OscConfig+0x132>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d167      	bne.n	800606e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f000 fb81 	bl	80066a6 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	025b      	lsls	r3, r3, #9
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x84>
 8005fb0:	4bb6      	ldr	r3, [pc, #728]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	4bb5      	ldr	r3, [pc, #724]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	0249      	lsls	r1, r1, #9
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e027      	b.n	8006010 <HAL_RCC_OscConfig+0xd4>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	23a0      	movs	r3, #160	; 0xa0
 8005fc6:	02db      	lsls	r3, r3, #11
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d10e      	bne.n	8005fea <HAL_RCC_OscConfig+0xae>
 8005fcc:	4baf      	ldr	r3, [pc, #700]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4bae      	ldr	r3, [pc, #696]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005fd2:	2180      	movs	r1, #128	; 0x80
 8005fd4:	02c9      	lsls	r1, r1, #11
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	4bac      	ldr	r3, [pc, #688]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4bab      	ldr	r3, [pc, #684]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005fe0:	2180      	movs	r1, #128	; 0x80
 8005fe2:	0249      	lsls	r1, r1, #9
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e012      	b.n	8006010 <HAL_RCC_OscConfig+0xd4>
 8005fea:	4ba8      	ldr	r3, [pc, #672]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4ba7      	ldr	r3, [pc, #668]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005ff0:	49a7      	ldr	r1, [pc, #668]	; (8006290 <HAL_RCC_OscConfig+0x354>)
 8005ff2:	400a      	ands	r2, r1
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	4ba5      	ldr	r3, [pc, #660]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	025b      	lsls	r3, r3, #9
 8005ffe:	4013      	ands	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4ba1      	ldr	r3, [pc, #644]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4ba0      	ldr	r3, [pc, #640]	; (800628c <HAL_RCC_OscConfig+0x350>)
 800600a:	49a2      	ldr	r1, [pc, #648]	; (8006294 <HAL_RCC_OscConfig+0x358>)
 800600c:	400a      	ands	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d015      	beq.n	8006044 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006018:	f7fe fa14 	bl	8004444 <HAL_GetTick>
 800601c:	0003      	movs	r3, r0
 800601e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006020:	e009      	b.n	8006036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006022:	f7fe fa0f 	bl	8004444 <HAL_GetTick>
 8006026:	0002      	movs	r2, r0
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b64      	cmp	r3, #100	; 0x64
 800602e:	d902      	bls.n	8006036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	f000 fb38 	bl	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006036:	4b95      	ldr	r3, [pc, #596]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	4013      	ands	r3, r2
 8006040:	d0ef      	beq.n	8006022 <HAL_RCC_OscConfig+0xe6>
 8006042:	e015      	b.n	8006070 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006044:	f7fe f9fe 	bl	8004444 <HAL_GetTick>
 8006048:	0003      	movs	r3, r0
 800604a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800604e:	f7fe f9f9 	bl	8004444 <HAL_GetTick>
 8006052:	0002      	movs	r2, r0
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b64      	cmp	r3, #100	; 0x64
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e322      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006060:	4b8a      	ldr	r3, [pc, #552]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	4013      	ands	r3, r2
 800606a:	d1f0      	bne.n	800604e <HAL_RCC_OscConfig+0x112>
 800606c:	e000      	b.n	8006070 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800606e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2202      	movs	r2, #2
 8006076:	4013      	ands	r3, r2
 8006078:	d100      	bne.n	800607c <HAL_RCC_OscConfig+0x140>
 800607a:	e08a      	b.n	8006192 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	2b04      	cmp	r3, #4
 8006086:	d005      	beq.n	8006094 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2b0c      	cmp	r3, #12
 800608c:	d13d      	bne.n	800610a <HAL_RCC_OscConfig+0x1ce>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d13a      	bne.n	800610a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006094:	4b7d      	ldr	r3, [pc, #500]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2204      	movs	r2, #4
 800609a:	4013      	ands	r3, r2
 800609c:	d004      	beq.n	80060a8 <HAL_RCC_OscConfig+0x16c>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e2fe      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a8:	4b78      	ldr	r3, [pc, #480]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4a7a      	ldr	r2, [pc, #488]	; (8006298 <HAL_RCC_OscConfig+0x35c>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	021a      	lsls	r2, r3, #8
 80060b8:	4b74      	ldr	r3, [pc, #464]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80060be:	4b73      	ldr	r3, [pc, #460]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2209      	movs	r2, #9
 80060c4:	4393      	bics	r3, r2
 80060c6:	0019      	movs	r1, r3
 80060c8:	4b70      	ldr	r3, [pc, #448]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060d0:	f000 fc1e 	bl	8006910 <HAL_RCC_GetSysClockFreq>
 80060d4:	0001      	movs	r1, r0
 80060d6:	4b6d      	ldr	r3, [pc, #436]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	220f      	movs	r2, #15
 80060de:	4013      	ands	r3, r2
 80060e0:	4a6e      	ldr	r2, [pc, #440]	; (800629c <HAL_RCC_OscConfig+0x360>)
 80060e2:	5cd3      	ldrb	r3, [r2, r3]
 80060e4:	000a      	movs	r2, r1
 80060e6:	40da      	lsrs	r2, r3
 80060e8:	4b6d      	ldr	r3, [pc, #436]	; (80062a0 <HAL_RCC_OscConfig+0x364>)
 80060ea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80060ec:	2513      	movs	r5, #19
 80060ee:	197c      	adds	r4, r7, r5
 80060f0:	2000      	movs	r0, #0
 80060f2:	f7fe f961 	bl	80043b8 <HAL_InitTick>
 80060f6:	0003      	movs	r3, r0
 80060f8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80060fa:	197b      	adds	r3, r7, r5
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d047      	beq.n	8006192 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8006102:	2313      	movs	r3, #19
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	e2cd      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d027      	beq.n	8006160 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006110:	4b5e      	ldr	r3, [pc, #376]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2209      	movs	r2, #9
 8006116:	4393      	bics	r3, r2
 8006118:	0019      	movs	r1, r3
 800611a:	4b5c      	ldr	r3, [pc, #368]	; (800628c <HAL_RCC_OscConfig+0x350>)
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	430a      	orrs	r2, r1
 8006120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006122:	f7fe f98f 	bl	8004444 <HAL_GetTick>
 8006126:	0003      	movs	r3, r0
 8006128:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800612c:	f7fe f98a 	bl	8004444 <HAL_GetTick>
 8006130:	0002      	movs	r2, r0
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e2b3      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800613e:	4b53      	ldr	r3, [pc, #332]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2204      	movs	r2, #4
 8006144:	4013      	ands	r3, r2
 8006146:	d0f1      	beq.n	800612c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006148:	4b50      	ldr	r3, [pc, #320]	; (800628c <HAL_RCC_OscConfig+0x350>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	4a52      	ldr	r2, [pc, #328]	; (8006298 <HAL_RCC_OscConfig+0x35c>)
 800614e:	4013      	ands	r3, r2
 8006150:	0019      	movs	r1, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	021a      	lsls	r2, r3, #8
 8006158:	4b4c      	ldr	r3, [pc, #304]	; (800628c <HAL_RCC_OscConfig+0x350>)
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	e018      	b.n	8006192 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006160:	4b4a      	ldr	r3, [pc, #296]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4b49      	ldr	r3, [pc, #292]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006166:	2101      	movs	r1, #1
 8006168:	438a      	bics	r2, r1
 800616a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616c:	f7fe f96a 	bl	8004444 <HAL_GetTick>
 8006170:	0003      	movs	r3, r0
 8006172:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006176:	f7fe f965 	bl	8004444 <HAL_GetTick>
 800617a:	0002      	movs	r2, r0
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e28e      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006188:	4b40      	ldr	r3, [pc, #256]	; (800628c <HAL_RCC_OscConfig+0x350>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2204      	movs	r2, #4
 800618e:	4013      	ands	r3, r2
 8006190:	d1f1      	bne.n	8006176 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2210      	movs	r2, #16
 8006198:	4013      	ands	r3, r2
 800619a:	d100      	bne.n	800619e <HAL_RCC_OscConfig+0x262>
 800619c:	e09e      	b.n	80062dc <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d13f      	bne.n	8006224 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061a4:	4b39      	ldr	r3, [pc, #228]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4013      	ands	r3, r2
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_OscConfig+0x280>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e274      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061bc:	4b33      	ldr	r3, [pc, #204]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	4a38      	ldr	r2, [pc, #224]	; (80062a4 <HAL_RCC_OscConfig+0x368>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	0019      	movs	r1, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ca:	4b30      	ldr	r3, [pc, #192]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061d0:	4b2e      	ldr	r3, [pc, #184]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	0a19      	lsrs	r1, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	061a      	lsls	r2, r3, #24
 80061de:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	0b5b      	lsrs	r3, r3, #13
 80061ea:	3301      	adds	r3, #1
 80061ec:	2280      	movs	r2, #128	; 0x80
 80061ee:	0212      	lsls	r2, r2, #8
 80061f0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80061f2:	4b26      	ldr	r3, [pc, #152]	; (800628c <HAL_RCC_OscConfig+0x350>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	210f      	movs	r1, #15
 80061fa:	400b      	ands	r3, r1
 80061fc:	4927      	ldr	r1, [pc, #156]	; (800629c <HAL_RCC_OscConfig+0x360>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006202:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <HAL_RCC_OscConfig+0x364>)
 8006204:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8006206:	2513      	movs	r5, #19
 8006208:	197c      	adds	r4, r7, r5
 800620a:	2000      	movs	r0, #0
 800620c:	f7fe f8d4 	bl	80043b8 <HAL_InitTick>
 8006210:	0003      	movs	r3, r0
 8006212:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006214:	197b      	adds	r3, r7, r5
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d05f      	beq.n	80062dc <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 800621c:	2313      	movs	r3, #19
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	e240      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d03d      	beq.n	80062a8 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800622c:	4b17      	ldr	r3, [pc, #92]	; (800628c <HAL_RCC_OscConfig+0x350>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	4b16      	ldr	r3, [pc, #88]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006232:	2180      	movs	r1, #128	; 0x80
 8006234:	0049      	lsls	r1, r1, #1
 8006236:	430a      	orrs	r2, r1
 8006238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623a:	f7fe f903 	bl	8004444 <HAL_GetTick>
 800623e:	0003      	movs	r3, r0
 8006240:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006244:	f7fe f8fe 	bl	8004444 <HAL_GetTick>
 8006248:	0002      	movs	r2, r0
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e227      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4013      	ands	r3, r2
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4a0f      	ldr	r2, [pc, #60]	; (80062a4 <HAL_RCC_OscConfig+0x368>)
 8006268:	4013      	ands	r3, r2
 800626a:	0019      	movs	r1, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	0a19      	lsrs	r1, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	061a      	lsls	r2, r3, #24
 8006284:	4b01      	ldr	r3, [pc, #4]	; (800628c <HAL_RCC_OscConfig+0x350>)
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	e027      	b.n	80062dc <HAL_RCC_OscConfig+0x3a0>
 800628c:	40021000 	.word	0x40021000
 8006290:	fffeffff 	.word	0xfffeffff
 8006294:	fffbffff 	.word	0xfffbffff
 8006298:	ffffe0ff 	.word	0xffffe0ff
 800629c:	0800c180 	.word	0x0800c180
 80062a0:	20000010 	.word	0x20000010
 80062a4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062a8:	4bbd      	ldr	r3, [pc, #756]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4bbc      	ldr	r3, [pc, #752]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80062ae:	49bd      	ldr	r1, [pc, #756]	; (80065a4 <HAL_RCC_OscConfig+0x668>)
 80062b0:	400a      	ands	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fe f8c6 	bl	8004444 <HAL_GetTick>
 80062b8:	0003      	movs	r3, r0
 80062ba:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062be:	f7fe f8c1 	bl	8004444 <HAL_GetTick>
 80062c2:	0002      	movs	r2, r0
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e1ea      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80062d0:	4bb3      	ldr	r3, [pc, #716]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4013      	ands	r3, r2
 80062da:	d1f0      	bne.n	80062be <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2208      	movs	r2, #8
 80062e2:	4013      	ands	r3, r2
 80062e4:	d036      	beq.n	8006354 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d019      	beq.n	8006322 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ee:	4bac      	ldr	r3, [pc, #688]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80062f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062f2:	4bab      	ldr	r3, [pc, #684]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80062f4:	2101      	movs	r1, #1
 80062f6:	430a      	orrs	r2, r1
 80062f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fa:	f7fe f8a3 	bl	8004444 <HAL_GetTick>
 80062fe:	0003      	movs	r3, r0
 8006300:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006304:	f7fe f89e 	bl	8004444 <HAL_GetTick>
 8006308:	0002      	movs	r2, r0
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e1c7      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006316:	4ba2      	ldr	r3, [pc, #648]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631a:	2202      	movs	r2, #2
 800631c:	4013      	ands	r3, r2
 800631e:	d0f1      	beq.n	8006304 <HAL_RCC_OscConfig+0x3c8>
 8006320:	e018      	b.n	8006354 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006322:	4b9f      	ldr	r3, [pc, #636]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006326:	4b9e      	ldr	r3, [pc, #632]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006328:	2101      	movs	r1, #1
 800632a:	438a      	bics	r2, r1
 800632c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632e:	f7fe f889 	bl	8004444 <HAL_GetTick>
 8006332:	0003      	movs	r3, r0
 8006334:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006338:	f7fe f884 	bl	8004444 <HAL_GetTick>
 800633c:	0002      	movs	r2, r0
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e1ad      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800634a:	4b95      	ldr	r3, [pc, #596]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800634c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634e:	2202      	movs	r2, #2
 8006350:	4013      	ands	r3, r2
 8006352:	d1f1      	bne.n	8006338 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2204      	movs	r2, #4
 800635a:	4013      	ands	r3, r2
 800635c:	d100      	bne.n	8006360 <HAL_RCC_OscConfig+0x424>
 800635e:	e0af      	b.n	80064c0 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006360:	2327      	movs	r3, #39	; 0x27
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006368:	4b8d      	ldr	r3, [pc, #564]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800636a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	055b      	lsls	r3, r3, #21
 8006370:	4013      	ands	r3, r2
 8006372:	d10a      	bne.n	800638a <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006374:	4b8a      	ldr	r3, [pc, #552]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006378:	4b89      	ldr	r3, [pc, #548]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	0549      	lsls	r1, r1, #21
 800637e:	430a      	orrs	r2, r1
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006382:	2327      	movs	r3, #39	; 0x27
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	2201      	movs	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638a:	4b87      	ldr	r3, [pc, #540]	; (80065a8 <HAL_RCC_OscConfig+0x66c>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4013      	ands	r3, r2
 8006394:	d11a      	bne.n	80063cc <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006396:	4b84      	ldr	r3, [pc, #528]	; (80065a8 <HAL_RCC_OscConfig+0x66c>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4b83      	ldr	r3, [pc, #524]	; (80065a8 <HAL_RCC_OscConfig+0x66c>)
 800639c:	2180      	movs	r1, #128	; 0x80
 800639e:	0049      	lsls	r1, r1, #1
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063a4:	f7fe f84e 	bl	8004444 <HAL_GetTick>
 80063a8:	0003      	movs	r3, r0
 80063aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ae:	f7fe f849 	bl	8004444 <HAL_GetTick>
 80063b2:	0002      	movs	r2, r0
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b64      	cmp	r3, #100	; 0x64
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e172      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c0:	4b79      	ldr	r3, [pc, #484]	; (80065a8 <HAL_RCC_OscConfig+0x66c>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4013      	ands	r3, r2
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d107      	bne.n	80063e8 <HAL_RCC_OscConfig+0x4ac>
 80063d8:	4b71      	ldr	r3, [pc, #452]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80063da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063dc:	4b70      	ldr	r3, [pc, #448]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80063de:	2180      	movs	r1, #128	; 0x80
 80063e0:	0049      	lsls	r1, r1, #1
 80063e2:	430a      	orrs	r2, r1
 80063e4:	651a      	str	r2, [r3, #80]	; 0x50
 80063e6:	e031      	b.n	800644c <HAL_RCC_OscConfig+0x510>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10c      	bne.n	800640a <HAL_RCC_OscConfig+0x4ce>
 80063f0:	4b6b      	ldr	r3, [pc, #428]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80063f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063f4:	4b6a      	ldr	r3, [pc, #424]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80063f6:	496b      	ldr	r1, [pc, #428]	; (80065a4 <HAL_RCC_OscConfig+0x668>)
 80063f8:	400a      	ands	r2, r1
 80063fa:	651a      	str	r2, [r3, #80]	; 0x50
 80063fc:	4b68      	ldr	r3, [pc, #416]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80063fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006400:	4b67      	ldr	r3, [pc, #412]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006402:	496a      	ldr	r1, [pc, #424]	; (80065ac <HAL_RCC_OscConfig+0x670>)
 8006404:	400a      	ands	r2, r1
 8006406:	651a      	str	r2, [r3, #80]	; 0x50
 8006408:	e020      	b.n	800644c <HAL_RCC_OscConfig+0x510>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	23a0      	movs	r3, #160	; 0xa0
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	429a      	cmp	r2, r3
 8006414:	d10e      	bne.n	8006434 <HAL_RCC_OscConfig+0x4f8>
 8006416:	4b62      	ldr	r3, [pc, #392]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800641a:	4b61      	ldr	r3, [pc, #388]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	00c9      	lsls	r1, r1, #3
 8006420:	430a      	orrs	r2, r1
 8006422:	651a      	str	r2, [r3, #80]	; 0x50
 8006424:	4b5e      	ldr	r3, [pc, #376]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006428:	4b5d      	ldr	r3, [pc, #372]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	0049      	lsls	r1, r1, #1
 800642e:	430a      	orrs	r2, r1
 8006430:	651a      	str	r2, [r3, #80]	; 0x50
 8006432:	e00b      	b.n	800644c <HAL_RCC_OscConfig+0x510>
 8006434:	4b5a      	ldr	r3, [pc, #360]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006438:	4b59      	ldr	r3, [pc, #356]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800643a:	495a      	ldr	r1, [pc, #360]	; (80065a4 <HAL_RCC_OscConfig+0x668>)
 800643c:	400a      	ands	r2, r1
 800643e:	651a      	str	r2, [r3, #80]	; 0x50
 8006440:	4b57      	ldr	r3, [pc, #348]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006444:	4b56      	ldr	r3, [pc, #344]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006446:	4959      	ldr	r1, [pc, #356]	; (80065ac <HAL_RCC_OscConfig+0x670>)
 8006448:	400a      	ands	r2, r1
 800644a:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d015      	beq.n	8006480 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006454:	f7fd fff6 	bl	8004444 <HAL_GetTick>
 8006458:	0003      	movs	r3, r0
 800645a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800645c:	e009      	b.n	8006472 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800645e:	f7fd fff1 	bl	8004444 <HAL_GetTick>
 8006462:	0002      	movs	r2, r0
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	4a51      	ldr	r2, [pc, #324]	; (80065b0 <HAL_RCC_OscConfig+0x674>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e119      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006472:	4b4b      	ldr	r3, [pc, #300]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006476:	2380      	movs	r3, #128	; 0x80
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4013      	ands	r3, r2
 800647c:	d0ef      	beq.n	800645e <HAL_RCC_OscConfig+0x522>
 800647e:	e014      	b.n	80064aa <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006480:	f7fd ffe0 	bl	8004444 <HAL_GetTick>
 8006484:	0003      	movs	r3, r0
 8006486:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006488:	e009      	b.n	800649e <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800648a:	f7fd ffdb 	bl	8004444 <HAL_GetTick>
 800648e:	0002      	movs	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	4a46      	ldr	r2, [pc, #280]	; (80065b0 <HAL_RCC_OscConfig+0x674>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e103      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800649e:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80064a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064a2:	2380      	movs	r3, #128	; 0x80
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4013      	ands	r3, r2
 80064a8:	d1ef      	bne.n	800648a <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064aa:	2327      	movs	r3, #39	; 0x27
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d105      	bne.n	80064c0 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064b4:	4b3a      	ldr	r3, [pc, #232]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80064b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b8:	4b39      	ldr	r3, [pc, #228]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80064ba:	493e      	ldr	r1, [pc, #248]	; (80065b4 <HAL_RCC_OscConfig+0x678>)
 80064bc:	400a      	ands	r2, r1
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2220      	movs	r2, #32
 80064c6:	4013      	ands	r3, r2
 80064c8:	d049      	beq.n	800655e <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d026      	beq.n	8006520 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80064d2:	4b33      	ldr	r3, [pc, #204]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	4b32      	ldr	r3, [pc, #200]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80064d8:	2101      	movs	r1, #1
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]
 80064de:	4b30      	ldr	r3, [pc, #192]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80064e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e2:	4b2f      	ldr	r3, [pc, #188]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 80064e4:	2101      	movs	r1, #1
 80064e6:	430a      	orrs	r2, r1
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34
 80064ea:	4b33      	ldr	r3, [pc, #204]	; (80065b8 <HAL_RCC_OscConfig+0x67c>)
 80064ec:	6a1a      	ldr	r2, [r3, #32]
 80064ee:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <HAL_RCC_OscConfig+0x67c>)
 80064f0:	2180      	movs	r1, #128	; 0x80
 80064f2:	0189      	lsls	r1, r1, #6
 80064f4:	430a      	orrs	r2, r1
 80064f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f8:	f7fd ffa4 	bl	8004444 <HAL_GetTick>
 80064fc:	0003      	movs	r3, r0
 80064fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006502:	f7fd ff9f 	bl	8004444 <HAL_GetTick>
 8006506:	0002      	movs	r2, r0
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0c8      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006514:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2202      	movs	r2, #2
 800651a:	4013      	ands	r3, r2
 800651c:	d0f1      	beq.n	8006502 <HAL_RCC_OscConfig+0x5c6>
 800651e:	e01e      	b.n	800655e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006520:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006526:	2101      	movs	r1, #1
 8006528:	438a      	bics	r2, r1
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	4b22      	ldr	r3, [pc, #136]	; (80065b8 <HAL_RCC_OscConfig+0x67c>)
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <HAL_RCC_OscConfig+0x67c>)
 8006532:	4922      	ldr	r1, [pc, #136]	; (80065bc <HAL_RCC_OscConfig+0x680>)
 8006534:	400a      	ands	r2, r1
 8006536:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006538:	f7fd ff84 	bl	8004444 <HAL_GetTick>
 800653c:	0003      	movs	r3, r0
 800653e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006542:	f7fd ff7f 	bl	8004444 <HAL_GetTick>
 8006546:	0002      	movs	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e0a8      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006554:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2202      	movs	r2, #2
 800655a:	4013      	ands	r3, r2
 800655c:	d1f1      	bne.n	8006542 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	2b00      	cmp	r3, #0
 8006564:	d100      	bne.n	8006568 <HAL_RCC_OscConfig+0x62c>
 8006566:	e09d      	b.n	80066a4 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2b0c      	cmp	r3, #12
 800656c:	d100      	bne.n	8006570 <HAL_RCC_OscConfig+0x634>
 800656e:	e076      	b.n	800665e <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	2b02      	cmp	r3, #2
 8006576:	d157      	bne.n	8006628 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_RCC_OscConfig+0x664>)
 800657e:	4910      	ldr	r1, [pc, #64]	; (80065c0 <HAL_RCC_OscConfig+0x684>)
 8006580:	400a      	ands	r2, r1
 8006582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7fd ff5e 	bl	8004444 <HAL_GetTick>
 8006588:	0003      	movs	r3, r0
 800658a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800658c:	e01a      	b.n	80065c4 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658e:	f7fd ff59 	bl	8004444 <HAL_GetTick>
 8006592:	0002      	movs	r2, r0
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d913      	bls.n	80065c4 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e082      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
 80065a0:	40021000 	.word	0x40021000
 80065a4:	fffffeff 	.word	0xfffffeff
 80065a8:	40007000 	.word	0x40007000
 80065ac:	fffffbff 	.word	0xfffffbff
 80065b0:	00001388 	.word	0x00001388
 80065b4:	efffffff 	.word	0xefffffff
 80065b8:	40010000 	.word	0x40010000
 80065bc:	ffffdfff 	.word	0xffffdfff
 80065c0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80065c4:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	049b      	lsls	r3, r3, #18
 80065cc:	4013      	ands	r3, r2
 80065ce:	d1de      	bne.n	800658e <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d0:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	4a37      	ldr	r2, [pc, #220]	; (80066b4 <HAL_RCC_OscConfig+0x778>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	0019      	movs	r1, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	431a      	orrs	r2, r3
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 80065ec:	430a      	orrs	r2, r1
 80065ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f0:	4b2f      	ldr	r3, [pc, #188]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 80065f6:	2180      	movs	r1, #128	; 0x80
 80065f8:	0449      	lsls	r1, r1, #17
 80065fa:	430a      	orrs	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fe:	f7fd ff21 	bl	8004444 <HAL_GetTick>
 8006602:	0003      	movs	r3, r0
 8006604:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006608:	f7fd ff1c 	bl	8004444 <HAL_GetTick>
 800660c:	0002      	movs	r2, r0
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e045      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800661a:	4b25      	ldr	r3, [pc, #148]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	049b      	lsls	r3, r3, #18
 8006622:	4013      	ands	r3, r2
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x6cc>
 8006626:	e03d      	b.n	80066a4 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006628:	4b21      	ldr	r3, [pc, #132]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 800662e:	4922      	ldr	r1, [pc, #136]	; (80066b8 <HAL_RCC_OscConfig+0x77c>)
 8006630:	400a      	ands	r2, r1
 8006632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006634:	f7fd ff06 	bl	8004444 <HAL_GetTick>
 8006638:	0003      	movs	r3, r0
 800663a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800663e:	f7fd ff01 	bl	8004444 <HAL_GetTick>
 8006642:	0002      	movs	r2, r0
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e02a      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006650:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	049b      	lsls	r3, r3, #18
 8006658:	4013      	ands	r3, r2
 800665a:	d1f0      	bne.n	800663e <HAL_RCC_OscConfig+0x702>
 800665c:	e022      	b.n	80066a4 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e01d      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <HAL_RCC_OscConfig+0x774>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	025b      	lsls	r3, r3, #9
 8006676:	401a      	ands	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	429a      	cmp	r2, r3
 800667e:	d10f      	bne.n	80066a0 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	23f0      	movs	r3, #240	; 0xf0
 8006684:	039b      	lsls	r3, r3, #14
 8006686:	401a      	ands	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	23c0      	movs	r3, #192	; 0xc0
 8006694:	041b      	lsls	r3, r3, #16
 8006696:	401a      	ands	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d001      	beq.n	80066a4 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	0018      	movs	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b00a      	add	sp, #40	; 0x28
 80066ac:	bdb0      	pop	{r4, r5, r7, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	40021000 	.word	0x40021000
 80066b4:	ff02ffff 	.word	0xff02ffff
 80066b8:	feffffff 	.word	0xfeffffff

080066bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066bc:	b5b0      	push	{r4, r5, r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e10d      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066d0:	4b88      	ldr	r3, [pc, #544]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2201      	movs	r2, #1
 80066d6:	4013      	ands	r3, r2
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d911      	bls.n	8006702 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b85      	ldr	r3, [pc, #532]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2201      	movs	r2, #1
 80066e4:	4393      	bics	r3, r2
 80066e6:	0019      	movs	r1, r3
 80066e8:	4b82      	ldr	r3, [pc, #520]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f0:	4b80      	ldr	r3, [pc, #512]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	4013      	ands	r3, r2
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d001      	beq.n	8006702 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e0f4      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2202      	movs	r2, #2
 8006708:	4013      	ands	r3, r2
 800670a:	d009      	beq.n	8006720 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800670c:	4b7a      	ldr	r3, [pc, #488]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	22f0      	movs	r2, #240	; 0xf0
 8006712:	4393      	bics	r3, r2
 8006714:	0019      	movs	r1, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	4b77      	ldr	r3, [pc, #476]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 800671c:	430a      	orrs	r2, r1
 800671e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2201      	movs	r2, #1
 8006726:	4013      	ands	r3, r2
 8006728:	d100      	bne.n	800672c <HAL_RCC_ClockConfig+0x70>
 800672a:	e089      	b.n	8006840 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d107      	bne.n	8006744 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006734:	4b70      	ldr	r3, [pc, #448]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	4013      	ands	r3, r2
 800673e:	d120      	bne.n	8006782 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0d3      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d107      	bne.n	800675c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800674c:	4b6a      	ldr	r3, [pc, #424]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	2380      	movs	r3, #128	; 0x80
 8006752:	049b      	lsls	r3, r3, #18
 8006754:	4013      	ands	r3, r2
 8006756:	d114      	bne.n	8006782 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0c7      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d106      	bne.n	8006772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006764:	4b64      	ldr	r3, [pc, #400]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2204      	movs	r2, #4
 800676a:	4013      	ands	r3, r2
 800676c:	d109      	bne.n	8006782 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0bc      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006772:	4b61      	ldr	r3, [pc, #388]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4013      	ands	r3, r2
 800677c:	d101      	bne.n	8006782 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e0b4      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006782:	4b5d      	ldr	r3, [pc, #372]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	2203      	movs	r2, #3
 8006788:	4393      	bics	r3, r2
 800678a:	0019      	movs	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	4b59      	ldr	r3, [pc, #356]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 8006792:	430a      	orrs	r2, r1
 8006794:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006796:	f7fd fe55 	bl	8004444 <HAL_GetTick>
 800679a:	0003      	movs	r3, r0
 800679c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d111      	bne.n	80067ca <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80067a6:	e009      	b.n	80067bc <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a8:	f7fd fe4c 	bl	8004444 <HAL_GetTick>
 80067ac:	0002      	movs	r2, r0
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4a52      	ldr	r2, [pc, #328]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e097      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80067bc:	4b4e      	ldr	r3, [pc, #312]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	220c      	movs	r2, #12
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d1ef      	bne.n	80067a8 <HAL_RCC_ClockConfig+0xec>
 80067c8:	e03a      	b.n	8006840 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d111      	bne.n	80067f6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d2:	e009      	b.n	80067e8 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d4:	f7fd fe36 	bl	8004444 <HAL_GetTick>
 80067d8:	0002      	movs	r2, r0
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	4a47      	ldr	r2, [pc, #284]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e081      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067e8:	4b43      	ldr	r3, [pc, #268]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	220c      	movs	r2, #12
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	d1ef      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x118>
 80067f4:	e024      	b.n	8006840 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d11b      	bne.n	8006836 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80067fe:	e009      	b.n	8006814 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006800:	f7fd fe20 	bl	8004444 <HAL_GetTick>
 8006804:	0002      	movs	r2, r0
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	4a3c      	ldr	r2, [pc, #240]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e06b      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006814:	4b38      	ldr	r3, [pc, #224]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	220c      	movs	r2, #12
 800681a:	4013      	ands	r3, r2
 800681c:	2b04      	cmp	r3, #4
 800681e:	d1ef      	bne.n	8006800 <HAL_RCC_ClockConfig+0x144>
 8006820:	e00e      	b.n	8006840 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006822:	f7fd fe0f 	bl	8004444 <HAL_GetTick>
 8006826:	0002      	movs	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	4a33      	ldr	r2, [pc, #204]	; (80068fc <HAL_RCC_ClockConfig+0x240>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e05a      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	220c      	movs	r2, #12
 800683c:	4013      	ands	r3, r2
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006840:	4b2c      	ldr	r3, [pc, #176]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2201      	movs	r2, #1
 8006846:	4013      	ands	r3, r2
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d211      	bcs.n	8006872 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684e:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2201      	movs	r2, #1
 8006854:	4393      	bics	r3, r2
 8006856:	0019      	movs	r1, r3
 8006858:	4b26      	ldr	r3, [pc, #152]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006860:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <HAL_RCC_ClockConfig+0x238>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2201      	movs	r2, #1
 8006866:	4013      	ands	r3, r2
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d001      	beq.n	8006872 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e03c      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2204      	movs	r2, #4
 8006878:	4013      	ands	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800687c:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	4a1f      	ldr	r2, [pc, #124]	; (8006900 <HAL_RCC_ClockConfig+0x244>)
 8006882:	4013      	ands	r3, r2
 8006884:	0019      	movs	r1, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 800688c:	430a      	orrs	r2, r1
 800688e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2208      	movs	r2, #8
 8006896:	4013      	ands	r3, r2
 8006898:	d00a      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800689a:	4b17      	ldr	r3, [pc, #92]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4a19      	ldr	r2, [pc, #100]	; (8006904 <HAL_RCC_ClockConfig+0x248>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	0019      	movs	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	00da      	lsls	r2, r3, #3
 80068aa:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 80068ac:	430a      	orrs	r2, r1
 80068ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068b0:	f000 f82e 	bl	8006910 <HAL_RCC_GetSysClockFreq>
 80068b4:	0001      	movs	r1, r0
 80068b6:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <HAL_RCC_ClockConfig+0x23c>)
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	220f      	movs	r2, #15
 80068be:	4013      	ands	r3, r2
 80068c0:	4a11      	ldr	r2, [pc, #68]	; (8006908 <HAL_RCC_ClockConfig+0x24c>)
 80068c2:	5cd3      	ldrb	r3, [r2, r3]
 80068c4:	000a      	movs	r2, r1
 80068c6:	40da      	lsrs	r2, r3
 80068c8:	4b10      	ldr	r3, [pc, #64]	; (800690c <HAL_RCC_ClockConfig+0x250>)
 80068ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80068cc:	250b      	movs	r5, #11
 80068ce:	197c      	adds	r4, r7, r5
 80068d0:	2000      	movs	r0, #0
 80068d2:	f7fd fd71 	bl	80043b8 <HAL_InitTick>
 80068d6:	0003      	movs	r3, r0
 80068d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80068da:	197b      	adds	r3, r7, r5
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80068e2:	230b      	movs	r3, #11
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	e000      	b.n	80068ec <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b004      	add	sp, #16
 80068f2:	bdb0      	pop	{r4, r5, r7, pc}
 80068f4:	40022000 	.word	0x40022000
 80068f8:	40021000 	.word	0x40021000
 80068fc:	00001388 	.word	0x00001388
 8006900:	fffff8ff 	.word	0xfffff8ff
 8006904:	ffffc7ff 	.word	0xffffc7ff
 8006908:	0800c180 	.word	0x0800c180
 800690c:	20000010 	.word	0x20000010

08006910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	220c      	movs	r2, #12
 8006920:	4013      	ands	r3, r2
 8006922:	2b08      	cmp	r3, #8
 8006924:	d00e      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x34>
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d00f      	beq.n	800694a <HAL_RCC_GetSysClockFreq+0x3a>
 800692a:	2b04      	cmp	r3, #4
 800692c:	d157      	bne.n	80069de <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800692e:	4b35      	ldr	r3, [pc, #212]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2210      	movs	r2, #16
 8006934:	4013      	ands	r3, r2
 8006936:	d002      	beq.n	800693e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006938:	4b33      	ldr	r3, [pc, #204]	; (8006a08 <HAL_RCC_GetSysClockFreq+0xf8>)
 800693a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800693c:	e05d      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800693e:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006940:	613b      	str	r3, [r7, #16]
      break;
 8006942:	e05a      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006944:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x100>)
 8006946:	613b      	str	r3, [r7, #16]
      break;
 8006948:	e057      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	0c9b      	lsrs	r3, r3, #18
 800694e:	220f      	movs	r2, #15
 8006950:	4013      	ands	r3, r2
 8006952:	4a30      	ldr	r2, [pc, #192]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x104>)
 8006954:	5cd3      	ldrb	r3, [r2, r3]
 8006956:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	0d9b      	lsrs	r3, r3, #22
 800695c:	2203      	movs	r2, #3
 800695e:	4013      	ands	r3, r2
 8006960:	3301      	adds	r3, #1
 8006962:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006964:	4b27      	ldr	r3, [pc, #156]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	025b      	lsls	r3, r3, #9
 800696c:	4013      	ands	r3, r2
 800696e:	d00f      	beq.n	8006990 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	000a      	movs	r2, r1
 8006974:	0152      	lsls	r2, r2, #5
 8006976:	1a52      	subs	r2, r2, r1
 8006978:	0193      	lsls	r3, r2, #6
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	185b      	adds	r3, r3, r1
 8006980:	025b      	lsls	r3, r3, #9
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	0018      	movs	r0, r3
 8006986:	f7f9 fbd1 	bl	800012c <__udivsi3>
 800698a:	0003      	movs	r3, r0
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e023      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006990:	4b1c      	ldr	r3, [pc, #112]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2210      	movs	r2, #16
 8006996:	4013      	ands	r3, r2
 8006998:	d00f      	beq.n	80069ba <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	000a      	movs	r2, r1
 800699e:	0152      	lsls	r2, r2, #5
 80069a0:	1a52      	subs	r2, r2, r1
 80069a2:	0193      	lsls	r3, r2, #6
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	185b      	adds	r3, r3, r1
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	0018      	movs	r0, r3
 80069b0:	f7f9 fbbc 	bl	800012c <__udivsi3>
 80069b4:	0003      	movs	r3, r0
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e00e      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	000a      	movs	r2, r1
 80069be:	0152      	lsls	r2, r2, #5
 80069c0:	1a52      	subs	r2, r2, r1
 80069c2:	0193      	lsls	r3, r2, #6
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	185b      	adds	r3, r3, r1
 80069ca:	029b      	lsls	r3, r3, #10
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	0018      	movs	r0, r3
 80069d0:	f7f9 fbac 	bl	800012c <__udivsi3>
 80069d4:	0003      	movs	r3, r0
 80069d6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	613b      	str	r3, [r7, #16]
      break;
 80069dc:	e00d      	b.n	80069fa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80069de:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <HAL_RCC_GetSysClockFreq+0xf4>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	0b5b      	lsrs	r3, r3, #13
 80069e4:	2207      	movs	r2, #7
 80069e6:	4013      	ands	r3, r2
 80069e8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	2280      	movs	r2, #128	; 0x80
 80069f0:	0212      	lsls	r2, r2, #8
 80069f2:	409a      	lsls	r2, r3
 80069f4:	0013      	movs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
      break;
 80069f8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80069fa:	693b      	ldr	r3, [r7, #16]
}
 80069fc:	0018      	movs	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b006      	add	sp, #24
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40021000 	.word	0x40021000
 8006a08:	003d0900 	.word	0x003d0900
 8006a0c:	00f42400 	.word	0x00f42400
 8006a10:	007a1200 	.word	0x007a1200
 8006a14:	0800c198 	.word	0x0800c198

08006a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a1c:	4b02      	ldr	r3, [pc, #8]	; (8006a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
}
 8006a20:	0018      	movs	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	20000010 	.word	0x20000010

08006a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a30:	f7ff fff2 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8006a34:	0001      	movs	r1, r0
 8006a36:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	2207      	movs	r2, #7
 8006a3e:	4013      	ands	r3, r2
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a42:	5cd3      	ldrb	r3, [r2, r3]
 8006a44:	40d9      	lsrs	r1, r3
 8006a46:	000b      	movs	r3, r1
}
 8006a48:	0018      	movs	r0, r3
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	40021000 	.word	0x40021000
 8006a54:	0800c190 	.word	0x0800c190

08006a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a5c:	f7ff ffdc 	bl	8006a18 <HAL_RCC_GetHCLKFreq>
 8006a60:	0001      	movs	r1, r0
 8006a62:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	0adb      	lsrs	r3, r3, #11
 8006a68:	2207      	movs	r2, #7
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	4a04      	ldr	r2, [pc, #16]	; (8006a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a6e:	5cd3      	ldrb	r3, [r2, r3]
 8006a70:	40d9      	lsrs	r1, r3
 8006a72:	000b      	movs	r3, r1
}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	0800c190 	.word	0x0800c190

08006a84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2220      	movs	r2, #32
 8006a92:	4013      	ands	r3, r2
 8006a94:	d100      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8006a96:	e0c7      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8006a98:	2317      	movs	r3, #23
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aa0:	4b91      	ldr	r3, [pc, #580]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa4:	2380      	movs	r3, #128	; 0x80
 8006aa6:	055b      	lsls	r3, r3, #21
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	d10a      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aac:	4b8e      	ldr	r3, [pc, #568]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab0:	4b8d      	ldr	r3, [pc, #564]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ab2:	2180      	movs	r1, #128	; 0x80
 8006ab4:	0549      	lsls	r1, r1, #21
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006aba:	2317      	movs	r3, #23
 8006abc:	18fb      	adds	r3, r7, r3
 8006abe:	2201      	movs	r2, #1
 8006ac0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac2:	4b8a      	ldr	r3, [pc, #552]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	2380      	movs	r3, #128	; 0x80
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4013      	ands	r3, r2
 8006acc:	d11a      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ace:	4b87      	ldr	r3, [pc, #540]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b86      	ldr	r3, [pc, #536]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ad4:	2180      	movs	r1, #128	; 0x80
 8006ad6:	0049      	lsls	r1, r1, #1
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006adc:	f7fd fcb2 	bl	8004444 <HAL_GetTick>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae4:	e008      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae6:	f7fd fcad 	bl	8004444 <HAL_GetTick>
 8006aea:	0002      	movs	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b64      	cmp	r3, #100	; 0x64
 8006af2:	d901      	bls.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e0f2      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af8:	4b7c      	ldr	r3, [pc, #496]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4013      	ands	r3, r2
 8006b02:	d0f0      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006b04:	4b78      	ldr	r3, [pc, #480]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	23c0      	movs	r3, #192	; 0xc0
 8006b0a:	039b      	lsls	r3, r3, #14
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	23c0      	movs	r3, #192	; 0xc0
 8006b16:	039b      	lsls	r3, r3, #14
 8006b18:	4013      	ands	r3, r2
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d013      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	23c0      	movs	r3, #192	; 0xc0
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	401a      	ands	r2, r3
 8006b2a:	23c0      	movs	r3, #192	; 0xc0
 8006b2c:	029b      	lsls	r3, r3, #10
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d10a      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b32:	4b6d      	ldr	r3, [pc, #436]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	401a      	ands	r2, r3
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	029b      	lsls	r3, r3, #10
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d101      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0ca      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006b48:	4b67      	ldr	r3, [pc, #412]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b4c:	23c0      	movs	r3, #192	; 0xc0
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	4013      	ands	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d03b      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	23c0      	movs	r3, #192	; 0xc0
 8006b60:	029b      	lsls	r3, r3, #10
 8006b62:	4013      	ands	r3, r2
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d033      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	4013      	ands	r3, r2
 8006b72:	d02e      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006b74:	4b5c      	ldr	r3, [pc, #368]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b78:	4a5d      	ldr	r2, [pc, #372]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b7e:	4b5a      	ldr	r3, [pc, #360]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b82:	4b59      	ldr	r3, [pc, #356]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b84:	2180      	movs	r1, #128	; 0x80
 8006b86:	0309      	lsls	r1, r1, #12
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b8c:	4b56      	ldr	r3, [pc, #344]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b90:	4b55      	ldr	r3, [pc, #340]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b92:	4958      	ldr	r1, [pc, #352]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8006b94:	400a      	ands	r2, r1
 8006b96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006b98:	4b53      	ldr	r3, [pc, #332]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d014      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba8:	f7fd fc4c 	bl	8004444 <HAL_GetTick>
 8006bac:	0003      	movs	r3, r0
 8006bae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bb0:	e009      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb2:	f7fd fc47 	bl	8004444 <HAL_GetTick>
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	4a4e      	ldr	r2, [pc, #312]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e08b      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bc6:	4b48      	ldr	r3, [pc, #288]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bca:	2380      	movs	r3, #128	; 0x80
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d0ef      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	23c0      	movs	r3, #192	; 0xc0
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	401a      	ands	r2, r3
 8006bdc:	23c0      	movs	r3, #192	; 0xc0
 8006bde:	029b      	lsls	r3, r3, #10
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d10c      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006be4:	4b40      	ldr	r3, [pc, #256]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a44      	ldr	r2, [pc, #272]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	0019      	movs	r1, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	23c0      	movs	r3, #192	; 0xc0
 8006bf4:	039b      	lsls	r3, r3, #14
 8006bf6:	401a      	ands	r2, r3
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	4b3a      	ldr	r3, [pc, #232]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	23c0      	movs	r3, #192	; 0xc0
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	401a      	ands	r2, r3
 8006c0c:	4b36      	ldr	r3, [pc, #216]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c12:	2317      	movs	r3, #23
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d105      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1c:	4b32      	ldr	r3, [pc, #200]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c20:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c22:	4937      	ldr	r1, [pc, #220]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006c24:	400a      	ands	r2, r1
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d009      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c32:	4b2d      	ldr	r3, [pc, #180]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	2203      	movs	r2, #3
 8006c38:	4393      	bics	r3, r2
 8006c3a:	0019      	movs	r1, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c42:	430a      	orrs	r2, r1
 8006c44:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c50:	4b25      	ldr	r3, [pc, #148]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c54:	220c      	movs	r2, #12
 8006c56:	4393      	bics	r3, r2
 8006c58:	0019      	movs	r1, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	4b22      	ldr	r3, [pc, #136]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c60:	430a      	orrs	r2, r1
 8006c62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2204      	movs	r2, #4
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c72:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	0019      	movs	r1, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2208      	movs	r2, #8
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c8c:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c90:	4a1d      	ldr	r2, [pc, #116]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	0019      	movs	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695a      	ldr	r2, [r3, #20]
 8006c9a:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006caa:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cae:	4a17      	ldr	r2, [pc, #92]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	0019      	movs	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2280      	movs	r2, #128	; 0x80
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d009      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006cc8:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ccc:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	0019      	movs	r1, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b006      	add	sp, #24
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	40007000 	.word	0x40007000
 8006cf0:	fffcffff 	.word	0xfffcffff
 8006cf4:	fff7ffff 	.word	0xfff7ffff
 8006cf8:	00001388 	.word	0x00001388
 8006cfc:	ffcfffff 	.word	0xffcfffff
 8006d00:	efffffff 	.word	0xefffffff
 8006d04:	fffff3ff 	.word	0xfffff3ff
 8006d08:	ffffcfff 	.word	0xffffcfff
 8006d0c:	fbffffff 	.word	0xfbffffff
 8006d10:	fff3ffff 	.word	0xfff3ffff

08006d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e01e      	b.n	8006d64 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2239      	movs	r2, #57	; 0x39
 8006d2a:	5c9b      	ldrb	r3, [r3, r2]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d107      	bne.n	8006d42 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2238      	movs	r2, #56	; 0x38
 8006d36:	2100      	movs	r1, #0
 8006d38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f7fd f99b 	bl	8004078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2239      	movs	r2, #57	; 0x39
 8006d46:	2102      	movs	r1, #2
 8006d48:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	0019      	movs	r1, r3
 8006d54:	0010      	movs	r0, r2
 8006d56:	f000 f9f1 	bl	800713c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2239      	movs	r2, #57	; 0x39
 8006d5e:	2101      	movs	r1, #1
 8006d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2101      	movs	r1, #1
 8006d80:	430a      	orrs	r2, r1
 8006d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2207      	movs	r2, #7
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b06      	cmp	r3, #6
 8006d94:	d007      	beq.n	8006da6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2101      	movs	r1, #1
 8006da2:	430a      	orrs	r2, r1
 8006da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b004      	add	sp, #16
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d124      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d11d      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	4252      	negs	r2, r2
 8006ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2203      	movs	r2, #3
 8006dec:	4013      	ands	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0018      	movs	r0, r3
 8006df4:	f000 f98a 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006df8:	e007      	b.n	8006e0a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f000 f97d 	bl	80070fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f000 f989 	bl	800711c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2204      	movs	r2, #4
 8006e18:	4013      	ands	r3, r2
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d125      	bne.n	8006e6a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2204      	movs	r2, #4
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d11e      	bne.n	8006e6a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2205      	movs	r2, #5
 8006e32:	4252      	negs	r2, r2
 8006e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	23c0      	movs	r3, #192	; 0xc0
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4013      	ands	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f000 f95d 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006e52:	e007      	b.n	8006e64 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	0018      	movs	r0, r3
 8006e58:	f000 f950 	bl	80070fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f000 f95c 	bl	800711c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2208      	movs	r2, #8
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d124      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	2208      	movs	r2, #8
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d11d      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2209      	movs	r2, #9
 8006e8c:	4252      	negs	r2, r2
 8006e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2204      	movs	r2, #4
 8006e94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d004      	beq.n	8006eac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f000 f931 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006eaa:	e007      	b.n	8006ebc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f000 f924 	bl	80070fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f000 f930 	bl	800711c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2210      	movs	r2, #16
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d125      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b10      	cmp	r3, #16
 8006edc:	d11e      	bne.n	8006f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2211      	movs	r2, #17
 8006ee4:	4252      	negs	r2, r2
 8006ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2208      	movs	r2, #8
 8006eec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	23c0      	movs	r3, #192	; 0xc0
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d004      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0018      	movs	r0, r3
 8006f00:	f000 f904 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006f04:	e007      	b.n	8006f16 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f000 f8f7 	bl	80070fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 f903 	bl	800711c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2201      	movs	r2, #1
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d10f      	bne.n	8006f4a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d108      	bne.n	8006f4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	4252      	negs	r2, r2
 8006f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7fc faff 	bl	8003548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2240      	movs	r2, #64	; 0x40
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	d10f      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2240      	movs	r2, #64	; 0x40
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d108      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2241      	movs	r2, #65	; 0x41
 8006f6c:	4252      	negs	r2, r2
 8006f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	0018      	movs	r0, r3
 8006f74:	f000 f8da 	bl	800712c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b002      	add	sp, #8
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2238      	movs	r2, #56	; 0x38
 8006f8e:	5c9b      	ldrb	r3, [r3, r2]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_TIM_ConfigClockSource+0x18>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e0ab      	b.n	80070f0 <HAL_TIM_ConfigClockSource+0x170>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2238      	movs	r2, #56	; 0x38
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2239      	movs	r2, #57	; 0x39
 8006fa4:	2102      	movs	r1, #2
 8006fa6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2277      	movs	r2, #119	; 0x77
 8006fb4:	4393      	bics	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4a4f      	ldr	r2, [pc, #316]	; (80070f8 <HAL_TIM_ConfigClockSource+0x178>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d100      	bne.n	8006fd2 <HAL_TIM_ConfigClockSource+0x52>
 8006fd0:	e06b      	b.n	80070aa <HAL_TIM_ConfigClockSource+0x12a>
 8006fd2:	d80e      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x72>
 8006fd4:	2b10      	cmp	r3, #16
 8006fd6:	d100      	bne.n	8006fda <HAL_TIM_ConfigClockSource+0x5a>
 8006fd8:	e077      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x14a>
 8006fda:	d803      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x64>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d100      	bne.n	8006fe2 <HAL_TIM_ConfigClockSource+0x62>
 8006fe0:	e073      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006fe2:	e07c      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d100      	bne.n	8006fea <HAL_TIM_ConfigClockSource+0x6a>
 8006fe8:	e06f      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x14a>
 8006fea:	2b30      	cmp	r3, #48	; 0x30
 8006fec:	d100      	bne.n	8006ff0 <HAL_TIM_ConfigClockSource+0x70>
 8006fee:	e06c      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8006ff0:	e075      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006ff2:	2b70      	cmp	r3, #112	; 0x70
 8006ff4:	d00e      	beq.n	8007014 <HAL_TIM_ConfigClockSource+0x94>
 8006ff6:	d804      	bhi.n	8007002 <HAL_TIM_ConfigClockSource+0x82>
 8006ff8:	2b50      	cmp	r3, #80	; 0x50
 8006ffa:	d036      	beq.n	800706a <HAL_TIM_ConfigClockSource+0xea>
 8006ffc:	2b60      	cmp	r3, #96	; 0x60
 8006ffe:	d044      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007000:	e06d      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007002:	2280      	movs	r2, #128	; 0x80
 8007004:	0152      	lsls	r2, r2, #5
 8007006:	4293      	cmp	r3, r2
 8007008:	d068      	beq.n	80070dc <HAL_TIM_ConfigClockSource+0x15c>
 800700a:	2280      	movs	r2, #128	; 0x80
 800700c:	0192      	lsls	r2, r2, #6
 800700e:	4293      	cmp	r3, r2
 8007010:	d017      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007012:	e064      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6899      	ldr	r1, [r3, #8]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f000 f958 	bl	80072d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2277      	movs	r2, #119	; 0x77
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	609a      	str	r2, [r3, #8]
      break;
 8007040:	e04d      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6899      	ldr	r1, [r3, #8]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f000 f941 	bl	80072d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2180      	movs	r1, #128	; 0x80
 8007062:	01c9      	lsls	r1, r1, #7
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]
      break;
 8007068:	e039      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	001a      	movs	r2, r3
 8007078:	f000 f8b4 	bl	80071e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2150      	movs	r1, #80	; 0x50
 8007082:	0018      	movs	r0, r3
 8007084:	f000 f90e 	bl	80072a4 <TIM_ITRx_SetConfig>
      break;
 8007088:	e029      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6859      	ldr	r1, [r3, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	001a      	movs	r2, r3
 8007098:	f000 f8d2 	bl	8007240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2160      	movs	r1, #96	; 0x60
 80070a2:	0018      	movs	r0, r3
 80070a4:	f000 f8fe 	bl	80072a4 <TIM_ITRx_SetConfig>
      break;
 80070a8:	e019      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	001a      	movs	r2, r3
 80070b8:	f000 f894 	bl	80071e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2140      	movs	r1, #64	; 0x40
 80070c2:	0018      	movs	r0, r3
 80070c4:	f000 f8ee 	bl	80072a4 <TIM_ITRx_SetConfig>
      break;
 80070c8:	e009      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	0019      	movs	r1, r3
 80070d4:	0010      	movs	r0, r2
 80070d6:	f000 f8e5 	bl	80072a4 <TIM_ITRx_SetConfig>
      break;
 80070da:	e000      	b.n	80070de <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80070dc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2239      	movs	r2, #57	; 0x39
 80070e2:	2101      	movs	r1, #1
 80070e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2238      	movs	r2, #56	; 0x38
 80070ea:	2100      	movs	r1, #0
 80070ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	0018      	movs	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b004      	add	sp, #16
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	ffff00ff 	.word	0xffff00ff

080070fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	46bd      	mov	sp, r7
 8007108:	b002      	add	sp, #8
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007114:	46c0      	nop			; (mov r8, r8)
 8007116:	46bd      	mov	sp, r7
 8007118:	b002      	add	sp, #8
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007124:	46c0      	nop			; (mov r8, r8)
 8007126:	46bd      	mov	sp, r7
 8007128:	b002      	add	sp, #8
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b002      	add	sp, #8
 800713a:	bd80      	pop	{r7, pc}

0800713c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	2380      	movs	r3, #128	; 0x80
 8007150:	05db      	lsls	r3, r3, #23
 8007152:	429a      	cmp	r2, r3
 8007154:	d007      	beq.n	8007166 <TIM_Base_SetConfig+0x2a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a1f      	ldr	r2, [pc, #124]	; (80071d8 <TIM_Base_SetConfig+0x9c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_Base_SetConfig+0x2a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1e      	ldr	r2, [pc, #120]	; (80071dc <TIM_Base_SetConfig+0xa0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2270      	movs	r2, #112	; 0x70
 800716a:	4393      	bics	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	05db      	lsls	r3, r3, #23
 800717e:	429a      	cmp	r2, r3
 8007180:	d007      	beq.n	8007192 <TIM_Base_SetConfig+0x56>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a14      	ldr	r2, [pc, #80]	; (80071d8 <TIM_Base_SetConfig+0x9c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_Base_SetConfig+0x56>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a13      	ldr	r2, [pc, #76]	; (80071dc <TIM_Base_SetConfig+0xa0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d108      	bne.n	80071a4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <TIM_Base_SetConfig+0xa4>)
 8007196:	4013      	ands	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2280      	movs	r2, #128	; 0x80
 80071a8:	4393      	bics	r3, r2
 80071aa:	001a      	movs	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	615a      	str	r2, [r3, #20]
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b004      	add	sp, #16
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40010800 	.word	0x40010800
 80071dc:	40011400 	.word	0x40011400
 80071e0:	fffffcff 	.word	0xfffffcff

080071e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	2201      	movs	r2, #1
 80071fc:	4393      	bics	r3, r2
 80071fe:	001a      	movs	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	22f0      	movs	r2, #240	; 0xf0
 800720e:	4393      	bics	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	220a      	movs	r2, #10
 8007220:	4393      	bics	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	621a      	str	r2, [r3, #32]
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b006      	add	sp, #24
 800723e:	bd80      	pop	{r7, pc}

08007240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	2210      	movs	r2, #16
 8007252:	4393      	bics	r3, r2
 8007254:	001a      	movs	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	4a0d      	ldr	r2, [pc, #52]	; (80072a0 <TIM_TI2_ConfigInputStage+0x60>)
 800726a:	4013      	ands	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	22a0      	movs	r2, #160	; 0xa0
 800727c:	4393      	bics	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b006      	add	sp, #24
 800729c:	bd80      	pop	{r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	ffff0fff 	.word	0xffff0fff

080072a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2270      	movs	r2, #112	; 0x70
 80072b8:	4393      	bics	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	2207      	movs	r2, #7
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	609a      	str	r2, [r3, #8]
}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	46bd      	mov	sp, r7
 80072d2:	b004      	add	sp, #16
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4a09      	ldr	r2, [pc, #36]	; (8007314 <TIM_ETR_SetConfig+0x3c>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4313      	orrs	r3, r2
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	609a      	str	r2, [r3, #8]
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b006      	add	sp, #24
 8007312:	bd80      	pop	{r7, pc}
 8007314:	ffff00ff 	.word	0xffff00ff

08007318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2238      	movs	r2, #56	; 0x38
 8007326:	5c9b      	ldrb	r3, [r3, r2]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800732c:	2302      	movs	r3, #2
 800732e:	e032      	b.n	8007396 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2238      	movs	r2, #56	; 0x38
 8007334:	2101      	movs	r1, #1
 8007336:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2239      	movs	r2, #57	; 0x39
 800733c:	2102      	movs	r1, #2
 800733e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2270      	movs	r2, #112	; 0x70
 8007354:	4393      	bics	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2280      	movs	r2, #128	; 0x80
 8007366:	4393      	bics	r3, r2
 8007368:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	4313      	orrs	r3, r2
 8007372:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2239      	movs	r2, #57	; 0x39
 8007388:	2101      	movs	r1, #1
 800738a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2238      	movs	r2, #56	; 0x38
 8007390:	2100      	movs	r1, #0
 8007392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	0018      	movs	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	b004      	add	sp, #16
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e044      	b.n	800743c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d107      	bne.n	80073ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2270      	movs	r2, #112	; 0x70
 80073be:	2100      	movs	r1, #0
 80073c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7fc fe75 	bl	80040b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2224      	movs	r2, #36	; 0x24
 80073ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2101      	movs	r1, #1
 80073dc:	438a      	bics	r2, r1
 80073de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	0018      	movs	r0, r3
 80073e4:	f000 fab6 	bl	8007954 <UART_SetConfig>
 80073e8:	0003      	movs	r3, r0
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e024      	b.n	800743c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 fdc1 	bl	8007f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	490d      	ldr	r1, [pc, #52]	; (8007444 <HAL_UART_Init+0xa4>)
 800740e:	400a      	ands	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	212a      	movs	r1, #42	; 0x2a
 800741e:	438a      	bics	r2, r1
 8007420:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2101      	movs	r1, #1
 800742e:	430a      	orrs	r2, r1
 8007430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f000 fe59 	bl	80080ec <UART_CheckIdleState>
 800743a:	0003      	movs	r3, r0
}
 800743c:	0018      	movs	r0, r3
 800743e:	46bd      	mov	sp, r7
 8007440:	b002      	add	sp, #8
 8007442:	bd80      	pop	{r7, pc}
 8007444:	ffffb7ff 	.word	0xffffb7ff

08007448 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af02      	add	r7, sp, #8
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	1dbb      	adds	r3, r7, #6
 8007456:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745c:	2b20      	cmp	r3, #32
 800745e:	d000      	beq.n	8007462 <HAL_UART_Transmit+0x1a>
 8007460:	e094      	b.n	800758c <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <HAL_UART_Transmit+0x28>
 8007468:	1dbb      	adds	r3, r7, #6
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e08c      	b.n	800758e <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	015b      	lsls	r3, r3, #5
 800747c:	429a      	cmp	r2, r3
 800747e:	d109      	bne.n	8007494 <HAL_UART_Transmit+0x4c>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d105      	bne.n	8007494 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2201      	movs	r2, #1
 800748c:	4013      	ands	r3, r2
 800748e:	d001      	beq.n	8007494 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e07c      	b.n	800758e <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2270      	movs	r2, #112	; 0x70
 8007498:	5c9b      	ldrb	r3, [r3, r2]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Transmit+0x5a>
 800749e:	2302      	movs	r3, #2
 80074a0:	e075      	b.n	800758e <HAL_UART_Transmit+0x146>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2270      	movs	r2, #112	; 0x70
 80074a6:	2101      	movs	r1, #1
 80074a8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2221      	movs	r2, #33	; 0x21
 80074b4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80074b6:	f7fc ffc5 	bl	8004444 <HAL_GetTick>
 80074ba:	0003      	movs	r3, r0
 80074bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	1dba      	adds	r2, r7, #6
 80074c2:	2150      	movs	r1, #80	; 0x50
 80074c4:	8812      	ldrh	r2, [r2, #0]
 80074c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1dba      	adds	r2, r7, #6
 80074cc:	2152      	movs	r1, #82	; 0x52
 80074ce:	8812      	ldrh	r2, [r2, #0]
 80074d0:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	2380      	movs	r3, #128	; 0x80
 80074d8:	015b      	lsls	r3, r3, #5
 80074da:	429a      	cmp	r2, r3
 80074dc:	d108      	bne.n	80074f0 <HAL_UART_Transmit+0xa8>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	e003      	b.n	80074f8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074f8:	e02c      	b.n	8007554 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	0013      	movs	r3, r2
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	f000 fe36 	bl	8008178 <UART_WaitOnFlagUntilTimeout>
 800750c:	1e03      	subs	r3, r0, #0
 800750e:	d001      	beq.n	8007514 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e03c      	b.n	800758e <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	001a      	movs	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	05d2      	lsls	r2, r2, #23
 8007526:	0dd2      	lsrs	r2, r2, #23
 8007528:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	3302      	adds	r3, #2
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e007      	b.n	8007542 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	781a      	ldrb	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3301      	adds	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2252      	movs	r2, #82	; 0x52
 8007546:	5a9b      	ldrh	r3, [r3, r2]
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b299      	uxth	r1, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2252      	movs	r2, #82	; 0x52
 8007552:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2252      	movs	r2, #82	; 0x52
 8007558:	5a9b      	ldrh	r3, [r3, r2]
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1cc      	bne.n	80074fa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	0013      	movs	r3, r2
 800756a:	2200      	movs	r2, #0
 800756c:	2140      	movs	r1, #64	; 0x40
 800756e:	f000 fe03 	bl	8008178 <UART_WaitOnFlagUntilTimeout>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d001      	beq.n	800757a <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e009      	b.n	800758e <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2270      	movs	r2, #112	; 0x70
 8007584:	2100      	movs	r1, #0
 8007586:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	e000      	b.n	800758e <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 800758c:	2302      	movs	r3, #2
  }
}
 800758e:	0018      	movs	r0, r3
 8007590:	46bd      	mov	sp, r7
 8007592:	b008      	add	sp, #32
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	1dbb      	adds	r3, r7, #6
 80075a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d000      	beq.n	80075b0 <HAL_UART_Receive_DMA+0x18>
 80075ae:	e07f      	b.n	80076b0 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_UART_Receive_DMA+0x26>
 80075b6:	1dbb      	adds	r3, r7, #6
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e077      	b.n	80076b2 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	2380      	movs	r3, #128	; 0x80
 80075c8:	015b      	lsls	r3, r3, #5
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d109      	bne.n	80075e2 <HAL_UART_Receive_DMA+0x4a>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2201      	movs	r2, #1
 80075da:	4013      	ands	r3, r2
 80075dc:	d001      	beq.n	80075e2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e067      	b.n	80076b2 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2270      	movs	r2, #112	; 0x70
 80075e6:	5c9b      	ldrb	r3, [r3, r2]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_UART_Receive_DMA+0x58>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e060      	b.n	80076b2 <HAL_UART_Receive_DMA+0x11a>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2270      	movs	r2, #112	; 0x70
 80075f4:	2101      	movs	r1, #1
 80075f6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1dba      	adds	r2, r7, #6
 8007602:	2158      	movs	r1, #88	; 0x58
 8007604:	8812      	ldrh	r2, [r2, #0]
 8007606:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2222      	movs	r2, #34	; 0x22
 8007612:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d02a      	beq.n	8007672 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007620:	4a26      	ldr	r2, [pc, #152]	; (80076bc <HAL_UART_Receive_DMA+0x124>)
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007628:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <HAL_UART_Receive_DMA+0x128>)
 800762a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007630:	4a24      	ldr	r2, [pc, #144]	; (80076c4 <HAL_UART_Receive_DMA+0x12c>)
 8007632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007638:	2200      	movs	r2, #0
 800763a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3324      	adds	r3, #36	; 0x24
 8007646:	0019      	movs	r1, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	001a      	movs	r2, r3
 800764e:	1dbb      	adds	r3, r7, #6
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	f7fd fd1d 	bl	8005090 <HAL_DMA_Start_IT>
 8007656:	1e03      	subs	r3, r0, #0
 8007658:	d00b      	beq.n	8007672 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2210      	movs	r2, #16
 800765e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2270      	movs	r2, #112	; 0x70
 8007664:	2100      	movs	r1, #0
 8007666:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e01f      	b.n	80076b2 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2270      	movs	r2, #112	; 0x70
 8007676:	2100      	movs	r1, #0
 8007678:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2180      	movs	r1, #128	; 0x80
 8007686:	0049      	lsls	r1, r1, #1
 8007688:	430a      	orrs	r2, r1
 800768a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2101      	movs	r1, #1
 8007698:	430a      	orrs	r2, r1
 800769a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2140      	movs	r1, #64	; 0x40
 80076a8:	430a      	orrs	r2, r1
 80076aa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e000      	b.n	80076b2 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	0018      	movs	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b004      	add	sp, #16
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	08008275 	.word	0x08008275
 80076c0:	080082e1 	.word	0x080082e1
 80076c4:	080082ff 	.word	0x080082ff

080076c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	220f      	movs	r2, #15
 80076ec:	4013      	ands	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d112      	bne.n	800771c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	2220      	movs	r2, #32
 80076fa:	4013      	ands	r3, r2
 80076fc:	d00e      	beq.n	800771c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2220      	movs	r2, #32
 8007702:	4013      	ands	r3, r2
 8007704:	d00a      	beq.n	800771c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770a:	2b00      	cmp	r3, #0
 800770c:	d100      	bne.n	8007710 <HAL_UART_IRQHandler+0x48>
 800770e:	e0f6      	b.n	80078fe <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	0010      	movs	r0, r2
 8007718:	4798      	blx	r3
      }
      return;
 800771a:	e0f0      	b.n	80078fe <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d100      	bne.n	8007724 <HAL_UART_IRQHandler+0x5c>
 8007722:	e0b8      	b.n	8007896 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2201      	movs	r2, #1
 8007728:	4013      	ands	r3, r2
 800772a:	d105      	bne.n	8007738 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	2390      	movs	r3, #144	; 0x90
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	4013      	ands	r3, r2
 8007734:	d100      	bne.n	8007738 <HAL_UART_IRQHandler+0x70>
 8007736:	e0ae      	b.n	8007896 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2201      	movs	r2, #1
 800773c:	4013      	ands	r3, r2
 800773e:	d00e      	beq.n	800775e <HAL_UART_IRQHandler+0x96>
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	2380      	movs	r3, #128	; 0x80
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	4013      	ands	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2201      	movs	r2, #1
 8007750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007756:	2201      	movs	r2, #1
 8007758:	431a      	orrs	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	2202      	movs	r2, #2
 8007762:	4013      	ands	r3, r2
 8007764:	d00d      	beq.n	8007782 <HAL_UART_IRQHandler+0xba>
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2201      	movs	r2, #1
 800776a:	4013      	ands	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2202      	movs	r2, #2
 8007774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800777a:	2204      	movs	r2, #4
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	2204      	movs	r2, #4
 8007786:	4013      	ands	r3, r2
 8007788:	d00d      	beq.n	80077a6 <HAL_UART_IRQHandler+0xde>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2201      	movs	r2, #1
 800778e:	4013      	ands	r3, r2
 8007790:	d009      	beq.n	80077a6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2204      	movs	r2, #4
 8007798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800779e:	2202      	movs	r2, #2
 80077a0:	431a      	orrs	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	2208      	movs	r2, #8
 80077aa:	4013      	ands	r3, r2
 80077ac:	d011      	beq.n	80077d2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2220      	movs	r2, #32
 80077b2:	4013      	ands	r3, r2
 80077b4:	d103      	bne.n	80077be <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2201      	movs	r2, #1
 80077ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077bc:	d009      	beq.n	80077d2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2208      	movs	r2, #8
 80077c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ca:	2208      	movs	r2, #8
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d100      	bne.n	80077dc <HAL_UART_IRQHandler+0x114>
 80077da:	e092      	b.n	8007902 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	2220      	movs	r2, #32
 80077e0:	4013      	ands	r3, r2
 80077e2:	d00c      	beq.n	80077fe <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2220      	movs	r2, #32
 80077e8:	4013      	ands	r3, r2
 80077ea:	d008      	beq.n	80077fe <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	0010      	movs	r0, r2
 80077fc:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007802:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2240      	movs	r2, #64	; 0x40
 800780c:	4013      	ands	r3, r2
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d003      	beq.n	800781a <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2208      	movs	r2, #8
 8007816:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007818:	d033      	beq.n	8007882 <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	0018      	movs	r0, r3
 800781e:	f000 fd09 	bl	8008234 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2240      	movs	r2, #64	; 0x40
 800782a:	4013      	ands	r3, r2
 800782c:	2b40      	cmp	r3, #64	; 0x40
 800782e:	d123      	bne.n	8007878 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2140      	movs	r1, #64	; 0x40
 800783c:	438a      	bics	r2, r1
 800783e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d012      	beq.n	800786e <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784c:	4a30      	ldr	r2, [pc, #192]	; (8007910 <HAL_UART_IRQHandler+0x248>)
 800784e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007854:	0018      	movs	r0, r3
 8007856:	f7fd fc81 	bl	800515c <HAL_DMA_Abort_IT>
 800785a:	1e03      	subs	r3, r0, #0
 800785c:	d019      	beq.n	8007892 <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007868:	0018      	movs	r0, r3
 800786a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786c:	e011      	b.n	8007892 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	0018      	movs	r0, r3
 8007872:	f000 f867 	bl	8007944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007876:	e00c      	b.n	8007892 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	0018      	movs	r0, r3
 800787c:	f000 f862 	bl	8007944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007880:	e007      	b.n	8007892 <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	0018      	movs	r0, r3
 8007886:	f000 f85d 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007890:	e037      	b.n	8007902 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007892:	46c0      	nop			; (mov r8, r8)
    return;
 8007894:	e035      	b.n	8007902 <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	035b      	lsls	r3, r3, #13
 800789c:	4013      	ands	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_UART_IRQHandler+0x1f6>
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	03db      	lsls	r3, r3, #15
 80078a6:	4013      	ands	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2280      	movs	r2, #128	; 0x80
 80078b0:	0352      	lsls	r2, r2, #13
 80078b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	0018      	movs	r0, r3
 80078b8:	f000 fd91 	bl	80083de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078bc:	e024      	b.n	8007908 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	4013      	ands	r3, r2
 80078c4:	d00d      	beq.n	80078e2 <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2280      	movs	r2, #128	; 0x80
 80078ca:	4013      	ands	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d017      	beq.n	8007906 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	0010      	movs	r0, r2
 80078de:	4798      	blx	r3
    }
    return;
 80078e0:	e011      	b.n	8007906 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	2240      	movs	r2, #64	; 0x40
 80078e6:	4013      	ands	r3, r2
 80078e8:	d00e      	beq.n	8007908 <HAL_UART_IRQHandler+0x240>
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2240      	movs	r2, #64	; 0x40
 80078ee:	4013      	ands	r3, r2
 80078f0:	d00a      	beq.n	8007908 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	0018      	movs	r0, r3
 80078f6:	f000 fd58 	bl	80083aa <UART_EndTransmit_IT>
    return;
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	e004      	b.n	8007908 <HAL_UART_IRQHandler+0x240>
      return;
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	e002      	b.n	8007908 <HAL_UART_IRQHandler+0x240>
    return;
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	e000      	b.n	8007908 <HAL_UART_IRQHandler+0x240>
    return;
 8007906:	46c0      	nop			; (mov r8, r8)
  }

}
 8007908:	46bd      	mov	sp, r7
 800790a:	b008      	add	sp, #32
 800790c:	bd80      	pop	{r7, pc}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	0800837d 	.word	0x0800837d

08007914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	46bd      	mov	sp, r7
 8007920:	b002      	add	sp, #8
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800792c:	46c0      	nop			; (mov r8, r8)
 800792e:	46bd      	mov	sp, r7
 8007930:	b002      	add	sp, #8
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800793c:	46c0      	nop			; (mov r8, r8)
 800793e:	46bd      	mov	sp, r7
 8007940:	b002      	add	sp, #8
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}

08007954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007954:	b5b0      	push	{r4, r5, r7, lr}
 8007956:	b08e      	sub	sp, #56	; 0x38
 8007958:	af00      	add	r7, sp, #0
 800795a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800795c:	231b      	movs	r3, #27
 800795e:	2218      	movs	r2, #24
 8007960:	4694      	mov	ip, r2
 8007962:	44bc      	add	ip, r7
 8007964:	4463      	add	r3, ip
 8007966:	2210      	movs	r2, #16
 8007968:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800796a:	2300      	movs	r3, #0
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800796e:	2313      	movs	r3, #19
 8007970:	2218      	movs	r2, #24
 8007972:	4694      	mov	ip, r2
 8007974:	44bc      	add	ip, r7
 8007976:	4463      	add	r3, ip
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800797c:	2300      	movs	r3, #0
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	431a      	orrs	r2, r3
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	431a      	orrs	r2, r3
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4313      	orrs	r3, r2
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4ac8      	ldr	r2, [pc, #800]	; (8007cc0 <UART_SetConfig+0x36c>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	0019      	movs	r1, r3
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079aa:	430a      	orrs	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4ac3      	ldr	r2, [pc, #780]	; (8007cc4 <UART_SetConfig+0x370>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	0019      	movs	r1, r3
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4abd      	ldr	r2, [pc, #756]	; (8007cc8 <UART_SetConfig+0x374>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d004      	beq.n	80079e0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079dc:	4313      	orrs	r3, r2
 80079de:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	4ab9      	ldr	r2, [pc, #740]	; (8007ccc <UART_SetConfig+0x378>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	0019      	movs	r1, r3
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079f2:	430a      	orrs	r2, r1
 80079f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4ab5      	ldr	r2, [pc, #724]	; (8007cd0 <UART_SetConfig+0x37c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d134      	bne.n	8007a6a <UART_SetConfig+0x116>
 8007a00:	4bb4      	ldr	r3, [pc, #720]	; (8007cd4 <UART_SetConfig+0x380>)
 8007a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a04:	2203      	movs	r2, #3
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d015      	beq.n	8007a38 <UART_SetConfig+0xe4>
 8007a0c:	d304      	bcc.n	8007a18 <UART_SetConfig+0xc4>
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d00a      	beq.n	8007a28 <UART_SetConfig+0xd4>
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d018      	beq.n	8007a48 <UART_SetConfig+0xf4>
 8007a16:	e01f      	b.n	8007a58 <UART_SetConfig+0x104>
 8007a18:	231b      	movs	r3, #27
 8007a1a:	2218      	movs	r2, #24
 8007a1c:	4694      	mov	ip, r2
 8007a1e:	44bc      	add	ip, r7
 8007a20:	4463      	add	r3, ip
 8007a22:	2201      	movs	r2, #1
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e0ab      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007a28:	231b      	movs	r3, #27
 8007a2a:	2218      	movs	r2, #24
 8007a2c:	4694      	mov	ip, r2
 8007a2e:	44bc      	add	ip, r7
 8007a30:	4463      	add	r3, ip
 8007a32:	2202      	movs	r2, #2
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e0a3      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007a38:	231b      	movs	r3, #27
 8007a3a:	2218      	movs	r2, #24
 8007a3c:	4694      	mov	ip, r2
 8007a3e:	44bc      	add	ip, r7
 8007a40:	4463      	add	r3, ip
 8007a42:	2204      	movs	r2, #4
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e09b      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007a48:	231b      	movs	r3, #27
 8007a4a:	2218      	movs	r2, #24
 8007a4c:	4694      	mov	ip, r2
 8007a4e:	44bc      	add	ip, r7
 8007a50:	4463      	add	r3, ip
 8007a52:	2208      	movs	r2, #8
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	e093      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007a58:	231b      	movs	r3, #27
 8007a5a:	2218      	movs	r2, #24
 8007a5c:	4694      	mov	ip, r2
 8007a5e:	44bc      	add	ip, r7
 8007a60:	4463      	add	r3, ip
 8007a62:	2210      	movs	r2, #16
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	e08a      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a9a      	ldr	r2, [pc, #616]	; (8007cd8 <UART_SetConfig+0x384>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d137      	bne.n	8007ae4 <UART_SetConfig+0x190>
 8007a74:	4b97      	ldr	r3, [pc, #604]	; (8007cd4 <UART_SetConfig+0x380>)
 8007a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a78:	220c      	movs	r2, #12
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d018      	beq.n	8007ab2 <UART_SetConfig+0x15e>
 8007a80:	d802      	bhi.n	8007a88 <UART_SetConfig+0x134>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <UART_SetConfig+0x13e>
 8007a86:	e024      	b.n	8007ad2 <UART_SetConfig+0x17e>
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d00a      	beq.n	8007aa2 <UART_SetConfig+0x14e>
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	d018      	beq.n	8007ac2 <UART_SetConfig+0x16e>
 8007a90:	e01f      	b.n	8007ad2 <UART_SetConfig+0x17e>
 8007a92:	231b      	movs	r3, #27
 8007a94:	2218      	movs	r2, #24
 8007a96:	4694      	mov	ip, r2
 8007a98:	44bc      	add	ip, r7
 8007a9a:	4463      	add	r3, ip
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	e06e      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007aa2:	231b      	movs	r3, #27
 8007aa4:	2218      	movs	r2, #24
 8007aa6:	4694      	mov	ip, r2
 8007aa8:	44bc      	add	ip, r7
 8007aaa:	4463      	add	r3, ip
 8007aac:	2202      	movs	r2, #2
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	e066      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007ab2:	231b      	movs	r3, #27
 8007ab4:	2218      	movs	r2, #24
 8007ab6:	4694      	mov	ip, r2
 8007ab8:	44bc      	add	ip, r7
 8007aba:	4463      	add	r3, ip
 8007abc:	2204      	movs	r2, #4
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e05e      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007ac2:	231b      	movs	r3, #27
 8007ac4:	2218      	movs	r2, #24
 8007ac6:	4694      	mov	ip, r2
 8007ac8:	44bc      	add	ip, r7
 8007aca:	4463      	add	r3, ip
 8007acc:	2208      	movs	r2, #8
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e056      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007ad2:	231b      	movs	r3, #27
 8007ad4:	2218      	movs	r2, #24
 8007ad6:	4694      	mov	ip, r2
 8007ad8:	44bc      	add	ip, r7
 8007ada:	4463      	add	r3, ip
 8007adc:	2210      	movs	r2, #16
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	46c0      	nop			; (mov r8, r8)
 8007ae2:	e04d      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a77      	ldr	r2, [pc, #476]	; (8007cc8 <UART_SetConfig+0x374>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d141      	bne.n	8007b72 <UART_SetConfig+0x21e>
 8007aee:	4b79      	ldr	r3, [pc, #484]	; (8007cd4 <UART_SetConfig+0x380>)
 8007af0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007af2:	23c0      	movs	r3, #192	; 0xc0
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	4013      	ands	r3, r2
 8007af8:	2280      	movs	r2, #128	; 0x80
 8007afa:	00d2      	lsls	r2, r2, #3
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d01f      	beq.n	8007b40 <UART_SetConfig+0x1ec>
 8007b00:	2280      	movs	r2, #128	; 0x80
 8007b02:	00d2      	lsls	r2, r2, #3
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d802      	bhi.n	8007b0e <UART_SetConfig+0x1ba>
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <UART_SetConfig+0x1cc>
 8007b0c:	e028      	b.n	8007b60 <UART_SetConfig+0x20c>
 8007b0e:	2280      	movs	r2, #128	; 0x80
 8007b10:	0112      	lsls	r2, r2, #4
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00c      	beq.n	8007b30 <UART_SetConfig+0x1dc>
 8007b16:	22c0      	movs	r2, #192	; 0xc0
 8007b18:	0112      	lsls	r2, r2, #4
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <UART_SetConfig+0x1fc>
 8007b1e:	e01f      	b.n	8007b60 <UART_SetConfig+0x20c>
 8007b20:	231b      	movs	r3, #27
 8007b22:	2218      	movs	r2, #24
 8007b24:	4694      	mov	ip, r2
 8007b26:	44bc      	add	ip, r7
 8007b28:	4463      	add	r3, ip
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	e027      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007b30:	231b      	movs	r3, #27
 8007b32:	2218      	movs	r2, #24
 8007b34:	4694      	mov	ip, r2
 8007b36:	44bc      	add	ip, r7
 8007b38:	4463      	add	r3, ip
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	e01f      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007b40:	231b      	movs	r3, #27
 8007b42:	2218      	movs	r2, #24
 8007b44:	4694      	mov	ip, r2
 8007b46:	44bc      	add	ip, r7
 8007b48:	4463      	add	r3, ip
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e017      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007b50:	231b      	movs	r3, #27
 8007b52:	2218      	movs	r2, #24
 8007b54:	4694      	mov	ip, r2
 8007b56:	44bc      	add	ip, r7
 8007b58:	4463      	add	r3, ip
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e00f      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007b60:	231b      	movs	r3, #27
 8007b62:	2218      	movs	r2, #24
 8007b64:	4694      	mov	ip, r2
 8007b66:	44bc      	add	ip, r7
 8007b68:	4463      	add	r3, ip
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	e006      	b.n	8007b80 <UART_SetConfig+0x22c>
 8007b72:	231b      	movs	r3, #27
 8007b74:	2218      	movs	r2, #24
 8007b76:	4694      	mov	ip, r2
 8007b78:	44bc      	add	ip, r7
 8007b7a:	4463      	add	r3, ip
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a50      	ldr	r2, [pc, #320]	; (8007cc8 <UART_SetConfig+0x374>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d000      	beq.n	8007b8c <UART_SetConfig+0x238>
 8007b8a:	e083      	b.n	8007c94 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b8c:	231b      	movs	r3, #27
 8007b8e:	2218      	movs	r2, #24
 8007b90:	4694      	mov	ip, r2
 8007b92:	44bc      	add	ip, r7
 8007b94:	4463      	add	r3, ip
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d00d      	beq.n	8007bb8 <UART_SetConfig+0x264>
 8007b9c:	dc02      	bgt.n	8007ba4 <UART_SetConfig+0x250>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <UART_SetConfig+0x25a>
 8007ba2:	e01d      	b.n	8007be0 <UART_SetConfig+0x28c>
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d012      	beq.n	8007bce <UART_SetConfig+0x27a>
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d015      	beq.n	8007bd8 <UART_SetConfig+0x284>
 8007bac:	e018      	b.n	8007be0 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007bae:	f7fe ff3d 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007bb2:	0003      	movs	r3, r0
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bb6:	e01b      	b.n	8007bf0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb8:	4b46      	ldr	r3, [pc, #280]	; (8007cd4 <UART_SetConfig+0x380>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2210      	movs	r2, #16
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	d002      	beq.n	8007bc8 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8007bc2:	4b46      	ldr	r3, [pc, #280]	; (8007cdc <UART_SetConfig+0x388>)
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8007bc6:	e013      	b.n	8007bf0 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007bc8:	4b45      	ldr	r3, [pc, #276]	; (8007ce0 <UART_SetConfig+0x38c>)
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bcc:	e010      	b.n	8007bf0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007bce:	f7fe fe9f 	bl	8006910 <HAL_RCC_GetSysClockFreq>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bd6:	e00b      	b.n	8007bf0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007bd8:	2380      	movs	r3, #128	; 0x80
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bde:	e007      	b.n	8007bf0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007be0:	2313      	movs	r3, #19
 8007be2:	2218      	movs	r2, #24
 8007be4:	4694      	mov	ip, r2
 8007be6:	44bc      	add	ip, r7
 8007be8:	4463      	add	r3, ip
 8007bea:	2201      	movs	r2, #1
 8007bec:	701a      	strb	r2, [r3, #0]
        break;
 8007bee:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d100      	bne.n	8007bf8 <UART_SetConfig+0x2a4>
 8007bf6:	e1a6      	b.n	8007f46 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	0013      	movs	r3, r2
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	189b      	adds	r3, r3, r2
 8007c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d305      	bcc.n	8007c14 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d907      	bls.n	8007c24 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8007c14:	2313      	movs	r3, #19
 8007c16:	2218      	movs	r2, #24
 8007c18:	4694      	mov	ip, r2
 8007c1a:	44bc      	add	ip, r7
 8007c1c:	4463      	add	r3, ip
 8007c1e:	2201      	movs	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e190      	b.n	8007f46 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	6939      	ldr	r1, [r7, #16]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	000b      	movs	r3, r1
 8007c32:	0e1b      	lsrs	r3, r3, #24
 8007c34:	0010      	movs	r0, r2
 8007c36:	0205      	lsls	r5, r0, #8
 8007c38:	431d      	orrs	r5, r3
 8007c3a:	000b      	movs	r3, r1
 8007c3c:	021c      	lsls	r4, r3, #8
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	60bb      	str	r3, [r7, #8]
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	68b8      	ldr	r0, [r7, #8]
 8007c4c:	68f9      	ldr	r1, [r7, #12]
 8007c4e:	1900      	adds	r0, r0, r4
 8007c50:	4169      	adcs	r1, r5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	2300      	movs	r3, #0
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f7f8 fc18 	bl	8000494 <__aeabi_uldivmod>
 8007c64:	0003      	movs	r3, r0
 8007c66:	000c      	movs	r4, r1
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ce4 <UART_SetConfig+0x390>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d908      	bls.n	8007c84 <UART_SetConfig+0x330>
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	4a1c      	ldr	r2, [pc, #112]	; (8007ce8 <UART_SetConfig+0x394>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d804      	bhi.n	8007c84 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	e160      	b.n	8007f46 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8007c84:	2313      	movs	r3, #19
 8007c86:	2218      	movs	r2, #24
 8007c88:	4694      	mov	ip, r2
 8007c8a:	44bc      	add	ip, r7
 8007c8c:	4463      	add	r3, ip
 8007c8e:	2201      	movs	r2, #1
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e158      	b.n	8007f46 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d000      	beq.n	8007ca2 <UART_SetConfig+0x34e>
 8007ca0:	e0c3      	b.n	8007e2a <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8007ca2:	231b      	movs	r3, #27
 8007ca4:	2218      	movs	r2, #24
 8007ca6:	4694      	mov	ip, r2
 8007ca8:	44bc      	add	ip, r7
 8007caa:	4463      	add	r3, ip
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d900      	bls.n	8007cb4 <UART_SetConfig+0x360>
 8007cb2:	e086      	b.n	8007dc2 <UART_SetConfig+0x46e>
 8007cb4:	009a      	lsls	r2, r3, #2
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <UART_SetConfig+0x398>)
 8007cb8:	18d3      	adds	r3, r2, r3
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	469f      	mov	pc, r3
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	efff69f3 	.word	0xefff69f3
 8007cc4:	ffffcfff 	.word	0xffffcfff
 8007cc8:	40004800 	.word	0x40004800
 8007ccc:	fffff4ff 	.word	0xfffff4ff
 8007cd0:	40013800 	.word	0x40013800
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	40004400 	.word	0x40004400
 8007cdc:	003d0900 	.word	0x003d0900
 8007ce0:	00f42400 	.word	0x00f42400
 8007ce4:	000002ff 	.word	0x000002ff
 8007ce8:	000fffff 	.word	0x000fffff
 8007cec:	0800c1a4 	.word	0x0800c1a4
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007cf0:	f7fe fe9c 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	005a      	lsls	r2, r3, #1
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	18d2      	adds	r2, r2, r3
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	0019      	movs	r1, r3
 8007d06:	0010      	movs	r0, r2
 8007d08:	f7f8 fa10 	bl	800012c <__udivsi3>
 8007d0c:	0003      	movs	r3, r0
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d12:	e05e      	b.n	8007dd2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007d14:	f7fe fea0 	bl	8006a58 <HAL_RCC_GetPCLK2Freq>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	005a      	lsls	r2, r3, #1
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	085b      	lsrs	r3, r3, #1
 8007d22:	18d2      	adds	r2, r2, r3
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	0019      	movs	r1, r3
 8007d2a:	0010      	movs	r0, r2
 8007d2c:	f7f8 f9fe 	bl	800012c <__udivsi3>
 8007d30:	0003      	movs	r3, r0
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d36:	e04c      	b.n	8007dd2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d38:	4b8b      	ldr	r3, [pc, #556]	; (8007f68 <UART_SetConfig+0x614>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	4013      	ands	r3, r2
 8007d40:	d00e      	beq.n	8007d60 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	4a88      	ldr	r2, [pc, #544]	; (8007f6c <UART_SetConfig+0x618>)
 8007d4a:	189a      	adds	r2, r3, r2
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	0019      	movs	r1, r3
 8007d52:	0010      	movs	r0, r2
 8007d54:	f7f8 f9ea 	bl	800012c <__udivsi3>
 8007d58:	0003      	movs	r3, r0
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8007d5e:	e038      	b.n	8007dd2 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	085b      	lsrs	r3, r3, #1
 8007d66:	4a82      	ldr	r2, [pc, #520]	; (8007f70 <UART_SetConfig+0x61c>)
 8007d68:	189a      	adds	r2, r3, r2
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	0019      	movs	r1, r3
 8007d70:	0010      	movs	r0, r2
 8007d72:	f7f8 f9db 	bl	800012c <__udivsi3>
 8007d76:	0003      	movs	r3, r0
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d7c:	e029      	b.n	8007dd2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007d7e:	f7fe fdc7 	bl	8006910 <HAL_RCC_GetSysClockFreq>
 8007d82:	0003      	movs	r3, r0
 8007d84:	005a      	lsls	r2, r3, #1
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	085b      	lsrs	r3, r3, #1
 8007d8c:	18d2      	adds	r2, r2, r3
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	0019      	movs	r1, r3
 8007d94:	0010      	movs	r0, r2
 8007d96:	f7f8 f9c9 	bl	800012c <__udivsi3>
 8007d9a:	0003      	movs	r3, r0
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007da0:	e017      	b.n	8007dd2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	2280      	movs	r2, #128	; 0x80
 8007daa:	0252      	lsls	r2, r2, #9
 8007dac:	189a      	adds	r2, r3, r2
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	0019      	movs	r1, r3
 8007db4:	0010      	movs	r0, r2
 8007db6:	f7f8 f9b9 	bl	800012c <__udivsi3>
 8007dba:	0003      	movs	r3, r0
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dc0:	e007      	b.n	8007dd2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007dc2:	2313      	movs	r3, #19
 8007dc4:	2218      	movs	r2, #24
 8007dc6:	4694      	mov	ip, r2
 8007dc8:	44bc      	add	ip, r7
 8007dca:	4463      	add	r3, ip
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
        break;
 8007dd0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	2b0f      	cmp	r3, #15
 8007dd6:	d920      	bls.n	8007e1a <UART_SetConfig+0x4c6>
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dda:	4a66      	ldr	r2, [pc, #408]	; (8007f74 <UART_SetConfig+0x620>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d81c      	bhi.n	8007e1a <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	200a      	movs	r0, #10
 8007de6:	2418      	movs	r4, #24
 8007de8:	193b      	adds	r3, r7, r4
 8007dea:	181b      	adds	r3, r3, r0
 8007dec:	210f      	movs	r1, #15
 8007dee:	438a      	bics	r2, r1
 8007df0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2207      	movs	r2, #7
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	b299      	uxth	r1, r3
 8007dfe:	193b      	adds	r3, r7, r4
 8007e00:	181b      	adds	r3, r3, r0
 8007e02:	193a      	adds	r2, r7, r4
 8007e04:	1812      	adds	r2, r2, r0
 8007e06:	8812      	ldrh	r2, [r2, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	193a      	adds	r2, r7, r4
 8007e12:	1812      	adds	r2, r2, r0
 8007e14:	8812      	ldrh	r2, [r2, #0]
 8007e16:	60da      	str	r2, [r3, #12]
 8007e18:	e095      	b.n	8007f46 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8007e1a:	2313      	movs	r3, #19
 8007e1c:	2218      	movs	r2, #24
 8007e1e:	4694      	mov	ip, r2
 8007e20:	44bc      	add	ip, r7
 8007e22:	4463      	add	r3, ip
 8007e24:	2201      	movs	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e08d      	b.n	8007f46 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8007e2a:	231b      	movs	r3, #27
 8007e2c:	2218      	movs	r2, #24
 8007e2e:	4694      	mov	ip, r2
 8007e30:	44bc      	add	ip, r7
 8007e32:	4463      	add	r3, ip
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d86a      	bhi.n	8007f10 <UART_SetConfig+0x5bc>
 8007e3a:	009a      	lsls	r2, r3, #2
 8007e3c:	4b4e      	ldr	r3, [pc, #312]	; (8007f78 <UART_SetConfig+0x624>)
 8007e3e:	18d3      	adds	r3, r2, r3
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007e44:	f7fe fdf2 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8007e48:	0002      	movs	r2, r0
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	18d2      	adds	r2, r2, r3
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	0019      	movs	r1, r3
 8007e58:	0010      	movs	r0, r2
 8007e5a:	f7f8 f967 	bl	800012c <__udivsi3>
 8007e5e:	0003      	movs	r3, r0
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e64:	e05c      	b.n	8007f20 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007e66:	f7fe fdf7 	bl	8006a58 <HAL_RCC_GetPCLK2Freq>
 8007e6a:	0002      	movs	r2, r0
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	18d2      	adds	r2, r2, r3
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	0019      	movs	r1, r3
 8007e7a:	0010      	movs	r0, r2
 8007e7c:	f7f8 f956 	bl	800012c <__udivsi3>
 8007e80:	0003      	movs	r3, r0
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e86:	e04b      	b.n	8007f20 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e88:	4b37      	ldr	r3, [pc, #220]	; (8007f68 <UART_SetConfig+0x614>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2210      	movs	r2, #16
 8007e8e:	4013      	ands	r3, r2
 8007e90:	d00e      	beq.n	8007eb0 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	4a38      	ldr	r2, [pc, #224]	; (8007f7c <UART_SetConfig+0x628>)
 8007e9a:	189a      	adds	r2, r3, r2
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	0019      	movs	r1, r3
 8007ea2:	0010      	movs	r0, r2
 8007ea4:	f7f8 f942 	bl	800012c <__udivsi3>
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8007eae:	e037      	b.n	8007f20 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	085b      	lsrs	r3, r3, #1
 8007eb6:	4a32      	ldr	r2, [pc, #200]	; (8007f80 <UART_SetConfig+0x62c>)
 8007eb8:	189a      	adds	r2, r3, r2
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	0019      	movs	r1, r3
 8007ec0:	0010      	movs	r0, r2
 8007ec2:	f7f8 f933 	bl	800012c <__udivsi3>
 8007ec6:	0003      	movs	r3, r0
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ecc:	e028      	b.n	8007f20 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007ece:	f7fe fd1f 	bl	8006910 <HAL_RCC_GetSysClockFreq>
 8007ed2:	0002      	movs	r2, r0
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	085b      	lsrs	r3, r3, #1
 8007eda:	18d2      	adds	r2, r2, r3
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	0019      	movs	r1, r3
 8007ee2:	0010      	movs	r0, r2
 8007ee4:	f7f8 f922 	bl	800012c <__udivsi3>
 8007ee8:	0003      	movs	r3, r0
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eee:	e017      	b.n	8007f20 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	085b      	lsrs	r3, r3, #1
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	0212      	lsls	r2, r2, #8
 8007efa:	189a      	adds	r2, r3, r2
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	0019      	movs	r1, r3
 8007f02:	0010      	movs	r0, r2
 8007f04:	f7f8 f912 	bl	800012c <__udivsi3>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f0e:	e007      	b.n	8007f20 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007f10:	2313      	movs	r3, #19
 8007f12:	2218      	movs	r2, #24
 8007f14:	4694      	mov	ip, r2
 8007f16:	44bc      	add	ip, r7
 8007f18:	4463      	add	r3, ip
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
        break;
 8007f1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	2b0f      	cmp	r3, #15
 8007f24:	d908      	bls.n	8007f38 <UART_SetConfig+0x5e4>
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <UART_SetConfig+0x620>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d804      	bhi.n	8007f38 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f34:	60da      	str	r2, [r3, #12]
 8007f36:	e006      	b.n	8007f46 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8007f38:	2313      	movs	r3, #19
 8007f3a:	2218      	movs	r2, #24
 8007f3c:	4694      	mov	ip, r2
 8007f3e:	44bc      	add	ip, r7
 8007f40:	4463      	add	r3, ip
 8007f42:	2201      	movs	r2, #1
 8007f44:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007f52:	2313      	movs	r3, #19
 8007f54:	2218      	movs	r2, #24
 8007f56:	4694      	mov	ip, r2
 8007f58:	44bc      	add	ip, r7
 8007f5a:	4463      	add	r3, ip
 8007f5c:	781b      	ldrb	r3, [r3, #0]
}
 8007f5e:	0018      	movs	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b00e      	add	sp, #56	; 0x38
 8007f64:	bdb0      	pop	{r4, r5, r7, pc}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	007a1200 	.word	0x007a1200
 8007f70:	01e84800 	.word	0x01e84800
 8007f74:	0000ffff 	.word	0x0000ffff
 8007f78:	0800c1c8 	.word	0x0800c1c8
 8007f7c:	003d0900 	.word	0x003d0900
 8007f80:	00f42400 	.word	0x00f42400

08007f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	2201      	movs	r2, #1
 8007f92:	4013      	ands	r3, r2
 8007f94:	d00b      	beq.n	8007fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4a4a      	ldr	r2, [pc, #296]	; (80080c8 <UART_AdvFeatureConfig+0x144>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	0019      	movs	r1, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	d00b      	beq.n	8007fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	4a43      	ldr	r2, [pc, #268]	; (80080cc <UART_AdvFeatureConfig+0x148>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	0019      	movs	r1, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	d00b      	beq.n	8007ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	4a3b      	ldr	r2, [pc, #236]	; (80080d0 <UART_AdvFeatureConfig+0x14c>)
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	0019      	movs	r1, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d00b      	beq.n	8008014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	4a34      	ldr	r2, [pc, #208]	; (80080d4 <UART_AdvFeatureConfig+0x150>)
 8008004:	4013      	ands	r3, r2
 8008006:	0019      	movs	r1, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2210      	movs	r2, #16
 800801a:	4013      	ands	r3, r2
 800801c:	d00b      	beq.n	8008036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	4a2c      	ldr	r2, [pc, #176]	; (80080d8 <UART_AdvFeatureConfig+0x154>)
 8008026:	4013      	ands	r3, r2
 8008028:	0019      	movs	r1, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	2220      	movs	r2, #32
 800803c:	4013      	ands	r3, r2
 800803e:	d00b      	beq.n	8008058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	4a25      	ldr	r2, [pc, #148]	; (80080dc <UART_AdvFeatureConfig+0x158>)
 8008048:	4013      	ands	r3, r2
 800804a:	0019      	movs	r1, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2240      	movs	r2, #64	; 0x40
 800805e:	4013      	ands	r3, r2
 8008060:	d01d      	beq.n	800809e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <UART_AdvFeatureConfig+0x15c>)
 800806a:	4013      	ands	r3, r2
 800806c:	0019      	movs	r1, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800807e:	2380      	movs	r3, #128	; 0x80
 8008080:	035b      	lsls	r3, r3, #13
 8008082:	429a      	cmp	r2, r3
 8008084:	d10b      	bne.n	800809e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <UART_AdvFeatureConfig+0x160>)
 800808e:	4013      	ands	r3, r2
 8008090:	0019      	movs	r1, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2280      	movs	r2, #128	; 0x80
 80080a4:	4013      	ands	r3, r2
 80080a6:	d00b      	beq.n	80080c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	4a0e      	ldr	r2, [pc, #56]	; (80080e8 <UART_AdvFeatureConfig+0x164>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	0019      	movs	r1, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	605a      	str	r2, [r3, #4]
  }
}
 80080c0:	46c0      	nop			; (mov r8, r8)
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b002      	add	sp, #8
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	fffdffff 	.word	0xfffdffff
 80080cc:	fffeffff 	.word	0xfffeffff
 80080d0:	fffbffff 	.word	0xfffbffff
 80080d4:	ffff7fff 	.word	0xffff7fff
 80080d8:	ffffefff 	.word	0xffffefff
 80080dc:	ffffdfff 	.word	0xffffdfff
 80080e0:	ffefffff 	.word	0xffefffff
 80080e4:	ff9fffff 	.word	0xff9fffff
 80080e8:	fff7ffff 	.word	0xfff7ffff

080080ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80080fa:	f7fc f9a3 	bl	8004444 <HAL_GetTick>
 80080fe:	0003      	movs	r3, r0
 8008100:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2208      	movs	r2, #8
 800810a:	4013      	ands	r3, r2
 800810c:	2b08      	cmp	r3, #8
 800810e:	d10d      	bne.n	800812c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	2380      	movs	r3, #128	; 0x80
 8008114:	0399      	lsls	r1, r3, #14
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	4b16      	ldr	r3, [pc, #88]	; (8008174 <UART_CheckIdleState+0x88>)
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	0013      	movs	r3, r2
 800811e:	2200      	movs	r2, #0
 8008120:	f000 f82a 	bl	8008178 <UART_WaitOnFlagUntilTimeout>
 8008124:	1e03      	subs	r3, r0, #0
 8008126:	d001      	beq.n	800812c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e01f      	b.n	800816c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2204      	movs	r2, #4
 8008134:	4013      	ands	r3, r2
 8008136:	2b04      	cmp	r3, #4
 8008138:	d10d      	bne.n	8008156 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	2380      	movs	r3, #128	; 0x80
 800813e:	03d9      	lsls	r1, r3, #15
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <UART_CheckIdleState+0x88>)
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	0013      	movs	r3, r2
 8008148:	2200      	movs	r2, #0
 800814a:	f000 f815 	bl	8008178 <UART_WaitOnFlagUntilTimeout>
 800814e:	1e03      	subs	r3, r0, #0
 8008150:	d001      	beq.n	8008156 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e00a      	b.n	800816c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2220      	movs	r2, #32
 800815a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2270      	movs	r2, #112	; 0x70
 8008166:	2100      	movs	r1, #0
 8008168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b004      	add	sp, #16
 8008172:	bd80      	pop	{r7, pc}
 8008174:	01ffffff 	.word	0x01ffffff

08008178 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	1dfb      	adds	r3, r7, #7
 8008186:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008188:	e029      	b.n	80081de <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	3301      	adds	r3, #1
 800818e:	d026      	beq.n	80081de <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008190:	f7fc f958 	bl	8004444 <HAL_GetTick>
 8008194:	0002      	movs	r2, r0
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	429a      	cmp	r2, r3
 800819e:	d302      	bcc.n	80081a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d11b      	bne.n	80081de <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4915      	ldr	r1, [pc, #84]	; (8008208 <UART_WaitOnFlagUntilTimeout+0x90>)
 80081b2:	400a      	ands	r2, r1
 80081b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2101      	movs	r1, #1
 80081c2:	438a      	bics	r2, r1
 80081c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2220      	movs	r2, #32
 80081ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2220      	movs	r2, #32
 80081d0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2270      	movs	r2, #112	; 0x70
 80081d6:	2100      	movs	r1, #0
 80081d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e00f      	b.n	80081fe <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	4013      	ands	r3, r2
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	425a      	negs	r2, r3
 80081ee:	4153      	adcs	r3, r2
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	001a      	movs	r2, r3
 80081f4:	1dfb      	adds	r3, r7, #7
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d0c6      	beq.n	800818a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	0018      	movs	r0, r3
 8008200:	46bd      	mov	sp, r7
 8008202:	b004      	add	sp, #16
 8008204:	bd80      	pop	{r7, pc}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	fffffe5f 	.word	0xfffffe5f

0800820c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	21c0      	movs	r1, #192	; 0xc0
 8008220:	438a      	bics	r2, r1
 8008222:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	675a      	str	r2, [r3, #116]	; 0x74
}
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	46bd      	mov	sp, r7
 800822e:	b002      	add	sp, #8
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	490a      	ldr	r1, [pc, #40]	; (8008270 <UART_EndRxTransfer+0x3c>)
 8008248:	400a      	ands	r2, r1
 800824a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2101      	movs	r1, #1
 8008258:	438a      	bics	r2, r1
 800825a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008268:	46c0      	nop			; (mov r8, r8)
 800826a:	46bd      	mov	sp, r7
 800826c:	b002      	add	sp, #8
 800826e:	bd80      	pop	{r7, pc}
 8008270:	fffffedf 	.word	0xfffffedf

08008274 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2220      	movs	r2, #32
 800828a:	4013      	ands	r3, r2
 800828c:	d11e      	bne.n	80082cc <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	225a      	movs	r2, #90	; 0x5a
 8008292:	2100      	movs	r1, #0
 8008294:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	490e      	ldr	r1, [pc, #56]	; (80082dc <UART_DMAReceiveCplt+0x68>)
 80082a2:	400a      	ands	r2, r1
 80082a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2101      	movs	r1, #1
 80082b2:	438a      	bics	r2, r1
 80082b4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2140      	movs	r1, #64	; 0x40
 80082c2:	438a      	bics	r2, r1
 80082c4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2220      	movs	r2, #32
 80082ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7ff fb28 	bl	8007924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d4:	46c0      	nop			; (mov r8, r8)
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b004      	add	sp, #16
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	fffffeff 	.word	0xfffffeff

080082e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7ff fb1f 	bl	8007934 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b004      	add	sp, #16
 80082fc:	bd80      	pop	{r7, pc}

080082fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b086      	sub	sp, #24
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008310:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008316:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2280      	movs	r2, #128	; 0x80
 8008320:	4013      	ands	r3, r2
 8008322:	2b80      	cmp	r3, #128	; 0x80
 8008324:	d10a      	bne.n	800833c <UART_DMAError+0x3e>
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b21      	cmp	r3, #33	; 0x21
 800832a:	d107      	bne.n	800833c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	2252      	movs	r2, #82	; 0x52
 8008330:	2100      	movs	r1, #0
 8008332:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	0018      	movs	r0, r3
 8008338:	f7ff ff68 	bl	800820c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	2240      	movs	r2, #64	; 0x40
 8008344:	4013      	ands	r3, r2
 8008346:	2b40      	cmp	r3, #64	; 0x40
 8008348:	d10a      	bne.n	8008360 <UART_DMAError+0x62>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b22      	cmp	r3, #34	; 0x22
 800834e:	d107      	bne.n	8008360 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	225a      	movs	r2, #90	; 0x5a
 8008354:	2100      	movs	r1, #0
 8008356:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	0018      	movs	r0, r3
 800835c:	f7ff ff6a 	bl	8008234 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008364:	2210      	movs	r2, #16
 8008366:	431a      	orrs	r2, r3
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	0018      	movs	r0, r3
 8008370:	f7ff fae8 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008374:	46c0      	nop			; (mov r8, r8)
 8008376:	46bd      	mov	sp, r7
 8008378:	b006      	add	sp, #24
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	225a      	movs	r2, #90	; 0x5a
 800838e:	2100      	movs	r1, #0
 8008390:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2252      	movs	r2, #82	; 0x52
 8008396:	2100      	movs	r1, #0
 8008398:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	0018      	movs	r0, r3
 800839e:	f7ff fad1 	bl	8007944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b004      	add	sp, #16
 80083a8:	bd80      	pop	{r7, pc}

080083aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2140      	movs	r1, #64	; 0x40
 80083be:	438a      	bics	r2, r1
 80083c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7ff fa9f 	bl	8007914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	46bd      	mov	sp, r7
 80083da:	b002      	add	sp, #8
 80083dc:	bd80      	pop	{r7, pc}

080083de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	46bd      	mov	sp, r7
 80083ea:	b002      	add	sp, #8
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <__errno>:
 80083f0:	4b01      	ldr	r3, [pc, #4]	; (80083f8 <__errno+0x8>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	4770      	bx	lr
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	2000001c 	.word	0x2000001c

080083fc <__libc_init_array>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	2600      	movs	r6, #0
 8008400:	4d0c      	ldr	r5, [pc, #48]	; (8008434 <__libc_init_array+0x38>)
 8008402:	4c0d      	ldr	r4, [pc, #52]	; (8008438 <__libc_init_array+0x3c>)
 8008404:	1b64      	subs	r4, r4, r5
 8008406:	10a4      	asrs	r4, r4, #2
 8008408:	42a6      	cmp	r6, r4
 800840a:	d109      	bne.n	8008420 <__libc_init_array+0x24>
 800840c:	2600      	movs	r6, #0
 800840e:	f002 f89f 	bl	800a550 <_init>
 8008412:	4d0a      	ldr	r5, [pc, #40]	; (800843c <__libc_init_array+0x40>)
 8008414:	4c0a      	ldr	r4, [pc, #40]	; (8008440 <__libc_init_array+0x44>)
 8008416:	1b64      	subs	r4, r4, r5
 8008418:	10a4      	asrs	r4, r4, #2
 800841a:	42a6      	cmp	r6, r4
 800841c:	d105      	bne.n	800842a <__libc_init_array+0x2e>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	00b3      	lsls	r3, r6, #2
 8008422:	58eb      	ldr	r3, [r5, r3]
 8008424:	4798      	blx	r3
 8008426:	3601      	adds	r6, #1
 8008428:	e7ee      	b.n	8008408 <__libc_init_array+0xc>
 800842a:	00b3      	lsls	r3, r6, #2
 800842c:	58eb      	ldr	r3, [r5, r3]
 800842e:	4798      	blx	r3
 8008430:	3601      	adds	r6, #1
 8008432:	e7f2      	b.n	800841a <__libc_init_array+0x1e>
 8008434:	0800c450 	.word	0x0800c450
 8008438:	0800c450 	.word	0x0800c450
 800843c:	0800c450 	.word	0x0800c450
 8008440:	0800c454 	.word	0x0800c454

08008444 <memcpy>:
 8008444:	2300      	movs	r3, #0
 8008446:	b510      	push	{r4, lr}
 8008448:	429a      	cmp	r2, r3
 800844a:	d100      	bne.n	800844e <memcpy+0xa>
 800844c:	bd10      	pop	{r4, pc}
 800844e:	5ccc      	ldrb	r4, [r1, r3]
 8008450:	54c4      	strb	r4, [r0, r3]
 8008452:	3301      	adds	r3, #1
 8008454:	e7f8      	b.n	8008448 <memcpy+0x4>

08008456 <memmove>:
 8008456:	b510      	push	{r4, lr}
 8008458:	4288      	cmp	r0, r1
 800845a:	d902      	bls.n	8008462 <memmove+0xc>
 800845c:	188b      	adds	r3, r1, r2
 800845e:	4298      	cmp	r0, r3
 8008460:	d303      	bcc.n	800846a <memmove+0x14>
 8008462:	2300      	movs	r3, #0
 8008464:	e007      	b.n	8008476 <memmove+0x20>
 8008466:	5c8b      	ldrb	r3, [r1, r2]
 8008468:	5483      	strb	r3, [r0, r2]
 800846a:	3a01      	subs	r2, #1
 800846c:	d2fb      	bcs.n	8008466 <memmove+0x10>
 800846e:	bd10      	pop	{r4, pc}
 8008470:	5ccc      	ldrb	r4, [r1, r3]
 8008472:	54c4      	strb	r4, [r0, r3]
 8008474:	3301      	adds	r3, #1
 8008476:	429a      	cmp	r2, r3
 8008478:	d1fa      	bne.n	8008470 <memmove+0x1a>
 800847a:	e7f8      	b.n	800846e <memmove+0x18>

0800847c <memset>:
 800847c:	0003      	movs	r3, r0
 800847e:	1812      	adds	r2, r2, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	d100      	bne.n	8008486 <memset+0xa>
 8008484:	4770      	bx	lr
 8008486:	7019      	strb	r1, [r3, #0]
 8008488:	3301      	adds	r3, #1
 800848a:	e7f9      	b.n	8008480 <memset+0x4>

0800848c <__cvt>:
 800848c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848e:	b08b      	sub	sp, #44	; 0x2c
 8008490:	0014      	movs	r4, r2
 8008492:	1e1d      	subs	r5, r3, #0
 8008494:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008496:	da53      	bge.n	8008540 <__cvt+0xb4>
 8008498:	2480      	movs	r4, #128	; 0x80
 800849a:	0624      	lsls	r4, r4, #24
 800849c:	191b      	adds	r3, r3, r4
 800849e:	001d      	movs	r5, r3
 80084a0:	0014      	movs	r4, r2
 80084a2:	232d      	movs	r3, #45	; 0x2d
 80084a4:	700b      	strb	r3, [r1, #0]
 80084a6:	2320      	movs	r3, #32
 80084a8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80084aa:	2203      	movs	r2, #3
 80084ac:	439e      	bics	r6, r3
 80084ae:	2e46      	cmp	r6, #70	; 0x46
 80084b0:	d007      	beq.n	80084c2 <__cvt+0x36>
 80084b2:	0033      	movs	r3, r6
 80084b4:	3b45      	subs	r3, #69	; 0x45
 80084b6:	4259      	negs	r1, r3
 80084b8:	414b      	adcs	r3, r1
 80084ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80084bc:	3a01      	subs	r2, #1
 80084be:	18cb      	adds	r3, r1, r3
 80084c0:	9310      	str	r3, [sp, #64]	; 0x40
 80084c2:	ab09      	add	r3, sp, #36	; 0x24
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	ab08      	add	r3, sp, #32
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084cc:	9200      	str	r2, [sp, #0]
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084d2:	0022      	movs	r2, r4
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	002b      	movs	r3, r5
 80084d8:	f000 fcdc 	bl	8008e94 <_dtoa_r>
 80084dc:	0007      	movs	r7, r0
 80084de:	2e47      	cmp	r6, #71	; 0x47
 80084e0:	d102      	bne.n	80084e8 <__cvt+0x5c>
 80084e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084e4:	07db      	lsls	r3, r3, #31
 80084e6:	d524      	bpl.n	8008532 <__cvt+0xa6>
 80084e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ea:	18fb      	adds	r3, r7, r3
 80084ec:	9307      	str	r3, [sp, #28]
 80084ee:	2e46      	cmp	r6, #70	; 0x46
 80084f0:	d114      	bne.n	800851c <__cvt+0x90>
 80084f2:	783b      	ldrb	r3, [r7, #0]
 80084f4:	2b30      	cmp	r3, #48	; 0x30
 80084f6:	d10c      	bne.n	8008512 <__cvt+0x86>
 80084f8:	2200      	movs	r2, #0
 80084fa:	2300      	movs	r3, #0
 80084fc:	0020      	movs	r0, r4
 80084fe:	0029      	movs	r1, r5
 8008500:	f7f7 ff9a 	bl	8000438 <__aeabi_dcmpeq>
 8008504:	2800      	cmp	r0, #0
 8008506:	d104      	bne.n	8008512 <__cvt+0x86>
 8008508:	2301      	movs	r3, #1
 800850a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008514:	9a07      	ldr	r2, [sp, #28]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	18d3      	adds	r3, r2, r3
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	0020      	movs	r0, r4
 8008522:	0029      	movs	r1, r5
 8008524:	f7f7 ff88 	bl	8000438 <__aeabi_dcmpeq>
 8008528:	2230      	movs	r2, #48	; 0x30
 800852a:	2800      	cmp	r0, #0
 800852c:	d00d      	beq.n	800854a <__cvt+0xbe>
 800852e:	9b07      	ldr	r3, [sp, #28]
 8008530:	9309      	str	r3, [sp, #36]	; 0x24
 8008532:	0038      	movs	r0, r7
 8008534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008536:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008538:	1bdb      	subs	r3, r3, r7
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	b00b      	add	sp, #44	; 0x2c
 800853e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008540:	2300      	movs	r3, #0
 8008542:	e7af      	b.n	80084a4 <__cvt+0x18>
 8008544:	1c59      	adds	r1, r3, #1
 8008546:	9109      	str	r1, [sp, #36]	; 0x24
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854c:	9907      	ldr	r1, [sp, #28]
 800854e:	428b      	cmp	r3, r1
 8008550:	d3f8      	bcc.n	8008544 <__cvt+0xb8>
 8008552:	e7ee      	b.n	8008532 <__cvt+0xa6>

08008554 <__exponent>:
 8008554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008556:	1c83      	adds	r3, r0, #2
 8008558:	b085      	sub	sp, #20
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	0006      	movs	r6, r0
 800855e:	000c      	movs	r4, r1
 8008560:	7002      	strb	r2, [r0, #0]
 8008562:	232b      	movs	r3, #43	; 0x2b
 8008564:	2900      	cmp	r1, #0
 8008566:	da01      	bge.n	800856c <__exponent+0x18>
 8008568:	232d      	movs	r3, #45	; 0x2d
 800856a:	424c      	negs	r4, r1
 800856c:	7073      	strb	r3, [r6, #1]
 800856e:	2c09      	cmp	r4, #9
 8008570:	dd22      	ble.n	80085b8 <__exponent+0x64>
 8008572:	ab02      	add	r3, sp, #8
 8008574:	1ddd      	adds	r5, r3, #7
 8008576:	0020      	movs	r0, r4
 8008578:	210a      	movs	r1, #10
 800857a:	f7f7 ff47 	bl	800040c <__aeabi_idivmod>
 800857e:	1e6f      	subs	r7, r5, #1
 8008580:	3130      	adds	r1, #48	; 0x30
 8008582:	7039      	strb	r1, [r7, #0]
 8008584:	0020      	movs	r0, r4
 8008586:	210a      	movs	r1, #10
 8008588:	f7f7 fe5a 	bl	8000240 <__divsi3>
 800858c:	0004      	movs	r4, r0
 800858e:	2809      	cmp	r0, #9
 8008590:	dc0b      	bgt.n	80085aa <__exponent+0x56>
 8008592:	3d02      	subs	r5, #2
 8008594:	3430      	adds	r4, #48	; 0x30
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	702c      	strb	r4, [r5, #0]
 800859a:	aa02      	add	r2, sp, #8
 800859c:	3207      	adds	r2, #7
 800859e:	0018      	movs	r0, r3
 80085a0:	42aa      	cmp	r2, r5
 80085a2:	d804      	bhi.n	80085ae <__exponent+0x5a>
 80085a4:	1b80      	subs	r0, r0, r6
 80085a6:	b005      	add	sp, #20
 80085a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085aa:	003d      	movs	r5, r7
 80085ac:	e7e3      	b.n	8008576 <__exponent+0x22>
 80085ae:	782a      	ldrb	r2, [r5, #0]
 80085b0:	3501      	adds	r5, #1
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	3301      	adds	r3, #1
 80085b6:	e7f0      	b.n	800859a <__exponent+0x46>
 80085b8:	2330      	movs	r3, #48	; 0x30
 80085ba:	18e4      	adds	r4, r4, r3
 80085bc:	70b3      	strb	r3, [r6, #2]
 80085be:	1d30      	adds	r0, r6, #4
 80085c0:	70f4      	strb	r4, [r6, #3]
 80085c2:	e7ef      	b.n	80085a4 <__exponent+0x50>

080085c4 <_printf_float>:
 80085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c6:	b095      	sub	sp, #84	; 0x54
 80085c8:	000c      	movs	r4, r1
 80085ca:	920a      	str	r2, [sp, #40]	; 0x28
 80085cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ce:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80085d0:	9009      	str	r0, [sp, #36]	; 0x24
 80085d2:	f001 fa3f 	bl	8009a54 <_localeconv_r>
 80085d6:	6803      	ldr	r3, [r0, #0]
 80085d8:	0018      	movs	r0, r3
 80085da:	930c      	str	r3, [sp, #48]	; 0x30
 80085dc:	f7f7 fd94 	bl	8000108 <strlen>
 80085e0:	2300      	movs	r3, #0
 80085e2:	9312      	str	r3, [sp, #72]	; 0x48
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	900e      	str	r0, [sp, #56]	; 0x38
 80085e8:	930d      	str	r3, [sp, #52]	; 0x34
 80085ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085ec:	7e27      	ldrb	r7, [r4, #24]
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	2207      	movs	r2, #7
 80085f2:	05c9      	lsls	r1, r1, #23
 80085f4:	d545      	bpl.n	8008682 <_printf_float+0xbe>
 80085f6:	189b      	adds	r3, r3, r2
 80085f8:	4393      	bics	r3, r2
 80085fa:	001a      	movs	r2, r3
 80085fc:	3208      	adds	r2, #8
 80085fe:	602a      	str	r2, [r5, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	64a2      	str	r2, [r4, #72]	; 0x48
 8008606:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008608:	2201      	movs	r2, #1
 800860a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800860c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800860e:	006b      	lsls	r3, r5, #1
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	930f      	str	r3, [sp, #60]	; 0x3c
 8008614:	4252      	negs	r2, r2
 8008616:	4bac      	ldr	r3, [pc, #688]	; (80088c8 <_printf_float+0x304>)
 8008618:	0030      	movs	r0, r6
 800861a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800861c:	f7fa fade 	bl	8002bdc <__aeabi_dcmpun>
 8008620:	2800      	cmp	r0, #0
 8008622:	d130      	bne.n	8008686 <_printf_float+0xc2>
 8008624:	2201      	movs	r2, #1
 8008626:	4ba8      	ldr	r3, [pc, #672]	; (80088c8 <_printf_float+0x304>)
 8008628:	4252      	negs	r2, r2
 800862a:	0030      	movs	r0, r6
 800862c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800862e:	f7f7 ff13 	bl	8000458 <__aeabi_dcmple>
 8008632:	2800      	cmp	r0, #0
 8008634:	d127      	bne.n	8008686 <_printf_float+0xc2>
 8008636:	2200      	movs	r2, #0
 8008638:	2300      	movs	r3, #0
 800863a:	0030      	movs	r0, r6
 800863c:	0029      	movs	r1, r5
 800863e:	f7f7 ff01 	bl	8000444 <__aeabi_dcmplt>
 8008642:	2800      	cmp	r0, #0
 8008644:	d003      	beq.n	800864e <_printf_float+0x8a>
 8008646:	0023      	movs	r3, r4
 8008648:	222d      	movs	r2, #45	; 0x2d
 800864a:	3343      	adds	r3, #67	; 0x43
 800864c:	701a      	strb	r2, [r3, #0]
 800864e:	4d9f      	ldr	r5, [pc, #636]	; (80088cc <_printf_float+0x308>)
 8008650:	2f47      	cmp	r7, #71	; 0x47
 8008652:	d800      	bhi.n	8008656 <_printf_float+0x92>
 8008654:	4d9e      	ldr	r5, [pc, #632]	; (80088d0 <_printf_float+0x30c>)
 8008656:	2303      	movs	r3, #3
 8008658:	2600      	movs	r6, #0
 800865a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	3301      	adds	r3, #1
 8008660:	439a      	bics	r2, r3
 8008662:	6022      	str	r2, [r4, #0]
 8008664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008666:	aa13      	add	r2, sp, #76	; 0x4c
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	0021      	movs	r1, r4
 800866c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008670:	f000 f9f4 	bl	8008a5c <_printf_common>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d000      	beq.n	800867a <_printf_float+0xb6>
 8008678:	e093      	b.n	80087a2 <_printf_float+0x1de>
 800867a:	2001      	movs	r0, #1
 800867c:	4240      	negs	r0, r0
 800867e:	b015      	add	sp, #84	; 0x54
 8008680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008682:	3307      	adds	r3, #7
 8008684:	e7b8      	b.n	80085f8 <_printf_float+0x34>
 8008686:	0032      	movs	r2, r6
 8008688:	002b      	movs	r3, r5
 800868a:	0030      	movs	r0, r6
 800868c:	0029      	movs	r1, r5
 800868e:	f7fa faa5 	bl	8002bdc <__aeabi_dcmpun>
 8008692:	2800      	cmp	r0, #0
 8008694:	d004      	beq.n	80086a0 <_printf_float+0xdc>
 8008696:	4d8f      	ldr	r5, [pc, #572]	; (80088d4 <_printf_float+0x310>)
 8008698:	2f47      	cmp	r7, #71	; 0x47
 800869a:	d8dc      	bhi.n	8008656 <_printf_float+0x92>
 800869c:	4d8e      	ldr	r5, [pc, #568]	; (80088d8 <_printf_float+0x314>)
 800869e:	e7da      	b.n	8008656 <_printf_float+0x92>
 80086a0:	2380      	movs	r3, #128	; 0x80
 80086a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086a4:	6862      	ldr	r2, [r4, #4]
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	430b      	orrs	r3, r1
 80086aa:	1c51      	adds	r1, r2, #1
 80086ac:	d143      	bne.n	8008736 <_printf_float+0x172>
 80086ae:	3207      	adds	r2, #7
 80086b0:	6062      	str	r2, [r4, #4]
 80086b2:	aa12      	add	r2, sp, #72	; 0x48
 80086b4:	2100      	movs	r1, #0
 80086b6:	9205      	str	r2, [sp, #20]
 80086b8:	aa11      	add	r2, sp, #68	; 0x44
 80086ba:	9203      	str	r2, [sp, #12]
 80086bc:	2223      	movs	r2, #35	; 0x23
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	9106      	str	r1, [sp, #24]
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	a908      	add	r1, sp, #32
 80086c6:	6863      	ldr	r3, [r4, #4]
 80086c8:	1852      	adds	r2, r2, r1
 80086ca:	9202      	str	r2, [sp, #8]
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	0032      	movs	r2, r6
 80086d0:	002b      	movs	r3, r5
 80086d2:	9704      	str	r7, [sp, #16]
 80086d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d6:	f7ff fed9 	bl	800848c <__cvt>
 80086da:	2320      	movs	r3, #32
 80086dc:	003a      	movs	r2, r7
 80086de:	0005      	movs	r5, r0
 80086e0:	439a      	bics	r2, r3
 80086e2:	2a47      	cmp	r2, #71	; 0x47
 80086e4:	d107      	bne.n	80086f6 <_printf_float+0x132>
 80086e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e8:	1cda      	adds	r2, r3, #3
 80086ea:	db02      	blt.n	80086f2 <_printf_float+0x12e>
 80086ec:	6862      	ldr	r2, [r4, #4]
 80086ee:	4293      	cmp	r3, r2
 80086f0:	dd45      	ble.n	800877e <_printf_float+0x1ba>
 80086f2:	3f02      	subs	r7, #2
 80086f4:	b2ff      	uxtb	r7, r7
 80086f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086f8:	2f65      	cmp	r7, #101	; 0x65
 80086fa:	d825      	bhi.n	8008748 <_printf_float+0x184>
 80086fc:	0020      	movs	r0, r4
 80086fe:	3901      	subs	r1, #1
 8008700:	003a      	movs	r2, r7
 8008702:	3050      	adds	r0, #80	; 0x50
 8008704:	9111      	str	r1, [sp, #68]	; 0x44
 8008706:	f7ff ff25 	bl	8008554 <__exponent>
 800870a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800870c:	0006      	movs	r6, r0
 800870e:	1813      	adds	r3, r2, r0
 8008710:	6123      	str	r3, [r4, #16]
 8008712:	2a01      	cmp	r2, #1
 8008714:	dc02      	bgt.n	800871c <_printf_float+0x158>
 8008716:	6822      	ldr	r2, [r4, #0]
 8008718:	07d2      	lsls	r2, r2, #31
 800871a:	d501      	bpl.n	8008720 <_printf_float+0x15c>
 800871c:	3301      	adds	r3, #1
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	2323      	movs	r3, #35	; 0x23
 8008722:	aa08      	add	r2, sp, #32
 8008724:	189b      	adds	r3, r3, r2
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d09b      	beq.n	8008664 <_printf_float+0xa0>
 800872c:	0023      	movs	r3, r4
 800872e:	222d      	movs	r2, #45	; 0x2d
 8008730:	3343      	adds	r3, #67	; 0x43
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	e796      	b.n	8008664 <_printf_float+0xa0>
 8008736:	2f67      	cmp	r7, #103	; 0x67
 8008738:	d100      	bne.n	800873c <_printf_float+0x178>
 800873a:	e176      	b.n	8008a2a <_printf_float+0x466>
 800873c:	2f47      	cmp	r7, #71	; 0x47
 800873e:	d1b8      	bne.n	80086b2 <_printf_float+0xee>
 8008740:	2a00      	cmp	r2, #0
 8008742:	d1b6      	bne.n	80086b2 <_printf_float+0xee>
 8008744:	2201      	movs	r2, #1
 8008746:	e7b3      	b.n	80086b0 <_printf_float+0xec>
 8008748:	2f66      	cmp	r7, #102	; 0x66
 800874a:	d119      	bne.n	8008780 <_printf_float+0x1bc>
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	2900      	cmp	r1, #0
 8008750:	dd0c      	ble.n	800876c <_printf_float+0x1a8>
 8008752:	6121      	str	r1, [r4, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <_printf_float+0x19a>
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	07d2      	lsls	r2, r2, #31
 800875c:	d502      	bpl.n	8008764 <_printf_float+0x1a0>
 800875e:	3301      	adds	r3, #1
 8008760:	185b      	adds	r3, r3, r1
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008766:	2600      	movs	r6, #0
 8008768:	65a3      	str	r3, [r4, #88]	; 0x58
 800876a:	e7d9      	b.n	8008720 <_printf_float+0x15c>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d103      	bne.n	8008778 <_printf_float+0x1b4>
 8008770:	2201      	movs	r2, #1
 8008772:	6821      	ldr	r1, [r4, #0]
 8008774:	4211      	tst	r1, r2
 8008776:	d000      	beq.n	800877a <_printf_float+0x1b6>
 8008778:	1c9a      	adds	r2, r3, #2
 800877a:	6122      	str	r2, [r4, #16]
 800877c:	e7f2      	b.n	8008764 <_printf_float+0x1a0>
 800877e:	2767      	movs	r7, #103	; 0x67
 8008780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008782:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008784:	4293      	cmp	r3, r2
 8008786:	db05      	blt.n	8008794 <_printf_float+0x1d0>
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	07d2      	lsls	r2, r2, #31
 800878e:	d5e9      	bpl.n	8008764 <_printf_float+0x1a0>
 8008790:	3301      	adds	r3, #1
 8008792:	e7e6      	b.n	8008762 <_printf_float+0x19e>
 8008794:	2101      	movs	r1, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	dc01      	bgt.n	800879e <_printf_float+0x1da>
 800879a:	1849      	adds	r1, r1, r1
 800879c:	1ac9      	subs	r1, r1, r3
 800879e:	1852      	adds	r2, r2, r1
 80087a0:	e7eb      	b.n	800877a <_printf_float+0x1b6>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	0553      	lsls	r3, r2, #21
 80087a6:	d408      	bmi.n	80087ba <_printf_float+0x1f6>
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	002a      	movs	r2, r5
 80087ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087b2:	47a8      	blx	r5
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d129      	bne.n	800880c <_printf_float+0x248>
 80087b8:	e75f      	b.n	800867a <_printf_float+0xb6>
 80087ba:	2f65      	cmp	r7, #101	; 0x65
 80087bc:	d800      	bhi.n	80087c0 <_printf_float+0x1fc>
 80087be:	e0e0      	b.n	8008982 <_printf_float+0x3be>
 80087c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80087c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	f7f7 fe36 	bl	8000438 <__aeabi_dcmpeq>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d034      	beq.n	800883a <_printf_float+0x276>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4a42      	ldr	r2, [pc, #264]	; (80088dc <_printf_float+0x318>)
 80087d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087da:	47a8      	blx	r5
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d100      	bne.n	80087e2 <_printf_float+0x21e>
 80087e0:	e74b      	b.n	800867a <_printf_float+0xb6>
 80087e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087e6:	4293      	cmp	r3, r2
 80087e8:	db02      	blt.n	80087f0 <_printf_float+0x22c>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	07db      	lsls	r3, r3, #31
 80087ee:	d50d      	bpl.n	800880c <_printf_float+0x248>
 80087f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087fa:	47a8      	blx	r5
 80087fc:	2500      	movs	r5, #0
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d100      	bne.n	8008804 <_printf_float+0x240>
 8008802:	e73a      	b.n	800867a <_printf_float+0xb6>
 8008804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008806:	3b01      	subs	r3, #1
 8008808:	42ab      	cmp	r3, r5
 800880a:	dc0a      	bgt.n	8008822 <_printf_float+0x25e>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	079b      	lsls	r3, r3, #30
 8008810:	d500      	bpl.n	8008814 <_printf_float+0x250>
 8008812:	e108      	b.n	8008a26 <_printf_float+0x462>
 8008814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008816:	68e0      	ldr	r0, [r4, #12]
 8008818:	4298      	cmp	r0, r3
 800881a:	db00      	blt.n	800881e <_printf_float+0x25a>
 800881c:	e72f      	b.n	800867e <_printf_float+0xba>
 800881e:	0018      	movs	r0, r3
 8008820:	e72d      	b.n	800867e <_printf_float+0xba>
 8008822:	0022      	movs	r2, r4
 8008824:	2301      	movs	r3, #1
 8008826:	321a      	adds	r2, #26
 8008828:	990a      	ldr	r1, [sp, #40]	; 0x28
 800882a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800882c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800882e:	47b0      	blx	r6
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d100      	bne.n	8008836 <_printf_float+0x272>
 8008834:	e721      	b.n	800867a <_printf_float+0xb6>
 8008836:	3501      	adds	r5, #1
 8008838:	e7e4      	b.n	8008804 <_printf_float+0x240>
 800883a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800883c:	2b00      	cmp	r3, #0
 800883e:	dc2d      	bgt.n	800889c <_printf_float+0x2d8>
 8008840:	2301      	movs	r3, #1
 8008842:	4a26      	ldr	r2, [pc, #152]	; (80088dc <_printf_float+0x318>)
 8008844:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008846:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008848:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800884a:	47b0      	blx	r6
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d100      	bne.n	8008852 <_printf_float+0x28e>
 8008850:	e713      	b.n	800867a <_printf_float+0xb6>
 8008852:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008854:	2b00      	cmp	r3, #0
 8008856:	d105      	bne.n	8008864 <_printf_float+0x2a0>
 8008858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <_printf_float+0x2a0>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	07db      	lsls	r3, r3, #31
 8008862:	d5d3      	bpl.n	800880c <_printf_float+0x248>
 8008864:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800886a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800886c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800886e:	47b0      	blx	r6
 8008870:	2600      	movs	r6, #0
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d100      	bne.n	8008878 <_printf_float+0x2b4>
 8008876:	e700      	b.n	800867a <_printf_float+0xb6>
 8008878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800887a:	425b      	negs	r3, r3
 800887c:	42b3      	cmp	r3, r6
 800887e:	dc01      	bgt.n	8008884 <_printf_float+0x2c0>
 8008880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008882:	e792      	b.n	80087aa <_printf_float+0x1e6>
 8008884:	0022      	movs	r2, r4
 8008886:	2301      	movs	r3, #1
 8008888:	321a      	adds	r2, #26
 800888a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800888c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800888e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008890:	47b8      	blx	r7
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	d100      	bne.n	8008898 <_printf_float+0x2d4>
 8008896:	e6f0      	b.n	800867a <_printf_float+0xb6>
 8008898:	3601      	adds	r6, #1
 800889a:	e7ed      	b.n	8008878 <_printf_float+0x2b4>
 800889c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800889e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80088a0:	429f      	cmp	r7, r3
 80088a2:	dd00      	ble.n	80088a6 <_printf_float+0x2e2>
 80088a4:	001f      	movs	r7, r3
 80088a6:	2f00      	cmp	r7, #0
 80088a8:	dd08      	ble.n	80088bc <_printf_float+0x2f8>
 80088aa:	003b      	movs	r3, r7
 80088ac:	002a      	movs	r2, r5
 80088ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80088b4:	47b0      	blx	r6
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d100      	bne.n	80088bc <_printf_float+0x2f8>
 80088ba:	e6de      	b.n	800867a <_printf_float+0xb6>
 80088bc:	2300      	movs	r3, #0
 80088be:	930d      	str	r3, [sp, #52]	; 0x34
 80088c0:	43fb      	mvns	r3, r7
 80088c2:	17db      	asrs	r3, r3, #31
 80088c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c6:	e018      	b.n	80088fa <_printf_float+0x336>
 80088c8:	7fefffff 	.word	0x7fefffff
 80088cc:	0800c1f0 	.word	0x0800c1f0
 80088d0:	0800c1ec 	.word	0x0800c1ec
 80088d4:	0800c1f8 	.word	0x0800c1f8
 80088d8:	0800c1f4 	.word	0x0800c1f4
 80088dc:	0800c1fc 	.word	0x0800c1fc
 80088e0:	0022      	movs	r2, r4
 80088e2:	2301      	movs	r3, #1
 80088e4:	321a      	adds	r2, #26
 80088e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80088ec:	47b0      	blx	r6
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d100      	bne.n	80088f4 <_printf_float+0x330>
 80088f2:	e6c2      	b.n	800867a <_printf_float+0xb6>
 80088f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f6:	3301      	adds	r3, #1
 80088f8:	930d      	str	r3, [sp, #52]	; 0x34
 80088fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088fc:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80088fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008900:	403b      	ands	r3, r7
 8008902:	1af3      	subs	r3, r6, r3
 8008904:	4293      	cmp	r3, r2
 8008906:	dceb      	bgt.n	80088e0 <_printf_float+0x31c>
 8008908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800890a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800890c:	19ad      	adds	r5, r5, r6
 800890e:	4293      	cmp	r3, r2
 8008910:	db10      	blt.n	8008934 <_printf_float+0x370>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	07db      	lsls	r3, r3, #31
 8008916:	d40d      	bmi.n	8008934 <_printf_float+0x370>
 8008918:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800891a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800891c:	1bbe      	subs	r6, r7, r6
 800891e:	1aff      	subs	r7, r7, r3
 8008920:	42b7      	cmp	r7, r6
 8008922:	dd00      	ble.n	8008926 <_printf_float+0x362>
 8008924:	0037      	movs	r7, r6
 8008926:	2f00      	cmp	r7, #0
 8008928:	dc0d      	bgt.n	8008946 <_printf_float+0x382>
 800892a:	43fe      	mvns	r6, r7
 800892c:	17f3      	asrs	r3, r6, #31
 800892e:	2500      	movs	r5, #0
 8008930:	930c      	str	r3, [sp, #48]	; 0x30
 8008932:	e01c      	b.n	800896e <_printf_float+0x3aa>
 8008934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008938:	990a      	ldr	r1, [sp, #40]	; 0x28
 800893a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800893c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800893e:	47b8      	blx	r7
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d1e9      	bne.n	8008918 <_printf_float+0x354>
 8008944:	e699      	b.n	800867a <_printf_float+0xb6>
 8008946:	003b      	movs	r3, r7
 8008948:	002a      	movs	r2, r5
 800894a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800894c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800894e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008950:	47a8      	blx	r5
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	d1e9      	bne.n	800892a <_printf_float+0x366>
 8008956:	e690      	b.n	800867a <_printf_float+0xb6>
 8008958:	0022      	movs	r2, r4
 800895a:	2301      	movs	r3, #1
 800895c:	321a      	adds	r2, #26
 800895e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008962:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008964:	47b0      	blx	r6
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d100      	bne.n	800896c <_printf_float+0x3a8>
 800896a:	e686      	b.n	800867a <_printf_float+0xb6>
 800896c:	3501      	adds	r5, #1
 800896e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	003a      	movs	r2, r7
 8008978:	400a      	ands	r2, r1
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	42ab      	cmp	r3, r5
 800897e:	dceb      	bgt.n	8008958 <_printf_float+0x394>
 8008980:	e744      	b.n	800880c <_printf_float+0x248>
 8008982:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008984:	2b01      	cmp	r3, #1
 8008986:	dc02      	bgt.n	800898e <_printf_float+0x3ca>
 8008988:	2301      	movs	r3, #1
 800898a:	421a      	tst	r2, r3
 800898c:	d032      	beq.n	80089f4 <_printf_float+0x430>
 800898e:	2301      	movs	r3, #1
 8008990:	002a      	movs	r2, r5
 8008992:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008996:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008998:	47b8      	blx	r7
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d100      	bne.n	80089a0 <_printf_float+0x3dc>
 800899e:	e66c      	b.n	800867a <_printf_float+0xb6>
 80089a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80089aa:	3501      	adds	r5, #1
 80089ac:	47b8      	blx	r7
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d100      	bne.n	80089b4 <_printf_float+0x3f0>
 80089b2:	e662      	b.n	800867a <_printf_float+0xb6>
 80089b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80089b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80089b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089ba:	2200      	movs	r2, #0
 80089bc:	1e5f      	subs	r7, r3, #1
 80089be:	2300      	movs	r3, #0
 80089c0:	f7f7 fd3a 	bl	8000438 <__aeabi_dcmpeq>
 80089c4:	003b      	movs	r3, r7
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d014      	beq.n	80089f4 <_printf_float+0x430>
 80089ca:	2500      	movs	r5, #0
 80089cc:	e00a      	b.n	80089e4 <_printf_float+0x420>
 80089ce:	0022      	movs	r2, r4
 80089d0:	2301      	movs	r3, #1
 80089d2:	321a      	adds	r2, #26
 80089d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80089da:	47b8      	blx	r7
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d100      	bne.n	80089e2 <_printf_float+0x41e>
 80089e0:	e64b      	b.n	800867a <_printf_float+0xb6>
 80089e2:	3501      	adds	r5, #1
 80089e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089e6:	3b01      	subs	r3, #1
 80089e8:	42ab      	cmp	r3, r5
 80089ea:	dcf0      	bgt.n	80089ce <_printf_float+0x40a>
 80089ec:	0022      	movs	r2, r4
 80089ee:	0033      	movs	r3, r6
 80089f0:	3250      	adds	r2, #80	; 0x50
 80089f2:	e6db      	b.n	80087ac <_printf_float+0x1e8>
 80089f4:	002a      	movs	r2, r5
 80089f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80089fc:	47a8      	blx	r5
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d1f4      	bne.n	80089ec <_printf_float+0x428>
 8008a02:	e63a      	b.n	800867a <_printf_float+0xb6>
 8008a04:	0022      	movs	r2, r4
 8008a06:	2301      	movs	r3, #1
 8008a08:	3219      	adds	r2, #25
 8008a0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a10:	47b0      	blx	r6
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d100      	bne.n	8008a18 <_printf_float+0x454>
 8008a16:	e630      	b.n	800867a <_printf_float+0xb6>
 8008a18:	3501      	adds	r5, #1
 8008a1a:	68e3      	ldr	r3, [r4, #12]
 8008a1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dcef      	bgt.n	8008a04 <_printf_float+0x440>
 8008a24:	e6f6      	b.n	8008814 <_printf_float+0x250>
 8008a26:	2500      	movs	r5, #0
 8008a28:	e7f7      	b.n	8008a1a <_printf_float+0x456>
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	d100      	bne.n	8008a30 <_printf_float+0x46c>
 8008a2e:	e689      	b.n	8008744 <_printf_float+0x180>
 8008a30:	2100      	movs	r1, #0
 8008a32:	9106      	str	r1, [sp, #24]
 8008a34:	a912      	add	r1, sp, #72	; 0x48
 8008a36:	9105      	str	r1, [sp, #20]
 8008a38:	a911      	add	r1, sp, #68	; 0x44
 8008a3a:	9103      	str	r1, [sp, #12]
 8008a3c:	2123      	movs	r1, #35	; 0x23
 8008a3e:	a808      	add	r0, sp, #32
 8008a40:	1809      	adds	r1, r1, r0
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	9200      	str	r2, [sp, #0]
 8008a48:	002b      	movs	r3, r5
 8008a4a:	9704      	str	r7, [sp, #16]
 8008a4c:	9102      	str	r1, [sp, #8]
 8008a4e:	0032      	movs	r2, r6
 8008a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a52:	f7ff fd1b 	bl	800848c <__cvt>
 8008a56:	0005      	movs	r5, r0
 8008a58:	e645      	b.n	80086e6 <_printf_float+0x122>
 8008a5a:	46c0      	nop			; (mov r8, r8)

08008a5c <_printf_common>:
 8008a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a5e:	0015      	movs	r5, r2
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	688a      	ldr	r2, [r1, #8]
 8008a64:	690b      	ldr	r3, [r1, #16]
 8008a66:	9000      	str	r0, [sp, #0]
 8008a68:	000c      	movs	r4, r1
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	da00      	bge.n	8008a70 <_printf_common+0x14>
 8008a6e:	0013      	movs	r3, r2
 8008a70:	0022      	movs	r2, r4
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	3243      	adds	r2, #67	; 0x43
 8008a76:	7812      	ldrb	r2, [r2, #0]
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	d001      	beq.n	8008a80 <_printf_common+0x24>
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	069b      	lsls	r3, r3, #26
 8008a84:	d502      	bpl.n	8008a8c <_printf_common+0x30>
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	3302      	adds	r3, #2
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	2706      	movs	r7, #6
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	401f      	ands	r7, r3
 8008a92:	d027      	beq.n	8008ae4 <_printf_common+0x88>
 8008a94:	0023      	movs	r3, r4
 8008a96:	3343      	adds	r3, #67	; 0x43
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	1e5a      	subs	r2, r3, #1
 8008a9c:	4193      	sbcs	r3, r2
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	0692      	lsls	r2, r2, #26
 8008aa2:	d430      	bmi.n	8008b06 <_printf_common+0xaa>
 8008aa4:	0022      	movs	r2, r4
 8008aa6:	9901      	ldr	r1, [sp, #4]
 8008aa8:	3243      	adds	r2, #67	; 0x43
 8008aaa:	9800      	ldr	r0, [sp, #0]
 8008aac:	9e08      	ldr	r6, [sp, #32]
 8008aae:	47b0      	blx	r6
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d025      	beq.n	8008b00 <_printf_common+0xa4>
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	6820      	ldr	r0, [r4, #0]
 8008ab8:	682a      	ldr	r2, [r5, #0]
 8008aba:	68e1      	ldr	r1, [r4, #12]
 8008abc:	4003      	ands	r3, r0
 8008abe:	2500      	movs	r5, #0
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d103      	bne.n	8008acc <_printf_common+0x70>
 8008ac4:	1a8d      	subs	r5, r1, r2
 8008ac6:	43eb      	mvns	r3, r5
 8008ac8:	17db      	asrs	r3, r3, #31
 8008aca:	401d      	ands	r5, r3
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	6922      	ldr	r2, [r4, #16]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	dd01      	ble.n	8008ad8 <_printf_common+0x7c>
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	18ed      	adds	r5, r5, r3
 8008ad8:	2700      	movs	r7, #0
 8008ada:	42bd      	cmp	r5, r7
 8008adc:	d120      	bne.n	8008b20 <_printf_common+0xc4>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e010      	b.n	8008b04 <_printf_common+0xa8>
 8008ae2:	3701      	adds	r7, #1
 8008ae4:	68e3      	ldr	r3, [r4, #12]
 8008ae6:	682a      	ldr	r2, [r5, #0]
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	42bb      	cmp	r3, r7
 8008aec:	ddd2      	ble.n	8008a94 <_printf_common+0x38>
 8008aee:	0022      	movs	r2, r4
 8008af0:	2301      	movs	r3, #1
 8008af2:	3219      	adds	r2, #25
 8008af4:	9901      	ldr	r1, [sp, #4]
 8008af6:	9800      	ldr	r0, [sp, #0]
 8008af8:	9e08      	ldr	r6, [sp, #32]
 8008afa:	47b0      	blx	r6
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d1f0      	bne.n	8008ae2 <_printf_common+0x86>
 8008b00:	2001      	movs	r0, #1
 8008b02:	4240      	negs	r0, r0
 8008b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b06:	2030      	movs	r0, #48	; 0x30
 8008b08:	18e1      	adds	r1, r4, r3
 8008b0a:	3143      	adds	r1, #67	; 0x43
 8008b0c:	7008      	strb	r0, [r1, #0]
 8008b0e:	0021      	movs	r1, r4
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	3145      	adds	r1, #69	; 0x45
 8008b14:	7809      	ldrb	r1, [r1, #0]
 8008b16:	18a2      	adds	r2, r4, r2
 8008b18:	3243      	adds	r2, #67	; 0x43
 8008b1a:	3302      	adds	r3, #2
 8008b1c:	7011      	strb	r1, [r2, #0]
 8008b1e:	e7c1      	b.n	8008aa4 <_printf_common+0x48>
 8008b20:	0022      	movs	r2, r4
 8008b22:	2301      	movs	r3, #1
 8008b24:	321a      	adds	r2, #26
 8008b26:	9901      	ldr	r1, [sp, #4]
 8008b28:	9800      	ldr	r0, [sp, #0]
 8008b2a:	9e08      	ldr	r6, [sp, #32]
 8008b2c:	47b0      	blx	r6
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d0e6      	beq.n	8008b00 <_printf_common+0xa4>
 8008b32:	3701      	adds	r7, #1
 8008b34:	e7d1      	b.n	8008ada <_printf_common+0x7e>
	...

08008b38 <_printf_i>:
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b089      	sub	sp, #36	; 0x24
 8008b3c:	9204      	str	r2, [sp, #16]
 8008b3e:	000a      	movs	r2, r1
 8008b40:	3243      	adds	r2, #67	; 0x43
 8008b42:	9305      	str	r3, [sp, #20]
 8008b44:	9003      	str	r0, [sp, #12]
 8008b46:	9202      	str	r2, [sp, #8]
 8008b48:	7e0a      	ldrb	r2, [r1, #24]
 8008b4a:	000c      	movs	r4, r1
 8008b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b4e:	2a6e      	cmp	r2, #110	; 0x6e
 8008b50:	d100      	bne.n	8008b54 <_printf_i+0x1c>
 8008b52:	e086      	b.n	8008c62 <_printf_i+0x12a>
 8008b54:	d81f      	bhi.n	8008b96 <_printf_i+0x5e>
 8008b56:	2a63      	cmp	r2, #99	; 0x63
 8008b58:	d033      	beq.n	8008bc2 <_printf_i+0x8a>
 8008b5a:	d808      	bhi.n	8008b6e <_printf_i+0x36>
 8008b5c:	2a00      	cmp	r2, #0
 8008b5e:	d100      	bne.n	8008b62 <_printf_i+0x2a>
 8008b60:	e08c      	b.n	8008c7c <_printf_i+0x144>
 8008b62:	2a58      	cmp	r2, #88	; 0x58
 8008b64:	d04d      	beq.n	8008c02 <_printf_i+0xca>
 8008b66:	0025      	movs	r5, r4
 8008b68:	3542      	adds	r5, #66	; 0x42
 8008b6a:	702a      	strb	r2, [r5, #0]
 8008b6c:	e030      	b.n	8008bd0 <_printf_i+0x98>
 8008b6e:	2a64      	cmp	r2, #100	; 0x64
 8008b70:	d001      	beq.n	8008b76 <_printf_i+0x3e>
 8008b72:	2a69      	cmp	r2, #105	; 0x69
 8008b74:	d1f7      	bne.n	8008b66 <_printf_i+0x2e>
 8008b76:	6819      	ldr	r1, [r3, #0]
 8008b78:	6825      	ldr	r5, [r4, #0]
 8008b7a:	1d0a      	adds	r2, r1, #4
 8008b7c:	0628      	lsls	r0, r5, #24
 8008b7e:	d529      	bpl.n	8008bd4 <_printf_i+0x9c>
 8008b80:	6808      	ldr	r0, [r1, #0]
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	2800      	cmp	r0, #0
 8008b86:	da03      	bge.n	8008b90 <_printf_i+0x58>
 8008b88:	232d      	movs	r3, #45	; 0x2d
 8008b8a:	9a02      	ldr	r2, [sp, #8]
 8008b8c:	4240      	negs	r0, r0
 8008b8e:	7013      	strb	r3, [r2, #0]
 8008b90:	4e6b      	ldr	r6, [pc, #428]	; (8008d40 <_printf_i+0x208>)
 8008b92:	270a      	movs	r7, #10
 8008b94:	e04f      	b.n	8008c36 <_printf_i+0xfe>
 8008b96:	2a73      	cmp	r2, #115	; 0x73
 8008b98:	d074      	beq.n	8008c84 <_printf_i+0x14c>
 8008b9a:	d808      	bhi.n	8008bae <_printf_i+0x76>
 8008b9c:	2a6f      	cmp	r2, #111	; 0x6f
 8008b9e:	d01f      	beq.n	8008be0 <_printf_i+0xa8>
 8008ba0:	2a70      	cmp	r2, #112	; 0x70
 8008ba2:	d1e0      	bne.n	8008b66 <_printf_i+0x2e>
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	6809      	ldr	r1, [r1, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	e003      	b.n	8008bb6 <_printf_i+0x7e>
 8008bae:	2a75      	cmp	r2, #117	; 0x75
 8008bb0:	d016      	beq.n	8008be0 <_printf_i+0xa8>
 8008bb2:	2a78      	cmp	r2, #120	; 0x78
 8008bb4:	d1d7      	bne.n	8008b66 <_printf_i+0x2e>
 8008bb6:	0022      	movs	r2, r4
 8008bb8:	2178      	movs	r1, #120	; 0x78
 8008bba:	3245      	adds	r2, #69	; 0x45
 8008bbc:	7011      	strb	r1, [r2, #0]
 8008bbe:	4e61      	ldr	r6, [pc, #388]	; (8008d44 <_printf_i+0x20c>)
 8008bc0:	e022      	b.n	8008c08 <_printf_i+0xd0>
 8008bc2:	0025      	movs	r5, r4
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	3542      	adds	r5, #66	; 0x42
 8008bc8:	1d11      	adds	r1, r2, #4
 8008bca:	6019      	str	r1, [r3, #0]
 8008bcc:	6813      	ldr	r3, [r2, #0]
 8008bce:	702b      	strb	r3, [r5, #0]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e065      	b.n	8008ca0 <_printf_i+0x168>
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	0669      	lsls	r1, r5, #25
 8008bda:	d5d3      	bpl.n	8008b84 <_printf_i+0x4c>
 8008bdc:	b200      	sxth	r0, r0
 8008bde:	e7d1      	b.n	8008b84 <_printf_i+0x4c>
 8008be0:	6819      	ldr	r1, [r3, #0]
 8008be2:	6825      	ldr	r5, [r4, #0]
 8008be4:	1d08      	adds	r0, r1, #4
 8008be6:	6018      	str	r0, [r3, #0]
 8008be8:	6808      	ldr	r0, [r1, #0]
 8008bea:	062e      	lsls	r6, r5, #24
 8008bec:	d505      	bpl.n	8008bfa <_printf_i+0xc2>
 8008bee:	4e54      	ldr	r6, [pc, #336]	; (8008d40 <_printf_i+0x208>)
 8008bf0:	2708      	movs	r7, #8
 8008bf2:	2a6f      	cmp	r2, #111	; 0x6f
 8008bf4:	d01b      	beq.n	8008c2e <_printf_i+0xf6>
 8008bf6:	270a      	movs	r7, #10
 8008bf8:	e019      	b.n	8008c2e <_printf_i+0xf6>
 8008bfa:	066d      	lsls	r5, r5, #25
 8008bfc:	d5f7      	bpl.n	8008bee <_printf_i+0xb6>
 8008bfe:	b280      	uxth	r0, r0
 8008c00:	e7f5      	b.n	8008bee <_printf_i+0xb6>
 8008c02:	3145      	adds	r1, #69	; 0x45
 8008c04:	4e4e      	ldr	r6, [pc, #312]	; (8008d40 <_printf_i+0x208>)
 8008c06:	700a      	strb	r2, [r1, #0]
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	1d01      	adds	r1, r0, #4
 8008c0e:	6800      	ldr	r0, [r0, #0]
 8008c10:	6019      	str	r1, [r3, #0]
 8008c12:	0615      	lsls	r5, r2, #24
 8008c14:	d521      	bpl.n	8008c5a <_printf_i+0x122>
 8008c16:	07d3      	lsls	r3, r2, #31
 8008c18:	d502      	bpl.n	8008c20 <_printf_i+0xe8>
 8008c1a:	2320      	movs	r3, #32
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	6022      	str	r2, [r4, #0]
 8008c20:	2710      	movs	r7, #16
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d103      	bne.n	8008c2e <_printf_i+0xf6>
 8008c26:	2320      	movs	r3, #32
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	439a      	bics	r2, r3
 8008c2c:	6022      	str	r2, [r4, #0]
 8008c2e:	0023      	movs	r3, r4
 8008c30:	2200      	movs	r2, #0
 8008c32:	3343      	adds	r3, #67	; 0x43
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	6863      	ldr	r3, [r4, #4]
 8008c38:	60a3      	str	r3, [r4, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	db58      	blt.n	8008cf0 <_printf_i+0x1b8>
 8008c3e:	2204      	movs	r2, #4
 8008c40:	6821      	ldr	r1, [r4, #0]
 8008c42:	4391      	bics	r1, r2
 8008c44:	6021      	str	r1, [r4, #0]
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d154      	bne.n	8008cf4 <_printf_i+0x1bc>
 8008c4a:	9d02      	ldr	r5, [sp, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d05a      	beq.n	8008d06 <_printf_i+0x1ce>
 8008c50:	0025      	movs	r5, r4
 8008c52:	7833      	ldrb	r3, [r6, #0]
 8008c54:	3542      	adds	r5, #66	; 0x42
 8008c56:	702b      	strb	r3, [r5, #0]
 8008c58:	e055      	b.n	8008d06 <_printf_i+0x1ce>
 8008c5a:	0655      	lsls	r5, r2, #25
 8008c5c:	d5db      	bpl.n	8008c16 <_printf_i+0xde>
 8008c5e:	b280      	uxth	r0, r0
 8008c60:	e7d9      	b.n	8008c16 <_printf_i+0xde>
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	680d      	ldr	r5, [r1, #0]
 8008c66:	1d10      	adds	r0, r2, #4
 8008c68:	6949      	ldr	r1, [r1, #20]
 8008c6a:	6018      	str	r0, [r3, #0]
 8008c6c:	6813      	ldr	r3, [r2, #0]
 8008c6e:	062e      	lsls	r6, r5, #24
 8008c70:	d501      	bpl.n	8008c76 <_printf_i+0x13e>
 8008c72:	6019      	str	r1, [r3, #0]
 8008c74:	e002      	b.n	8008c7c <_printf_i+0x144>
 8008c76:	066d      	lsls	r5, r5, #25
 8008c78:	d5fb      	bpl.n	8008c72 <_printf_i+0x13a>
 8008c7a:	8019      	strh	r1, [r3, #0]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9d02      	ldr	r5, [sp, #8]
 8008c80:	6123      	str	r3, [r4, #16]
 8008c82:	e04f      	b.n	8008d24 <_printf_i+0x1ec>
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	1d11      	adds	r1, r2, #4
 8008c88:	6019      	str	r1, [r3, #0]
 8008c8a:	6815      	ldr	r5, [r2, #0]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6862      	ldr	r2, [r4, #4]
 8008c90:	0028      	movs	r0, r5
 8008c92:	f000 fef5 	bl	8009a80 <memchr>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d001      	beq.n	8008c9e <_printf_i+0x166>
 8008c9a:	1b40      	subs	r0, r0, r5
 8008c9c:	6060      	str	r0, [r4, #4]
 8008c9e:	6863      	ldr	r3, [r4, #4]
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	9a02      	ldr	r2, [sp, #8]
 8008ca6:	7013      	strb	r3, [r2, #0]
 8008ca8:	e03c      	b.n	8008d24 <_printf_i+0x1ec>
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	002a      	movs	r2, r5
 8008cae:	9904      	ldr	r1, [sp, #16]
 8008cb0:	9803      	ldr	r0, [sp, #12]
 8008cb2:	9d05      	ldr	r5, [sp, #20]
 8008cb4:	47a8      	blx	r5
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d03e      	beq.n	8008d38 <_printf_i+0x200>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	079b      	lsls	r3, r3, #30
 8008cbe:	d415      	bmi.n	8008cec <_printf_i+0x1b4>
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	68e0      	ldr	r0, [r4, #12]
 8008cc4:	4298      	cmp	r0, r3
 8008cc6:	da39      	bge.n	8008d3c <_printf_i+0x204>
 8008cc8:	0018      	movs	r0, r3
 8008cca:	e037      	b.n	8008d3c <_printf_i+0x204>
 8008ccc:	0022      	movs	r2, r4
 8008cce:	2301      	movs	r3, #1
 8008cd0:	3219      	adds	r2, #25
 8008cd2:	9904      	ldr	r1, [sp, #16]
 8008cd4:	9803      	ldr	r0, [sp, #12]
 8008cd6:	9e05      	ldr	r6, [sp, #20]
 8008cd8:	47b0      	blx	r6
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d02c      	beq.n	8008d38 <_printf_i+0x200>
 8008cde:	3501      	adds	r5, #1
 8008ce0:	68e3      	ldr	r3, [r4, #12]
 8008ce2:	9a07      	ldr	r2, [sp, #28]
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	42ab      	cmp	r3, r5
 8008ce8:	dcf0      	bgt.n	8008ccc <_printf_i+0x194>
 8008cea:	e7e9      	b.n	8008cc0 <_printf_i+0x188>
 8008cec:	2500      	movs	r5, #0
 8008cee:	e7f7      	b.n	8008ce0 <_printf_i+0x1a8>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d0ad      	beq.n	8008c50 <_printf_i+0x118>
 8008cf4:	9d02      	ldr	r5, [sp, #8]
 8008cf6:	0039      	movs	r1, r7
 8008cf8:	f7f7 fa9e 	bl	8000238 <__aeabi_uidivmod>
 8008cfc:	5c73      	ldrb	r3, [r6, r1]
 8008cfe:	3d01      	subs	r5, #1
 8008d00:	702b      	strb	r3, [r5, #0]
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d1f7      	bne.n	8008cf6 <_printf_i+0x1be>
 8008d06:	2f08      	cmp	r7, #8
 8008d08:	d109      	bne.n	8008d1e <_printf_i+0x1e6>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	07db      	lsls	r3, r3, #31
 8008d0e:	d506      	bpl.n	8008d1e <_printf_i+0x1e6>
 8008d10:	6863      	ldr	r3, [r4, #4]
 8008d12:	6922      	ldr	r2, [r4, #16]
 8008d14:	4293      	cmp	r3, r2
 8008d16:	dc02      	bgt.n	8008d1e <_printf_i+0x1e6>
 8008d18:	2330      	movs	r3, #48	; 0x30
 8008d1a:	3d01      	subs	r5, #1
 8008d1c:	702b      	strb	r3, [r5, #0]
 8008d1e:	9b02      	ldr	r3, [sp, #8]
 8008d20:	1b5b      	subs	r3, r3, r5
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	9b05      	ldr	r3, [sp, #20]
 8008d26:	aa07      	add	r2, sp, #28
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	0021      	movs	r1, r4
 8008d2c:	9b04      	ldr	r3, [sp, #16]
 8008d2e:	9803      	ldr	r0, [sp, #12]
 8008d30:	f7ff fe94 	bl	8008a5c <_printf_common>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d1b8      	bne.n	8008caa <_printf_i+0x172>
 8008d38:	2001      	movs	r0, #1
 8008d3a:	4240      	negs	r0, r0
 8008d3c:	b009      	add	sp, #36	; 0x24
 8008d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d40:	0800c1fe 	.word	0x0800c1fe
 8008d44:	0800c20f 	.word	0x0800c20f

08008d48 <siprintf>:
 8008d48:	b40e      	push	{r1, r2, r3}
 8008d4a:	b500      	push	{lr}
 8008d4c:	490b      	ldr	r1, [pc, #44]	; (8008d7c <siprintf+0x34>)
 8008d4e:	b09c      	sub	sp, #112	; 0x70
 8008d50:	ab1d      	add	r3, sp, #116	; 0x74
 8008d52:	9002      	str	r0, [sp, #8]
 8008d54:	9006      	str	r0, [sp, #24]
 8008d56:	9107      	str	r1, [sp, #28]
 8008d58:	9104      	str	r1, [sp, #16]
 8008d5a:	4809      	ldr	r0, [pc, #36]	; (8008d80 <siprintf+0x38>)
 8008d5c:	4909      	ldr	r1, [pc, #36]	; (8008d84 <siprintf+0x3c>)
 8008d5e:	cb04      	ldmia	r3!, {r2}
 8008d60:	9105      	str	r1, [sp, #20]
 8008d62:	6800      	ldr	r0, [r0, #0]
 8008d64:	a902      	add	r1, sp, #8
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	f001 fa94 	bl	800a294 <_svfiprintf_r>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9a02      	ldr	r2, [sp, #8]
 8008d70:	7013      	strb	r3, [r2, #0]
 8008d72:	b01c      	add	sp, #112	; 0x70
 8008d74:	bc08      	pop	{r3}
 8008d76:	b003      	add	sp, #12
 8008d78:	4718      	bx	r3
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	7fffffff 	.word	0x7fffffff
 8008d80:	2000001c 	.word	0x2000001c
 8008d84:	ffff0208 	.word	0xffff0208

08008d88 <quorem>:
 8008d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d8a:	6903      	ldr	r3, [r0, #16]
 8008d8c:	690c      	ldr	r4, [r1, #16]
 8008d8e:	b089      	sub	sp, #36	; 0x24
 8008d90:	0007      	movs	r7, r0
 8008d92:	9105      	str	r1, [sp, #20]
 8008d94:	2600      	movs	r6, #0
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	db65      	blt.n	8008e66 <quorem+0xde>
 8008d9a:	000b      	movs	r3, r1
 8008d9c:	3c01      	subs	r4, #1
 8008d9e:	3314      	adds	r3, #20
 8008da0:	00a5      	lsls	r5, r4, #2
 8008da2:	9303      	str	r3, [sp, #12]
 8008da4:	195b      	adds	r3, r3, r5
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	0003      	movs	r3, r0
 8008daa:	3314      	adds	r3, #20
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	195d      	adds	r5, r3, r5
 8008db0:	9b04      	ldr	r3, [sp, #16]
 8008db2:	6828      	ldr	r0, [r5, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	1c59      	adds	r1, r3, #1
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	f7f7 f9b7 	bl	800012c <__udivsi3>
 8008dbe:	9001      	str	r0, [sp, #4]
 8008dc0:	42b0      	cmp	r0, r6
 8008dc2:	d029      	beq.n	8008e18 <quorem+0x90>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	9802      	ldr	r0, [sp, #8]
 8008dc8:	469c      	mov	ip, r3
 8008dca:	9606      	str	r6, [sp, #24]
 8008dcc:	4662      	mov	r2, ip
 8008dce:	ca08      	ldmia	r2!, {r3}
 8008dd0:	4694      	mov	ip, r2
 8008dd2:	9a01      	ldr	r2, [sp, #4]
 8008dd4:	b299      	uxth	r1, r3
 8008dd6:	4351      	muls	r1, r2
 8008dd8:	0c1b      	lsrs	r3, r3, #16
 8008dda:	4353      	muls	r3, r2
 8008ddc:	1989      	adds	r1, r1, r6
 8008dde:	0c0a      	lsrs	r2, r1, #16
 8008de0:	189b      	adds	r3, r3, r2
 8008de2:	9307      	str	r3, [sp, #28]
 8008de4:	0c1e      	lsrs	r6, r3, #16
 8008de6:	6803      	ldr	r3, [r0, #0]
 8008de8:	b289      	uxth	r1, r1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	18d2      	adds	r2, r2, r3
 8008df0:	6803      	ldr	r3, [r0, #0]
 8008df2:	1a52      	subs	r2, r2, r1
 8008df4:	0c19      	lsrs	r1, r3, #16
 8008df6:	466b      	mov	r3, sp
 8008df8:	8b9b      	ldrh	r3, [r3, #28]
 8008dfa:	1acb      	subs	r3, r1, r3
 8008dfc:	1411      	asrs	r1, r2, #16
 8008dfe:	185b      	adds	r3, r3, r1
 8008e00:	1419      	asrs	r1, r3, #16
 8008e02:	b292      	uxth	r2, r2
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	431a      	orrs	r2, r3
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	9106      	str	r1, [sp, #24]
 8008e0c:	c004      	stmia	r0!, {r2}
 8008e0e:	4563      	cmp	r3, ip
 8008e10:	d2dc      	bcs.n	8008dcc <quorem+0x44>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d02d      	beq.n	8008e74 <quorem+0xec>
 8008e18:	9905      	ldr	r1, [sp, #20]
 8008e1a:	0038      	movs	r0, r7
 8008e1c:	f001 f850 	bl	8009ec0 <__mcmp>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	db1f      	blt.n	8008e64 <quorem+0xdc>
 8008e24:	2500      	movs	r5, #0
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	9802      	ldr	r0, [sp, #8]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	9903      	ldr	r1, [sp, #12]
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	6802      	ldr	r2, [r0, #0]
 8008e32:	c908      	ldmia	r1!, {r3}
 8008e34:	b292      	uxth	r2, r2
 8008e36:	1955      	adds	r5, r2, r5
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	1aaa      	subs	r2, r5, r2
 8008e3c:	6805      	ldr	r5, [r0, #0]
 8008e3e:	0c1b      	lsrs	r3, r3, #16
 8008e40:	0c2d      	lsrs	r5, r5, #16
 8008e42:	1aeb      	subs	r3, r5, r3
 8008e44:	1415      	asrs	r5, r2, #16
 8008e46:	195b      	adds	r3, r3, r5
 8008e48:	141d      	asrs	r5, r3, #16
 8008e4a:	b292      	uxth	r2, r2
 8008e4c:	041b      	lsls	r3, r3, #16
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	c008      	stmia	r0!, {r3}
 8008e52:	9b04      	ldr	r3, [sp, #16]
 8008e54:	428b      	cmp	r3, r1
 8008e56:	d2eb      	bcs.n	8008e30 <quorem+0xa8>
 8008e58:	9a02      	ldr	r2, [sp, #8]
 8008e5a:	00a3      	lsls	r3, r4, #2
 8008e5c:	18d3      	adds	r3, r2, r3
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	d011      	beq.n	8008e88 <quorem+0x100>
 8008e64:	9e01      	ldr	r6, [sp, #4]
 8008e66:	0030      	movs	r0, r6
 8008e68:	b009      	add	sp, #36	; 0x24
 8008e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d104      	bne.n	8008e7c <quorem+0xf4>
 8008e72:	3c01      	subs	r4, #1
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	3d04      	subs	r5, #4
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	d3f7      	bcc.n	8008e6c <quorem+0xe4>
 8008e7c:	613c      	str	r4, [r7, #16]
 8008e7e:	e7cb      	b.n	8008e18 <quorem+0x90>
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d104      	bne.n	8008e90 <quorem+0x108>
 8008e86:	3c01      	subs	r4, #1
 8008e88:	9a02      	ldr	r2, [sp, #8]
 8008e8a:	3b04      	subs	r3, #4
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d3f7      	bcc.n	8008e80 <quorem+0xf8>
 8008e90:	613c      	str	r4, [r7, #16]
 8008e92:	e7e7      	b.n	8008e64 <quorem+0xdc>

08008e94 <_dtoa_r>:
 8008e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e96:	0016      	movs	r6, r2
 8008e98:	001f      	movs	r7, r3
 8008e9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e9c:	b09b      	sub	sp, #108	; 0x6c
 8008e9e:	9002      	str	r0, [sp, #8]
 8008ea0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8008ea2:	9606      	str	r6, [sp, #24]
 8008ea4:	9707      	str	r7, [sp, #28]
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	d108      	bne.n	8008ebc <_dtoa_r+0x28>
 8008eaa:	2010      	movs	r0, #16
 8008eac:	f000 fdde 	bl	8009a6c <malloc>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	6258      	str	r0, [r3, #36]	; 0x24
 8008eb4:	6044      	str	r4, [r0, #4]
 8008eb6:	6084      	str	r4, [r0, #8]
 8008eb8:	6004      	str	r4, [r0, #0]
 8008eba:	60c4      	str	r4, [r0, #12]
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	d00b      	beq.n	8008ede <_dtoa_r+0x4a>
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4093      	lsls	r3, r2
 8008ecc:	604a      	str	r2, [r1, #4]
 8008ece:	608b      	str	r3, [r1, #8]
 8008ed0:	9802      	ldr	r0, [sp, #8]
 8008ed2:	f000 fe18 	bl	8009b06 <_Bfree>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	2f00      	cmp	r7, #0
 8008ee0:	da20      	bge.n	8008f24 <_dtoa_r+0x90>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	007b      	lsls	r3, r7, #1
 8008ee8:	085b      	lsrs	r3, r3, #1
 8008eea:	9307      	str	r3, [sp, #28]
 8008eec:	9c07      	ldr	r4, [sp, #28]
 8008eee:	4bb2      	ldr	r3, [pc, #712]	; (80091b8 <_dtoa_r+0x324>)
 8008ef0:	0022      	movs	r2, r4
 8008ef2:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ef4:	401a      	ands	r2, r3
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d117      	bne.n	8008f2a <_dtoa_r+0x96>
 8008efa:	4bb0      	ldr	r3, [pc, #704]	; (80091bc <_dtoa_r+0x328>)
 8008efc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d103      	bne.n	8008f0e <_dtoa_r+0x7a>
 8008f06:	0324      	lsls	r4, r4, #12
 8008f08:	d101      	bne.n	8008f0e <_dtoa_r+0x7a>
 8008f0a:	f000 fd87 	bl	8009a1c <_dtoa_r+0xb88>
 8008f0e:	4bac      	ldr	r3, [pc, #688]	; (80091c0 <_dtoa_r+0x32c>)
 8008f10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f12:	9308      	str	r3, [sp, #32]
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	d002      	beq.n	8008f1e <_dtoa_r+0x8a>
 8008f18:	4baa      	ldr	r3, [pc, #680]	; (80091c4 <_dtoa_r+0x330>)
 8008f1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	9808      	ldr	r0, [sp, #32]
 8008f20:	b01b      	add	sp, #108	; 0x6c
 8008f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f24:	2300      	movs	r3, #0
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	e7e0      	b.n	8008eec <_dtoa_r+0x58>
 8008f2a:	9e06      	ldr	r6, [sp, #24]
 8008f2c:	9f07      	ldr	r7, [sp, #28]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2300      	movs	r3, #0
 8008f32:	0030      	movs	r0, r6
 8008f34:	0039      	movs	r1, r7
 8008f36:	f7f7 fa7f 	bl	8000438 <__aeabi_dcmpeq>
 8008f3a:	1e05      	subs	r5, r0, #0
 8008f3c:	d00b      	beq.n	8008f56 <_dtoa_r+0xc2>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	4ba0      	ldr	r3, [pc, #640]	; (80091c8 <_dtoa_r+0x334>)
 8008f46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f48:	9308      	str	r3, [sp, #32]
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	d0e7      	beq.n	8008f1e <_dtoa_r+0x8a>
 8008f4e:	4a9f      	ldr	r2, [pc, #636]	; (80091cc <_dtoa_r+0x338>)
 8008f50:	9924      	ldr	r1, [sp, #144]	; 0x90
 8008f52:	600a      	str	r2, [r1, #0]
 8008f54:	e7e3      	b.n	8008f1e <_dtoa_r+0x8a>
 8008f56:	ab18      	add	r3, sp, #96	; 0x60
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	ab19      	add	r3, sp, #100	; 0x64
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	0032      	movs	r2, r6
 8008f60:	003b      	movs	r3, r7
 8008f62:	9802      	ldr	r0, [sp, #8]
 8008f64:	f001 f82a 	bl	8009fbc <__d2b>
 8008f68:	0063      	lsls	r3, r4, #1
 8008f6a:	9003      	str	r0, [sp, #12]
 8008f6c:	0d5b      	lsrs	r3, r3, #21
 8008f6e:	d074      	beq.n	800905a <_dtoa_r+0x1c6>
 8008f70:	033a      	lsls	r2, r7, #12
 8008f72:	4c97      	ldr	r4, [pc, #604]	; (80091d0 <_dtoa_r+0x33c>)
 8008f74:	0b12      	lsrs	r2, r2, #12
 8008f76:	4314      	orrs	r4, r2
 8008f78:	0021      	movs	r1, r4
 8008f7a:	4a96      	ldr	r2, [pc, #600]	; (80091d4 <_dtoa_r+0x340>)
 8008f7c:	0030      	movs	r0, r6
 8008f7e:	9516      	str	r5, [sp, #88]	; 0x58
 8008f80:	189e      	adds	r6, r3, r2
 8008f82:	2200      	movs	r2, #0
 8008f84:	4b94      	ldr	r3, [pc, #592]	; (80091d8 <_dtoa_r+0x344>)
 8008f86:	f7f9 fae1 	bl	800254c <__aeabi_dsub>
 8008f8a:	4a94      	ldr	r2, [pc, #592]	; (80091dc <_dtoa_r+0x348>)
 8008f8c:	4b94      	ldr	r3, [pc, #592]	; (80091e0 <_dtoa_r+0x34c>)
 8008f8e:	f7f9 f86b 	bl	8002068 <__aeabi_dmul>
 8008f92:	4a94      	ldr	r2, [pc, #592]	; (80091e4 <_dtoa_r+0x350>)
 8008f94:	4b94      	ldr	r3, [pc, #592]	; (80091e8 <_dtoa_r+0x354>)
 8008f96:	f7f8 f941 	bl	800121c <__aeabi_dadd>
 8008f9a:	0004      	movs	r4, r0
 8008f9c:	0030      	movs	r0, r6
 8008f9e:	000d      	movs	r5, r1
 8008fa0:	f7f9 fe6e 	bl	8002c80 <__aeabi_i2d>
 8008fa4:	4a91      	ldr	r2, [pc, #580]	; (80091ec <_dtoa_r+0x358>)
 8008fa6:	4b92      	ldr	r3, [pc, #584]	; (80091f0 <_dtoa_r+0x35c>)
 8008fa8:	f7f9 f85e 	bl	8002068 <__aeabi_dmul>
 8008fac:	0002      	movs	r2, r0
 8008fae:	000b      	movs	r3, r1
 8008fb0:	0020      	movs	r0, r4
 8008fb2:	0029      	movs	r1, r5
 8008fb4:	f7f8 f932 	bl	800121c <__aeabi_dadd>
 8008fb8:	0004      	movs	r4, r0
 8008fba:	000d      	movs	r5, r1
 8008fbc:	f7f9 fe2a 	bl	8002c14 <__aeabi_d2iz>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	0007      	movs	r7, r0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	0020      	movs	r0, r4
 8008fc8:	0029      	movs	r1, r5
 8008fca:	f7f7 fa3b 	bl	8000444 <__aeabi_dcmplt>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d009      	beq.n	8008fe6 <_dtoa_r+0x152>
 8008fd2:	0038      	movs	r0, r7
 8008fd4:	f7f9 fe54 	bl	8002c80 <__aeabi_i2d>
 8008fd8:	002b      	movs	r3, r5
 8008fda:	0022      	movs	r2, r4
 8008fdc:	f7f7 fa2c 	bl	8000438 <__aeabi_dcmpeq>
 8008fe0:	4243      	negs	r3, r0
 8008fe2:	4158      	adcs	r0, r3
 8008fe4:	1a3f      	subs	r7, r7, r0
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	9314      	str	r3, [sp, #80]	; 0x50
 8008fea:	2f16      	cmp	r7, #22
 8008fec:	d80d      	bhi.n	800900a <_dtoa_r+0x176>
 8008fee:	4981      	ldr	r1, [pc, #516]	; (80091f4 <_dtoa_r+0x360>)
 8008ff0:	00fb      	lsls	r3, r7, #3
 8008ff2:	18c9      	adds	r1, r1, r3
 8008ff4:	6808      	ldr	r0, [r1, #0]
 8008ff6:	6849      	ldr	r1, [r1, #4]
 8008ff8:	9a06      	ldr	r2, [sp, #24]
 8008ffa:	9b07      	ldr	r3, [sp, #28]
 8008ffc:	f7f7 fa36 	bl	800046c <__aeabi_dcmpgt>
 8009000:	2800      	cmp	r0, #0
 8009002:	d046      	beq.n	8009092 <_dtoa_r+0x1fe>
 8009004:	2300      	movs	r3, #0
 8009006:	3f01      	subs	r7, #1
 8009008:	9314      	str	r3, [sp, #80]	; 0x50
 800900a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800900c:	1b9e      	subs	r6, r3, r6
 800900e:	2300      	movs	r3, #0
 8009010:	930a      	str	r3, [sp, #40]	; 0x28
 8009012:	0033      	movs	r3, r6
 8009014:	3b01      	subs	r3, #1
 8009016:	930b      	str	r3, [sp, #44]	; 0x2c
 8009018:	d504      	bpl.n	8009024 <_dtoa_r+0x190>
 800901a:	2301      	movs	r3, #1
 800901c:	1b9b      	subs	r3, r3, r6
 800901e:	930a      	str	r3, [sp, #40]	; 0x28
 8009020:	2300      	movs	r3, #0
 8009022:	930b      	str	r3, [sp, #44]	; 0x2c
 8009024:	2f00      	cmp	r7, #0
 8009026:	db36      	blt.n	8009096 <_dtoa_r+0x202>
 8009028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800902a:	9711      	str	r7, [sp, #68]	; 0x44
 800902c:	19db      	adds	r3, r3, r7
 800902e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009030:	2300      	movs	r3, #0
 8009032:	9304      	str	r3, [sp, #16]
 8009034:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009036:	2401      	movs	r4, #1
 8009038:	2b09      	cmp	r3, #9
 800903a:	d900      	bls.n	800903e <_dtoa_r+0x1aa>
 800903c:	e084      	b.n	8009148 <_dtoa_r+0x2b4>
 800903e:	2b05      	cmp	r3, #5
 8009040:	dd02      	ble.n	8009048 <_dtoa_r+0x1b4>
 8009042:	2400      	movs	r4, #0
 8009044:	3b04      	subs	r3, #4
 8009046:	9320      	str	r3, [sp, #128]	; 0x80
 8009048:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800904a:	1e98      	subs	r0, r3, #2
 800904c:	2803      	cmp	r0, #3
 800904e:	d900      	bls.n	8009052 <_dtoa_r+0x1be>
 8009050:	e084      	b.n	800915c <_dtoa_r+0x2c8>
 8009052:	f7f7 f861 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009056:	7775      	.short	0x7775
 8009058:	6a28      	.short	0x6a28
 800905a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800905c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800905e:	189e      	adds	r6, r3, r2
 8009060:	4b65      	ldr	r3, [pc, #404]	; (80091f8 <_dtoa_r+0x364>)
 8009062:	18f2      	adds	r2, r6, r3
 8009064:	2a20      	cmp	r2, #32
 8009066:	dd0f      	ble.n	8009088 <_dtoa_r+0x1f4>
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	409c      	lsls	r4, r3
 800906e:	4b63      	ldr	r3, [pc, #396]	; (80091fc <_dtoa_r+0x368>)
 8009070:	9806      	ldr	r0, [sp, #24]
 8009072:	18f3      	adds	r3, r6, r3
 8009074:	40d8      	lsrs	r0, r3
 8009076:	4320      	orrs	r0, r4
 8009078:	f7f9 fe3c 	bl	8002cf4 <__aeabi_ui2d>
 800907c:	2301      	movs	r3, #1
 800907e:	4c60      	ldr	r4, [pc, #384]	; (8009200 <_dtoa_r+0x36c>)
 8009080:	3e01      	subs	r6, #1
 8009082:	1909      	adds	r1, r1, r4
 8009084:	9316      	str	r3, [sp, #88]	; 0x58
 8009086:	e77c      	b.n	8008f82 <_dtoa_r+0xee>
 8009088:	2320      	movs	r3, #32
 800908a:	9806      	ldr	r0, [sp, #24]
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	4098      	lsls	r0, r3
 8009090:	e7f2      	b.n	8009078 <_dtoa_r+0x1e4>
 8009092:	9014      	str	r0, [sp, #80]	; 0x50
 8009094:	e7b9      	b.n	800900a <_dtoa_r+0x176>
 8009096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009098:	1bdb      	subs	r3, r3, r7
 800909a:	930a      	str	r3, [sp, #40]	; 0x28
 800909c:	427b      	negs	r3, r7
 800909e:	9304      	str	r3, [sp, #16]
 80090a0:	2300      	movs	r3, #0
 80090a2:	9311      	str	r3, [sp, #68]	; 0x44
 80090a4:	e7c6      	b.n	8009034 <_dtoa_r+0x1a0>
 80090a6:	2301      	movs	r3, #1
 80090a8:	930d      	str	r3, [sp, #52]	; 0x34
 80090aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd59      	ble.n	8009164 <_dtoa_r+0x2d0>
 80090b0:	930c      	str	r3, [sp, #48]	; 0x30
 80090b2:	9309      	str	r3, [sp, #36]	; 0x24
 80090b4:	9a02      	ldr	r2, [sp, #8]
 80090b6:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80090b8:	2200      	movs	r2, #0
 80090ba:	606a      	str	r2, [r5, #4]
 80090bc:	3204      	adds	r2, #4
 80090be:	0010      	movs	r0, r2
 80090c0:	3014      	adds	r0, #20
 80090c2:	6869      	ldr	r1, [r5, #4]
 80090c4:	4298      	cmp	r0, r3
 80090c6:	d952      	bls.n	800916e <_dtoa_r+0x2da>
 80090c8:	9802      	ldr	r0, [sp, #8]
 80090ca:	f000 fce4 	bl	8009a96 <_Balloc>
 80090ce:	9b02      	ldr	r3, [sp, #8]
 80090d0:	6028      	str	r0, [r5, #0]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	9308      	str	r3, [sp, #32]
 80090d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090da:	2b0e      	cmp	r3, #14
 80090dc:	d900      	bls.n	80090e0 <_dtoa_r+0x24c>
 80090de:	e10a      	b.n	80092f6 <_dtoa_r+0x462>
 80090e0:	2c00      	cmp	r4, #0
 80090e2:	d100      	bne.n	80090e6 <_dtoa_r+0x252>
 80090e4:	e107      	b.n	80092f6 <_dtoa_r+0x462>
 80090e6:	9b06      	ldr	r3, [sp, #24]
 80090e8:	9c07      	ldr	r4, [sp, #28]
 80090ea:	9312      	str	r3, [sp, #72]	; 0x48
 80090ec:	9413      	str	r4, [sp, #76]	; 0x4c
 80090ee:	2f00      	cmp	r7, #0
 80090f0:	dc00      	bgt.n	80090f4 <_dtoa_r+0x260>
 80090f2:	e089      	b.n	8009208 <_dtoa_r+0x374>
 80090f4:	210f      	movs	r1, #15
 80090f6:	003a      	movs	r2, r7
 80090f8:	4b3e      	ldr	r3, [pc, #248]	; (80091f4 <_dtoa_r+0x360>)
 80090fa:	400a      	ands	r2, r1
 80090fc:	00d2      	lsls	r2, r2, #3
 80090fe:	189b      	adds	r3, r3, r2
 8009100:	681d      	ldr	r5, [r3, #0]
 8009102:	685e      	ldr	r6, [r3, #4]
 8009104:	2302      	movs	r3, #2
 8009106:	113c      	asrs	r4, r7, #4
 8009108:	930e      	str	r3, [sp, #56]	; 0x38
 800910a:	06e3      	lsls	r3, r4, #27
 800910c:	d50b      	bpl.n	8009126 <_dtoa_r+0x292>
 800910e:	4b3d      	ldr	r3, [pc, #244]	; (8009204 <_dtoa_r+0x370>)
 8009110:	400c      	ands	r4, r1
 8009112:	6a1a      	ldr	r2, [r3, #32]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009118:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800911a:	f7f8 fb9b 	bl	8001854 <__aeabi_ddiv>
 800911e:	2303      	movs	r3, #3
 8009120:	9006      	str	r0, [sp, #24]
 8009122:	9107      	str	r1, [sp, #28]
 8009124:	930e      	str	r3, [sp, #56]	; 0x38
 8009126:	2300      	movs	r3, #0
 8009128:	e03a      	b.n	80091a0 <_dtoa_r+0x30c>
 800912a:	2301      	movs	r3, #1
 800912c:	930d      	str	r3, [sp, #52]	; 0x34
 800912e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009130:	18fb      	adds	r3, r7, r3
 8009132:	930c      	str	r3, [sp, #48]	; 0x30
 8009134:	3301      	adds	r3, #1
 8009136:	9309      	str	r3, [sp, #36]	; 0x24
 8009138:	2b00      	cmp	r3, #0
 800913a:	dcbb      	bgt.n	80090b4 <_dtoa_r+0x220>
 800913c:	2301      	movs	r3, #1
 800913e:	e7b9      	b.n	80090b4 <_dtoa_r+0x220>
 8009140:	2300      	movs	r3, #0
 8009142:	e7b1      	b.n	80090a8 <_dtoa_r+0x214>
 8009144:	2300      	movs	r3, #0
 8009146:	e7f1      	b.n	800912c <_dtoa_r+0x298>
 8009148:	2300      	movs	r3, #0
 800914a:	940d      	str	r4, [sp, #52]	; 0x34
 800914c:	9320      	str	r3, [sp, #128]	; 0x80
 800914e:	3b01      	subs	r3, #1
 8009150:	2200      	movs	r2, #0
 8009152:	930c      	str	r3, [sp, #48]	; 0x30
 8009154:	9309      	str	r3, [sp, #36]	; 0x24
 8009156:	3313      	adds	r3, #19
 8009158:	9221      	str	r2, [sp, #132]	; 0x84
 800915a:	e7ab      	b.n	80090b4 <_dtoa_r+0x220>
 800915c:	2301      	movs	r3, #1
 800915e:	930d      	str	r3, [sp, #52]	; 0x34
 8009160:	3b02      	subs	r3, #2
 8009162:	e7f5      	b.n	8009150 <_dtoa_r+0x2bc>
 8009164:	2301      	movs	r3, #1
 8009166:	930c      	str	r3, [sp, #48]	; 0x30
 8009168:	9309      	str	r3, [sp, #36]	; 0x24
 800916a:	001a      	movs	r2, r3
 800916c:	e7f4      	b.n	8009158 <_dtoa_r+0x2c4>
 800916e:	3101      	adds	r1, #1
 8009170:	6069      	str	r1, [r5, #4]
 8009172:	0052      	lsls	r2, r2, #1
 8009174:	e7a3      	b.n	80090be <_dtoa_r+0x22a>
 8009176:	2301      	movs	r3, #1
 8009178:	421c      	tst	r4, r3
 800917a:	d00e      	beq.n	800919a <_dtoa_r+0x306>
 800917c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800917e:	4a21      	ldr	r2, [pc, #132]	; (8009204 <_dtoa_r+0x370>)
 8009180:	3301      	adds	r3, #1
 8009182:	930e      	str	r3, [sp, #56]	; 0x38
 8009184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009186:	0028      	movs	r0, r5
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	189b      	adds	r3, r3, r2
 800918c:	0031      	movs	r1, r6
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f7f8 ff69 	bl	8002068 <__aeabi_dmul>
 8009196:	0005      	movs	r5, r0
 8009198:	000e      	movs	r6, r1
 800919a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800919c:	1064      	asrs	r4, r4, #1
 800919e:	3301      	adds	r3, #1
 80091a0:	9310      	str	r3, [sp, #64]	; 0x40
 80091a2:	2c00      	cmp	r4, #0
 80091a4:	d1e7      	bne.n	8009176 <_dtoa_r+0x2e2>
 80091a6:	9806      	ldr	r0, [sp, #24]
 80091a8:	9907      	ldr	r1, [sp, #28]
 80091aa:	002a      	movs	r2, r5
 80091ac:	0033      	movs	r3, r6
 80091ae:	f7f8 fb51 	bl	8001854 <__aeabi_ddiv>
 80091b2:	9006      	str	r0, [sp, #24]
 80091b4:	9107      	str	r1, [sp, #28]
 80091b6:	e042      	b.n	800923e <_dtoa_r+0x3aa>
 80091b8:	7ff00000 	.word	0x7ff00000
 80091bc:	0000270f 	.word	0x0000270f
 80091c0:	0800c229 	.word	0x0800c229
 80091c4:	0800c22c 	.word	0x0800c22c
 80091c8:	0800c1fc 	.word	0x0800c1fc
 80091cc:	0800c1fd 	.word	0x0800c1fd
 80091d0:	3ff00000 	.word	0x3ff00000
 80091d4:	fffffc01 	.word	0xfffffc01
 80091d8:	3ff80000 	.word	0x3ff80000
 80091dc:	636f4361 	.word	0x636f4361
 80091e0:	3fd287a7 	.word	0x3fd287a7
 80091e4:	8b60c8b3 	.word	0x8b60c8b3
 80091e8:	3fc68a28 	.word	0x3fc68a28
 80091ec:	509f79fb 	.word	0x509f79fb
 80091f0:	3fd34413 	.word	0x3fd34413
 80091f4:	0800c258 	.word	0x0800c258
 80091f8:	00000432 	.word	0x00000432
 80091fc:	00000412 	.word	0x00000412
 8009200:	fe100000 	.word	0xfe100000
 8009204:	0800c230 	.word	0x0800c230
 8009208:	2302      	movs	r3, #2
 800920a:	930e      	str	r3, [sp, #56]	; 0x38
 800920c:	2f00      	cmp	r7, #0
 800920e:	d016      	beq.n	800923e <_dtoa_r+0x3aa>
 8009210:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009212:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009214:	427c      	negs	r4, r7
 8009216:	330d      	adds	r3, #13
 8009218:	4023      	ands	r3, r4
 800921a:	4ace      	ldr	r2, [pc, #824]	; (8009554 <_dtoa_r+0x6c0>)
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	18d3      	adds	r3, r2, r3
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f7f8 ff20 	bl	8002068 <__aeabi_dmul>
 8009228:	2300      	movs	r3, #0
 800922a:	2601      	movs	r6, #1
 800922c:	001d      	movs	r5, r3
 800922e:	9006      	str	r0, [sp, #24]
 8009230:	9107      	str	r1, [sp, #28]
 8009232:	1124      	asrs	r4, r4, #4
 8009234:	2c00      	cmp	r4, #0
 8009236:	d000      	beq.n	800923a <_dtoa_r+0x3a6>
 8009238:	e08c      	b.n	8009354 <_dtoa_r+0x4c0>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1b9      	bne.n	80091b2 <_dtoa_r+0x31e>
 800923e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009240:	2b00      	cmp	r3, #0
 8009242:	d100      	bne.n	8009246 <_dtoa_r+0x3b2>
 8009244:	e096      	b.n	8009374 <_dtoa_r+0x4e0>
 8009246:	9c06      	ldr	r4, [sp, #24]
 8009248:	9d07      	ldr	r5, [sp, #28]
 800924a:	2200      	movs	r2, #0
 800924c:	4bc2      	ldr	r3, [pc, #776]	; (8009558 <_dtoa_r+0x6c4>)
 800924e:	0020      	movs	r0, r4
 8009250:	0029      	movs	r1, r5
 8009252:	f7f7 f8f7 	bl	8000444 <__aeabi_dcmplt>
 8009256:	2800      	cmp	r0, #0
 8009258:	d100      	bne.n	800925c <_dtoa_r+0x3c8>
 800925a:	e08b      	b.n	8009374 <_dtoa_r+0x4e0>
 800925c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d100      	bne.n	8009264 <_dtoa_r+0x3d0>
 8009262:	e087      	b.n	8009374 <_dtoa_r+0x4e0>
 8009264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009266:	2b00      	cmp	r3, #0
 8009268:	dd41      	ble.n	80092ee <_dtoa_r+0x45a>
 800926a:	4bbc      	ldr	r3, [pc, #752]	; (800955c <_dtoa_r+0x6c8>)
 800926c:	2200      	movs	r2, #0
 800926e:	0020      	movs	r0, r4
 8009270:	0029      	movs	r1, r5
 8009272:	f7f8 fef9 	bl	8002068 <__aeabi_dmul>
 8009276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009278:	9006      	str	r0, [sp, #24]
 800927a:	9107      	str	r1, [sp, #28]
 800927c:	3301      	adds	r3, #1
 800927e:	930e      	str	r3, [sp, #56]	; 0x38
 8009280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009282:	1e7e      	subs	r6, r7, #1
 8009284:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009286:	9310      	str	r3, [sp, #64]	; 0x40
 8009288:	f7f9 fcfa 	bl	8002c80 <__aeabi_i2d>
 800928c:	9a06      	ldr	r2, [sp, #24]
 800928e:	9b07      	ldr	r3, [sp, #28]
 8009290:	f7f8 feea 	bl	8002068 <__aeabi_dmul>
 8009294:	2200      	movs	r2, #0
 8009296:	4bb2      	ldr	r3, [pc, #712]	; (8009560 <_dtoa_r+0x6cc>)
 8009298:	f7f7 ffc0 	bl	800121c <__aeabi_dadd>
 800929c:	4ab1      	ldr	r2, [pc, #708]	; (8009564 <_dtoa_r+0x6d0>)
 800929e:	900e      	str	r0, [sp, #56]	; 0x38
 80092a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80092a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80092a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092a6:	4694      	mov	ip, r2
 80092a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092aa:	4463      	add	r3, ip
 80092ac:	9315      	str	r3, [sp, #84]	; 0x54
 80092ae:	001d      	movs	r5, r3
 80092b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d161      	bne.n	800937a <_dtoa_r+0x4e6>
 80092b6:	9806      	ldr	r0, [sp, #24]
 80092b8:	9907      	ldr	r1, [sp, #28]
 80092ba:	2200      	movs	r2, #0
 80092bc:	4baa      	ldr	r3, [pc, #680]	; (8009568 <_dtoa_r+0x6d4>)
 80092be:	f7f9 f945 	bl	800254c <__aeabi_dsub>
 80092c2:	0022      	movs	r2, r4
 80092c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092c6:	9006      	str	r0, [sp, #24]
 80092c8:	9107      	str	r1, [sp, #28]
 80092ca:	f7f7 f8cf 	bl	800046c <__aeabi_dcmpgt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d000      	beq.n	80092d4 <_dtoa_r+0x440>
 80092d2:	e2a8      	b.n	8009826 <_dtoa_r+0x992>
 80092d4:	48a5      	ldr	r0, [pc, #660]	; (800956c <_dtoa_r+0x6d8>)
 80092d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092d8:	4684      	mov	ip, r0
 80092da:	4461      	add	r1, ip
 80092dc:	000b      	movs	r3, r1
 80092de:	9806      	ldr	r0, [sp, #24]
 80092e0:	9907      	ldr	r1, [sp, #28]
 80092e2:	0022      	movs	r2, r4
 80092e4:	f7f7 f8ae 	bl	8000444 <__aeabi_dcmplt>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d000      	beq.n	80092ee <_dtoa_r+0x45a>
 80092ec:	e295      	b.n	800981a <_dtoa_r+0x986>
 80092ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80092f2:	9306      	str	r3, [sp, #24]
 80092f4:	9407      	str	r4, [sp, #28]
 80092f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	da00      	bge.n	80092fe <_dtoa_r+0x46a>
 80092fc:	e15c      	b.n	80095b8 <_dtoa_r+0x724>
 80092fe:	2f0e      	cmp	r7, #14
 8009300:	dd00      	ble.n	8009304 <_dtoa_r+0x470>
 8009302:	e159      	b.n	80095b8 <_dtoa_r+0x724>
 8009304:	4b93      	ldr	r3, [pc, #588]	; (8009554 <_dtoa_r+0x6c0>)
 8009306:	00fa      	lsls	r2, r7, #3
 8009308:	189b      	adds	r3, r3, r2
 800930a:	685c      	ldr	r4, [r3, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	9405      	str	r4, [sp, #20]
 8009312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009314:	2b00      	cmp	r3, #0
 8009316:	db00      	blt.n	800931a <_dtoa_r+0x486>
 8009318:	e0d8      	b.n	80094cc <_dtoa_r+0x638>
 800931a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931c:	2b00      	cmp	r3, #0
 800931e:	dd00      	ble.n	8009322 <_dtoa_r+0x48e>
 8009320:	e0d4      	b.n	80094cc <_dtoa_r+0x638>
 8009322:	d000      	beq.n	8009326 <_dtoa_r+0x492>
 8009324:	e27d      	b.n	8009822 <_dtoa_r+0x98e>
 8009326:	9804      	ldr	r0, [sp, #16]
 8009328:	9905      	ldr	r1, [sp, #20]
 800932a:	2200      	movs	r2, #0
 800932c:	4b8e      	ldr	r3, [pc, #568]	; (8009568 <_dtoa_r+0x6d4>)
 800932e:	f7f8 fe9b 	bl	8002068 <__aeabi_dmul>
 8009332:	9a06      	ldr	r2, [sp, #24]
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	f7f7 f8a3 	bl	8000480 <__aeabi_dcmpge>
 800933a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	001e      	movs	r6, r3
 8009340:	2800      	cmp	r0, #0
 8009342:	d000      	beq.n	8009346 <_dtoa_r+0x4b2>
 8009344:	e24f      	b.n	80097e6 <_dtoa_r+0x952>
 8009346:	9b08      	ldr	r3, [sp, #32]
 8009348:	9a08      	ldr	r2, [sp, #32]
 800934a:	1c5d      	adds	r5, r3, #1
 800934c:	2331      	movs	r3, #49	; 0x31
 800934e:	3701      	adds	r7, #1
 8009350:	7013      	strb	r3, [r2, #0]
 8009352:	e24b      	b.n	80097ec <_dtoa_r+0x958>
 8009354:	4234      	tst	r4, r6
 8009356:	d00a      	beq.n	800936e <_dtoa_r+0x4da>
 8009358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800935a:	4a85      	ldr	r2, [pc, #532]	; (8009570 <_dtoa_r+0x6dc>)
 800935c:	3301      	adds	r3, #1
 800935e:	930e      	str	r3, [sp, #56]	; 0x38
 8009360:	00eb      	lsls	r3, r5, #3
 8009362:	189b      	adds	r3, r3, r2
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f7f8 fe7e 	bl	8002068 <__aeabi_dmul>
 800936c:	0033      	movs	r3, r6
 800936e:	1064      	asrs	r4, r4, #1
 8009370:	3501      	adds	r5, #1
 8009372:	e75f      	b.n	8009234 <_dtoa_r+0x3a0>
 8009374:	003e      	movs	r6, r7
 8009376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009378:	e784      	b.n	8009284 <_dtoa_r+0x3f0>
 800937a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800937c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800937e:	1e5a      	subs	r2, r3, #1
 8009380:	4b74      	ldr	r3, [pc, #464]	; (8009554 <_dtoa_r+0x6c0>)
 8009382:	00d2      	lsls	r2, r2, #3
 8009384:	189b      	adds	r3, r3, r2
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2900      	cmp	r1, #0
 800938c:	d049      	beq.n	8009422 <_dtoa_r+0x58e>
 800938e:	2000      	movs	r0, #0
 8009390:	4978      	ldr	r1, [pc, #480]	; (8009574 <_dtoa_r+0x6e0>)
 8009392:	f7f8 fa5f 	bl	8001854 <__aeabi_ddiv>
 8009396:	002b      	movs	r3, r5
 8009398:	0022      	movs	r2, r4
 800939a:	f7f9 f8d7 	bl	800254c <__aeabi_dsub>
 800939e:	9b08      	ldr	r3, [sp, #32]
 80093a0:	900e      	str	r0, [sp, #56]	; 0x38
 80093a2:	910f      	str	r1, [sp, #60]	; 0x3c
 80093a4:	9315      	str	r3, [sp, #84]	; 0x54
 80093a6:	9806      	ldr	r0, [sp, #24]
 80093a8:	9907      	ldr	r1, [sp, #28]
 80093aa:	f7f9 fc33 	bl	8002c14 <__aeabi_d2iz>
 80093ae:	0004      	movs	r4, r0
 80093b0:	f7f9 fc66 	bl	8002c80 <__aeabi_i2d>
 80093b4:	0002      	movs	r2, r0
 80093b6:	000b      	movs	r3, r1
 80093b8:	9806      	ldr	r0, [sp, #24]
 80093ba:	9907      	ldr	r1, [sp, #28]
 80093bc:	f7f9 f8c6 	bl	800254c <__aeabi_dsub>
 80093c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093c2:	3430      	adds	r4, #48	; 0x30
 80093c4:	1c5d      	adds	r5, r3, #1
 80093c6:	701c      	strb	r4, [r3, #0]
 80093c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093cc:	9006      	str	r0, [sp, #24]
 80093ce:	9107      	str	r1, [sp, #28]
 80093d0:	f7f7 f838 	bl	8000444 <__aeabi_dcmplt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d16c      	bne.n	80094b2 <_dtoa_r+0x61e>
 80093d8:	9a06      	ldr	r2, [sp, #24]
 80093da:	9b07      	ldr	r3, [sp, #28]
 80093dc:	2000      	movs	r0, #0
 80093de:	495e      	ldr	r1, [pc, #376]	; (8009558 <_dtoa_r+0x6c4>)
 80093e0:	f7f9 f8b4 	bl	800254c <__aeabi_dsub>
 80093e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093e8:	f7f7 f82c 	bl	8000444 <__aeabi_dcmplt>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d000      	beq.n	80093f2 <_dtoa_r+0x55e>
 80093f0:	e0c3      	b.n	800957a <_dtoa_r+0x6e6>
 80093f2:	9b08      	ldr	r3, [sp, #32]
 80093f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093f6:	1aeb      	subs	r3, r5, r3
 80093f8:	429a      	cmp	r2, r3
 80093fa:	dc00      	bgt.n	80093fe <_dtoa_r+0x56a>
 80093fc:	e777      	b.n	80092ee <_dtoa_r+0x45a>
 80093fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009400:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009402:	2200      	movs	r2, #0
 8009404:	4b55      	ldr	r3, [pc, #340]	; (800955c <_dtoa_r+0x6c8>)
 8009406:	f7f8 fe2f 	bl	8002068 <__aeabi_dmul>
 800940a:	2200      	movs	r2, #0
 800940c:	900e      	str	r0, [sp, #56]	; 0x38
 800940e:	910f      	str	r1, [sp, #60]	; 0x3c
 8009410:	9806      	ldr	r0, [sp, #24]
 8009412:	9907      	ldr	r1, [sp, #28]
 8009414:	4b51      	ldr	r3, [pc, #324]	; (800955c <_dtoa_r+0x6c8>)
 8009416:	f7f8 fe27 	bl	8002068 <__aeabi_dmul>
 800941a:	9515      	str	r5, [sp, #84]	; 0x54
 800941c:	9006      	str	r0, [sp, #24]
 800941e:	9107      	str	r1, [sp, #28]
 8009420:	e7c1      	b.n	80093a6 <_dtoa_r+0x512>
 8009422:	0020      	movs	r0, r4
 8009424:	0029      	movs	r1, r5
 8009426:	f7f8 fe1f 	bl	8002068 <__aeabi_dmul>
 800942a:	9c08      	ldr	r4, [sp, #32]
 800942c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800942e:	0023      	movs	r3, r4
 8009430:	4694      	mov	ip, r2
 8009432:	900e      	str	r0, [sp, #56]	; 0x38
 8009434:	910f      	str	r1, [sp, #60]	; 0x3c
 8009436:	4463      	add	r3, ip
 8009438:	9315      	str	r3, [sp, #84]	; 0x54
 800943a:	9806      	ldr	r0, [sp, #24]
 800943c:	9907      	ldr	r1, [sp, #28]
 800943e:	f7f9 fbe9 	bl	8002c14 <__aeabi_d2iz>
 8009442:	0005      	movs	r5, r0
 8009444:	f7f9 fc1c 	bl	8002c80 <__aeabi_i2d>
 8009448:	000b      	movs	r3, r1
 800944a:	0002      	movs	r2, r0
 800944c:	9806      	ldr	r0, [sp, #24]
 800944e:	9907      	ldr	r1, [sp, #28]
 8009450:	f7f9 f87c 	bl	800254c <__aeabi_dsub>
 8009454:	3530      	adds	r5, #48	; 0x30
 8009456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009458:	7025      	strb	r5, [r4, #0]
 800945a:	3401      	adds	r4, #1
 800945c:	9006      	str	r0, [sp, #24]
 800945e:	9107      	str	r1, [sp, #28]
 8009460:	42a3      	cmp	r3, r4
 8009462:	d12a      	bne.n	80094ba <_dtoa_r+0x626>
 8009464:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009466:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009468:	9a08      	ldr	r2, [sp, #32]
 800946a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800946c:	4694      	mov	ip, r2
 800946e:	4463      	add	r3, ip
 8009470:	2200      	movs	r2, #0
 8009472:	001d      	movs	r5, r3
 8009474:	4b3f      	ldr	r3, [pc, #252]	; (8009574 <_dtoa_r+0x6e0>)
 8009476:	f7f7 fed1 	bl	800121c <__aeabi_dadd>
 800947a:	0002      	movs	r2, r0
 800947c:	000b      	movs	r3, r1
 800947e:	9806      	ldr	r0, [sp, #24]
 8009480:	9907      	ldr	r1, [sp, #28]
 8009482:	f7f6 fff3 	bl	800046c <__aeabi_dcmpgt>
 8009486:	2800      	cmp	r0, #0
 8009488:	d000      	beq.n	800948c <_dtoa_r+0x5f8>
 800948a:	e076      	b.n	800957a <_dtoa_r+0x6e6>
 800948c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800948e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009490:	2000      	movs	r0, #0
 8009492:	4938      	ldr	r1, [pc, #224]	; (8009574 <_dtoa_r+0x6e0>)
 8009494:	f7f9 f85a 	bl	800254c <__aeabi_dsub>
 8009498:	0002      	movs	r2, r0
 800949a:	000b      	movs	r3, r1
 800949c:	9806      	ldr	r0, [sp, #24]
 800949e:	9907      	ldr	r1, [sp, #28]
 80094a0:	f7f6 ffd0 	bl	8000444 <__aeabi_dcmplt>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d100      	bne.n	80094aa <_dtoa_r+0x616>
 80094a8:	e721      	b.n	80092ee <_dtoa_r+0x45a>
 80094aa:	1e6b      	subs	r3, r5, #1
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	2a30      	cmp	r2, #48	; 0x30
 80094b0:	d001      	beq.n	80094b6 <_dtoa_r+0x622>
 80094b2:	0037      	movs	r7, r6
 80094b4:	e03f      	b.n	8009536 <_dtoa_r+0x6a2>
 80094b6:	001d      	movs	r5, r3
 80094b8:	e7f7      	b.n	80094aa <_dtoa_r+0x616>
 80094ba:	9806      	ldr	r0, [sp, #24]
 80094bc:	9907      	ldr	r1, [sp, #28]
 80094be:	2200      	movs	r2, #0
 80094c0:	4b26      	ldr	r3, [pc, #152]	; (800955c <_dtoa_r+0x6c8>)
 80094c2:	f7f8 fdd1 	bl	8002068 <__aeabi_dmul>
 80094c6:	9006      	str	r0, [sp, #24]
 80094c8:	9107      	str	r1, [sp, #28]
 80094ca:	e7b6      	b.n	800943a <_dtoa_r+0x5a6>
 80094cc:	9e08      	ldr	r6, [sp, #32]
 80094ce:	9a04      	ldr	r2, [sp, #16]
 80094d0:	9b05      	ldr	r3, [sp, #20]
 80094d2:	9806      	ldr	r0, [sp, #24]
 80094d4:	9907      	ldr	r1, [sp, #28]
 80094d6:	f7f8 f9bd 	bl	8001854 <__aeabi_ddiv>
 80094da:	f7f9 fb9b 	bl	8002c14 <__aeabi_d2iz>
 80094de:	0004      	movs	r4, r0
 80094e0:	f7f9 fbce 	bl	8002c80 <__aeabi_i2d>
 80094e4:	9a04      	ldr	r2, [sp, #16]
 80094e6:	9b05      	ldr	r3, [sp, #20]
 80094e8:	f7f8 fdbe 	bl	8002068 <__aeabi_dmul>
 80094ec:	0002      	movs	r2, r0
 80094ee:	000b      	movs	r3, r1
 80094f0:	9806      	ldr	r0, [sp, #24]
 80094f2:	9907      	ldr	r1, [sp, #28]
 80094f4:	f7f9 f82a 	bl	800254c <__aeabi_dsub>
 80094f8:	0023      	movs	r3, r4
 80094fa:	3330      	adds	r3, #48	; 0x30
 80094fc:	7033      	strb	r3, [r6, #0]
 80094fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009500:	9b08      	ldr	r3, [sp, #32]
 8009502:	1c75      	adds	r5, r6, #1
 8009504:	1aeb      	subs	r3, r5, r3
 8009506:	429a      	cmp	r2, r3
 8009508:	d148      	bne.n	800959c <_dtoa_r+0x708>
 800950a:	0002      	movs	r2, r0
 800950c:	000b      	movs	r3, r1
 800950e:	f7f7 fe85 	bl	800121c <__aeabi_dadd>
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	9b05      	ldr	r3, [sp, #20]
 8009516:	9006      	str	r0, [sp, #24]
 8009518:	9107      	str	r1, [sp, #28]
 800951a:	f7f6 ffa7 	bl	800046c <__aeabi_dcmpgt>
 800951e:	2800      	cmp	r0, #0
 8009520:	d12a      	bne.n	8009578 <_dtoa_r+0x6e4>
 8009522:	9a04      	ldr	r2, [sp, #16]
 8009524:	9b05      	ldr	r3, [sp, #20]
 8009526:	9806      	ldr	r0, [sp, #24]
 8009528:	9907      	ldr	r1, [sp, #28]
 800952a:	f7f6 ff85 	bl	8000438 <__aeabi_dcmpeq>
 800952e:	2800      	cmp	r0, #0
 8009530:	d001      	beq.n	8009536 <_dtoa_r+0x6a2>
 8009532:	07e3      	lsls	r3, r4, #31
 8009534:	d420      	bmi.n	8009578 <_dtoa_r+0x6e4>
 8009536:	9903      	ldr	r1, [sp, #12]
 8009538:	9802      	ldr	r0, [sp, #8]
 800953a:	f000 fae4 	bl	8009b06 <_Bfree>
 800953e:	2300      	movs	r3, #0
 8009540:	702b      	strb	r3, [r5, #0]
 8009542:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009544:	3701      	adds	r7, #1
 8009546:	601f      	str	r7, [r3, #0]
 8009548:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800954a:	2b00      	cmp	r3, #0
 800954c:	d100      	bne.n	8009550 <_dtoa_r+0x6bc>
 800954e:	e4e6      	b.n	8008f1e <_dtoa_r+0x8a>
 8009550:	601d      	str	r5, [r3, #0]
 8009552:	e4e4      	b.n	8008f1e <_dtoa_r+0x8a>
 8009554:	0800c258 	.word	0x0800c258
 8009558:	3ff00000 	.word	0x3ff00000
 800955c:	40240000 	.word	0x40240000
 8009560:	401c0000 	.word	0x401c0000
 8009564:	fcc00000 	.word	0xfcc00000
 8009568:	40140000 	.word	0x40140000
 800956c:	7cc00000 	.word	0x7cc00000
 8009570:	0800c230 	.word	0x0800c230
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	003e      	movs	r6, r7
 800957a:	1e6b      	subs	r3, r5, #1
 800957c:	781a      	ldrb	r2, [r3, #0]
 800957e:	2a39      	cmp	r2, #57	; 0x39
 8009580:	d106      	bne.n	8009590 <_dtoa_r+0x6fc>
 8009582:	9a08      	ldr	r2, [sp, #32]
 8009584:	429a      	cmp	r2, r3
 8009586:	d107      	bne.n	8009598 <_dtoa_r+0x704>
 8009588:	2330      	movs	r3, #48	; 0x30
 800958a:	7013      	strb	r3, [r2, #0]
 800958c:	0013      	movs	r3, r2
 800958e:	3601      	adds	r6, #1
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	3201      	adds	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e78c      	b.n	80094b2 <_dtoa_r+0x61e>
 8009598:	001d      	movs	r5, r3
 800959a:	e7ee      	b.n	800957a <_dtoa_r+0x6e6>
 800959c:	2200      	movs	r2, #0
 800959e:	4ba4      	ldr	r3, [pc, #656]	; (8009830 <_dtoa_r+0x99c>)
 80095a0:	f7f8 fd62 	bl	8002068 <__aeabi_dmul>
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	9006      	str	r0, [sp, #24]
 80095aa:	9107      	str	r1, [sp, #28]
 80095ac:	002e      	movs	r6, r5
 80095ae:	f7f6 ff43 	bl	8000438 <__aeabi_dcmpeq>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d08b      	beq.n	80094ce <_dtoa_r+0x63a>
 80095b6:	e7be      	b.n	8009536 <_dtoa_r+0x6a2>
 80095b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	d100      	bne.n	80095c0 <_dtoa_r+0x72c>
 80095be:	e0da      	b.n	8009776 <_dtoa_r+0x8e2>
 80095c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80095c2:	2a01      	cmp	r2, #1
 80095c4:	dd00      	ble.n	80095c8 <_dtoa_r+0x734>
 80095c6:	e0bd      	b.n	8009744 <_dtoa_r+0x8b0>
 80095c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	d100      	bne.n	80095d0 <_dtoa_r+0x73c>
 80095ce:	e0b5      	b.n	800973c <_dtoa_r+0x8a8>
 80095d0:	4a98      	ldr	r2, [pc, #608]	; (8009834 <_dtoa_r+0x9a0>)
 80095d2:	189b      	adds	r3, r3, r2
 80095d4:	9d04      	ldr	r5, [sp, #16]
 80095d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095da:	2101      	movs	r1, #1
 80095dc:	18d2      	adds	r2, r2, r3
 80095de:	920a      	str	r2, [sp, #40]	; 0x28
 80095e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095e2:	9802      	ldr	r0, [sp, #8]
 80095e4:	18d3      	adds	r3, r2, r3
 80095e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e8:	f000 fb2d 	bl	8009c46 <__i2b>
 80095ec:	0006      	movs	r6, r0
 80095ee:	2c00      	cmp	r4, #0
 80095f0:	dd0e      	ble.n	8009610 <_dtoa_r+0x77c>
 80095f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dd0b      	ble.n	8009610 <_dtoa_r+0x77c>
 80095f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095fa:	0023      	movs	r3, r4
 80095fc:	4294      	cmp	r4, r2
 80095fe:	dd00      	ble.n	8009602 <_dtoa_r+0x76e>
 8009600:	0013      	movs	r3, r2
 8009602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009604:	1ae4      	subs	r4, r4, r3
 8009606:	1ad2      	subs	r2, r2, r3
 8009608:	920a      	str	r2, [sp, #40]	; 0x28
 800960a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009610:	9b04      	ldr	r3, [sp, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01f      	beq.n	8009656 <_dtoa_r+0x7c2>
 8009616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009618:	2b00      	cmp	r3, #0
 800961a:	d100      	bne.n	800961e <_dtoa_r+0x78a>
 800961c:	e0af      	b.n	800977e <_dtoa_r+0x8ea>
 800961e:	2d00      	cmp	r5, #0
 8009620:	d011      	beq.n	8009646 <_dtoa_r+0x7b2>
 8009622:	0031      	movs	r1, r6
 8009624:	002a      	movs	r2, r5
 8009626:	9802      	ldr	r0, [sp, #8]
 8009628:	f000 fba6 	bl	8009d78 <__pow5mult>
 800962c:	9a03      	ldr	r2, [sp, #12]
 800962e:	0001      	movs	r1, r0
 8009630:	0006      	movs	r6, r0
 8009632:	9802      	ldr	r0, [sp, #8]
 8009634:	f000 fb10 	bl	8009c58 <__multiply>
 8009638:	9903      	ldr	r1, [sp, #12]
 800963a:	9010      	str	r0, [sp, #64]	; 0x40
 800963c:	9802      	ldr	r0, [sp, #8]
 800963e:	f000 fa62 	bl	8009b06 <_Bfree>
 8009642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009644:	9303      	str	r3, [sp, #12]
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	1b5a      	subs	r2, r3, r5
 800964a:	d004      	beq.n	8009656 <_dtoa_r+0x7c2>
 800964c:	9903      	ldr	r1, [sp, #12]
 800964e:	9802      	ldr	r0, [sp, #8]
 8009650:	f000 fb92 	bl	8009d78 <__pow5mult>
 8009654:	9003      	str	r0, [sp, #12]
 8009656:	2101      	movs	r1, #1
 8009658:	9802      	ldr	r0, [sp, #8]
 800965a:	f000 faf4 	bl	8009c46 <__i2b>
 800965e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009660:	9004      	str	r0, [sp, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d100      	bne.n	8009668 <_dtoa_r+0x7d4>
 8009666:	e1e3      	b.n	8009a30 <_dtoa_r+0xb9c>
 8009668:	001a      	movs	r2, r3
 800966a:	0001      	movs	r1, r0
 800966c:	9802      	ldr	r0, [sp, #8]
 800966e:	f000 fb83 	bl	8009d78 <__pow5mult>
 8009672:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009674:	9004      	str	r0, [sp, #16]
 8009676:	2b01      	cmp	r3, #1
 8009678:	dd00      	ble.n	800967c <_dtoa_r+0x7e8>
 800967a:	e082      	b.n	8009782 <_dtoa_r+0x8ee>
 800967c:	2500      	movs	r5, #0
 800967e:	9b06      	ldr	r3, [sp, #24]
 8009680:	42ab      	cmp	r3, r5
 8009682:	d10e      	bne.n	80096a2 <_dtoa_r+0x80e>
 8009684:	9b07      	ldr	r3, [sp, #28]
 8009686:	031b      	lsls	r3, r3, #12
 8009688:	42ab      	cmp	r3, r5
 800968a:	d10a      	bne.n	80096a2 <_dtoa_r+0x80e>
 800968c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800968e:	9a07      	ldr	r2, [sp, #28]
 8009690:	4213      	tst	r3, r2
 8009692:	d006      	beq.n	80096a2 <_dtoa_r+0x80e>
 8009694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009696:	3501      	adds	r5, #1
 8009698:	3301      	adds	r3, #1
 800969a:	930a      	str	r3, [sp, #40]	; 0x28
 800969c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969e:	3301      	adds	r3, #1
 80096a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80096a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096a4:	2001      	movs	r0, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d16c      	bne.n	8009784 <_dtoa_r+0x8f0>
 80096aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ac:	1818      	adds	r0, r3, r0
 80096ae:	231f      	movs	r3, #31
 80096b0:	4018      	ands	r0, r3
 80096b2:	d07e      	beq.n	80097b2 <_dtoa_r+0x91e>
 80096b4:	3301      	adds	r3, #1
 80096b6:	1a1b      	subs	r3, r3, r0
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	dd70      	ble.n	800979e <_dtoa_r+0x90a>
 80096bc:	231c      	movs	r3, #28
 80096be:	1a18      	subs	r0, r3, r0
 80096c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c2:	1824      	adds	r4, r4, r0
 80096c4:	181b      	adds	r3, r3, r0
 80096c6:	930a      	str	r3, [sp, #40]	; 0x28
 80096c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ca:	181b      	adds	r3, r3, r0
 80096cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dd05      	ble.n	80096e0 <_dtoa_r+0x84c>
 80096d4:	001a      	movs	r2, r3
 80096d6:	9903      	ldr	r1, [sp, #12]
 80096d8:	9802      	ldr	r0, [sp, #8]
 80096da:	f000 fb9f 	bl	8009e1c <__lshift>
 80096de:	9003      	str	r0, [sp, #12]
 80096e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	dd05      	ble.n	80096f2 <_dtoa_r+0x85e>
 80096e6:	001a      	movs	r2, r3
 80096e8:	9904      	ldr	r1, [sp, #16]
 80096ea:	9802      	ldr	r0, [sp, #8]
 80096ec:	f000 fb96 	bl	8009e1c <__lshift>
 80096f0:	9004      	str	r0, [sp, #16]
 80096f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d05e      	beq.n	80097b6 <_dtoa_r+0x922>
 80096f8:	9904      	ldr	r1, [sp, #16]
 80096fa:	9803      	ldr	r0, [sp, #12]
 80096fc:	f000 fbe0 	bl	8009ec0 <__mcmp>
 8009700:	2800      	cmp	r0, #0
 8009702:	da58      	bge.n	80097b6 <_dtoa_r+0x922>
 8009704:	2300      	movs	r3, #0
 8009706:	220a      	movs	r2, #10
 8009708:	9903      	ldr	r1, [sp, #12]
 800970a:	9802      	ldr	r0, [sp, #8]
 800970c:	f000 fa14 	bl	8009b38 <__multadd>
 8009710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009712:	3f01      	subs	r7, #1
 8009714:	9003      	str	r0, [sp, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d100      	bne.n	800971c <_dtoa_r+0x888>
 800971a:	e190      	b.n	8009a3e <_dtoa_r+0xbaa>
 800971c:	2300      	movs	r3, #0
 800971e:	0031      	movs	r1, r6
 8009720:	220a      	movs	r2, #10
 8009722:	9802      	ldr	r0, [sp, #8]
 8009724:	f000 fa08 	bl	8009b38 <__multadd>
 8009728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800972a:	0006      	movs	r6, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	dd00      	ble.n	8009732 <_dtoa_r+0x89e>
 8009730:	e088      	b.n	8009844 <_dtoa_r+0x9b0>
 8009732:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009734:	2b02      	cmp	r3, #2
 8009736:	dc00      	bgt.n	800973a <_dtoa_r+0x8a6>
 8009738:	e084      	b.n	8009844 <_dtoa_r+0x9b0>
 800973a:	e044      	b.n	80097c6 <_dtoa_r+0x932>
 800973c:	2336      	movs	r3, #54	; 0x36
 800973e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	e747      	b.n	80095d4 <_dtoa_r+0x740>
 8009744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009746:	1e5d      	subs	r5, r3, #1
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	42ab      	cmp	r3, r5
 800974c:	db08      	blt.n	8009760 <_dtoa_r+0x8cc>
 800974e:	1b5d      	subs	r5, r3, r5
 8009750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009752:	2b00      	cmp	r3, #0
 8009754:	da0c      	bge.n	8009770 <_dtoa_r+0x8dc>
 8009756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800975a:	1a9c      	subs	r4, r3, r2
 800975c:	2300      	movs	r3, #0
 800975e:	e73b      	b.n	80095d8 <_dtoa_r+0x744>
 8009760:	9b04      	ldr	r3, [sp, #16]
 8009762:	9504      	str	r5, [sp, #16]
 8009764:	1aea      	subs	r2, r5, r3
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	2500      	movs	r5, #0
 800976a:	189b      	adds	r3, r3, r2
 800976c:	9311      	str	r3, [sp, #68]	; 0x44
 800976e:	e7ef      	b.n	8009750 <_dtoa_r+0x8bc>
 8009770:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	e730      	b.n	80095d8 <_dtoa_r+0x744>
 8009776:	9d04      	ldr	r5, [sp, #16]
 8009778:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800977a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800977c:	e737      	b.n	80095ee <_dtoa_r+0x75a>
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	e764      	b.n	800964c <_dtoa_r+0x7b8>
 8009782:	2500      	movs	r5, #0
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	9a04      	ldr	r2, [sp, #16]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	9310      	str	r3, [sp, #64]	; 0x40
 800978c:	3303      	adds	r3, #3
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	18d3      	adds	r3, r2, r3
 8009792:	6858      	ldr	r0, [r3, #4]
 8009794:	f000 fa0e 	bl	8009bb4 <__hi0bits>
 8009798:	2320      	movs	r3, #32
 800979a:	1a18      	subs	r0, r3, r0
 800979c:	e785      	b.n	80096aa <_dtoa_r+0x816>
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d095      	beq.n	80096ce <_dtoa_r+0x83a>
 80097a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097a4:	331c      	adds	r3, #28
 80097a6:	18d2      	adds	r2, r2, r3
 80097a8:	920a      	str	r2, [sp, #40]	; 0x28
 80097aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097ac:	18e4      	adds	r4, r4, r3
 80097ae:	18d3      	adds	r3, r2, r3
 80097b0:	e78c      	b.n	80096cc <_dtoa_r+0x838>
 80097b2:	0003      	movs	r3, r0
 80097b4:	e7f5      	b.n	80097a2 <_dtoa_r+0x90e>
 80097b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dc3d      	bgt.n	8009838 <_dtoa_r+0x9a4>
 80097bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80097be:	2b02      	cmp	r3, #2
 80097c0:	dd3a      	ble.n	8009838 <_dtoa_r+0x9a4>
 80097c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c4:	930c      	str	r3, [sp, #48]	; 0x30
 80097c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10c      	bne.n	80097e6 <_dtoa_r+0x952>
 80097cc:	9904      	ldr	r1, [sp, #16]
 80097ce:	2205      	movs	r2, #5
 80097d0:	9802      	ldr	r0, [sp, #8]
 80097d2:	f000 f9b1 	bl	8009b38 <__multadd>
 80097d6:	9004      	str	r0, [sp, #16]
 80097d8:	0001      	movs	r1, r0
 80097da:	9803      	ldr	r0, [sp, #12]
 80097dc:	f000 fb70 	bl	8009ec0 <__mcmp>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	dd00      	ble.n	80097e6 <_dtoa_r+0x952>
 80097e4:	e5af      	b.n	8009346 <_dtoa_r+0x4b2>
 80097e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097e8:	9d08      	ldr	r5, [sp, #32]
 80097ea:	43df      	mvns	r7, r3
 80097ec:	2300      	movs	r3, #0
 80097ee:	9309      	str	r3, [sp, #36]	; 0x24
 80097f0:	9904      	ldr	r1, [sp, #16]
 80097f2:	9802      	ldr	r0, [sp, #8]
 80097f4:	f000 f987 	bl	8009b06 <_Bfree>
 80097f8:	2e00      	cmp	r6, #0
 80097fa:	d100      	bne.n	80097fe <_dtoa_r+0x96a>
 80097fc:	e69b      	b.n	8009536 <_dtoa_r+0x6a2>
 80097fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <_dtoa_r+0x97c>
 8009804:	42b3      	cmp	r3, r6
 8009806:	d003      	beq.n	8009810 <_dtoa_r+0x97c>
 8009808:	0019      	movs	r1, r3
 800980a:	9802      	ldr	r0, [sp, #8]
 800980c:	f000 f97b 	bl	8009b06 <_Bfree>
 8009810:	0031      	movs	r1, r6
 8009812:	9802      	ldr	r0, [sp, #8]
 8009814:	f000 f977 	bl	8009b06 <_Bfree>
 8009818:	e68d      	b.n	8009536 <_dtoa_r+0x6a2>
 800981a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	001e      	movs	r6, r3
 8009820:	e7e1      	b.n	80097e6 <_dtoa_r+0x952>
 8009822:	2300      	movs	r3, #0
 8009824:	e7fa      	b.n	800981c <_dtoa_r+0x988>
 8009826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009828:	0037      	movs	r7, r6
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	001e      	movs	r6, r3
 800982e:	e58a      	b.n	8009346 <_dtoa_r+0x4b2>
 8009830:	40240000 	.word	0x40240000
 8009834:	00000433 	.word	0x00000433
 8009838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800983a:	2b00      	cmp	r3, #0
 800983c:	d100      	bne.n	8009840 <_dtoa_r+0x9ac>
 800983e:	e0b2      	b.n	80099a6 <_dtoa_r+0xb12>
 8009840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009842:	930c      	str	r3, [sp, #48]	; 0x30
 8009844:	2c00      	cmp	r4, #0
 8009846:	dd05      	ble.n	8009854 <_dtoa_r+0x9c0>
 8009848:	0031      	movs	r1, r6
 800984a:	0022      	movs	r2, r4
 800984c:	9802      	ldr	r0, [sp, #8]
 800984e:	f000 fae5 	bl	8009e1c <__lshift>
 8009852:	0006      	movs	r6, r0
 8009854:	0030      	movs	r0, r6
 8009856:	2d00      	cmp	r5, #0
 8009858:	d011      	beq.n	800987e <_dtoa_r+0x9ea>
 800985a:	6871      	ldr	r1, [r6, #4]
 800985c:	9802      	ldr	r0, [sp, #8]
 800985e:	f000 f91a 	bl	8009a96 <_Balloc>
 8009862:	0031      	movs	r1, r6
 8009864:	0004      	movs	r4, r0
 8009866:	6933      	ldr	r3, [r6, #16]
 8009868:	310c      	adds	r1, #12
 800986a:	1c9a      	adds	r2, r3, #2
 800986c:	0092      	lsls	r2, r2, #2
 800986e:	300c      	adds	r0, #12
 8009870:	f7fe fde8 	bl	8008444 <memcpy>
 8009874:	2201      	movs	r2, #1
 8009876:	0021      	movs	r1, r4
 8009878:	9802      	ldr	r0, [sp, #8]
 800987a:	f000 facf 	bl	8009e1c <__lshift>
 800987e:	9609      	str	r6, [sp, #36]	; 0x24
 8009880:	0006      	movs	r6, r0
 8009882:	9b08      	ldr	r3, [sp, #32]
 8009884:	930a      	str	r3, [sp, #40]	; 0x28
 8009886:	9904      	ldr	r1, [sp, #16]
 8009888:	9803      	ldr	r0, [sp, #12]
 800988a:	f7ff fa7d 	bl	8008d88 <quorem>
 800988e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009890:	900d      	str	r0, [sp, #52]	; 0x34
 8009892:	0004      	movs	r4, r0
 8009894:	9803      	ldr	r0, [sp, #12]
 8009896:	f000 fb13 	bl	8009ec0 <__mcmp>
 800989a:	0032      	movs	r2, r6
 800989c:	9010      	str	r0, [sp, #64]	; 0x40
 800989e:	9904      	ldr	r1, [sp, #16]
 80098a0:	9802      	ldr	r0, [sp, #8]
 80098a2:	f000 fb27 	bl	8009ef4 <__mdiff>
 80098a6:	2301      	movs	r3, #1
 80098a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098aa:	68c3      	ldr	r3, [r0, #12]
 80098ac:	3430      	adds	r4, #48	; 0x30
 80098ae:	0005      	movs	r5, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d104      	bne.n	80098be <_dtoa_r+0xa2a>
 80098b4:	0001      	movs	r1, r0
 80098b6:	9803      	ldr	r0, [sp, #12]
 80098b8:	f000 fb02 	bl	8009ec0 <__mcmp>
 80098bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80098be:	0029      	movs	r1, r5
 80098c0:	9802      	ldr	r0, [sp, #8]
 80098c2:	f000 f920 	bl	8009b06 <_Bfree>
 80098c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80098ca:	4313      	orrs	r3, r2
 80098cc:	d10e      	bne.n	80098ec <_dtoa_r+0xa58>
 80098ce:	9a06      	ldr	r2, [sp, #24]
 80098d0:	3301      	adds	r3, #1
 80098d2:	4213      	tst	r3, r2
 80098d4:	d10a      	bne.n	80098ec <_dtoa_r+0xa58>
 80098d6:	2c39      	cmp	r4, #57	; 0x39
 80098d8:	d026      	beq.n	8009928 <_dtoa_r+0xa94>
 80098da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dd01      	ble.n	80098e4 <_dtoa_r+0xa50>
 80098e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80098e2:	3431      	adds	r4, #49	; 0x31
 80098e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e6:	1c5d      	adds	r5, r3, #1
 80098e8:	701c      	strb	r4, [r3, #0]
 80098ea:	e781      	b.n	80097f0 <_dtoa_r+0x95c>
 80098ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	db07      	blt.n	8009902 <_dtoa_r+0xa6e>
 80098f2:	001d      	movs	r5, r3
 80098f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098f6:	431d      	orrs	r5, r3
 80098f8:	d122      	bne.n	8009940 <_dtoa_r+0xaac>
 80098fa:	2301      	movs	r3, #1
 80098fc:	9a06      	ldr	r2, [sp, #24]
 80098fe:	4213      	tst	r3, r2
 8009900:	d11e      	bne.n	8009940 <_dtoa_r+0xaac>
 8009902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009904:	2b00      	cmp	r3, #0
 8009906:	dded      	ble.n	80098e4 <_dtoa_r+0xa50>
 8009908:	9903      	ldr	r1, [sp, #12]
 800990a:	2201      	movs	r2, #1
 800990c:	9802      	ldr	r0, [sp, #8]
 800990e:	f000 fa85 	bl	8009e1c <__lshift>
 8009912:	9904      	ldr	r1, [sp, #16]
 8009914:	9003      	str	r0, [sp, #12]
 8009916:	f000 fad3 	bl	8009ec0 <__mcmp>
 800991a:	2800      	cmp	r0, #0
 800991c:	dc02      	bgt.n	8009924 <_dtoa_r+0xa90>
 800991e:	d1e1      	bne.n	80098e4 <_dtoa_r+0xa50>
 8009920:	07e3      	lsls	r3, r4, #31
 8009922:	d5df      	bpl.n	80098e4 <_dtoa_r+0xa50>
 8009924:	2c39      	cmp	r4, #57	; 0x39
 8009926:	d1db      	bne.n	80098e0 <_dtoa_r+0xa4c>
 8009928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800992c:	1c5d      	adds	r5, r3, #1
 800992e:	2339      	movs	r3, #57	; 0x39
 8009930:	7013      	strb	r3, [r2, #0]
 8009932:	1e6b      	subs	r3, r5, #1
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	2a39      	cmp	r2, #57	; 0x39
 8009938:	d067      	beq.n	8009a0a <_dtoa_r+0xb76>
 800993a:	3201      	adds	r2, #1
 800993c:	701a      	strb	r2, [r3, #0]
 800993e:	e757      	b.n	80097f0 <_dtoa_r+0x95c>
 8009940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009942:	1c5d      	adds	r5, r3, #1
 8009944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd04      	ble.n	8009954 <_dtoa_r+0xac0>
 800994a:	2c39      	cmp	r4, #57	; 0x39
 800994c:	d0ec      	beq.n	8009928 <_dtoa_r+0xa94>
 800994e:	3401      	adds	r4, #1
 8009950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009952:	e7c9      	b.n	80098e8 <_dtoa_r+0xa54>
 8009954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009958:	701c      	strb	r4, [r3, #0]
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	1aeb      	subs	r3, r5, r3
 800995e:	4293      	cmp	r3, r2
 8009960:	d03e      	beq.n	80099e0 <_dtoa_r+0xb4c>
 8009962:	2300      	movs	r3, #0
 8009964:	220a      	movs	r2, #10
 8009966:	9903      	ldr	r1, [sp, #12]
 8009968:	9802      	ldr	r0, [sp, #8]
 800996a:	f000 f8e5 	bl	8009b38 <__multadd>
 800996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009970:	9003      	str	r0, [sp, #12]
 8009972:	42b3      	cmp	r3, r6
 8009974:	d109      	bne.n	800998a <_dtoa_r+0xaf6>
 8009976:	2300      	movs	r3, #0
 8009978:	220a      	movs	r2, #10
 800997a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800997c:	9802      	ldr	r0, [sp, #8]
 800997e:	f000 f8db 	bl	8009b38 <__multadd>
 8009982:	9009      	str	r0, [sp, #36]	; 0x24
 8009984:	0006      	movs	r6, r0
 8009986:	950a      	str	r5, [sp, #40]	; 0x28
 8009988:	e77d      	b.n	8009886 <_dtoa_r+0x9f2>
 800998a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800998c:	2300      	movs	r3, #0
 800998e:	220a      	movs	r2, #10
 8009990:	9802      	ldr	r0, [sp, #8]
 8009992:	f000 f8d1 	bl	8009b38 <__multadd>
 8009996:	2300      	movs	r3, #0
 8009998:	9009      	str	r0, [sp, #36]	; 0x24
 800999a:	220a      	movs	r2, #10
 800999c:	0031      	movs	r1, r6
 800999e:	9802      	ldr	r0, [sp, #8]
 80099a0:	f000 f8ca 	bl	8009b38 <__multadd>
 80099a4:	e7ee      	b.n	8009984 <_dtoa_r+0xaf0>
 80099a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a8:	930c      	str	r3, [sp, #48]	; 0x30
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	9306      	str	r3, [sp, #24]
 80099ae:	9904      	ldr	r1, [sp, #16]
 80099b0:	9803      	ldr	r0, [sp, #12]
 80099b2:	f7ff f9e9 	bl	8008d88 <quorem>
 80099b6:	9b06      	ldr	r3, [sp, #24]
 80099b8:	3030      	adds	r0, #48	; 0x30
 80099ba:	1c5d      	adds	r5, r3, #1
 80099bc:	7018      	strb	r0, [r3, #0]
 80099be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099c0:	9b08      	ldr	r3, [sp, #32]
 80099c2:	0004      	movs	r4, r0
 80099c4:	1aeb      	subs	r3, r5, r3
 80099c6:	429a      	cmp	r2, r3
 80099c8:	dd08      	ble.n	80099dc <_dtoa_r+0xb48>
 80099ca:	2300      	movs	r3, #0
 80099cc:	220a      	movs	r2, #10
 80099ce:	9903      	ldr	r1, [sp, #12]
 80099d0:	9802      	ldr	r0, [sp, #8]
 80099d2:	f000 f8b1 	bl	8009b38 <__multadd>
 80099d6:	9506      	str	r5, [sp, #24]
 80099d8:	9003      	str	r0, [sp, #12]
 80099da:	e7e8      	b.n	80099ae <_dtoa_r+0xb1a>
 80099dc:	2300      	movs	r3, #0
 80099de:	9309      	str	r3, [sp, #36]	; 0x24
 80099e0:	9903      	ldr	r1, [sp, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	9802      	ldr	r0, [sp, #8]
 80099e6:	f000 fa19 	bl	8009e1c <__lshift>
 80099ea:	9904      	ldr	r1, [sp, #16]
 80099ec:	9003      	str	r0, [sp, #12]
 80099ee:	f000 fa67 	bl	8009ec0 <__mcmp>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	dc9d      	bgt.n	8009932 <_dtoa_r+0xa9e>
 80099f6:	d101      	bne.n	80099fc <_dtoa_r+0xb68>
 80099f8:	07e3      	lsls	r3, r4, #31
 80099fa:	d49a      	bmi.n	8009932 <_dtoa_r+0xa9e>
 80099fc:	1e6b      	subs	r3, r5, #1
 80099fe:	781a      	ldrb	r2, [r3, #0]
 8009a00:	2a30      	cmp	r2, #48	; 0x30
 8009a02:	d000      	beq.n	8009a06 <_dtoa_r+0xb72>
 8009a04:	e6f4      	b.n	80097f0 <_dtoa_r+0x95c>
 8009a06:	001d      	movs	r5, r3
 8009a08:	e7f8      	b.n	80099fc <_dtoa_r+0xb68>
 8009a0a:	9a08      	ldr	r2, [sp, #32]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d103      	bne.n	8009a18 <_dtoa_r+0xb84>
 8009a10:	2331      	movs	r3, #49	; 0x31
 8009a12:	3701      	adds	r7, #1
 8009a14:	7013      	strb	r3, [r2, #0]
 8009a16:	e6eb      	b.n	80097f0 <_dtoa_r+0x95c>
 8009a18:	001d      	movs	r5, r3
 8009a1a:	e78a      	b.n	8009932 <_dtoa_r+0xa9e>
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <_dtoa_r+0xbb8>)
 8009a1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a20:	9308      	str	r3, [sp, #32]
 8009a22:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <_dtoa_r+0xbbc>)
 8009a24:	2a00      	cmp	r2, #0
 8009a26:	d001      	beq.n	8009a2c <_dtoa_r+0xb98>
 8009a28:	f7ff fa77 	bl	8008f1a <_dtoa_r+0x86>
 8009a2c:	f7ff fa77 	bl	8008f1e <_dtoa_r+0x8a>
 8009a30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	dc00      	bgt.n	8009a38 <_dtoa_r+0xba4>
 8009a36:	e621      	b.n	800967c <_dtoa_r+0x7e8>
 8009a38:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	e635      	b.n	80096aa <_dtoa_r+0x816>
 8009a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	dcb2      	bgt.n	80099aa <_dtoa_r+0xb16>
 8009a44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	ddaf      	ble.n	80099aa <_dtoa_r+0xb16>
 8009a4a:	e6bc      	b.n	80097c6 <_dtoa_r+0x932>
 8009a4c:	0800c220 	.word	0x0800c220
 8009a50:	0800c228 	.word	0x0800c228

08009a54 <_localeconv_r>:
 8009a54:	4b03      	ldr	r3, [pc, #12]	; (8009a64 <_localeconv_r+0x10>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6a18      	ldr	r0, [r3, #32]
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d100      	bne.n	8009a60 <_localeconv_r+0xc>
 8009a5e:	4802      	ldr	r0, [pc, #8]	; (8009a68 <_localeconv_r+0x14>)
 8009a60:	30f0      	adds	r0, #240	; 0xf0
 8009a62:	4770      	bx	lr
 8009a64:	2000001c 	.word	0x2000001c
 8009a68:	20000080 	.word	0x20000080

08009a6c <malloc>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <malloc+0x10>)
 8009a70:	0001      	movs	r1, r0
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	f000 fb4e 	bl	800a114 <_malloc_r>
 8009a78:	bd10      	pop	{r4, pc}
 8009a7a:	46c0      	nop			; (mov r8, r8)
 8009a7c:	2000001c 	.word	0x2000001c

08009a80 <memchr>:
 8009a80:	b2c9      	uxtb	r1, r1
 8009a82:	1882      	adds	r2, r0, r2
 8009a84:	4290      	cmp	r0, r2
 8009a86:	d101      	bne.n	8009a8c <memchr+0xc>
 8009a88:	2000      	movs	r0, #0
 8009a8a:	4770      	bx	lr
 8009a8c:	7803      	ldrb	r3, [r0, #0]
 8009a8e:	428b      	cmp	r3, r1
 8009a90:	d0fb      	beq.n	8009a8a <memchr+0xa>
 8009a92:	3001      	adds	r0, #1
 8009a94:	e7f6      	b.n	8009a84 <memchr+0x4>

08009a96 <_Balloc>:
 8009a96:	b570      	push	{r4, r5, r6, lr}
 8009a98:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a9a:	0004      	movs	r4, r0
 8009a9c:	000d      	movs	r5, r1
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	d107      	bne.n	8009ab2 <_Balloc+0x1c>
 8009aa2:	2010      	movs	r0, #16
 8009aa4:	f7ff ffe2 	bl	8009a6c <malloc>
 8009aa8:	6260      	str	r0, [r4, #36]	; 0x24
 8009aaa:	6046      	str	r6, [r0, #4]
 8009aac:	6086      	str	r6, [r0, #8]
 8009aae:	6006      	str	r6, [r0, #0]
 8009ab0:	60c6      	str	r6, [r0, #12]
 8009ab2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ab4:	68f3      	ldr	r3, [r6, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d013      	beq.n	8009ae2 <_Balloc+0x4c>
 8009aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009abc:	00aa      	lsls	r2, r5, #2
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	189b      	adds	r3, r3, r2
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d118      	bne.n	8009afa <_Balloc+0x64>
 8009ac8:	2101      	movs	r1, #1
 8009aca:	000e      	movs	r6, r1
 8009acc:	40ae      	lsls	r6, r5
 8009ace:	1d72      	adds	r2, r6, #5
 8009ad0:	0092      	lsls	r2, r2, #2
 8009ad2:	0020      	movs	r0, r4
 8009ad4:	f000 fac6 	bl	800a064 <_calloc_r>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d00c      	beq.n	8009af6 <_Balloc+0x60>
 8009adc:	6045      	str	r5, [r0, #4]
 8009ade:	6086      	str	r6, [r0, #8]
 8009ae0:	e00d      	b.n	8009afe <_Balloc+0x68>
 8009ae2:	2221      	movs	r2, #33	; 0x21
 8009ae4:	2104      	movs	r1, #4
 8009ae6:	0020      	movs	r0, r4
 8009ae8:	f000 fabc 	bl	800a064 <_calloc_r>
 8009aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aee:	60f0      	str	r0, [r6, #12]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e1      	bne.n	8009aba <_Balloc+0x24>
 8009af6:	2000      	movs	r0, #0
 8009af8:	bd70      	pop	{r4, r5, r6, pc}
 8009afa:	6802      	ldr	r2, [r0, #0]
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	2300      	movs	r3, #0
 8009b00:	6103      	str	r3, [r0, #16]
 8009b02:	60c3      	str	r3, [r0, #12]
 8009b04:	e7f8      	b.n	8009af8 <_Balloc+0x62>

08009b06 <_Bfree>:
 8009b06:	b570      	push	{r4, r5, r6, lr}
 8009b08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b0a:	0006      	movs	r6, r0
 8009b0c:	000d      	movs	r5, r1
 8009b0e:	2c00      	cmp	r4, #0
 8009b10:	d107      	bne.n	8009b22 <_Bfree+0x1c>
 8009b12:	2010      	movs	r0, #16
 8009b14:	f7ff ffaa 	bl	8009a6c <malloc>
 8009b18:	6270      	str	r0, [r6, #36]	; 0x24
 8009b1a:	6044      	str	r4, [r0, #4]
 8009b1c:	6084      	str	r4, [r0, #8]
 8009b1e:	6004      	str	r4, [r0, #0]
 8009b20:	60c4      	str	r4, [r0, #12]
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	d007      	beq.n	8009b36 <_Bfree+0x30>
 8009b26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b28:	686a      	ldr	r2, [r5, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	0092      	lsls	r2, r2, #2
 8009b2e:	189b      	adds	r3, r3, r2
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	602a      	str	r2, [r5, #0]
 8009b34:	601d      	str	r5, [r3, #0]
 8009b36:	bd70      	pop	{r4, r5, r6, pc}

08009b38 <__multadd>:
 8009b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b3a:	001e      	movs	r6, r3
 8009b3c:	2314      	movs	r3, #20
 8009b3e:	469c      	mov	ip, r3
 8009b40:	0007      	movs	r7, r0
 8009b42:	000c      	movs	r4, r1
 8009b44:	2000      	movs	r0, #0
 8009b46:	690d      	ldr	r5, [r1, #16]
 8009b48:	448c      	add	ip, r1
 8009b4a:	4663      	mov	r3, ip
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3001      	adds	r0, #1
 8009b50:	b299      	uxth	r1, r3
 8009b52:	4663      	mov	r3, ip
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4351      	muls	r1, r2
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	4353      	muls	r3, r2
 8009b5c:	1989      	adds	r1, r1, r6
 8009b5e:	0c0e      	lsrs	r6, r1, #16
 8009b60:	199b      	adds	r3, r3, r6
 8009b62:	b289      	uxth	r1, r1
 8009b64:	0c1e      	lsrs	r6, r3, #16
 8009b66:	041b      	lsls	r3, r3, #16
 8009b68:	185b      	adds	r3, r3, r1
 8009b6a:	4661      	mov	r1, ip
 8009b6c:	c108      	stmia	r1!, {r3}
 8009b6e:	468c      	mov	ip, r1
 8009b70:	4285      	cmp	r5, r0
 8009b72:	dcea      	bgt.n	8009b4a <__multadd+0x12>
 8009b74:	2e00      	cmp	r6, #0
 8009b76:	d01b      	beq.n	8009bb0 <__multadd+0x78>
 8009b78:	68a3      	ldr	r3, [r4, #8]
 8009b7a:	42ab      	cmp	r3, r5
 8009b7c:	dc12      	bgt.n	8009ba4 <__multadd+0x6c>
 8009b7e:	6863      	ldr	r3, [r4, #4]
 8009b80:	0038      	movs	r0, r7
 8009b82:	1c59      	adds	r1, r3, #1
 8009b84:	f7ff ff87 	bl	8009a96 <_Balloc>
 8009b88:	0021      	movs	r1, r4
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	9001      	str	r0, [sp, #4]
 8009b8e:	1c9a      	adds	r2, r3, #2
 8009b90:	0092      	lsls	r2, r2, #2
 8009b92:	310c      	adds	r1, #12
 8009b94:	300c      	adds	r0, #12
 8009b96:	f7fe fc55 	bl	8008444 <memcpy>
 8009b9a:	0021      	movs	r1, r4
 8009b9c:	0038      	movs	r0, r7
 8009b9e:	f7ff ffb2 	bl	8009b06 <_Bfree>
 8009ba2:	9c01      	ldr	r4, [sp, #4]
 8009ba4:	1d2b      	adds	r3, r5, #4
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	18e3      	adds	r3, r4, r3
 8009baa:	3501      	adds	r5, #1
 8009bac:	605e      	str	r6, [r3, #4]
 8009bae:	6125      	str	r5, [r4, #16]
 8009bb0:	0020      	movs	r0, r4
 8009bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08009bb4 <__hi0bits>:
 8009bb4:	0003      	movs	r3, r0
 8009bb6:	0c02      	lsrs	r2, r0, #16
 8009bb8:	2000      	movs	r0, #0
 8009bba:	4282      	cmp	r2, r0
 8009bbc:	d101      	bne.n	8009bc2 <__hi0bits+0xe>
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	3010      	adds	r0, #16
 8009bc2:	0e1a      	lsrs	r2, r3, #24
 8009bc4:	d101      	bne.n	8009bca <__hi0bits+0x16>
 8009bc6:	3008      	adds	r0, #8
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	0f1a      	lsrs	r2, r3, #28
 8009bcc:	d101      	bne.n	8009bd2 <__hi0bits+0x1e>
 8009bce:	3004      	adds	r0, #4
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	0f9a      	lsrs	r2, r3, #30
 8009bd4:	d101      	bne.n	8009bda <__hi0bits+0x26>
 8009bd6:	3002      	adds	r0, #2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	db03      	blt.n	8009be6 <__hi0bits+0x32>
 8009bde:	3001      	adds	r0, #1
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	d400      	bmi.n	8009be6 <__hi0bits+0x32>
 8009be4:	2020      	movs	r0, #32
 8009be6:	4770      	bx	lr

08009be8 <__lo0bits>:
 8009be8:	2207      	movs	r2, #7
 8009bea:	6803      	ldr	r3, [r0, #0]
 8009bec:	b510      	push	{r4, lr}
 8009bee:	0001      	movs	r1, r0
 8009bf0:	401a      	ands	r2, r3
 8009bf2:	d00d      	beq.n	8009c10 <__lo0bits+0x28>
 8009bf4:	2401      	movs	r4, #1
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	4223      	tst	r3, r4
 8009bfa:	d105      	bne.n	8009c08 <__lo0bits+0x20>
 8009bfc:	3002      	adds	r0, #2
 8009bfe:	4203      	tst	r3, r0
 8009c00:	d003      	beq.n	8009c0a <__lo0bits+0x22>
 8009c02:	40e3      	lsrs	r3, r4
 8009c04:	0020      	movs	r0, r4
 8009c06:	600b      	str	r3, [r1, #0]
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	089b      	lsrs	r3, r3, #2
 8009c0c:	600b      	str	r3, [r1, #0]
 8009c0e:	e7fb      	b.n	8009c08 <__lo0bits+0x20>
 8009c10:	b29c      	uxth	r4, r3
 8009c12:	0010      	movs	r0, r2
 8009c14:	2c00      	cmp	r4, #0
 8009c16:	d101      	bne.n	8009c1c <__lo0bits+0x34>
 8009c18:	2010      	movs	r0, #16
 8009c1a:	0c1b      	lsrs	r3, r3, #16
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	d101      	bne.n	8009c26 <__lo0bits+0x3e>
 8009c22:	3008      	adds	r0, #8
 8009c24:	0a1b      	lsrs	r3, r3, #8
 8009c26:	071a      	lsls	r2, r3, #28
 8009c28:	d101      	bne.n	8009c2e <__lo0bits+0x46>
 8009c2a:	3004      	adds	r0, #4
 8009c2c:	091b      	lsrs	r3, r3, #4
 8009c2e:	079a      	lsls	r2, r3, #30
 8009c30:	d101      	bne.n	8009c36 <__lo0bits+0x4e>
 8009c32:	3002      	adds	r0, #2
 8009c34:	089b      	lsrs	r3, r3, #2
 8009c36:	07da      	lsls	r2, r3, #31
 8009c38:	d4e8      	bmi.n	8009c0c <__lo0bits+0x24>
 8009c3a:	085b      	lsrs	r3, r3, #1
 8009c3c:	d001      	beq.n	8009c42 <__lo0bits+0x5a>
 8009c3e:	3001      	adds	r0, #1
 8009c40:	e7e4      	b.n	8009c0c <__lo0bits+0x24>
 8009c42:	2020      	movs	r0, #32
 8009c44:	e7e0      	b.n	8009c08 <__lo0bits+0x20>

08009c46 <__i2b>:
 8009c46:	b510      	push	{r4, lr}
 8009c48:	000c      	movs	r4, r1
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	f7ff ff23 	bl	8009a96 <_Balloc>
 8009c50:	2301      	movs	r3, #1
 8009c52:	6144      	str	r4, [r0, #20]
 8009c54:	6103      	str	r3, [r0, #16]
 8009c56:	bd10      	pop	{r4, pc}

08009c58 <__multiply>:
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	690b      	ldr	r3, [r1, #16]
 8009c5c:	0014      	movs	r4, r2
 8009c5e:	6912      	ldr	r2, [r2, #16]
 8009c60:	b089      	sub	sp, #36	; 0x24
 8009c62:	000d      	movs	r5, r1
 8009c64:	4293      	cmp	r3, r2
 8009c66:	da01      	bge.n	8009c6c <__multiply+0x14>
 8009c68:	0025      	movs	r5, r4
 8009c6a:	000c      	movs	r4, r1
 8009c6c:	692f      	ldr	r7, [r5, #16]
 8009c6e:	6926      	ldr	r6, [r4, #16]
 8009c70:	6869      	ldr	r1, [r5, #4]
 8009c72:	19bb      	adds	r3, r7, r6
 8009c74:	9302      	str	r3, [sp, #8]
 8009c76:	68ab      	ldr	r3, [r5, #8]
 8009c78:	19ba      	adds	r2, r7, r6
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	da00      	bge.n	8009c80 <__multiply+0x28>
 8009c7e:	3101      	adds	r1, #1
 8009c80:	f7ff ff09 	bl	8009a96 <_Balloc>
 8009c84:	0002      	movs	r2, r0
 8009c86:	19bb      	adds	r3, r7, r6
 8009c88:	3214      	adds	r2, #20
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	18d3      	adds	r3, r2, r3
 8009c8e:	469c      	mov	ip, r3
 8009c90:	2100      	movs	r1, #0
 8009c92:	0013      	movs	r3, r2
 8009c94:	9004      	str	r0, [sp, #16]
 8009c96:	4563      	cmp	r3, ip
 8009c98:	d31d      	bcc.n	8009cd6 <__multiply+0x7e>
 8009c9a:	3514      	adds	r5, #20
 8009c9c:	00bf      	lsls	r7, r7, #2
 8009c9e:	19eb      	adds	r3, r5, r7
 8009ca0:	3414      	adds	r4, #20
 8009ca2:	00b6      	lsls	r6, r6, #2
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	19a3      	adds	r3, r4, r6
 8009ca8:	9503      	str	r5, [sp, #12]
 8009caa:	9401      	str	r4, [sp, #4]
 8009cac:	9307      	str	r3, [sp, #28]
 8009cae:	9b07      	ldr	r3, [sp, #28]
 8009cb0:	9901      	ldr	r1, [sp, #4]
 8009cb2:	4299      	cmp	r1, r3
 8009cb4:	d311      	bcc.n	8009cda <__multiply+0x82>
 8009cb6:	9b02      	ldr	r3, [sp, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd06      	ble.n	8009cca <__multiply+0x72>
 8009cbc:	2304      	movs	r3, #4
 8009cbe:	425b      	negs	r3, r3
 8009cc0:	449c      	add	ip, r3
 8009cc2:	4663      	mov	r3, ip
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d051      	beq.n	8009d6e <__multiply+0x116>
 8009cca:	9b04      	ldr	r3, [sp, #16]
 8009ccc:	9a02      	ldr	r2, [sp, #8]
 8009cce:	0018      	movs	r0, r3
 8009cd0:	611a      	str	r2, [r3, #16]
 8009cd2:	b009      	add	sp, #36	; 0x24
 8009cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd6:	c302      	stmia	r3!, {r1}
 8009cd8:	e7dd      	b.n	8009c96 <__multiply+0x3e>
 8009cda:	9b01      	ldr	r3, [sp, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	b298      	uxth	r0, r3
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d01c      	beq.n	8009d1e <__multiply+0xc6>
 8009ce4:	0015      	movs	r5, r2
 8009ce6:	2600      	movs	r6, #0
 8009ce8:	9f03      	ldr	r7, [sp, #12]
 8009cea:	cf02      	ldmia	r7!, {r1}
 8009cec:	682c      	ldr	r4, [r5, #0]
 8009cee:	b28b      	uxth	r3, r1
 8009cf0:	4343      	muls	r3, r0
 8009cf2:	0c09      	lsrs	r1, r1, #16
 8009cf4:	4341      	muls	r1, r0
 8009cf6:	b2a4      	uxth	r4, r4
 8009cf8:	191b      	adds	r3, r3, r4
 8009cfa:	199b      	adds	r3, r3, r6
 8009cfc:	000e      	movs	r6, r1
 8009cfe:	6829      	ldr	r1, [r5, #0]
 8009d00:	9506      	str	r5, [sp, #24]
 8009d02:	0c09      	lsrs	r1, r1, #16
 8009d04:	1871      	adds	r1, r6, r1
 8009d06:	0c1e      	lsrs	r6, r3, #16
 8009d08:	1989      	adds	r1, r1, r6
 8009d0a:	0c0e      	lsrs	r6, r1, #16
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	0409      	lsls	r1, r1, #16
 8009d10:	430b      	orrs	r3, r1
 8009d12:	c508      	stmia	r5!, {r3}
 8009d14:	9b05      	ldr	r3, [sp, #20]
 8009d16:	42bb      	cmp	r3, r7
 8009d18:	d8e7      	bhi.n	8009cea <__multiply+0x92>
 8009d1a:	9b06      	ldr	r3, [sp, #24]
 8009d1c:	605e      	str	r6, [r3, #4]
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	0c1d      	lsrs	r5, r3, #16
 8009d24:	d01e      	beq.n	8009d64 <__multiply+0x10c>
 8009d26:	0010      	movs	r0, r2
 8009d28:	2700      	movs	r7, #0
 8009d2a:	6813      	ldr	r3, [r2, #0]
 8009d2c:	9e03      	ldr	r6, [sp, #12]
 8009d2e:	6831      	ldr	r1, [r6, #0]
 8009d30:	6804      	ldr	r4, [r0, #0]
 8009d32:	b289      	uxth	r1, r1
 8009d34:	4369      	muls	r1, r5
 8009d36:	0c24      	lsrs	r4, r4, #16
 8009d38:	1909      	adds	r1, r1, r4
 8009d3a:	19c9      	adds	r1, r1, r7
 8009d3c:	040f      	lsls	r7, r1, #16
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	433b      	orrs	r3, r7
 8009d42:	6003      	str	r3, [r0, #0]
 8009d44:	ce80      	ldmia	r6!, {r7}
 8009d46:	6843      	ldr	r3, [r0, #4]
 8009d48:	0c3f      	lsrs	r7, r7, #16
 8009d4a:	436f      	muls	r7, r5
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	18fb      	adds	r3, r7, r3
 8009d50:	0c09      	lsrs	r1, r1, #16
 8009d52:	185b      	adds	r3, r3, r1
 8009d54:	9905      	ldr	r1, [sp, #20]
 8009d56:	9006      	str	r0, [sp, #24]
 8009d58:	0c1f      	lsrs	r7, r3, #16
 8009d5a:	3004      	adds	r0, #4
 8009d5c:	42b1      	cmp	r1, r6
 8009d5e:	d8e6      	bhi.n	8009d2e <__multiply+0xd6>
 8009d60:	9906      	ldr	r1, [sp, #24]
 8009d62:	604b      	str	r3, [r1, #4]
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	3204      	adds	r2, #4
 8009d68:	3304      	adds	r3, #4
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	e79f      	b.n	8009cae <__multiply+0x56>
 8009d6e:	9b02      	ldr	r3, [sp, #8]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	9302      	str	r3, [sp, #8]
 8009d74:	e79f      	b.n	8009cb6 <__multiply+0x5e>
	...

08009d78 <__pow5mult>:
 8009d78:	2303      	movs	r3, #3
 8009d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	0005      	movs	r5, r0
 8009d80:	000e      	movs	r6, r1
 8009d82:	0014      	movs	r4, r2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d008      	beq.n	8009d9a <__pow5mult+0x22>
 8009d88:	4922      	ldr	r1, [pc, #136]	; (8009e14 <__pow5mult+0x9c>)
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	009a      	lsls	r2, r3, #2
 8009d8e:	5852      	ldr	r2, [r2, r1]
 8009d90:	2300      	movs	r3, #0
 8009d92:	0031      	movs	r1, r6
 8009d94:	f7ff fed0 	bl	8009b38 <__multadd>
 8009d98:	0006      	movs	r6, r0
 8009d9a:	10a3      	asrs	r3, r4, #2
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	d036      	beq.n	8009e0e <__pow5mult+0x96>
 8009da0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009da2:	2c00      	cmp	r4, #0
 8009da4:	d107      	bne.n	8009db6 <__pow5mult+0x3e>
 8009da6:	2010      	movs	r0, #16
 8009da8:	f7ff fe60 	bl	8009a6c <malloc>
 8009dac:	6268      	str	r0, [r5, #36]	; 0x24
 8009dae:	6044      	str	r4, [r0, #4]
 8009db0:	6084      	str	r4, [r0, #8]
 8009db2:	6004      	str	r4, [r0, #0]
 8009db4:	60c4      	str	r4, [r0, #12]
 8009db6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8009db8:	68bc      	ldr	r4, [r7, #8]
 8009dba:	2c00      	cmp	r4, #0
 8009dbc:	d107      	bne.n	8009dce <__pow5mult+0x56>
 8009dbe:	4916      	ldr	r1, [pc, #88]	; (8009e18 <__pow5mult+0xa0>)
 8009dc0:	0028      	movs	r0, r5
 8009dc2:	f7ff ff40 	bl	8009c46 <__i2b>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	0004      	movs	r4, r0
 8009dca:	60b8      	str	r0, [r7, #8]
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	9b01      	ldr	r3, [sp, #4]
 8009dd2:	4213      	tst	r3, r2
 8009dd4:	d00a      	beq.n	8009dec <__pow5mult+0x74>
 8009dd6:	0031      	movs	r1, r6
 8009dd8:	0022      	movs	r2, r4
 8009dda:	0028      	movs	r0, r5
 8009ddc:	f7ff ff3c 	bl	8009c58 <__multiply>
 8009de0:	0007      	movs	r7, r0
 8009de2:	0031      	movs	r1, r6
 8009de4:	0028      	movs	r0, r5
 8009de6:	f7ff fe8e 	bl	8009b06 <_Bfree>
 8009dea:	003e      	movs	r6, r7
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	105b      	asrs	r3, r3, #1
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	d00c      	beq.n	8009e0e <__pow5mult+0x96>
 8009df4:	6820      	ldr	r0, [r4, #0]
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d107      	bne.n	8009e0a <__pow5mult+0x92>
 8009dfa:	0022      	movs	r2, r4
 8009dfc:	0021      	movs	r1, r4
 8009dfe:	0028      	movs	r0, r5
 8009e00:	f7ff ff2a 	bl	8009c58 <__multiply>
 8009e04:	2300      	movs	r3, #0
 8009e06:	6020      	str	r0, [r4, #0]
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	0004      	movs	r4, r0
 8009e0c:	e7df      	b.n	8009dce <__pow5mult+0x56>
 8009e0e:	0030      	movs	r0, r6
 8009e10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	0800c320 	.word	0x0800c320
 8009e18:	00000271 	.word	0x00000271

08009e1c <__lshift>:
 8009e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e1e:	000d      	movs	r5, r1
 8009e20:	0017      	movs	r7, r2
 8009e22:	692b      	ldr	r3, [r5, #16]
 8009e24:	1154      	asrs	r4, r2, #5
 8009e26:	b085      	sub	sp, #20
 8009e28:	18e3      	adds	r3, r4, r3
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	6849      	ldr	r1, [r1, #4]
 8009e32:	68ab      	ldr	r3, [r5, #8]
 8009e34:	9002      	str	r0, [sp, #8]
 8009e36:	9a00      	ldr	r2, [sp, #0]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	db35      	blt.n	8009ea8 <__lshift+0x8c>
 8009e3c:	9802      	ldr	r0, [sp, #8]
 8009e3e:	f7ff fe2a 	bl	8009a96 <_Balloc>
 8009e42:	2300      	movs	r3, #0
 8009e44:	0002      	movs	r2, r0
 8009e46:	0006      	movs	r6, r0
 8009e48:	0019      	movs	r1, r3
 8009e4a:	3214      	adds	r2, #20
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	db2e      	blt.n	8009eae <__lshift+0x92>
 8009e50:	43e3      	mvns	r3, r4
 8009e52:	17db      	asrs	r3, r3, #31
 8009e54:	401c      	ands	r4, r3
 8009e56:	002b      	movs	r3, r5
 8009e58:	00a4      	lsls	r4, r4, #2
 8009e5a:	1914      	adds	r4, r2, r4
 8009e5c:	692a      	ldr	r2, [r5, #16]
 8009e5e:	3314      	adds	r3, #20
 8009e60:	0092      	lsls	r2, r2, #2
 8009e62:	189a      	adds	r2, r3, r2
 8009e64:	4694      	mov	ip, r2
 8009e66:	221f      	movs	r2, #31
 8009e68:	4017      	ands	r7, r2
 8009e6a:	d024      	beq.n	8009eb6 <__lshift+0x9a>
 8009e6c:	3201      	adds	r2, #1
 8009e6e:	1bd2      	subs	r2, r2, r7
 8009e70:	9203      	str	r2, [sp, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	6819      	ldr	r1, [r3, #0]
 8009e76:	0020      	movs	r0, r4
 8009e78:	40b9      	lsls	r1, r7
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	c404      	stmia	r4!, {r2}
 8009e7e:	cb04      	ldmia	r3!, {r2}
 8009e80:	9903      	ldr	r1, [sp, #12]
 8009e82:	40ca      	lsrs	r2, r1
 8009e84:	459c      	cmp	ip, r3
 8009e86:	d8f5      	bhi.n	8009e74 <__lshift+0x58>
 8009e88:	6042      	str	r2, [r0, #4]
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	d002      	beq.n	8009e94 <__lshift+0x78>
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	3302      	adds	r3, #2
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	9b00      	ldr	r3, [sp, #0]
 8009e96:	9802      	ldr	r0, [sp, #8]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	6133      	str	r3, [r6, #16]
 8009e9c:	0029      	movs	r1, r5
 8009e9e:	f7ff fe32 	bl	8009b06 <_Bfree>
 8009ea2:	0030      	movs	r0, r6
 8009ea4:	b005      	add	sp, #20
 8009ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea8:	3101      	adds	r1, #1
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	e7c3      	b.n	8009e36 <__lshift+0x1a>
 8009eae:	0098      	lsls	r0, r3, #2
 8009eb0:	5011      	str	r1, [r2, r0]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	e7ca      	b.n	8009e4c <__lshift+0x30>
 8009eb6:	cb04      	ldmia	r3!, {r2}
 8009eb8:	c404      	stmia	r4!, {r2}
 8009eba:	459c      	cmp	ip, r3
 8009ebc:	d8fb      	bhi.n	8009eb6 <__lshift+0x9a>
 8009ebe:	e7e9      	b.n	8009e94 <__lshift+0x78>

08009ec0 <__mcmp>:
 8009ec0:	690a      	ldr	r2, [r1, #16]
 8009ec2:	6903      	ldr	r3, [r0, #16]
 8009ec4:	b530      	push	{r4, r5, lr}
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	d10d      	bne.n	8009ee6 <__mcmp+0x26>
 8009eca:	0092      	lsls	r2, r2, #2
 8009ecc:	3014      	adds	r0, #20
 8009ece:	3114      	adds	r1, #20
 8009ed0:	1884      	adds	r4, r0, r2
 8009ed2:	1889      	adds	r1, r1, r2
 8009ed4:	3c04      	subs	r4, #4
 8009ed6:	3904      	subs	r1, #4
 8009ed8:	6825      	ldr	r5, [r4, #0]
 8009eda:	680a      	ldr	r2, [r1, #0]
 8009edc:	4295      	cmp	r5, r2
 8009ede:	d004      	beq.n	8009eea <__mcmp+0x2a>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4295      	cmp	r5, r2
 8009ee4:	d304      	bcc.n	8009ef0 <__mcmp+0x30>
 8009ee6:	0018      	movs	r0, r3
 8009ee8:	bd30      	pop	{r4, r5, pc}
 8009eea:	42a0      	cmp	r0, r4
 8009eec:	d3f2      	bcc.n	8009ed4 <__mcmp+0x14>
 8009eee:	e7fa      	b.n	8009ee6 <__mcmp+0x26>
 8009ef0:	425b      	negs	r3, r3
 8009ef2:	e7f8      	b.n	8009ee6 <__mcmp+0x26>

08009ef4 <__mdiff>:
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	000d      	movs	r5, r1
 8009ef8:	b085      	sub	sp, #20
 8009efa:	0007      	movs	r7, r0
 8009efc:	0011      	movs	r1, r2
 8009efe:	0028      	movs	r0, r5
 8009f00:	0014      	movs	r4, r2
 8009f02:	f7ff ffdd 	bl	8009ec0 <__mcmp>
 8009f06:	1e06      	subs	r6, r0, #0
 8009f08:	d108      	bne.n	8009f1c <__mdiff+0x28>
 8009f0a:	0001      	movs	r1, r0
 8009f0c:	0038      	movs	r0, r7
 8009f0e:	f7ff fdc2 	bl	8009a96 <_Balloc>
 8009f12:	2301      	movs	r3, #1
 8009f14:	6146      	str	r6, [r0, #20]
 8009f16:	6103      	str	r3, [r0, #16]
 8009f18:	b005      	add	sp, #20
 8009f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	2800      	cmp	r0, #0
 8009f22:	db04      	blt.n	8009f2e <__mdiff+0x3a>
 8009f24:	0023      	movs	r3, r4
 8009f26:	002c      	movs	r4, r5
 8009f28:	001d      	movs	r5, r3
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	6861      	ldr	r1, [r4, #4]
 8009f30:	0038      	movs	r0, r7
 8009f32:	f7ff fdb0 	bl	8009a96 <_Balloc>
 8009f36:	002f      	movs	r7, r5
 8009f38:	2200      	movs	r2, #0
 8009f3a:	9b01      	ldr	r3, [sp, #4]
 8009f3c:	6926      	ldr	r6, [r4, #16]
 8009f3e:	60c3      	str	r3, [r0, #12]
 8009f40:	3414      	adds	r4, #20
 8009f42:	00b3      	lsls	r3, r6, #2
 8009f44:	18e3      	adds	r3, r4, r3
 8009f46:	9302      	str	r3, [sp, #8]
 8009f48:	692b      	ldr	r3, [r5, #16]
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	9303      	str	r3, [sp, #12]
 8009f52:	0003      	movs	r3, r0
 8009f54:	4694      	mov	ip, r2
 8009f56:	3314      	adds	r3, #20
 8009f58:	cc20      	ldmia	r4!, {r5}
 8009f5a:	cf04      	ldmia	r7!, {r2}
 8009f5c:	9201      	str	r2, [sp, #4]
 8009f5e:	b2aa      	uxth	r2, r5
 8009f60:	4494      	add	ip, r2
 8009f62:	466a      	mov	r2, sp
 8009f64:	4661      	mov	r1, ip
 8009f66:	8892      	ldrh	r2, [r2, #4]
 8009f68:	0c2d      	lsrs	r5, r5, #16
 8009f6a:	1a8a      	subs	r2, r1, r2
 8009f6c:	9901      	ldr	r1, [sp, #4]
 8009f6e:	0c09      	lsrs	r1, r1, #16
 8009f70:	1a69      	subs	r1, r5, r1
 8009f72:	1415      	asrs	r5, r2, #16
 8009f74:	1949      	adds	r1, r1, r5
 8009f76:	140d      	asrs	r5, r1, #16
 8009f78:	b292      	uxth	r2, r2
 8009f7a:	0409      	lsls	r1, r1, #16
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	9a03      	ldr	r2, [sp, #12]
 8009f82:	46ac      	mov	ip, r5
 8009f84:	3304      	adds	r3, #4
 8009f86:	42ba      	cmp	r2, r7
 8009f88:	d8e6      	bhi.n	8009f58 <__mdiff+0x64>
 8009f8a:	9902      	ldr	r1, [sp, #8]
 8009f8c:	001a      	movs	r2, r3
 8009f8e:	428c      	cmp	r4, r1
 8009f90:	d305      	bcc.n	8009f9e <__mdiff+0xaa>
 8009f92:	3a04      	subs	r2, #4
 8009f94:	6813      	ldr	r3, [r2, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00e      	beq.n	8009fb8 <__mdiff+0xc4>
 8009f9a:	6106      	str	r6, [r0, #16]
 8009f9c:	e7bc      	b.n	8009f18 <__mdiff+0x24>
 8009f9e:	cc04      	ldmia	r4!, {r2}
 8009fa0:	b291      	uxth	r1, r2
 8009fa2:	4461      	add	r1, ip
 8009fa4:	140d      	asrs	r5, r1, #16
 8009fa6:	0c12      	lsrs	r2, r2, #16
 8009fa8:	1952      	adds	r2, r2, r5
 8009faa:	1415      	asrs	r5, r2, #16
 8009fac:	b289      	uxth	r1, r1
 8009fae:	0412      	lsls	r2, r2, #16
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	46ac      	mov	ip, r5
 8009fb4:	c304      	stmia	r3!, {r2}
 8009fb6:	e7e8      	b.n	8009f8a <__mdiff+0x96>
 8009fb8:	3e01      	subs	r6, #1
 8009fba:	e7ea      	b.n	8009f92 <__mdiff+0x9e>

08009fbc <__d2b>:
 8009fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fbe:	001d      	movs	r5, r3
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	0014      	movs	r4, r2
 8009fc4:	9f08      	ldr	r7, [sp, #32]
 8009fc6:	f7ff fd66 	bl	8009a96 <_Balloc>
 8009fca:	032b      	lsls	r3, r5, #12
 8009fcc:	006d      	lsls	r5, r5, #1
 8009fce:	0006      	movs	r6, r0
 8009fd0:	0b1b      	lsrs	r3, r3, #12
 8009fd2:	0d6d      	lsrs	r5, r5, #21
 8009fd4:	d124      	bne.n	800a020 <__d2b+0x64>
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	2c00      	cmp	r4, #0
 8009fda:	d027      	beq.n	800a02c <__d2b+0x70>
 8009fdc:	4668      	mov	r0, sp
 8009fde:	9400      	str	r4, [sp, #0]
 8009fe0:	f7ff fe02 	bl	8009be8 <__lo0bits>
 8009fe4:	9c00      	ldr	r4, [sp, #0]
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d01e      	beq.n	800a028 <__d2b+0x6c>
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	2120      	movs	r1, #32
 8009fee:	001a      	movs	r2, r3
 8009ff0:	1a09      	subs	r1, r1, r0
 8009ff2:	408a      	lsls	r2, r1
 8009ff4:	40c3      	lsrs	r3, r0
 8009ff6:	4322      	orrs	r2, r4
 8009ff8:	6172      	str	r2, [r6, #20]
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	9c01      	ldr	r4, [sp, #4]
 8009ffe:	61b4      	str	r4, [r6, #24]
 800a000:	1e63      	subs	r3, r4, #1
 800a002:	419c      	sbcs	r4, r3
 800a004:	3401      	adds	r4, #1
 800a006:	6134      	str	r4, [r6, #16]
 800a008:	2d00      	cmp	r5, #0
 800a00a:	d018      	beq.n	800a03e <__d2b+0x82>
 800a00c:	4b12      	ldr	r3, [pc, #72]	; (800a058 <__d2b+0x9c>)
 800a00e:	18ed      	adds	r5, r5, r3
 800a010:	2335      	movs	r3, #53	; 0x35
 800a012:	182d      	adds	r5, r5, r0
 800a014:	603d      	str	r5, [r7, #0]
 800a016:	1a18      	subs	r0, r3, r0
 800a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01a:	6018      	str	r0, [r3, #0]
 800a01c:	0030      	movs	r0, r6
 800a01e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a020:	2280      	movs	r2, #128	; 0x80
 800a022:	0352      	lsls	r2, r2, #13
 800a024:	4313      	orrs	r3, r2
 800a026:	e7d6      	b.n	8009fd6 <__d2b+0x1a>
 800a028:	6174      	str	r4, [r6, #20]
 800a02a:	e7e7      	b.n	8009ffc <__d2b+0x40>
 800a02c:	a801      	add	r0, sp, #4
 800a02e:	f7ff fddb 	bl	8009be8 <__lo0bits>
 800a032:	2401      	movs	r4, #1
 800a034:	9b01      	ldr	r3, [sp, #4]
 800a036:	6134      	str	r4, [r6, #16]
 800a038:	6173      	str	r3, [r6, #20]
 800a03a:	3020      	adds	r0, #32
 800a03c:	e7e4      	b.n	800a008 <__d2b+0x4c>
 800a03e:	4b07      	ldr	r3, [pc, #28]	; (800a05c <__d2b+0xa0>)
 800a040:	18c0      	adds	r0, r0, r3
 800a042:	4b07      	ldr	r3, [pc, #28]	; (800a060 <__d2b+0xa4>)
 800a044:	6038      	str	r0, [r7, #0]
 800a046:	18e3      	adds	r3, r4, r3
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	18f3      	adds	r3, r6, r3
 800a04c:	6958      	ldr	r0, [r3, #20]
 800a04e:	f7ff fdb1 	bl	8009bb4 <__hi0bits>
 800a052:	0164      	lsls	r4, r4, #5
 800a054:	1a20      	subs	r0, r4, r0
 800a056:	e7df      	b.n	800a018 <__d2b+0x5c>
 800a058:	fffffbcd 	.word	0xfffffbcd
 800a05c:	fffffbce 	.word	0xfffffbce
 800a060:	3fffffff 	.word	0x3fffffff

0800a064 <_calloc_r>:
 800a064:	434a      	muls	r2, r1
 800a066:	b570      	push	{r4, r5, r6, lr}
 800a068:	0011      	movs	r1, r2
 800a06a:	0014      	movs	r4, r2
 800a06c:	f000 f852 	bl	800a114 <_malloc_r>
 800a070:	1e05      	subs	r5, r0, #0
 800a072:	d003      	beq.n	800a07c <_calloc_r+0x18>
 800a074:	0022      	movs	r2, r4
 800a076:	2100      	movs	r1, #0
 800a078:	f7fe fa00 	bl	800847c <memset>
 800a07c:	0028      	movs	r0, r5
 800a07e:	bd70      	pop	{r4, r5, r6, pc}

0800a080 <_free_r>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	0005      	movs	r5, r0
 800a084:	2900      	cmp	r1, #0
 800a086:	d010      	beq.n	800a0aa <_free_r+0x2a>
 800a088:	1f0c      	subs	r4, r1, #4
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	da00      	bge.n	800a092 <_free_r+0x12>
 800a090:	18e4      	adds	r4, r4, r3
 800a092:	0028      	movs	r0, r5
 800a094:	f000 fa20 	bl	800a4d8 <__malloc_lock>
 800a098:	4a1d      	ldr	r2, [pc, #116]	; (800a110 <_free_r+0x90>)
 800a09a:	6813      	ldr	r3, [r2, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d105      	bne.n	800a0ac <_free_r+0x2c>
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	6014      	str	r4, [r2, #0]
 800a0a4:	0028      	movs	r0, r5
 800a0a6:	f000 fa18 	bl	800a4da <__malloc_unlock>
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	d909      	bls.n	800a0c4 <_free_r+0x44>
 800a0b0:	6821      	ldr	r1, [r4, #0]
 800a0b2:	1860      	adds	r0, r4, r1
 800a0b4:	4283      	cmp	r3, r0
 800a0b6:	d1f3      	bne.n	800a0a0 <_free_r+0x20>
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	1841      	adds	r1, r0, r1
 800a0be:	6021      	str	r1, [r4, #0]
 800a0c0:	e7ee      	b.n	800a0a0 <_free_r+0x20>
 800a0c2:	0013      	movs	r3, r2
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	2a00      	cmp	r2, #0
 800a0c8:	d001      	beq.n	800a0ce <_free_r+0x4e>
 800a0ca:	42a2      	cmp	r2, r4
 800a0cc:	d9f9      	bls.n	800a0c2 <_free_r+0x42>
 800a0ce:	6819      	ldr	r1, [r3, #0]
 800a0d0:	1858      	adds	r0, r3, r1
 800a0d2:	42a0      	cmp	r0, r4
 800a0d4:	d10b      	bne.n	800a0ee <_free_r+0x6e>
 800a0d6:	6820      	ldr	r0, [r4, #0]
 800a0d8:	1809      	adds	r1, r1, r0
 800a0da:	1858      	adds	r0, r3, r1
 800a0dc:	6019      	str	r1, [r3, #0]
 800a0de:	4282      	cmp	r2, r0
 800a0e0:	d1e0      	bne.n	800a0a4 <_free_r+0x24>
 800a0e2:	6810      	ldr	r0, [r2, #0]
 800a0e4:	6852      	ldr	r2, [r2, #4]
 800a0e6:	1841      	adds	r1, r0, r1
 800a0e8:	6019      	str	r1, [r3, #0]
 800a0ea:	605a      	str	r2, [r3, #4]
 800a0ec:	e7da      	b.n	800a0a4 <_free_r+0x24>
 800a0ee:	42a0      	cmp	r0, r4
 800a0f0:	d902      	bls.n	800a0f8 <_free_r+0x78>
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	e7d5      	b.n	800a0a4 <_free_r+0x24>
 800a0f8:	6821      	ldr	r1, [r4, #0]
 800a0fa:	1860      	adds	r0, r4, r1
 800a0fc:	4282      	cmp	r2, r0
 800a0fe:	d103      	bne.n	800a108 <_free_r+0x88>
 800a100:	6810      	ldr	r0, [r2, #0]
 800a102:	6852      	ldr	r2, [r2, #4]
 800a104:	1841      	adds	r1, r0, r1
 800a106:	6021      	str	r1, [r4, #0]
 800a108:	6062      	str	r2, [r4, #4]
 800a10a:	605c      	str	r4, [r3, #4]
 800a10c:	e7ca      	b.n	800a0a4 <_free_r+0x24>
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	20000628 	.word	0x20000628

0800a114 <_malloc_r>:
 800a114:	2303      	movs	r3, #3
 800a116:	b570      	push	{r4, r5, r6, lr}
 800a118:	1ccd      	adds	r5, r1, #3
 800a11a:	439d      	bics	r5, r3
 800a11c:	3508      	adds	r5, #8
 800a11e:	0006      	movs	r6, r0
 800a120:	2d0c      	cmp	r5, #12
 800a122:	d21e      	bcs.n	800a162 <_malloc_r+0x4e>
 800a124:	250c      	movs	r5, #12
 800a126:	42a9      	cmp	r1, r5
 800a128:	d81d      	bhi.n	800a166 <_malloc_r+0x52>
 800a12a:	0030      	movs	r0, r6
 800a12c:	f000 f9d4 	bl	800a4d8 <__malloc_lock>
 800a130:	4a25      	ldr	r2, [pc, #148]	; (800a1c8 <_malloc_r+0xb4>)
 800a132:	6814      	ldr	r4, [r2, #0]
 800a134:	0021      	movs	r1, r4
 800a136:	2900      	cmp	r1, #0
 800a138:	d119      	bne.n	800a16e <_malloc_r+0x5a>
 800a13a:	4c24      	ldr	r4, [pc, #144]	; (800a1cc <_malloc_r+0xb8>)
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <_malloc_r+0x36>
 800a142:	0030      	movs	r0, r6
 800a144:	f000 f9a4 	bl	800a490 <_sbrk_r>
 800a148:	6020      	str	r0, [r4, #0]
 800a14a:	0029      	movs	r1, r5
 800a14c:	0030      	movs	r0, r6
 800a14e:	f000 f99f 	bl	800a490 <_sbrk_r>
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	d12b      	bne.n	800a1ae <_malloc_r+0x9a>
 800a156:	230c      	movs	r3, #12
 800a158:	0030      	movs	r0, r6
 800a15a:	6033      	str	r3, [r6, #0]
 800a15c:	f000 f9bd 	bl	800a4da <__malloc_unlock>
 800a160:	e003      	b.n	800a16a <_malloc_r+0x56>
 800a162:	2d00      	cmp	r5, #0
 800a164:	dadf      	bge.n	800a126 <_malloc_r+0x12>
 800a166:	230c      	movs	r3, #12
 800a168:	6033      	str	r3, [r6, #0]
 800a16a:	2000      	movs	r0, #0
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	680b      	ldr	r3, [r1, #0]
 800a170:	1b5b      	subs	r3, r3, r5
 800a172:	d419      	bmi.n	800a1a8 <_malloc_r+0x94>
 800a174:	2b0b      	cmp	r3, #11
 800a176:	d903      	bls.n	800a180 <_malloc_r+0x6c>
 800a178:	600b      	str	r3, [r1, #0]
 800a17a:	18cc      	adds	r4, r1, r3
 800a17c:	6025      	str	r5, [r4, #0]
 800a17e:	e003      	b.n	800a188 <_malloc_r+0x74>
 800a180:	684b      	ldr	r3, [r1, #4]
 800a182:	428c      	cmp	r4, r1
 800a184:	d10d      	bne.n	800a1a2 <_malloc_r+0x8e>
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	0030      	movs	r0, r6
 800a18a:	f000 f9a6 	bl	800a4da <__malloc_unlock>
 800a18e:	0020      	movs	r0, r4
 800a190:	2207      	movs	r2, #7
 800a192:	300b      	adds	r0, #11
 800a194:	1d23      	adds	r3, r4, #4
 800a196:	4390      	bics	r0, r2
 800a198:	1ac3      	subs	r3, r0, r3
 800a19a:	d0e7      	beq.n	800a16c <_malloc_r+0x58>
 800a19c:	425a      	negs	r2, r3
 800a19e:	50e2      	str	r2, [r4, r3]
 800a1a0:	e7e4      	b.n	800a16c <_malloc_r+0x58>
 800a1a2:	6063      	str	r3, [r4, #4]
 800a1a4:	000c      	movs	r4, r1
 800a1a6:	e7ef      	b.n	800a188 <_malloc_r+0x74>
 800a1a8:	000c      	movs	r4, r1
 800a1aa:	6849      	ldr	r1, [r1, #4]
 800a1ac:	e7c3      	b.n	800a136 <_malloc_r+0x22>
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	1cc4      	adds	r4, r0, #3
 800a1b2:	439c      	bics	r4, r3
 800a1b4:	42a0      	cmp	r0, r4
 800a1b6:	d0e1      	beq.n	800a17c <_malloc_r+0x68>
 800a1b8:	1a21      	subs	r1, r4, r0
 800a1ba:	0030      	movs	r0, r6
 800a1bc:	f000 f968 	bl	800a490 <_sbrk_r>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d1db      	bne.n	800a17c <_malloc_r+0x68>
 800a1c4:	e7c7      	b.n	800a156 <_malloc_r+0x42>
 800a1c6:	46c0      	nop			; (mov r8, r8)
 800a1c8:	20000628 	.word	0x20000628
 800a1cc:	2000062c 	.word	0x2000062c

0800a1d0 <__ssputs_r>:
 800a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1d2:	688e      	ldr	r6, [r1, #8]
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	0007      	movs	r7, r0
 800a1d8:	000c      	movs	r4, r1
 800a1da:	9203      	str	r2, [sp, #12]
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	d83c      	bhi.n	800a25c <__ssputs_r+0x8c>
 800a1e2:	2390      	movs	r3, #144	; 0x90
 800a1e4:	898a      	ldrh	r2, [r1, #12]
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	421a      	tst	r2, r3
 800a1ea:	d034      	beq.n	800a256 <__ssputs_r+0x86>
 800a1ec:	2503      	movs	r5, #3
 800a1ee:	6909      	ldr	r1, [r1, #16]
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	1a5b      	subs	r3, r3, r1
 800a1f4:	9302      	str	r3, [sp, #8]
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	9802      	ldr	r0, [sp, #8]
 800a1fa:	435d      	muls	r5, r3
 800a1fc:	0feb      	lsrs	r3, r5, #31
 800a1fe:	195d      	adds	r5, r3, r5
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	106d      	asrs	r5, r5, #1
 800a204:	3301      	adds	r3, #1
 800a206:	181b      	adds	r3, r3, r0
 800a208:	42ab      	cmp	r3, r5
 800a20a:	d900      	bls.n	800a20e <__ssputs_r+0x3e>
 800a20c:	001d      	movs	r5, r3
 800a20e:	0553      	lsls	r3, r2, #21
 800a210:	d532      	bpl.n	800a278 <__ssputs_r+0xa8>
 800a212:	0029      	movs	r1, r5
 800a214:	0038      	movs	r0, r7
 800a216:	f7ff ff7d 	bl	800a114 <_malloc_r>
 800a21a:	1e06      	subs	r6, r0, #0
 800a21c:	d109      	bne.n	800a232 <__ssputs_r+0x62>
 800a21e:	230c      	movs	r3, #12
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	2340      	movs	r3, #64	; 0x40
 800a224:	2001      	movs	r0, #1
 800a226:	89a2      	ldrh	r2, [r4, #12]
 800a228:	4240      	negs	r0, r0
 800a22a:	4313      	orrs	r3, r2
 800a22c:	81a3      	strh	r3, [r4, #12]
 800a22e:	b005      	add	sp, #20
 800a230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a232:	9a02      	ldr	r2, [sp, #8]
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	f7fe f905 	bl	8008444 <memcpy>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	4a14      	ldr	r2, [pc, #80]	; (800a290 <__ssputs_r+0xc0>)
 800a23e:	401a      	ands	r2, r3
 800a240:	2380      	movs	r3, #128	; 0x80
 800a242:	4313      	orrs	r3, r2
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	9b02      	ldr	r3, [sp, #8]
 800a248:	6126      	str	r6, [r4, #16]
 800a24a:	18f6      	adds	r6, r6, r3
 800a24c:	6026      	str	r6, [r4, #0]
 800a24e:	6165      	str	r5, [r4, #20]
 800a250:	9e01      	ldr	r6, [sp, #4]
 800a252:	1aed      	subs	r5, r5, r3
 800a254:	60a5      	str	r5, [r4, #8]
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	429e      	cmp	r6, r3
 800a25a:	d900      	bls.n	800a25e <__ssputs_r+0x8e>
 800a25c:	9e01      	ldr	r6, [sp, #4]
 800a25e:	0032      	movs	r2, r6
 800a260:	9903      	ldr	r1, [sp, #12]
 800a262:	6820      	ldr	r0, [r4, #0]
 800a264:	f7fe f8f7 	bl	8008456 <memmove>
 800a268:	68a3      	ldr	r3, [r4, #8]
 800a26a:	2000      	movs	r0, #0
 800a26c:	1b9b      	subs	r3, r3, r6
 800a26e:	60a3      	str	r3, [r4, #8]
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	199e      	adds	r6, r3, r6
 800a274:	6026      	str	r6, [r4, #0]
 800a276:	e7da      	b.n	800a22e <__ssputs_r+0x5e>
 800a278:	002a      	movs	r2, r5
 800a27a:	0038      	movs	r0, r7
 800a27c:	f000 f92e 	bl	800a4dc <_realloc_r>
 800a280:	1e06      	subs	r6, r0, #0
 800a282:	d1e0      	bne.n	800a246 <__ssputs_r+0x76>
 800a284:	6921      	ldr	r1, [r4, #16]
 800a286:	0038      	movs	r0, r7
 800a288:	f7ff fefa 	bl	800a080 <_free_r>
 800a28c:	e7c7      	b.n	800a21e <__ssputs_r+0x4e>
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	fffffb7f 	.word	0xfffffb7f

0800a294 <_svfiprintf_r>:
 800a294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a296:	b0a1      	sub	sp, #132	; 0x84
 800a298:	9003      	str	r0, [sp, #12]
 800a29a:	001d      	movs	r5, r3
 800a29c:	898b      	ldrh	r3, [r1, #12]
 800a29e:	000f      	movs	r7, r1
 800a2a0:	0016      	movs	r6, r2
 800a2a2:	061b      	lsls	r3, r3, #24
 800a2a4:	d511      	bpl.n	800a2ca <_svfiprintf_r+0x36>
 800a2a6:	690b      	ldr	r3, [r1, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10e      	bne.n	800a2ca <_svfiprintf_r+0x36>
 800a2ac:	2140      	movs	r1, #64	; 0x40
 800a2ae:	f7ff ff31 	bl	800a114 <_malloc_r>
 800a2b2:	6038      	str	r0, [r7, #0]
 800a2b4:	6138      	str	r0, [r7, #16]
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d105      	bne.n	800a2c6 <_svfiprintf_r+0x32>
 800a2ba:	230c      	movs	r3, #12
 800a2bc:	9a03      	ldr	r2, [sp, #12]
 800a2be:	3801      	subs	r0, #1
 800a2c0:	6013      	str	r3, [r2, #0]
 800a2c2:	b021      	add	sp, #132	; 0x84
 800a2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c6:	2340      	movs	r3, #64	; 0x40
 800a2c8:	617b      	str	r3, [r7, #20]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	ac08      	add	r4, sp, #32
 800a2ce:	6163      	str	r3, [r4, #20]
 800a2d0:	3320      	adds	r3, #32
 800a2d2:	7663      	strb	r3, [r4, #25]
 800a2d4:	3310      	adds	r3, #16
 800a2d6:	76a3      	strb	r3, [r4, #26]
 800a2d8:	9507      	str	r5, [sp, #28]
 800a2da:	0035      	movs	r5, r6
 800a2dc:	782b      	ldrb	r3, [r5, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <_svfiprintf_r+0x52>
 800a2e2:	2b25      	cmp	r3, #37	; 0x25
 800a2e4:	d146      	bne.n	800a374 <_svfiprintf_r+0xe0>
 800a2e6:	1bab      	subs	r3, r5, r6
 800a2e8:	9305      	str	r3, [sp, #20]
 800a2ea:	d00c      	beq.n	800a306 <_svfiprintf_r+0x72>
 800a2ec:	0032      	movs	r2, r6
 800a2ee:	0039      	movs	r1, r7
 800a2f0:	9803      	ldr	r0, [sp, #12]
 800a2f2:	f7ff ff6d 	bl	800a1d0 <__ssputs_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d100      	bne.n	800a2fc <_svfiprintf_r+0x68>
 800a2fa:	e0ae      	b.n	800a45a <_svfiprintf_r+0x1c6>
 800a2fc:	6962      	ldr	r2, [r4, #20]
 800a2fe:	9b05      	ldr	r3, [sp, #20]
 800a300:	4694      	mov	ip, r2
 800a302:	4463      	add	r3, ip
 800a304:	6163      	str	r3, [r4, #20]
 800a306:	782b      	ldrb	r3, [r5, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d100      	bne.n	800a30e <_svfiprintf_r+0x7a>
 800a30c:	e0a5      	b.n	800a45a <_svfiprintf_r+0x1c6>
 800a30e:	2201      	movs	r2, #1
 800a310:	2300      	movs	r3, #0
 800a312:	4252      	negs	r2, r2
 800a314:	6062      	str	r2, [r4, #4]
 800a316:	a904      	add	r1, sp, #16
 800a318:	3254      	adds	r2, #84	; 0x54
 800a31a:	1852      	adds	r2, r2, r1
 800a31c:	1c6e      	adds	r6, r5, #1
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	60e3      	str	r3, [r4, #12]
 800a322:	60a3      	str	r3, [r4, #8]
 800a324:	7013      	strb	r3, [r2, #0]
 800a326:	65a3      	str	r3, [r4, #88]	; 0x58
 800a328:	7831      	ldrb	r1, [r6, #0]
 800a32a:	2205      	movs	r2, #5
 800a32c:	4853      	ldr	r0, [pc, #332]	; (800a47c <_svfiprintf_r+0x1e8>)
 800a32e:	f7ff fba7 	bl	8009a80 <memchr>
 800a332:	1c75      	adds	r5, r6, #1
 800a334:	2800      	cmp	r0, #0
 800a336:	d11f      	bne.n	800a378 <_svfiprintf_r+0xe4>
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	06d3      	lsls	r3, r2, #27
 800a33c:	d504      	bpl.n	800a348 <_svfiprintf_r+0xb4>
 800a33e:	2353      	movs	r3, #83	; 0x53
 800a340:	a904      	add	r1, sp, #16
 800a342:	185b      	adds	r3, r3, r1
 800a344:	2120      	movs	r1, #32
 800a346:	7019      	strb	r1, [r3, #0]
 800a348:	0713      	lsls	r3, r2, #28
 800a34a:	d504      	bpl.n	800a356 <_svfiprintf_r+0xc2>
 800a34c:	2353      	movs	r3, #83	; 0x53
 800a34e:	a904      	add	r1, sp, #16
 800a350:	185b      	adds	r3, r3, r1
 800a352:	212b      	movs	r1, #43	; 0x2b
 800a354:	7019      	strb	r1, [r3, #0]
 800a356:	7833      	ldrb	r3, [r6, #0]
 800a358:	2b2a      	cmp	r3, #42	; 0x2a
 800a35a:	d016      	beq.n	800a38a <_svfiprintf_r+0xf6>
 800a35c:	0035      	movs	r5, r6
 800a35e:	2100      	movs	r1, #0
 800a360:	200a      	movs	r0, #10
 800a362:	68e3      	ldr	r3, [r4, #12]
 800a364:	782a      	ldrb	r2, [r5, #0]
 800a366:	1c6e      	adds	r6, r5, #1
 800a368:	3a30      	subs	r2, #48	; 0x30
 800a36a:	2a09      	cmp	r2, #9
 800a36c:	d94e      	bls.n	800a40c <_svfiprintf_r+0x178>
 800a36e:	2900      	cmp	r1, #0
 800a370:	d018      	beq.n	800a3a4 <_svfiprintf_r+0x110>
 800a372:	e010      	b.n	800a396 <_svfiprintf_r+0x102>
 800a374:	3501      	adds	r5, #1
 800a376:	e7b1      	b.n	800a2dc <_svfiprintf_r+0x48>
 800a378:	4b40      	ldr	r3, [pc, #256]	; (800a47c <_svfiprintf_r+0x1e8>)
 800a37a:	6822      	ldr	r2, [r4, #0]
 800a37c:	1ac0      	subs	r0, r0, r3
 800a37e:	2301      	movs	r3, #1
 800a380:	4083      	lsls	r3, r0
 800a382:	4313      	orrs	r3, r2
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	002e      	movs	r6, r5
 800a388:	e7ce      	b.n	800a328 <_svfiprintf_r+0x94>
 800a38a:	9b07      	ldr	r3, [sp, #28]
 800a38c:	1d19      	adds	r1, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9107      	str	r1, [sp, #28]
 800a392:	2b00      	cmp	r3, #0
 800a394:	db01      	blt.n	800a39a <_svfiprintf_r+0x106>
 800a396:	930b      	str	r3, [sp, #44]	; 0x2c
 800a398:	e004      	b.n	800a3a4 <_svfiprintf_r+0x110>
 800a39a:	425b      	negs	r3, r3
 800a39c:	60e3      	str	r3, [r4, #12]
 800a39e:	2302      	movs	r3, #2
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	782b      	ldrb	r3, [r5, #0]
 800a3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a8:	d10a      	bne.n	800a3c0 <_svfiprintf_r+0x12c>
 800a3aa:	786b      	ldrb	r3, [r5, #1]
 800a3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ae:	d135      	bne.n	800a41c <_svfiprintf_r+0x188>
 800a3b0:	9b07      	ldr	r3, [sp, #28]
 800a3b2:	3502      	adds	r5, #2
 800a3b4:	1d1a      	adds	r2, r3, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	9207      	str	r2, [sp, #28]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	db2b      	blt.n	800a416 <_svfiprintf_r+0x182>
 800a3be:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c0:	4e2f      	ldr	r6, [pc, #188]	; (800a480 <_svfiprintf_r+0x1ec>)
 800a3c2:	7829      	ldrb	r1, [r5, #0]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	0030      	movs	r0, r6
 800a3c8:	f7ff fb5a 	bl	8009a80 <memchr>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d006      	beq.n	800a3de <_svfiprintf_r+0x14a>
 800a3d0:	2340      	movs	r3, #64	; 0x40
 800a3d2:	1b80      	subs	r0, r0, r6
 800a3d4:	4083      	lsls	r3, r0
 800a3d6:	6822      	ldr	r2, [r4, #0]
 800a3d8:	3501      	adds	r5, #1
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	7829      	ldrb	r1, [r5, #0]
 800a3e0:	2206      	movs	r2, #6
 800a3e2:	4828      	ldr	r0, [pc, #160]	; (800a484 <_svfiprintf_r+0x1f0>)
 800a3e4:	1c6e      	adds	r6, r5, #1
 800a3e6:	7621      	strb	r1, [r4, #24]
 800a3e8:	f7ff fb4a 	bl	8009a80 <memchr>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d03c      	beq.n	800a46a <_svfiprintf_r+0x1d6>
 800a3f0:	4b25      	ldr	r3, [pc, #148]	; (800a488 <_svfiprintf_r+0x1f4>)
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d125      	bne.n	800a442 <_svfiprintf_r+0x1ae>
 800a3f6:	2207      	movs	r2, #7
 800a3f8:	9b07      	ldr	r3, [sp, #28]
 800a3fa:	3307      	adds	r3, #7
 800a3fc:	4393      	bics	r3, r2
 800a3fe:	3308      	adds	r3, #8
 800a400:	9307      	str	r3, [sp, #28]
 800a402:	6963      	ldr	r3, [r4, #20]
 800a404:	9a04      	ldr	r2, [sp, #16]
 800a406:	189b      	adds	r3, r3, r2
 800a408:	6163      	str	r3, [r4, #20]
 800a40a:	e766      	b.n	800a2da <_svfiprintf_r+0x46>
 800a40c:	4343      	muls	r3, r0
 800a40e:	2101      	movs	r1, #1
 800a410:	189b      	adds	r3, r3, r2
 800a412:	0035      	movs	r5, r6
 800a414:	e7a6      	b.n	800a364 <_svfiprintf_r+0xd0>
 800a416:	2301      	movs	r3, #1
 800a418:	425b      	negs	r3, r3
 800a41a:	e7d0      	b.n	800a3be <_svfiprintf_r+0x12a>
 800a41c:	2300      	movs	r3, #0
 800a41e:	200a      	movs	r0, #10
 800a420:	001a      	movs	r2, r3
 800a422:	3501      	adds	r5, #1
 800a424:	6063      	str	r3, [r4, #4]
 800a426:	7829      	ldrb	r1, [r5, #0]
 800a428:	1c6e      	adds	r6, r5, #1
 800a42a:	3930      	subs	r1, #48	; 0x30
 800a42c:	2909      	cmp	r1, #9
 800a42e:	d903      	bls.n	800a438 <_svfiprintf_r+0x1a4>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0c5      	beq.n	800a3c0 <_svfiprintf_r+0x12c>
 800a434:	9209      	str	r2, [sp, #36]	; 0x24
 800a436:	e7c3      	b.n	800a3c0 <_svfiprintf_r+0x12c>
 800a438:	4342      	muls	r2, r0
 800a43a:	2301      	movs	r3, #1
 800a43c:	1852      	adds	r2, r2, r1
 800a43e:	0035      	movs	r5, r6
 800a440:	e7f1      	b.n	800a426 <_svfiprintf_r+0x192>
 800a442:	ab07      	add	r3, sp, #28
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	003a      	movs	r2, r7
 800a448:	4b10      	ldr	r3, [pc, #64]	; (800a48c <_svfiprintf_r+0x1f8>)
 800a44a:	0021      	movs	r1, r4
 800a44c:	9803      	ldr	r0, [sp, #12]
 800a44e:	f7fe f8b9 	bl	80085c4 <_printf_float>
 800a452:	9004      	str	r0, [sp, #16]
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	3301      	adds	r3, #1
 800a458:	d1d3      	bne.n	800a402 <_svfiprintf_r+0x16e>
 800a45a:	89bb      	ldrh	r3, [r7, #12]
 800a45c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a45e:	065b      	lsls	r3, r3, #25
 800a460:	d400      	bmi.n	800a464 <_svfiprintf_r+0x1d0>
 800a462:	e72e      	b.n	800a2c2 <_svfiprintf_r+0x2e>
 800a464:	2001      	movs	r0, #1
 800a466:	4240      	negs	r0, r0
 800a468:	e72b      	b.n	800a2c2 <_svfiprintf_r+0x2e>
 800a46a:	ab07      	add	r3, sp, #28
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	003a      	movs	r2, r7
 800a470:	4b06      	ldr	r3, [pc, #24]	; (800a48c <_svfiprintf_r+0x1f8>)
 800a472:	0021      	movs	r1, r4
 800a474:	9803      	ldr	r0, [sp, #12]
 800a476:	f7fe fb5f 	bl	8008b38 <_printf_i>
 800a47a:	e7ea      	b.n	800a452 <_svfiprintf_r+0x1be>
 800a47c:	0800c32c 	.word	0x0800c32c
 800a480:	0800c332 	.word	0x0800c332
 800a484:	0800c336 	.word	0x0800c336
 800a488:	080085c5 	.word	0x080085c5
 800a48c:	0800a1d1 	.word	0x0800a1d1

0800a490 <_sbrk_r>:
 800a490:	2300      	movs	r3, #0
 800a492:	b570      	push	{r4, r5, r6, lr}
 800a494:	4c06      	ldr	r4, [pc, #24]	; (800a4b0 <_sbrk_r+0x20>)
 800a496:	0005      	movs	r5, r0
 800a498:	0008      	movs	r0, r1
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	f7f9 fece 	bl	800423c <_sbrk>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d103      	bne.n	800a4ac <_sbrk_r+0x1c>
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d000      	beq.n	800a4ac <_sbrk_r+0x1c>
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	bd70      	pop	{r4, r5, r6, pc}
 800a4ae:	46c0      	nop			; (mov r8, r8)
 800a4b0:	20000908 	.word	0x20000908

0800a4b4 <__ascii_mbtowc>:
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	2900      	cmp	r1, #0
 800a4b8:	d100      	bne.n	800a4bc <__ascii_mbtowc+0x8>
 800a4ba:	a901      	add	r1, sp, #4
 800a4bc:	1e10      	subs	r0, r2, #0
 800a4be:	d006      	beq.n	800a4ce <__ascii_mbtowc+0x1a>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d006      	beq.n	800a4d2 <__ascii_mbtowc+0x1e>
 800a4c4:	7813      	ldrb	r3, [r2, #0]
 800a4c6:	600b      	str	r3, [r1, #0]
 800a4c8:	7810      	ldrb	r0, [r2, #0]
 800a4ca:	1e43      	subs	r3, r0, #1
 800a4cc:	4198      	sbcs	r0, r3
 800a4ce:	b002      	add	sp, #8
 800a4d0:	4770      	bx	lr
 800a4d2:	2002      	movs	r0, #2
 800a4d4:	4240      	negs	r0, r0
 800a4d6:	e7fa      	b.n	800a4ce <__ascii_mbtowc+0x1a>

0800a4d8 <__malloc_lock>:
 800a4d8:	4770      	bx	lr

0800a4da <__malloc_unlock>:
 800a4da:	4770      	bx	lr

0800a4dc <_realloc_r>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	0007      	movs	r7, r0
 800a4e0:	000d      	movs	r5, r1
 800a4e2:	0016      	movs	r6, r2
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	d105      	bne.n	800a4f4 <_realloc_r+0x18>
 800a4e8:	0011      	movs	r1, r2
 800a4ea:	f7ff fe13 	bl	800a114 <_malloc_r>
 800a4ee:	0004      	movs	r4, r0
 800a4f0:	0020      	movs	r0, r4
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	2a00      	cmp	r2, #0
 800a4f6:	d103      	bne.n	800a500 <_realloc_r+0x24>
 800a4f8:	f7ff fdc2 	bl	800a080 <_free_r>
 800a4fc:	0034      	movs	r4, r6
 800a4fe:	e7f7      	b.n	800a4f0 <_realloc_r+0x14>
 800a500:	f000 f81e 	bl	800a540 <_malloc_usable_size_r>
 800a504:	002c      	movs	r4, r5
 800a506:	42b0      	cmp	r0, r6
 800a508:	d2f2      	bcs.n	800a4f0 <_realloc_r+0x14>
 800a50a:	0031      	movs	r1, r6
 800a50c:	0038      	movs	r0, r7
 800a50e:	f7ff fe01 	bl	800a114 <_malloc_r>
 800a512:	1e04      	subs	r4, r0, #0
 800a514:	d0ec      	beq.n	800a4f0 <_realloc_r+0x14>
 800a516:	0029      	movs	r1, r5
 800a518:	0032      	movs	r2, r6
 800a51a:	f7fd ff93 	bl	8008444 <memcpy>
 800a51e:	0029      	movs	r1, r5
 800a520:	0038      	movs	r0, r7
 800a522:	f7ff fdad 	bl	800a080 <_free_r>
 800a526:	e7e3      	b.n	800a4f0 <_realloc_r+0x14>

0800a528 <__ascii_wctomb>:
 800a528:	1e0b      	subs	r3, r1, #0
 800a52a:	d004      	beq.n	800a536 <__ascii_wctomb+0xe>
 800a52c:	2aff      	cmp	r2, #255	; 0xff
 800a52e:	d904      	bls.n	800a53a <__ascii_wctomb+0x12>
 800a530:	238a      	movs	r3, #138	; 0x8a
 800a532:	6003      	str	r3, [r0, #0]
 800a534:	3b8b      	subs	r3, #139	; 0x8b
 800a536:	0018      	movs	r0, r3
 800a538:	4770      	bx	lr
 800a53a:	700a      	strb	r2, [r1, #0]
 800a53c:	2301      	movs	r3, #1
 800a53e:	e7fa      	b.n	800a536 <__ascii_wctomb+0xe>

0800a540 <_malloc_usable_size_r>:
 800a540:	1f0b      	subs	r3, r1, #4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	1f18      	subs	r0, r3, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	da01      	bge.n	800a54e <_malloc_usable_size_r+0xe>
 800a54a:	580b      	ldr	r3, [r1, r0]
 800a54c:	18c0      	adds	r0, r0, r3
 800a54e:	4770      	bx	lr

0800a550 <_init>:
 800a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a552:	46c0      	nop			; (mov r8, r8)
 800a554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a556:	bc08      	pop	{r3}
 800a558:	469e      	mov	lr, r3
 800a55a:	4770      	bx	lr

0800a55c <_fini>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr
