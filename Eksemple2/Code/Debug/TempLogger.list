
TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e494  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001848  0800e558  0800e558  0001e558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fda0  0800fda0  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800fda0  0800fda0  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fda0  0800fda0  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fda0  0800fda0  0001fda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fda4  0800fda4  0001fda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800fda8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c0  20000354  080100fc  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a14  080100fc  00021a14  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c266  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d9f  00000000  00000000  0003c5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e8  00000000  00000000  00040388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f8  00000000  00000000  00041870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e83  00000000  00000000  00042b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013eb6  00000000  00000000  0005a9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008534d  00000000  00000000  0006e8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005994  00000000  00000000  000f3c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000354 	.word	0x20000354
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e53c 	.word	0x0800e53c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000358 	.word	0x20000358
 8000104:	0800e53c 	.word	0x0800e53c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fff1 	bl	8001410 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff49 	bl	80012d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffe3 	bl	8001410 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffd9 	bl	8001410 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6b 	bl	8001348 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff61 	bl	8001348 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 f8a9 	bl	80005f4 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 f82b 	bl	8000508 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f89b 	bl	80005f4 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f891 	bl	80005f4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f839 	bl	8000558 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f82f 	bl	8000558 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__eqsf2>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	0042      	lsls	r2, r0, #1
 800050c:	024e      	lsls	r6, r1, #9
 800050e:	004c      	lsls	r4, r1, #1
 8000510:	0245      	lsls	r5, r0, #9
 8000512:	0a6d      	lsrs	r5, r5, #9
 8000514:	0e12      	lsrs	r2, r2, #24
 8000516:	0fc3      	lsrs	r3, r0, #31
 8000518:	0a76      	lsrs	r6, r6, #9
 800051a:	0e24      	lsrs	r4, r4, #24
 800051c:	0fc9      	lsrs	r1, r1, #31
 800051e:	2aff      	cmp	r2, #255	; 0xff
 8000520:	d00f      	beq.n	8000542 <__eqsf2+0x3a>
 8000522:	2cff      	cmp	r4, #255	; 0xff
 8000524:	d011      	beq.n	800054a <__eqsf2+0x42>
 8000526:	2001      	movs	r0, #1
 8000528:	42a2      	cmp	r2, r4
 800052a:	d000      	beq.n	800052e <__eqsf2+0x26>
 800052c:	bd70      	pop	{r4, r5, r6, pc}
 800052e:	42b5      	cmp	r5, r6
 8000530:	d1fc      	bne.n	800052c <__eqsf2+0x24>
 8000532:	428b      	cmp	r3, r1
 8000534:	d00d      	beq.n	8000552 <__eqsf2+0x4a>
 8000536:	2a00      	cmp	r2, #0
 8000538:	d1f8      	bne.n	800052c <__eqsf2+0x24>
 800053a:	0028      	movs	r0, r5
 800053c:	1e45      	subs	r5, r0, #1
 800053e:	41a8      	sbcs	r0, r5
 8000540:	e7f4      	b.n	800052c <__eqsf2+0x24>
 8000542:	2001      	movs	r0, #1
 8000544:	2d00      	cmp	r5, #0
 8000546:	d1f1      	bne.n	800052c <__eqsf2+0x24>
 8000548:	e7eb      	b.n	8000522 <__eqsf2+0x1a>
 800054a:	2001      	movs	r0, #1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d1ed      	bne.n	800052c <__eqsf2+0x24>
 8000550:	e7e9      	b.n	8000526 <__eqsf2+0x1e>
 8000552:	2000      	movs	r0, #0
 8000554:	e7ea      	b.n	800052c <__eqsf2+0x24>
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__gesf2>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	004a      	lsls	r2, r1, #1
 800055c:	024e      	lsls	r6, r1, #9
 800055e:	0245      	lsls	r5, r0, #9
 8000560:	0044      	lsls	r4, r0, #1
 8000562:	0a6d      	lsrs	r5, r5, #9
 8000564:	0e24      	lsrs	r4, r4, #24
 8000566:	0fc3      	lsrs	r3, r0, #31
 8000568:	0a76      	lsrs	r6, r6, #9
 800056a:	0e12      	lsrs	r2, r2, #24
 800056c:	0fc9      	lsrs	r1, r1, #31
 800056e:	2cff      	cmp	r4, #255	; 0xff
 8000570:	d015      	beq.n	800059e <__gesf2+0x46>
 8000572:	2aff      	cmp	r2, #255	; 0xff
 8000574:	d00e      	beq.n	8000594 <__gesf2+0x3c>
 8000576:	2c00      	cmp	r4, #0
 8000578:	d115      	bne.n	80005a6 <__gesf2+0x4e>
 800057a:	2a00      	cmp	r2, #0
 800057c:	d101      	bne.n	8000582 <__gesf2+0x2a>
 800057e:	2e00      	cmp	r6, #0
 8000580:	d01c      	beq.n	80005bc <__gesf2+0x64>
 8000582:	2d00      	cmp	r5, #0
 8000584:	d014      	beq.n	80005b0 <__gesf2+0x58>
 8000586:	428b      	cmp	r3, r1
 8000588:	d027      	beq.n	80005da <__gesf2+0x82>
 800058a:	2002      	movs	r0, #2
 800058c:	3b01      	subs	r3, #1
 800058e:	4018      	ands	r0, r3
 8000590:	3801      	subs	r0, #1
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	2e00      	cmp	r6, #0
 8000596:	d0ee      	beq.n	8000576 <__gesf2+0x1e>
 8000598:	2002      	movs	r0, #2
 800059a:	4240      	negs	r0, r0
 800059c:	e7f9      	b.n	8000592 <__gesf2+0x3a>
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d1fa      	bne.n	8000598 <__gesf2+0x40>
 80005a2:	2aff      	cmp	r2, #255	; 0xff
 80005a4:	d00e      	beq.n	80005c4 <__gesf2+0x6c>
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d10e      	bne.n	80005c8 <__gesf2+0x70>
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d0ed      	beq.n	800058a <__gesf2+0x32>
 80005ae:	e00b      	b.n	80005c8 <__gesf2+0x70>
 80005b0:	2301      	movs	r3, #1
 80005b2:	3901      	subs	r1, #1
 80005b4:	4399      	bics	r1, r3
 80005b6:	0008      	movs	r0, r1
 80005b8:	3001      	adds	r0, #1
 80005ba:	e7ea      	b.n	8000592 <__gesf2+0x3a>
 80005bc:	2000      	movs	r0, #0
 80005be:	2d00      	cmp	r5, #0
 80005c0:	d0e7      	beq.n	8000592 <__gesf2+0x3a>
 80005c2:	e7e2      	b.n	800058a <__gesf2+0x32>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d1e7      	bne.n	8000598 <__gesf2+0x40>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1de      	bne.n	800058a <__gesf2+0x32>
 80005cc:	4294      	cmp	r4, r2
 80005ce:	dd05      	ble.n	80005dc <__gesf2+0x84>
 80005d0:	2102      	movs	r1, #2
 80005d2:	1e58      	subs	r0, r3, #1
 80005d4:	4008      	ands	r0, r1
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7db      	b.n	8000592 <__gesf2+0x3a>
 80005da:	2400      	movs	r4, #0
 80005dc:	42a2      	cmp	r2, r4
 80005de:	dc04      	bgt.n	80005ea <__gesf2+0x92>
 80005e0:	42b5      	cmp	r5, r6
 80005e2:	d8d2      	bhi.n	800058a <__gesf2+0x32>
 80005e4:	2000      	movs	r0, #0
 80005e6:	42b5      	cmp	r5, r6
 80005e8:	d2d3      	bcs.n	8000592 <__gesf2+0x3a>
 80005ea:	1e58      	subs	r0, r3, #1
 80005ec:	2301      	movs	r3, #1
 80005ee:	4398      	bics	r0, r3
 80005f0:	3001      	adds	r0, #1
 80005f2:	e7ce      	b.n	8000592 <__gesf2+0x3a>

080005f4 <__lesf2>:
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	0042      	lsls	r2, r0, #1
 80005f8:	0244      	lsls	r4, r0, #9
 80005fa:	024d      	lsls	r5, r1, #9
 80005fc:	0fc3      	lsrs	r3, r0, #31
 80005fe:	0048      	lsls	r0, r1, #1
 8000600:	0a64      	lsrs	r4, r4, #9
 8000602:	0e12      	lsrs	r2, r2, #24
 8000604:	0a6d      	lsrs	r5, r5, #9
 8000606:	0e00      	lsrs	r0, r0, #24
 8000608:	0fc9      	lsrs	r1, r1, #31
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d012      	beq.n	8000634 <__lesf2+0x40>
 800060e:	28ff      	cmp	r0, #255	; 0xff
 8000610:	d00c      	beq.n	800062c <__lesf2+0x38>
 8000612:	2a00      	cmp	r2, #0
 8000614:	d112      	bne.n	800063c <__lesf2+0x48>
 8000616:	2800      	cmp	r0, #0
 8000618:	d119      	bne.n	800064e <__lesf2+0x5a>
 800061a:	2d00      	cmp	r5, #0
 800061c:	d117      	bne.n	800064e <__lesf2+0x5a>
 800061e:	2c00      	cmp	r4, #0
 8000620:	d02b      	beq.n	800067a <__lesf2+0x86>
 8000622:	2002      	movs	r0, #2
 8000624:	3b01      	subs	r3, #1
 8000626:	4018      	ands	r0, r3
 8000628:	3801      	subs	r0, #1
 800062a:	e026      	b.n	800067a <__lesf2+0x86>
 800062c:	2d00      	cmp	r5, #0
 800062e:	d0f0      	beq.n	8000612 <__lesf2+0x1e>
 8000630:	2002      	movs	r0, #2
 8000632:	e022      	b.n	800067a <__lesf2+0x86>
 8000634:	2c00      	cmp	r4, #0
 8000636:	d1fb      	bne.n	8000630 <__lesf2+0x3c>
 8000638:	28ff      	cmp	r0, #255	; 0xff
 800063a:	d01f      	beq.n	800067c <__lesf2+0x88>
 800063c:	2800      	cmp	r0, #0
 800063e:	d11f      	bne.n	8000680 <__lesf2+0x8c>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d11d      	bne.n	8000680 <__lesf2+0x8c>
 8000644:	2002      	movs	r0, #2
 8000646:	3b01      	subs	r3, #1
 8000648:	4018      	ands	r0, r3
 800064a:	3801      	subs	r0, #1
 800064c:	e015      	b.n	800067a <__lesf2+0x86>
 800064e:	2c00      	cmp	r4, #0
 8000650:	d00e      	beq.n	8000670 <__lesf2+0x7c>
 8000652:	428b      	cmp	r3, r1
 8000654:	d1e5      	bne.n	8000622 <__lesf2+0x2e>
 8000656:	2200      	movs	r2, #0
 8000658:	4290      	cmp	r0, r2
 800065a:	dc04      	bgt.n	8000666 <__lesf2+0x72>
 800065c:	42ac      	cmp	r4, r5
 800065e:	d8e0      	bhi.n	8000622 <__lesf2+0x2e>
 8000660:	2000      	movs	r0, #0
 8000662:	42ac      	cmp	r4, r5
 8000664:	d209      	bcs.n	800067a <__lesf2+0x86>
 8000666:	1e58      	subs	r0, r3, #1
 8000668:	2301      	movs	r3, #1
 800066a:	4398      	bics	r0, r3
 800066c:	3001      	adds	r0, #1
 800066e:	e004      	b.n	800067a <__lesf2+0x86>
 8000670:	2301      	movs	r3, #1
 8000672:	3901      	subs	r1, #1
 8000674:	4399      	bics	r1, r3
 8000676:	0008      	movs	r0, r1
 8000678:	3001      	adds	r0, #1
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	2d00      	cmp	r5, #0
 800067e:	d1d7      	bne.n	8000630 <__lesf2+0x3c>
 8000680:	428b      	cmp	r3, r1
 8000682:	d1ce      	bne.n	8000622 <__lesf2+0x2e>
 8000684:	4282      	cmp	r2, r0
 8000686:	dde7      	ble.n	8000658 <__lesf2+0x64>
 8000688:	2102      	movs	r1, #2
 800068a:	1e58      	subs	r0, r3, #1
 800068c:	4008      	ands	r0, r1
 800068e:	3801      	subs	r0, #1
 8000690:	e7f3      	b.n	800067a <__lesf2+0x86>
 8000692:	46c0      	nop			; (mov r8, r8)

08000694 <__aeabi_dadd>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	464f      	mov	r7, r9
 8000698:	4646      	mov	r6, r8
 800069a:	46d6      	mov	lr, sl
 800069c:	000c      	movs	r4, r1
 800069e:	0309      	lsls	r1, r1, #12
 80006a0:	b5c0      	push	{r6, r7, lr}
 80006a2:	0a49      	lsrs	r1, r1, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	005e      	lsls	r6, r3, #1
 80006a8:	4339      	orrs	r1, r7
 80006aa:	031f      	lsls	r7, r3, #12
 80006ac:	0fdb      	lsrs	r3, r3, #31
 80006ae:	469c      	mov	ip, r3
 80006b0:	0065      	lsls	r5, r4, #1
 80006b2:	0a7b      	lsrs	r3, r7, #9
 80006b4:	0f57      	lsrs	r7, r2, #29
 80006b6:	431f      	orrs	r7, r3
 80006b8:	0d6d      	lsrs	r5, r5, #21
 80006ba:	0fe4      	lsrs	r4, r4, #31
 80006bc:	0d76      	lsrs	r6, r6, #21
 80006be:	46a1      	mov	r9, r4
 80006c0:	00c0      	lsls	r0, r0, #3
 80006c2:	46b8      	mov	r8, r7
 80006c4:	00d2      	lsls	r2, r2, #3
 80006c6:	1bab      	subs	r3, r5, r6
 80006c8:	4564      	cmp	r4, ip
 80006ca:	d07b      	beq.n	80007c4 <__aeabi_dadd+0x130>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd5f      	ble.n	8000790 <__aeabi_dadd+0xfc>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_dadd+0x42>
 80006d4:	e0a4      	b.n	8000820 <__aeabi_dadd+0x18c>
 80006d6:	003e      	movs	r6, r7
 80006d8:	4316      	orrs	r6, r2
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x4a>
 80006dc:	e112      	b.n	8000904 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x52>
 80006e4:	e19e      	b.n	8000a24 <__aeabi_dadd+0x390>
 80006e6:	1a87      	subs	r7, r0, r2
 80006e8:	4643      	mov	r3, r8
 80006ea:	42b8      	cmp	r0, r7
 80006ec:	4180      	sbcs	r0, r0
 80006ee:	2501      	movs	r5, #1
 80006f0:	1ac9      	subs	r1, r1, r3
 80006f2:	4240      	negs	r0, r0
 80006f4:	1a09      	subs	r1, r1, r0
 80006f6:	020b      	lsls	r3, r1, #8
 80006f8:	d400      	bmi.n	80006fc <__aeabi_dadd+0x68>
 80006fa:	e131      	b.n	8000960 <__aeabi_dadd+0x2cc>
 80006fc:	0249      	lsls	r1, r1, #9
 80006fe:	0a4e      	lsrs	r6, r1, #9
 8000700:	2e00      	cmp	r6, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x72>
 8000704:	e16e      	b.n	80009e4 <__aeabi_dadd+0x350>
 8000706:	0030      	movs	r0, r6
 8000708:	f001 fe38 	bl	800237c <__clzsi2>
 800070c:	0003      	movs	r3, r0
 800070e:	3b08      	subs	r3, #8
 8000710:	2b1f      	cmp	r3, #31
 8000712:	dd00      	ble.n	8000716 <__aeabi_dadd+0x82>
 8000714:	e161      	b.n	80009da <__aeabi_dadd+0x346>
 8000716:	2220      	movs	r2, #32
 8000718:	0039      	movs	r1, r7
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	409e      	lsls	r6, r3
 800071e:	40d1      	lsrs	r1, r2
 8000720:	409f      	lsls	r7, r3
 8000722:	430e      	orrs	r6, r1
 8000724:	429d      	cmp	r5, r3
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x96>
 8000728:	e151      	b.n	80009ce <__aeabi_dadd+0x33a>
 800072a:	1b5d      	subs	r5, r3, r5
 800072c:	1c6b      	adds	r3, r5, #1
 800072e:	2b1f      	cmp	r3, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0xa0>
 8000732:	e17c      	b.n	8000a2e <__aeabi_dadd+0x39a>
 8000734:	2120      	movs	r1, #32
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	003d      	movs	r5, r7
 800073a:	0030      	movs	r0, r6
 800073c:	408f      	lsls	r7, r1
 800073e:	4088      	lsls	r0, r1
 8000740:	40dd      	lsrs	r5, r3
 8000742:	1e79      	subs	r1, r7, #1
 8000744:	418f      	sbcs	r7, r1
 8000746:	0031      	movs	r1, r6
 8000748:	2207      	movs	r2, #7
 800074a:	4328      	orrs	r0, r5
 800074c:	40d9      	lsrs	r1, r3
 800074e:	2500      	movs	r5, #0
 8000750:	4307      	orrs	r7, r0
 8000752:	403a      	ands	r2, r7
 8000754:	2a00      	cmp	r2, #0
 8000756:	d009      	beq.n	800076c <__aeabi_dadd+0xd8>
 8000758:	230f      	movs	r3, #15
 800075a:	403b      	ands	r3, r7
 800075c:	2b04      	cmp	r3, #4
 800075e:	d005      	beq.n	800076c <__aeabi_dadd+0xd8>
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	42bb      	cmp	r3, r7
 8000764:	41bf      	sbcs	r7, r7
 8000766:	427f      	negs	r7, r7
 8000768:	19c9      	adds	r1, r1, r7
 800076a:	001f      	movs	r7, r3
 800076c:	020b      	lsls	r3, r1, #8
 800076e:	d400      	bmi.n	8000772 <__aeabi_dadd+0xde>
 8000770:	e226      	b.n	8000bc0 <__aeabi_dadd+0x52c>
 8000772:	1c6a      	adds	r2, r5, #1
 8000774:	4bc6      	ldr	r3, [pc, #792]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000776:	0555      	lsls	r5, r2, #21
 8000778:	0d6d      	lsrs	r5, r5, #21
 800077a:	429a      	cmp	r2, r3
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0xec>
 800077e:	e106      	b.n	800098e <__aeabi_dadd+0x2fa>
 8000780:	4ac4      	ldr	r2, [pc, #784]	; (8000a94 <__aeabi_dadd+0x400>)
 8000782:	08ff      	lsrs	r7, r7, #3
 8000784:	400a      	ands	r2, r1
 8000786:	0753      	lsls	r3, r2, #29
 8000788:	0252      	lsls	r2, r2, #9
 800078a:	433b      	orrs	r3, r7
 800078c:	0b12      	lsrs	r2, r2, #12
 800078e:	e08e      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_dadd+0x102>
 8000794:	e0b8      	b.n	8000908 <__aeabi_dadd+0x274>
 8000796:	1c6b      	adds	r3, r5, #1
 8000798:	055b      	lsls	r3, r3, #21
 800079a:	0d5b      	lsrs	r3, r3, #21
 800079c:	2b01      	cmp	r3, #1
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_dadd+0x10e>
 80007a0:	e130      	b.n	8000a04 <__aeabi_dadd+0x370>
 80007a2:	1a87      	subs	r7, r0, r2
 80007a4:	4643      	mov	r3, r8
 80007a6:	42b8      	cmp	r0, r7
 80007a8:	41b6      	sbcs	r6, r6
 80007aa:	1acb      	subs	r3, r1, r3
 80007ac:	4276      	negs	r6, r6
 80007ae:	1b9e      	subs	r6, r3, r6
 80007b0:	0233      	lsls	r3, r6, #8
 80007b2:	d500      	bpl.n	80007b6 <__aeabi_dadd+0x122>
 80007b4:	e14c      	b.n	8000a50 <__aeabi_dadd+0x3bc>
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	d1a1      	bne.n	8000700 <__aeabi_dadd+0x6c>
 80007bc:	2200      	movs	r2, #0
 80007be:	2400      	movs	r4, #0
 80007c0:	2500      	movs	r5, #0
 80007c2:	e070      	b.n	80008a6 <__aeabi_dadd+0x212>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_dadd+0x136>
 80007c8:	e0e5      	b.n	8000996 <__aeabi_dadd+0x302>
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_dadd+0x13c>
 80007ce:	e083      	b.n	80008d8 <__aeabi_dadd+0x244>
 80007d0:	4eaf      	ldr	r6, [pc, #700]	; (8000a90 <__aeabi_dadd+0x3fc>)
 80007d2:	42b5      	cmp	r5, r6
 80007d4:	d060      	beq.n	8000898 <__aeabi_dadd+0x204>
 80007d6:	2680      	movs	r6, #128	; 0x80
 80007d8:	0436      	lsls	r6, r6, #16
 80007da:	4337      	orrs	r7, r6
 80007dc:	46b8      	mov	r8, r7
 80007de:	2b38      	cmp	r3, #56	; 0x38
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x150>
 80007e2:	e13e      	b.n	8000a62 <__aeabi_dadd+0x3ce>
 80007e4:	4643      	mov	r3, r8
 80007e6:	4313      	orrs	r3, r2
 80007e8:	001f      	movs	r7, r3
 80007ea:	1e7a      	subs	r2, r7, #1
 80007ec:	4197      	sbcs	r7, r2
 80007ee:	183f      	adds	r7, r7, r0
 80007f0:	4287      	cmp	r7, r0
 80007f2:	4180      	sbcs	r0, r0
 80007f4:	4240      	negs	r0, r0
 80007f6:	1809      	adds	r1, r1, r0
 80007f8:	020b      	lsls	r3, r1, #8
 80007fa:	d400      	bmi.n	80007fe <__aeabi_dadd+0x16a>
 80007fc:	e0b0      	b.n	8000960 <__aeabi_dadd+0x2cc>
 80007fe:	4ba4      	ldr	r3, [pc, #656]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000800:	3501      	adds	r5, #1
 8000802:	429d      	cmp	r5, r3
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x174>
 8000806:	e0c3      	b.n	8000990 <__aeabi_dadd+0x2fc>
 8000808:	4aa2      	ldr	r2, [pc, #648]	; (8000a94 <__aeabi_dadd+0x400>)
 800080a:	087b      	lsrs	r3, r7, #1
 800080c:	400a      	ands	r2, r1
 800080e:	2101      	movs	r1, #1
 8000810:	400f      	ands	r7, r1
 8000812:	431f      	orrs	r7, r3
 8000814:	0851      	lsrs	r1, r2, #1
 8000816:	07d3      	lsls	r3, r2, #31
 8000818:	2207      	movs	r2, #7
 800081a:	431f      	orrs	r7, r3
 800081c:	403a      	ands	r2, r7
 800081e:	e799      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000820:	4e9b      	ldr	r6, [pc, #620]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000822:	42b5      	cmp	r5, r6
 8000824:	d038      	beq.n	8000898 <__aeabi_dadd+0x204>
 8000826:	2680      	movs	r6, #128	; 0x80
 8000828:	0436      	lsls	r6, r6, #16
 800082a:	4337      	orrs	r7, r6
 800082c:	46b8      	mov	r8, r7
 800082e:	2b38      	cmp	r3, #56	; 0x38
 8000830:	dd00      	ble.n	8000834 <__aeabi_dadd+0x1a0>
 8000832:	e0dc      	b.n	80009ee <__aeabi_dadd+0x35a>
 8000834:	2b1f      	cmp	r3, #31
 8000836:	dc00      	bgt.n	800083a <__aeabi_dadd+0x1a6>
 8000838:	e130      	b.n	8000a9c <__aeabi_dadd+0x408>
 800083a:	001e      	movs	r6, r3
 800083c:	4647      	mov	r7, r8
 800083e:	3e20      	subs	r6, #32
 8000840:	40f7      	lsrs	r7, r6
 8000842:	46bc      	mov	ip, r7
 8000844:	2b20      	cmp	r3, #32
 8000846:	d004      	beq.n	8000852 <__aeabi_dadd+0x1be>
 8000848:	2640      	movs	r6, #64	; 0x40
 800084a:	1af3      	subs	r3, r6, r3
 800084c:	4646      	mov	r6, r8
 800084e:	409e      	lsls	r6, r3
 8000850:	4332      	orrs	r2, r6
 8000852:	0017      	movs	r7, r2
 8000854:	4663      	mov	r3, ip
 8000856:	1e7a      	subs	r2, r7, #1
 8000858:	4197      	sbcs	r7, r2
 800085a:	431f      	orrs	r7, r3
 800085c:	e0cc      	b.n	80009f8 <__aeabi_dadd+0x364>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_dadd+0x1d0>
 8000862:	e204      	b.n	8000c6e <__aeabi_dadd+0x5da>
 8000864:	4643      	mov	r3, r8
 8000866:	4313      	orrs	r3, r2
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0x1d8>
 800086a:	e159      	b.n	8000b20 <__aeabi_dadd+0x48c>
 800086c:	074b      	lsls	r3, r1, #29
 800086e:	08c0      	lsrs	r0, r0, #3
 8000870:	4318      	orrs	r0, r3
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	08c9      	lsrs	r1, r1, #3
 8000876:	031b      	lsls	r3, r3, #12
 8000878:	4219      	tst	r1, r3
 800087a:	d008      	beq.n	800088e <__aeabi_dadd+0x1fa>
 800087c:	4645      	mov	r5, r8
 800087e:	08ed      	lsrs	r5, r5, #3
 8000880:	421d      	tst	r5, r3
 8000882:	d104      	bne.n	800088e <__aeabi_dadd+0x1fa>
 8000884:	4643      	mov	r3, r8
 8000886:	08d0      	lsrs	r0, r2, #3
 8000888:	0759      	lsls	r1, r3, #29
 800088a:	4308      	orrs	r0, r1
 800088c:	0029      	movs	r1, r5
 800088e:	0f42      	lsrs	r2, r0, #29
 8000890:	00c9      	lsls	r1, r1, #3
 8000892:	4d7f      	ldr	r5, [pc, #508]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000894:	4311      	orrs	r1, r2
 8000896:	00c0      	lsls	r0, r0, #3
 8000898:	074b      	lsls	r3, r1, #29
 800089a:	08ca      	lsrs	r2, r1, #3
 800089c:	497c      	ldr	r1, [pc, #496]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800089e:	08c0      	lsrs	r0, r0, #3
 80008a0:	4303      	orrs	r3, r0
 80008a2:	428d      	cmp	r5, r1
 80008a4:	d068      	beq.n	8000978 <__aeabi_dadd+0x2e4>
 80008a6:	0312      	lsls	r2, r2, #12
 80008a8:	056d      	lsls	r5, r5, #21
 80008aa:	0b12      	lsrs	r2, r2, #12
 80008ac:	0d6d      	lsrs	r5, r5, #21
 80008ae:	2100      	movs	r1, #0
 80008b0:	0312      	lsls	r2, r2, #12
 80008b2:	0018      	movs	r0, r3
 80008b4:	0b13      	lsrs	r3, r2, #12
 80008b6:	0d0a      	lsrs	r2, r1, #20
 80008b8:	0512      	lsls	r2, r2, #20
 80008ba:	431a      	orrs	r2, r3
 80008bc:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <__aeabi_dadd+0x404>)
 80008be:	052d      	lsls	r5, r5, #20
 80008c0:	4013      	ands	r3, r2
 80008c2:	432b      	orrs	r3, r5
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	07e4      	lsls	r4, r4, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4323      	orrs	r3, r4
 80008cc:	0019      	movs	r1, r3
 80008ce:	bc1c      	pop	{r2, r3, r4}
 80008d0:	4690      	mov	r8, r2
 80008d2:	4699      	mov	r9, r3
 80008d4:	46a2      	mov	sl, r4
 80008d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d8:	003e      	movs	r6, r7
 80008da:	4316      	orrs	r6, r2
 80008dc:	d012      	beq.n	8000904 <__aeabi_dadd+0x270>
 80008de:	1e5e      	subs	r6, r3, #1
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x252>
 80008e4:	e100      	b.n	8000ae8 <__aeabi_dadd+0x454>
 80008e6:	1887      	adds	r7, r0, r2
 80008e8:	4287      	cmp	r7, r0
 80008ea:	4180      	sbcs	r0, r0
 80008ec:	4441      	add	r1, r8
 80008ee:	4240      	negs	r0, r0
 80008f0:	1809      	adds	r1, r1, r0
 80008f2:	2501      	movs	r5, #1
 80008f4:	020b      	lsls	r3, r1, #8
 80008f6:	d533      	bpl.n	8000960 <__aeabi_dadd+0x2cc>
 80008f8:	2502      	movs	r5, #2
 80008fa:	e785      	b.n	8000808 <__aeabi_dadd+0x174>
 80008fc:	4664      	mov	r4, ip
 80008fe:	0033      	movs	r3, r6
 8000900:	4641      	mov	r1, r8
 8000902:	0010      	movs	r0, r2
 8000904:	001d      	movs	r5, r3
 8000906:	e7c7      	b.n	8000898 <__aeabi_dadd+0x204>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d000      	beq.n	800090e <__aeabi_dadd+0x27a>
 800090c:	e0da      	b.n	8000ac4 <__aeabi_dadd+0x430>
 800090e:	000c      	movs	r4, r1
 8000910:	4304      	orrs	r4, r0
 8000912:	d0f3      	beq.n	80008fc <__aeabi_dadd+0x268>
 8000914:	1c5c      	adds	r4, r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x286>
 8000918:	e19f      	b.n	8000c5a <__aeabi_dadd+0x5c6>
 800091a:	4c5d      	ldr	r4, [pc, #372]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800091c:	42a6      	cmp	r6, r4
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x28e>
 8000920:	e12f      	b.n	8000b82 <__aeabi_dadd+0x4ee>
 8000922:	43db      	mvns	r3, r3
 8000924:	2b38      	cmp	r3, #56	; 0x38
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0x296>
 8000928:	e166      	b.n	8000bf8 <__aeabi_dadd+0x564>
 800092a:	2b1f      	cmp	r3, #31
 800092c:	dd00      	ble.n	8000930 <__aeabi_dadd+0x29c>
 800092e:	e183      	b.n	8000c38 <__aeabi_dadd+0x5a4>
 8000930:	2420      	movs	r4, #32
 8000932:	0005      	movs	r5, r0
 8000934:	1ae4      	subs	r4, r4, r3
 8000936:	000f      	movs	r7, r1
 8000938:	40dd      	lsrs	r5, r3
 800093a:	40d9      	lsrs	r1, r3
 800093c:	40a0      	lsls	r0, r4
 800093e:	4643      	mov	r3, r8
 8000940:	40a7      	lsls	r7, r4
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	1e44      	subs	r4, r0, #1
 8000946:	41a0      	sbcs	r0, r4
 8000948:	4698      	mov	r8, r3
 800094a:	432f      	orrs	r7, r5
 800094c:	4338      	orrs	r0, r7
 800094e:	1a17      	subs	r7, r2, r0
 8000950:	42ba      	cmp	r2, r7
 8000952:	4192      	sbcs	r2, r2
 8000954:	4643      	mov	r3, r8
 8000956:	4252      	negs	r2, r2
 8000958:	1a99      	subs	r1, r3, r2
 800095a:	4664      	mov	r4, ip
 800095c:	0035      	movs	r5, r6
 800095e:	e6ca      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000960:	2207      	movs	r2, #7
 8000962:	403a      	ands	r2, r7
 8000964:	2a00      	cmp	r2, #0
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x2d6>
 8000968:	e6f6      	b.n	8000758 <__aeabi_dadd+0xc4>
 800096a:	074b      	lsls	r3, r1, #29
 800096c:	08ca      	lsrs	r2, r1, #3
 800096e:	4948      	ldr	r1, [pc, #288]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000970:	08ff      	lsrs	r7, r7, #3
 8000972:	433b      	orrs	r3, r7
 8000974:	428d      	cmp	r5, r1
 8000976:	d196      	bne.n	80008a6 <__aeabi_dadd+0x212>
 8000978:	0019      	movs	r1, r3
 800097a:	4311      	orrs	r1, r2
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2ec>
 800097e:	e19e      	b.n	8000cbe <__aeabi_dadd+0x62a>
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0309      	lsls	r1, r1, #12
 8000984:	430a      	orrs	r2, r1
 8000986:	0312      	lsls	r2, r2, #12
 8000988:	0b12      	lsrs	r2, r2, #12
 800098a:	4d41      	ldr	r5, [pc, #260]	; (8000a90 <__aeabi_dadd+0x3fc>)
 800098c:	e78f      	b.n	80008ae <__aeabi_dadd+0x21a>
 800098e:	0015      	movs	r5, r2
 8000990:	2200      	movs	r2, #0
 8000992:	2300      	movs	r3, #0
 8000994:	e78b      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d000      	beq.n	800099c <__aeabi_dadd+0x308>
 800099a:	e0c7      	b.n	8000b2c <__aeabi_dadd+0x498>
 800099c:	1c6b      	adds	r3, r5, #1
 800099e:	055f      	lsls	r7, r3, #21
 80009a0:	0d7f      	lsrs	r7, r7, #21
 80009a2:	2f01      	cmp	r7, #1
 80009a4:	dc00      	bgt.n	80009a8 <__aeabi_dadd+0x314>
 80009a6:	e0f1      	b.n	8000b8c <__aeabi_dadd+0x4f8>
 80009a8:	4d39      	ldr	r5, [pc, #228]	; (8000a90 <__aeabi_dadd+0x3fc>)
 80009aa:	42ab      	cmp	r3, r5
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x31c>
 80009ae:	e0b9      	b.n	8000b24 <__aeabi_dadd+0x490>
 80009b0:	1885      	adds	r5, r0, r2
 80009b2:	000a      	movs	r2, r1
 80009b4:	4285      	cmp	r5, r0
 80009b6:	4189      	sbcs	r1, r1
 80009b8:	4442      	add	r2, r8
 80009ba:	4249      	negs	r1, r1
 80009bc:	1851      	adds	r1, r2, r1
 80009be:	2207      	movs	r2, #7
 80009c0:	07cf      	lsls	r7, r1, #31
 80009c2:	086d      	lsrs	r5, r5, #1
 80009c4:	432f      	orrs	r7, r5
 80009c6:	0849      	lsrs	r1, r1, #1
 80009c8:	403a      	ands	r2, r7
 80009ca:	001d      	movs	r5, r3
 80009cc:	e6c2      	b.n	8000754 <__aeabi_dadd+0xc0>
 80009ce:	2207      	movs	r2, #7
 80009d0:	4930      	ldr	r1, [pc, #192]	; (8000a94 <__aeabi_dadd+0x400>)
 80009d2:	1aed      	subs	r5, r5, r3
 80009d4:	4031      	ands	r1, r6
 80009d6:	403a      	ands	r2, r7
 80009d8:	e6bc      	b.n	8000754 <__aeabi_dadd+0xc0>
 80009da:	003e      	movs	r6, r7
 80009dc:	3828      	subs	r0, #40	; 0x28
 80009de:	4086      	lsls	r6, r0
 80009e0:	2700      	movs	r7, #0
 80009e2:	e69f      	b.n	8000724 <__aeabi_dadd+0x90>
 80009e4:	0038      	movs	r0, r7
 80009e6:	f001 fcc9 	bl	800237c <__clzsi2>
 80009ea:	3020      	adds	r0, #32
 80009ec:	e68e      	b.n	800070c <__aeabi_dadd+0x78>
 80009ee:	4643      	mov	r3, r8
 80009f0:	4313      	orrs	r3, r2
 80009f2:	001f      	movs	r7, r3
 80009f4:	1e7a      	subs	r2, r7, #1
 80009f6:	4197      	sbcs	r7, r2
 80009f8:	1bc7      	subs	r7, r0, r7
 80009fa:	42b8      	cmp	r0, r7
 80009fc:	4180      	sbcs	r0, r0
 80009fe:	4240      	negs	r0, r0
 8000a00:	1a09      	subs	r1, r1, r0
 8000a02:	e678      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000a04:	000e      	movs	r6, r1
 8000a06:	003b      	movs	r3, r7
 8000a08:	4306      	orrs	r6, r0
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	2d00      	cmp	r5, #0
 8000a0e:	d161      	bne.n	8000ad4 <__aeabi_dadd+0x440>
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x382>
 8000a14:	e0f4      	b.n	8000c00 <__aeabi_dadd+0x56c>
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x388>
 8000a1a:	e11b      	b.n	8000c54 <__aeabi_dadd+0x5c0>
 8000a1c:	4664      	mov	r4, ip
 8000a1e:	0039      	movs	r1, r7
 8000a20:	0010      	movs	r0, r2
 8000a22:	e739      	b.n	8000898 <__aeabi_dadd+0x204>
 8000a24:	4f1a      	ldr	r7, [pc, #104]	; (8000a90 <__aeabi_dadd+0x3fc>)
 8000a26:	42bb      	cmp	r3, r7
 8000a28:	d07a      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000a2a:	0033      	movs	r3, r6
 8000a2c:	e6ff      	b.n	800082e <__aeabi_dadd+0x19a>
 8000a2e:	0030      	movs	r0, r6
 8000a30:	3d1f      	subs	r5, #31
 8000a32:	40e8      	lsrs	r0, r5
 8000a34:	2b20      	cmp	r3, #32
 8000a36:	d003      	beq.n	8000a40 <__aeabi_dadd+0x3ac>
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	1acb      	subs	r3, r1, r3
 8000a3c:	409e      	lsls	r6, r3
 8000a3e:	4337      	orrs	r7, r6
 8000a40:	1e7b      	subs	r3, r7, #1
 8000a42:	419f      	sbcs	r7, r3
 8000a44:	2207      	movs	r2, #7
 8000a46:	4307      	orrs	r7, r0
 8000a48:	403a      	ands	r2, r7
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	e789      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000a50:	1a17      	subs	r7, r2, r0
 8000a52:	4643      	mov	r3, r8
 8000a54:	42ba      	cmp	r2, r7
 8000a56:	41b6      	sbcs	r6, r6
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	4276      	negs	r6, r6
 8000a5c:	1b8e      	subs	r6, r1, r6
 8000a5e:	4664      	mov	r4, ip
 8000a60:	e64e      	b.n	8000700 <__aeabi_dadd+0x6c>
 8000a62:	2b1f      	cmp	r3, #31
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_dadd+0x3d4>
 8000a66:	e0ad      	b.n	8000bc4 <__aeabi_dadd+0x530>
 8000a68:	2620      	movs	r6, #32
 8000a6a:	4647      	mov	r7, r8
 8000a6c:	1af6      	subs	r6, r6, r3
 8000a6e:	40b7      	lsls	r7, r6
 8000a70:	46b9      	mov	r9, r7
 8000a72:	0017      	movs	r7, r2
 8000a74:	46b2      	mov	sl, r6
 8000a76:	40df      	lsrs	r7, r3
 8000a78:	464e      	mov	r6, r9
 8000a7a:	433e      	orrs	r6, r7
 8000a7c:	0037      	movs	r7, r6
 8000a7e:	4656      	mov	r6, sl
 8000a80:	40b2      	lsls	r2, r6
 8000a82:	1e56      	subs	r6, r2, #1
 8000a84:	41b2      	sbcs	r2, r6
 8000a86:	4317      	orrs	r7, r2
 8000a88:	4642      	mov	r2, r8
 8000a8a:	40da      	lsrs	r2, r3
 8000a8c:	1889      	adds	r1, r1, r2
 8000a8e:	e6ae      	b.n	80007ee <__aeabi_dadd+0x15a>
 8000a90:	000007ff 	.word	0x000007ff
 8000a94:	ff7fffff 	.word	0xff7fffff
 8000a98:	800fffff 	.word	0x800fffff
 8000a9c:	2620      	movs	r6, #32
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	1af6      	subs	r6, r6, r3
 8000aa2:	40b7      	lsls	r7, r6
 8000aa4:	46b9      	mov	r9, r7
 8000aa6:	0017      	movs	r7, r2
 8000aa8:	46b2      	mov	sl, r6
 8000aaa:	40df      	lsrs	r7, r3
 8000aac:	464e      	mov	r6, r9
 8000aae:	433e      	orrs	r6, r7
 8000ab0:	0037      	movs	r7, r6
 8000ab2:	4656      	mov	r6, sl
 8000ab4:	40b2      	lsls	r2, r6
 8000ab6:	1e56      	subs	r6, r2, #1
 8000ab8:	41b2      	sbcs	r2, r6
 8000aba:	4317      	orrs	r7, r2
 8000abc:	4642      	mov	r2, r8
 8000abe:	40da      	lsrs	r2, r3
 8000ac0:	1a89      	subs	r1, r1, r2
 8000ac2:	e799      	b.n	80009f8 <__aeabi_dadd+0x364>
 8000ac4:	4c7f      	ldr	r4, [pc, #508]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000ac6:	42a6      	cmp	r6, r4
 8000ac8:	d05b      	beq.n	8000b82 <__aeabi_dadd+0x4ee>
 8000aca:	2480      	movs	r4, #128	; 0x80
 8000acc:	0424      	lsls	r4, r4, #16
 8000ace:	425b      	negs	r3, r3
 8000ad0:	4321      	orrs	r1, r4
 8000ad2:	e727      	b.n	8000924 <__aeabi_dadd+0x290>
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d10c      	bne.n	8000af2 <__aeabi_dadd+0x45e>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x44a>
 8000adc:	e0cb      	b.n	8000c76 <__aeabi_dadd+0x5e2>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	0039      	movs	r1, r7
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	4d77      	ldr	r5, [pc, #476]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000ae6:	e6d7      	b.n	8000898 <__aeabi_dadd+0x204>
 8000ae8:	4f76      	ldr	r7, [pc, #472]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000aea:	42bb      	cmp	r3, r7
 8000aec:	d018      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000aee:	0033      	movs	r3, r6
 8000af0:	e675      	b.n	80007de <__aeabi_dadd+0x14a>
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d014      	beq.n	8000b20 <__aeabi_dadd+0x48c>
 8000af6:	074b      	lsls	r3, r1, #29
 8000af8:	08c0      	lsrs	r0, r0, #3
 8000afa:	4318      	orrs	r0, r3
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	08c9      	lsrs	r1, r1, #3
 8000b00:	031b      	lsls	r3, r3, #12
 8000b02:	4219      	tst	r1, r3
 8000b04:	d007      	beq.n	8000b16 <__aeabi_dadd+0x482>
 8000b06:	08fc      	lsrs	r4, r7, #3
 8000b08:	421c      	tst	r4, r3
 8000b0a:	d104      	bne.n	8000b16 <__aeabi_dadd+0x482>
 8000b0c:	0779      	lsls	r1, r7, #29
 8000b0e:	08d0      	lsrs	r0, r2, #3
 8000b10:	4308      	orrs	r0, r1
 8000b12:	46e1      	mov	r9, ip
 8000b14:	0021      	movs	r1, r4
 8000b16:	464c      	mov	r4, r9
 8000b18:	0f42      	lsrs	r2, r0, #29
 8000b1a:	00c9      	lsls	r1, r1, #3
 8000b1c:	4311      	orrs	r1, r2
 8000b1e:	00c0      	lsls	r0, r0, #3
 8000b20:	4d68      	ldr	r5, [pc, #416]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000b22:	e6b9      	b.n	8000898 <__aeabi_dadd+0x204>
 8000b24:	001d      	movs	r5, r3
 8000b26:	2200      	movs	r2, #0
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e6c0      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000b2c:	2d00      	cmp	r5, #0
 8000b2e:	d15b      	bne.n	8000be8 <__aeabi_dadd+0x554>
 8000b30:	000d      	movs	r5, r1
 8000b32:	4305      	orrs	r5, r0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x4a4>
 8000b36:	e6e2      	b.n	80008fe <__aeabi_dadd+0x26a>
 8000b38:	1c5d      	adds	r5, r3, #1
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x4aa>
 8000b3c:	e0b0      	b.n	8000ca0 <__aeabi_dadd+0x60c>
 8000b3e:	4d61      	ldr	r5, [pc, #388]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000b40:	42ae      	cmp	r6, r5
 8000b42:	d01f      	beq.n	8000b84 <__aeabi_dadd+0x4f0>
 8000b44:	43db      	mvns	r3, r3
 8000b46:	2b38      	cmp	r3, #56	; 0x38
 8000b48:	dc71      	bgt.n	8000c2e <__aeabi_dadd+0x59a>
 8000b4a:	2b1f      	cmp	r3, #31
 8000b4c:	dd00      	ble.n	8000b50 <__aeabi_dadd+0x4bc>
 8000b4e:	e096      	b.n	8000c7e <__aeabi_dadd+0x5ea>
 8000b50:	2520      	movs	r5, #32
 8000b52:	000f      	movs	r7, r1
 8000b54:	1aed      	subs	r5, r5, r3
 8000b56:	40af      	lsls	r7, r5
 8000b58:	46b9      	mov	r9, r7
 8000b5a:	0007      	movs	r7, r0
 8000b5c:	46aa      	mov	sl, r5
 8000b5e:	40df      	lsrs	r7, r3
 8000b60:	464d      	mov	r5, r9
 8000b62:	433d      	orrs	r5, r7
 8000b64:	002f      	movs	r7, r5
 8000b66:	4655      	mov	r5, sl
 8000b68:	40a8      	lsls	r0, r5
 8000b6a:	40d9      	lsrs	r1, r3
 8000b6c:	1e45      	subs	r5, r0, #1
 8000b6e:	41a8      	sbcs	r0, r5
 8000b70:	4488      	add	r8, r1
 8000b72:	4307      	orrs	r7, r0
 8000b74:	18bf      	adds	r7, r7, r2
 8000b76:	4297      	cmp	r7, r2
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	4251      	negs	r1, r2
 8000b7c:	4441      	add	r1, r8
 8000b7e:	0035      	movs	r5, r6
 8000b80:	e63a      	b.n	80007f8 <__aeabi_dadd+0x164>
 8000b82:	4664      	mov	r4, ip
 8000b84:	0035      	movs	r5, r6
 8000b86:	4641      	mov	r1, r8
 8000b88:	0010      	movs	r0, r2
 8000b8a:	e685      	b.n	8000898 <__aeabi_dadd+0x204>
 8000b8c:	000b      	movs	r3, r1
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d000      	beq.n	8000b96 <__aeabi_dadd+0x502>
 8000b94:	e663      	b.n	800085e <__aeabi_dadd+0x1ca>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f5      	beq.n	8000b86 <__aeabi_dadd+0x4f2>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x50e>
 8000ba0:	e67a      	b.n	8000898 <__aeabi_dadd+0x204>
 8000ba2:	1887      	adds	r7, r0, r2
 8000ba4:	4287      	cmp	r7, r0
 8000ba6:	4180      	sbcs	r0, r0
 8000ba8:	2207      	movs	r2, #7
 8000baa:	4441      	add	r1, r8
 8000bac:	4240      	negs	r0, r0
 8000bae:	1809      	adds	r1, r1, r0
 8000bb0:	403a      	ands	r2, r7
 8000bb2:	020b      	lsls	r3, r1, #8
 8000bb4:	d400      	bmi.n	8000bb8 <__aeabi_dadd+0x524>
 8000bb6:	e6d5      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <__aeabi_dadd+0x634>)
 8000bba:	3501      	adds	r5, #1
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	e5c9      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000bc0:	0038      	movs	r0, r7
 8000bc2:	e669      	b.n	8000898 <__aeabi_dadd+0x204>
 8000bc4:	001e      	movs	r6, r3
 8000bc6:	4647      	mov	r7, r8
 8000bc8:	3e20      	subs	r6, #32
 8000bca:	40f7      	lsrs	r7, r6
 8000bcc:	46bc      	mov	ip, r7
 8000bce:	2b20      	cmp	r3, #32
 8000bd0:	d004      	beq.n	8000bdc <__aeabi_dadd+0x548>
 8000bd2:	2640      	movs	r6, #64	; 0x40
 8000bd4:	1af3      	subs	r3, r6, r3
 8000bd6:	4646      	mov	r6, r8
 8000bd8:	409e      	lsls	r6, r3
 8000bda:	4332      	orrs	r2, r6
 8000bdc:	0017      	movs	r7, r2
 8000bde:	4663      	mov	r3, ip
 8000be0:	1e7a      	subs	r2, r7, #1
 8000be2:	4197      	sbcs	r7, r2
 8000be4:	431f      	orrs	r7, r3
 8000be6:	e602      	b.n	80007ee <__aeabi_dadd+0x15a>
 8000be8:	4d36      	ldr	r5, [pc, #216]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000bea:	42ae      	cmp	r6, r5
 8000bec:	d0ca      	beq.n	8000b84 <__aeabi_dadd+0x4f0>
 8000bee:	2580      	movs	r5, #128	; 0x80
 8000bf0:	042d      	lsls	r5, r5, #16
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	4329      	orrs	r1, r5
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_dadd+0x4b2>
 8000bf8:	4308      	orrs	r0, r1
 8000bfa:	1e41      	subs	r1, r0, #1
 8000bfc:	4188      	sbcs	r0, r1
 8000bfe:	e6a6      	b.n	800094e <__aeabi_dadd+0x2ba>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x572>
 8000c04:	e648      	b.n	8000898 <__aeabi_dadd+0x204>
 8000c06:	1a87      	subs	r7, r0, r2
 8000c08:	4643      	mov	r3, r8
 8000c0a:	42b8      	cmp	r0, r7
 8000c0c:	41b6      	sbcs	r6, r6
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	4276      	negs	r6, r6
 8000c12:	1b9e      	subs	r6, r3, r6
 8000c14:	0233      	lsls	r3, r6, #8
 8000c16:	d54b      	bpl.n	8000cb0 <__aeabi_dadd+0x61c>
 8000c18:	1a17      	subs	r7, r2, r0
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	42ba      	cmp	r2, r7
 8000c1e:	4192      	sbcs	r2, r2
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	4252      	negs	r2, r2
 8000c24:	1a89      	subs	r1, r1, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	4664      	mov	r4, ip
 8000c2a:	403a      	ands	r2, r7
 8000c2c:	e592      	b.n	8000754 <__aeabi_dadd+0xc0>
 8000c2e:	4301      	orrs	r1, r0
 8000c30:	000f      	movs	r7, r1
 8000c32:	1e79      	subs	r1, r7, #1
 8000c34:	418f      	sbcs	r7, r1
 8000c36:	e79d      	b.n	8000b74 <__aeabi_dadd+0x4e0>
 8000c38:	001c      	movs	r4, r3
 8000c3a:	000f      	movs	r7, r1
 8000c3c:	3c20      	subs	r4, #32
 8000c3e:	40e7      	lsrs	r7, r4
 8000c40:	2b20      	cmp	r3, #32
 8000c42:	d003      	beq.n	8000c4c <__aeabi_dadd+0x5b8>
 8000c44:	2440      	movs	r4, #64	; 0x40
 8000c46:	1ae3      	subs	r3, r4, r3
 8000c48:	4099      	lsls	r1, r3
 8000c4a:	4308      	orrs	r0, r1
 8000c4c:	1e41      	subs	r1, r0, #1
 8000c4e:	4188      	sbcs	r0, r1
 8000c50:	4338      	orrs	r0, r7
 8000c52:	e67c      	b.n	800094e <__aeabi_dadd+0x2ba>
 8000c54:	2200      	movs	r2, #0
 8000c56:	2400      	movs	r4, #0
 8000c58:	e625      	b.n	80008a6 <__aeabi_dadd+0x212>
 8000c5a:	1a17      	subs	r7, r2, r0
 8000c5c:	4643      	mov	r3, r8
 8000c5e:	42ba      	cmp	r2, r7
 8000c60:	4192      	sbcs	r2, r2
 8000c62:	1a59      	subs	r1, r3, r1
 8000c64:	4252      	negs	r2, r2
 8000c66:	1a89      	subs	r1, r1, r2
 8000c68:	4664      	mov	r4, ip
 8000c6a:	0035      	movs	r5, r6
 8000c6c:	e543      	b.n	80006f6 <__aeabi_dadd+0x62>
 8000c6e:	4641      	mov	r1, r8
 8000c70:	0010      	movs	r0, r2
 8000c72:	4d14      	ldr	r5, [pc, #80]	; (8000cc4 <__aeabi_dadd+0x630>)
 8000c74:	e610      	b.n	8000898 <__aeabi_dadd+0x204>
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	2400      	movs	r4, #0
 8000c7a:	0312      	lsls	r2, r2, #12
 8000c7c:	e680      	b.n	8000980 <__aeabi_dadd+0x2ec>
 8000c7e:	001d      	movs	r5, r3
 8000c80:	000f      	movs	r7, r1
 8000c82:	3d20      	subs	r5, #32
 8000c84:	40ef      	lsrs	r7, r5
 8000c86:	46bc      	mov	ip, r7
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d003      	beq.n	8000c94 <__aeabi_dadd+0x600>
 8000c8c:	2540      	movs	r5, #64	; 0x40
 8000c8e:	1aeb      	subs	r3, r5, r3
 8000c90:	4099      	lsls	r1, r3
 8000c92:	4308      	orrs	r0, r1
 8000c94:	0007      	movs	r7, r0
 8000c96:	4663      	mov	r3, ip
 8000c98:	1e78      	subs	r0, r7, #1
 8000c9a:	4187      	sbcs	r7, r0
 8000c9c:	431f      	orrs	r7, r3
 8000c9e:	e769      	b.n	8000b74 <__aeabi_dadd+0x4e0>
 8000ca0:	1887      	adds	r7, r0, r2
 8000ca2:	4297      	cmp	r7, r2
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4441      	add	r1, r8
 8000ca8:	425b      	negs	r3, r3
 8000caa:	18c9      	adds	r1, r1, r3
 8000cac:	0035      	movs	r5, r6
 8000cae:	e5a3      	b.n	80007f8 <__aeabi_dadd+0x164>
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	4333      	orrs	r3, r6
 8000cb4:	d0ce      	beq.n	8000c54 <__aeabi_dadd+0x5c0>
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	0031      	movs	r1, r6
 8000cba:	403a      	ands	r2, r7
 8000cbc:	e652      	b.n	8000964 <__aeabi_dadd+0x2d0>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	e5f4      	b.n	80008ae <__aeabi_dadd+0x21a>
 8000cc4:	000007ff 	.word	0x000007ff
 8000cc8:	ff7fffff 	.word	0xff7fffff

08000ccc <__aeabi_ddiv>:
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	4657      	mov	r7, sl
 8000cd0:	46de      	mov	lr, fp
 8000cd2:	464e      	mov	r6, r9
 8000cd4:	4645      	mov	r5, r8
 8000cd6:	b5e0      	push	{r5, r6, r7, lr}
 8000cd8:	4683      	mov	fp, r0
 8000cda:	0007      	movs	r7, r0
 8000cdc:	030e      	lsls	r6, r1, #12
 8000cde:	0048      	lsls	r0, r1, #1
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	4692      	mov	sl, r2
 8000ce4:	001c      	movs	r4, r3
 8000ce6:	0b36      	lsrs	r6, r6, #12
 8000ce8:	0d40      	lsrs	r0, r0, #21
 8000cea:	0fcd      	lsrs	r5, r1, #31
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x26>
 8000cf0:	e09d      	b.n	8000e2e <__aeabi_ddiv+0x162>
 8000cf2:	4b95      	ldr	r3, [pc, #596]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d039      	beq.n	8000d6c <__aeabi_ddiv+0xa0>
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	00f6      	lsls	r6, r6, #3
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	431e      	orrs	r6, r3
 8000d00:	4a92      	ldr	r2, [pc, #584]	; (8000f4c <__aeabi_ddiv+0x280>)
 8000d02:	0f7b      	lsrs	r3, r7, #29
 8000d04:	4333      	orrs	r3, r6
 8000d06:	4699      	mov	r9, r3
 8000d08:	4694      	mov	ip, r2
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	4463      	add	r3, ip
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	2600      	movs	r6, #0
 8000d14:	00ff      	lsls	r7, r7, #3
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	0323      	lsls	r3, r4, #12
 8000d1a:	0b1b      	lsrs	r3, r3, #12
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	0063      	lsls	r3, r4, #1
 8000d20:	0fe4      	lsrs	r4, r4, #31
 8000d22:	4652      	mov	r2, sl
 8000d24:	0d5b      	lsrs	r3, r3, #21
 8000d26:	9401      	str	r4, [sp, #4]
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x60>
 8000d2a:	e0b3      	b.n	8000e94 <__aeabi_ddiv+0x1c8>
 8000d2c:	4986      	ldr	r1, [pc, #536]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x68>
 8000d32:	e09e      	b.n	8000e72 <__aeabi_ddiv+0x1a6>
 8000d34:	4642      	mov	r2, r8
 8000d36:	00d1      	lsls	r1, r2, #3
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0412      	lsls	r2, r2, #16
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	4651      	mov	r1, sl
 8000d40:	0f49      	lsrs	r1, r1, #29
 8000d42:	4311      	orrs	r1, r2
 8000d44:	468b      	mov	fp, r1
 8000d46:	4981      	ldr	r1, [pc, #516]	; (8000f4c <__aeabi_ddiv+0x280>)
 8000d48:	4652      	mov	r2, sl
 8000d4a:	468c      	mov	ip, r1
 8000d4c:	9900      	ldr	r1, [sp, #0]
 8000d4e:	4463      	add	r3, ip
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	00d2      	lsls	r2, r2, #3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	002b      	movs	r3, r5
 8000d5a:	4063      	eors	r3, r4
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	2e0f      	cmp	r6, #15
 8000d60:	d900      	bls.n	8000d64 <__aeabi_ddiv+0x98>
 8000d62:	e105      	b.n	8000f70 <__aeabi_ddiv+0x2a4>
 8000d64:	4b7a      	ldr	r3, [pc, #488]	; (8000f50 <__aeabi_ddiv+0x284>)
 8000d66:	00b6      	lsls	r6, r6, #2
 8000d68:	599b      	ldr	r3, [r3, r6]
 8000d6a:	469f      	mov	pc, r3
 8000d6c:	465b      	mov	r3, fp
 8000d6e:	4333      	orrs	r3, r6
 8000d70:	4699      	mov	r9, r3
 8000d72:	d000      	beq.n	8000d76 <__aeabi_ddiv+0xaa>
 8000d74:	e0b8      	b.n	8000ee8 <__aeabi_ddiv+0x21c>
 8000d76:	2302      	movs	r3, #2
 8000d78:	2608      	movs	r6, #8
 8000d7a:	2700      	movs	r7, #0
 8000d7c:	9000      	str	r0, [sp, #0]
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	e7ca      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000d82:	46cb      	mov	fp, r9
 8000d84:	003a      	movs	r2, r7
 8000d86:	9902      	ldr	r1, [sp, #8]
 8000d88:	9501      	str	r5, [sp, #4]
 8000d8a:	9b01      	ldr	r3, [sp, #4]
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	2902      	cmp	r1, #2
 8000d90:	d027      	beq.n	8000de2 <__aeabi_ddiv+0x116>
 8000d92:	2903      	cmp	r1, #3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0xcc>
 8000d96:	e280      	b.n	800129a <__aeabi_ddiv+0x5ce>
 8000d98:	2901      	cmp	r1, #1
 8000d9a:	d044      	beq.n	8000e26 <__aeabi_ddiv+0x15a>
 8000d9c:	496d      	ldr	r1, [pc, #436]	; (8000f54 <__aeabi_ddiv+0x288>)
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	468c      	mov	ip, r1
 8000da2:	4463      	add	r3, ip
 8000da4:	001c      	movs	r4, r3
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	dd38      	ble.n	8000e1c <__aeabi_ddiv+0x150>
 8000daa:	0753      	lsls	r3, r2, #29
 8000dac:	d000      	beq.n	8000db0 <__aeabi_ddiv+0xe4>
 8000dae:	e213      	b.n	80011d8 <__aeabi_ddiv+0x50c>
 8000db0:	08d2      	lsrs	r2, r2, #3
 8000db2:	465b      	mov	r3, fp
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	d509      	bpl.n	8000dcc <__aeabi_ddiv+0x100>
 8000db8:	4659      	mov	r1, fp
 8000dba:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <__aeabi_ddiv+0x28c>)
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	468b      	mov	fp, r1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	00c9      	lsls	r1, r1, #3
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	4463      	add	r3, ip
 8000dca:	001c      	movs	r4, r3
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <__aeabi_ddiv+0x290>)
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	dc07      	bgt.n	8000de2 <__aeabi_ddiv+0x116>
 8000dd2:	465b      	mov	r3, fp
 8000dd4:	0564      	lsls	r4, r4, #21
 8000dd6:	075f      	lsls	r7, r3, #29
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	0b1b      	lsrs	r3, r3, #12
 8000dde:	0d62      	lsrs	r2, r4, #21
 8000de0:	e002      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000de2:	2300      	movs	r3, #0
 8000de4:	2700      	movs	r7, #0
 8000de6:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	031b      	lsls	r3, r3, #12
 8000dec:	0b1c      	lsrs	r4, r3, #12
 8000dee:	0d0b      	lsrs	r3, r1, #20
 8000df0:	051b      	lsls	r3, r3, #20
 8000df2:	4323      	orrs	r3, r4
 8000df4:	0514      	lsls	r4, r2, #20
 8000df6:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <__aeabi_ddiv+0x294>)
 8000df8:	0038      	movs	r0, r7
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	431c      	orrs	r4, r3
 8000dfe:	4653      	mov	r3, sl
 8000e00:	0064      	lsls	r4, r4, #1
 8000e02:	07db      	lsls	r3, r3, #31
 8000e04:	0864      	lsrs	r4, r4, #1
 8000e06:	431c      	orrs	r4, r3
 8000e08:	0021      	movs	r1, r4
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000e0e:	4690      	mov	r8, r2
 8000e10:	4699      	mov	r9, r3
 8000e12:	46a2      	mov	sl, r4
 8000e14:	46ab      	mov	fp, r5
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4252      	negs	r2, r2
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	1b1b      	subs	r3, r3, r4
 8000e20:	2b38      	cmp	r3, #56	; 0x38
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_ddiv+0x15a>
 8000e24:	e1ad      	b.n	8001182 <__aeabi_ddiv+0x4b6>
 8000e26:	2200      	movs	r2, #0
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2700      	movs	r7, #0
 8000e2c:	e7dc      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000e2e:	465b      	mov	r3, fp
 8000e30:	4333      	orrs	r3, r6
 8000e32:	4699      	mov	r9, r3
 8000e34:	d05e      	beq.n	8000ef4 <__aeabi_ddiv+0x228>
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_ddiv+0x170>
 8000e3a:	e18a      	b.n	8001152 <__aeabi_ddiv+0x486>
 8000e3c:	0030      	movs	r0, r6
 8000e3e:	f001 fa9d 	bl	800237c <__clzsi2>
 8000e42:	0003      	movs	r3, r0
 8000e44:	3b0b      	subs	r3, #11
 8000e46:	2b1c      	cmp	r3, #28
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_ddiv+0x180>
 8000e4a:	e17b      	b.n	8001144 <__aeabi_ddiv+0x478>
 8000e4c:	221d      	movs	r2, #29
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	465a      	mov	r2, fp
 8000e52:	0001      	movs	r1, r0
 8000e54:	40da      	lsrs	r2, r3
 8000e56:	3908      	subs	r1, #8
 8000e58:	408e      	lsls	r6, r1
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	465f      	mov	r7, fp
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4699      	mov	r9, r3
 8000e62:	408f      	lsls	r7, r1
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <__aeabi_ddiv+0x298>)
 8000e66:	2600      	movs	r6, #0
 8000e68:	1a1b      	subs	r3, r3, r0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	e752      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000e72:	4641      	mov	r1, r8
 8000e74:	4653      	mov	r3, sl
 8000e76:	430b      	orrs	r3, r1
 8000e78:	493b      	ldr	r1, [pc, #236]	; (8000f68 <__aeabi_ddiv+0x29c>)
 8000e7a:	469b      	mov	fp, r3
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	9b00      	ldr	r3, [sp, #0]
 8000e80:	4463      	add	r3, ip
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	465b      	mov	r3, fp
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d13b      	bne.n	8000f02 <__aeabi_ddiv+0x236>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	2102      	movs	r1, #2
 8000e92:	e761      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000e94:	4643      	mov	r3, r8
 8000e96:	4313      	orrs	r3, r2
 8000e98:	469b      	mov	fp, r3
 8000e9a:	d037      	beq.n	8000f0c <__aeabi_ddiv+0x240>
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x1d8>
 8000ea2:	e162      	b.n	800116a <__aeabi_ddiv+0x49e>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	f001 fa69 	bl	800237c <__clzsi2>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	3b0b      	subs	r3, #11
 8000eae:	2b1c      	cmp	r3, #28
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_ddiv+0x1e8>
 8000eb2:	e153      	b.n	800115c <__aeabi_ddiv+0x490>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	4641      	mov	r1, r8
 8000eb8:	3a08      	subs	r2, #8
 8000eba:	4091      	lsls	r1, r2
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	211d      	movs	r1, #29
 8000ec0:	1acb      	subs	r3, r1, r3
 8000ec2:	4651      	mov	r1, sl
 8000ec4:	40d9      	lsrs	r1, r3
 8000ec6:	000b      	movs	r3, r1
 8000ec8:	4641      	mov	r1, r8
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	469b      	mov	fp, r3
 8000ece:	4653      	mov	r3, sl
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	9b00      	ldr	r3, [sp, #0]
 8000ed6:	4925      	ldr	r1, [pc, #148]	; (8000f6c <__aeabi_ddiv+0x2a0>)
 8000ed8:	469c      	mov	ip, r3
 8000eda:	4460      	add	r0, ip
 8000edc:	0003      	movs	r3, r0
 8000ede:	468c      	mov	ip, r1
 8000ee0:	4463      	add	r3, ip
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e737      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	46b1      	mov	r9, r6
 8000eec:	9000      	str	r0, [sp, #0]
 8000eee:	260c      	movs	r6, #12
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	e711      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	2604      	movs	r6, #4
 8000efc:	2700      	movs	r7, #0
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	e70a      	b.n	8000d18 <__aeabi_ddiv+0x4c>
 8000f02:	2303      	movs	r3, #3
 8000f04:	46c3      	mov	fp, r8
 8000f06:	431e      	orrs	r6, r3
 8000f08:	2103      	movs	r1, #3
 8000f0a:	e725      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	2200      	movs	r2, #0
 8000f12:	2101      	movs	r1, #1
 8000f14:	e720      	b.n	8000d58 <__aeabi_ddiv+0x8c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	469a      	mov	sl, r3
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	2700      	movs	r7, #0
 8000f1e:	031b      	lsls	r3, r3, #12
 8000f20:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000f22:	e761      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	4649      	mov	r1, r9
 8000f28:	031b      	lsls	r3, r3, #12
 8000f2a:	4219      	tst	r1, r3
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x264>
 8000f2e:	e0e2      	b.n	80010f6 <__aeabi_ddiv+0x42a>
 8000f30:	4659      	mov	r1, fp
 8000f32:	4219      	tst	r1, r3
 8000f34:	d000      	beq.n	8000f38 <__aeabi_ddiv+0x26c>
 8000f36:	e0de      	b.n	80010f6 <__aeabi_ddiv+0x42a>
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	0017      	movs	r7, r2
 8000f3e:	0b1b      	lsrs	r3, r3, #12
 8000f40:	46a2      	mov	sl, r4
 8000f42:	4a01      	ldr	r2, [pc, #4]	; (8000f48 <__aeabi_ddiv+0x27c>)
 8000f44:	e750      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	000007ff 	.word	0x000007ff
 8000f4c:	fffffc01 	.word	0xfffffc01
 8000f50:	0800e604 	.word	0x0800e604
 8000f54:	000003ff 	.word	0x000003ff
 8000f58:	feffffff 	.word	0xfeffffff
 8000f5c:	000007fe 	.word	0x000007fe
 8000f60:	800fffff 	.word	0x800fffff
 8000f64:	fffffc0d 	.word	0xfffffc0d
 8000f68:	fffff801 	.word	0xfffff801
 8000f6c:	000003f3 	.word	0x000003f3
 8000f70:	45d9      	cmp	r9, fp
 8000f72:	d900      	bls.n	8000f76 <__aeabi_ddiv+0x2aa>
 8000f74:	e0cb      	b.n	800110e <__aeabi_ddiv+0x442>
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0x2ae>
 8000f78:	e0c6      	b.n	8001108 <__aeabi_ddiv+0x43c>
 8000f7a:	003c      	movs	r4, r7
 8000f7c:	4648      	mov	r0, r9
 8000f7e:	2700      	movs	r7, #0
 8000f80:	9b00      	ldr	r3, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	465b      	mov	r3, fp
 8000f88:	0e16      	lsrs	r6, r2, #24
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	0213      	lsls	r3, r2, #8
 8000f90:	4698      	mov	r8, r3
 8000f92:	0433      	lsls	r3, r6, #16
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	4699      	mov	r9, r3
 8000f98:	0c31      	lsrs	r1, r6, #16
 8000f9a:	9101      	str	r1, [sp, #4]
 8000f9c:	f7ff f94c 	bl	8000238 <__aeabi_uidivmod>
 8000fa0:	464a      	mov	r2, r9
 8000fa2:	4342      	muls	r2, r0
 8000fa4:	040b      	lsls	r3, r1, #16
 8000fa6:	0c21      	lsrs	r1, r4, #16
 8000fa8:	0005      	movs	r5, r0
 8000faa:	4319      	orrs	r1, r3
 8000fac:	428a      	cmp	r2, r1
 8000fae:	d907      	bls.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fb0:	1989      	adds	r1, r1, r6
 8000fb2:	3d01      	subs	r5, #1
 8000fb4:	428e      	cmp	r6, r1
 8000fb6:	d803      	bhi.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d901      	bls.n	8000fc0 <__aeabi_ddiv+0x2f4>
 8000fbc:	1e85      	subs	r5, r0, #2
 8000fbe:	1989      	adds	r1, r1, r6
 8000fc0:	1a88      	subs	r0, r1, r2
 8000fc2:	9901      	ldr	r1, [sp, #4]
 8000fc4:	f7ff f938 	bl	8000238 <__aeabi_uidivmod>
 8000fc8:	0409      	lsls	r1, r1, #16
 8000fca:	468c      	mov	ip, r1
 8000fcc:	464a      	mov	r2, r9
 8000fce:	0421      	lsls	r1, r4, #16
 8000fd0:	4664      	mov	r4, ip
 8000fd2:	4342      	muls	r2, r0
 8000fd4:	0c09      	lsrs	r1, r1, #16
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	4321      	orrs	r1, r4
 8000fda:	428a      	cmp	r2, r1
 8000fdc:	d904      	bls.n	8000fe8 <__aeabi_ddiv+0x31c>
 8000fde:	1989      	adds	r1, r1, r6
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	428e      	cmp	r6, r1
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x31c>
 8000fe6:	e0f1      	b.n	80011cc <__aeabi_ddiv+0x500>
 8000fe8:	042d      	lsls	r5, r5, #16
 8000fea:	431d      	orrs	r5, r3
 8000fec:	46ab      	mov	fp, r5
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1a89      	subs	r1, r1, r2
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	0c28      	lsrs	r0, r5, #16
 8000ff6:	0412      	lsls	r2, r2, #16
 8000ff8:	0c1d      	lsrs	r5, r3, #16
 8000ffa:	465b      	mov	r3, fp
 8000ffc:	0c14      	lsrs	r4, r2, #16
 8000ffe:	0022      	movs	r2, r4
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	435a      	muls	r2, r3
 8001006:	9403      	str	r4, [sp, #12]
 8001008:	436b      	muls	r3, r5
 800100a:	4344      	muls	r4, r0
 800100c:	9502      	str	r5, [sp, #8]
 800100e:	4368      	muls	r0, r5
 8001010:	191b      	adds	r3, r3, r4
 8001012:	0c15      	lsrs	r5, r2, #16
 8001014:	18eb      	adds	r3, r5, r3
 8001016:	429c      	cmp	r4, r3
 8001018:	d903      	bls.n	8001022 <__aeabi_ddiv+0x356>
 800101a:	2480      	movs	r4, #128	; 0x80
 800101c:	0264      	lsls	r4, r4, #9
 800101e:	46a4      	mov	ip, r4
 8001020:	4460      	add	r0, ip
 8001022:	0c1c      	lsrs	r4, r3, #16
 8001024:	0415      	lsls	r5, r2, #16
 8001026:	041b      	lsls	r3, r3, #16
 8001028:	0c2d      	lsrs	r5, r5, #16
 800102a:	1820      	adds	r0, r4, r0
 800102c:	195d      	adds	r5, r3, r5
 800102e:	4281      	cmp	r1, r0
 8001030:	d377      	bcc.n	8001122 <__aeabi_ddiv+0x456>
 8001032:	d073      	beq.n	800111c <__aeabi_ddiv+0x450>
 8001034:	1a0c      	subs	r4, r1, r0
 8001036:	4aa2      	ldr	r2, [pc, #648]	; (80012c0 <__aeabi_ddiv+0x5f4>)
 8001038:	1b7d      	subs	r5, r7, r5
 800103a:	42af      	cmp	r7, r5
 800103c:	41bf      	sbcs	r7, r7
 800103e:	4694      	mov	ip, r2
 8001040:	9b00      	ldr	r3, [sp, #0]
 8001042:	427f      	negs	r7, r7
 8001044:	4463      	add	r3, ip
 8001046:	1be0      	subs	r0, r4, r7
 8001048:	001c      	movs	r4, r3
 800104a:	4286      	cmp	r6, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x384>
 800104e:	e0db      	b.n	8001208 <__aeabi_ddiv+0x53c>
 8001050:	9901      	ldr	r1, [sp, #4]
 8001052:	f7ff f8f1 	bl	8000238 <__aeabi_uidivmod>
 8001056:	464a      	mov	r2, r9
 8001058:	4342      	muls	r2, r0
 800105a:	040b      	lsls	r3, r1, #16
 800105c:	0c29      	lsrs	r1, r5, #16
 800105e:	0007      	movs	r7, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d907      	bls.n	8001076 <__aeabi_ddiv+0x3aa>
 8001066:	1989      	adds	r1, r1, r6
 8001068:	3f01      	subs	r7, #1
 800106a:	428e      	cmp	r6, r1
 800106c:	d803      	bhi.n	8001076 <__aeabi_ddiv+0x3aa>
 800106e:	428a      	cmp	r2, r1
 8001070:	d901      	bls.n	8001076 <__aeabi_ddiv+0x3aa>
 8001072:	1e87      	subs	r7, r0, #2
 8001074:	1989      	adds	r1, r1, r6
 8001076:	1a88      	subs	r0, r1, r2
 8001078:	9901      	ldr	r1, [sp, #4]
 800107a:	f7ff f8dd 	bl	8000238 <__aeabi_uidivmod>
 800107e:	0409      	lsls	r1, r1, #16
 8001080:	464a      	mov	r2, r9
 8001082:	4689      	mov	r9, r1
 8001084:	0429      	lsls	r1, r5, #16
 8001086:	464d      	mov	r5, r9
 8001088:	4342      	muls	r2, r0
 800108a:	0c09      	lsrs	r1, r1, #16
 800108c:	0003      	movs	r3, r0
 800108e:	4329      	orrs	r1, r5
 8001090:	428a      	cmp	r2, r1
 8001092:	d907      	bls.n	80010a4 <__aeabi_ddiv+0x3d8>
 8001094:	1989      	adds	r1, r1, r6
 8001096:	3b01      	subs	r3, #1
 8001098:	428e      	cmp	r6, r1
 800109a:	d803      	bhi.n	80010a4 <__aeabi_ddiv+0x3d8>
 800109c:	428a      	cmp	r2, r1
 800109e:	d901      	bls.n	80010a4 <__aeabi_ddiv+0x3d8>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	1989      	adds	r1, r1, r6
 80010a4:	043f      	lsls	r7, r7, #16
 80010a6:	1a89      	subs	r1, r1, r2
 80010a8:	003a      	movs	r2, r7
 80010aa:	9f03      	ldr	r7, [sp, #12]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	0038      	movs	r0, r7
 80010b0:	0413      	lsls	r3, r2, #16
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	4358      	muls	r0, r3
 80010b6:	4681      	mov	r9, r0
 80010b8:	9802      	ldr	r0, [sp, #8]
 80010ba:	0c15      	lsrs	r5, r2, #16
 80010bc:	436f      	muls	r7, r5
 80010be:	4343      	muls	r3, r0
 80010c0:	4345      	muls	r5, r0
 80010c2:	4648      	mov	r0, r9
 80010c4:	0c00      	lsrs	r0, r0, #16
 80010c6:	4684      	mov	ip, r0
 80010c8:	19db      	adds	r3, r3, r7
 80010ca:	4463      	add	r3, ip
 80010cc:	429f      	cmp	r7, r3
 80010ce:	d903      	bls.n	80010d8 <__aeabi_ddiv+0x40c>
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	0240      	lsls	r0, r0, #9
 80010d4:	4684      	mov	ip, r0
 80010d6:	4465      	add	r5, ip
 80010d8:	4648      	mov	r0, r9
 80010da:	0c1f      	lsrs	r7, r3, #16
 80010dc:	0400      	lsls	r0, r0, #16
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	0c00      	lsrs	r0, r0, #16
 80010e2:	197d      	adds	r5, r7, r5
 80010e4:	1818      	adds	r0, r3, r0
 80010e6:	42a9      	cmp	r1, r5
 80010e8:	d200      	bcs.n	80010ec <__aeabi_ddiv+0x420>
 80010ea:	e084      	b.n	80011f6 <__aeabi_ddiv+0x52a>
 80010ec:	d100      	bne.n	80010f0 <__aeabi_ddiv+0x424>
 80010ee:	e07f      	b.n	80011f0 <__aeabi_ddiv+0x524>
 80010f0:	2301      	movs	r3, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	e657      	b.n	8000da6 <__aeabi_ddiv+0xda>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	464a      	mov	r2, r9
 80010fa:	031b      	lsls	r3, r3, #12
 80010fc:	4313      	orrs	r3, r2
 80010fe:	031b      	lsls	r3, r3, #12
 8001100:	0b1b      	lsrs	r3, r3, #12
 8001102:	46aa      	mov	sl, r5
 8001104:	4a6f      	ldr	r2, [pc, #444]	; (80012c4 <__aeabi_ddiv+0x5f8>)
 8001106:	e66f      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 8001108:	42ba      	cmp	r2, r7
 800110a:	d900      	bls.n	800110e <__aeabi_ddiv+0x442>
 800110c:	e735      	b.n	8000f7a <__aeabi_ddiv+0x2ae>
 800110e:	464b      	mov	r3, r9
 8001110:	07dc      	lsls	r4, r3, #31
 8001112:	0858      	lsrs	r0, r3, #1
 8001114:	087b      	lsrs	r3, r7, #1
 8001116:	431c      	orrs	r4, r3
 8001118:	07ff      	lsls	r7, r7, #31
 800111a:	e734      	b.n	8000f86 <__aeabi_ddiv+0x2ba>
 800111c:	2400      	movs	r4, #0
 800111e:	42af      	cmp	r7, r5
 8001120:	d289      	bcs.n	8001036 <__aeabi_ddiv+0x36a>
 8001122:	4447      	add	r7, r8
 8001124:	4547      	cmp	r7, r8
 8001126:	41a4      	sbcs	r4, r4
 8001128:	465b      	mov	r3, fp
 800112a:	4264      	negs	r4, r4
 800112c:	19a4      	adds	r4, r4, r6
 800112e:	1864      	adds	r4, r4, r1
 8001130:	3b01      	subs	r3, #1
 8001132:	42a6      	cmp	r6, r4
 8001134:	d21e      	bcs.n	8001174 <__aeabi_ddiv+0x4a8>
 8001136:	42a0      	cmp	r0, r4
 8001138:	d86d      	bhi.n	8001216 <__aeabi_ddiv+0x54a>
 800113a:	d100      	bne.n	800113e <__aeabi_ddiv+0x472>
 800113c:	e0b6      	b.n	80012ac <__aeabi_ddiv+0x5e0>
 800113e:	1a24      	subs	r4, r4, r0
 8001140:	469b      	mov	fp, r3
 8001142:	e778      	b.n	8001036 <__aeabi_ddiv+0x36a>
 8001144:	0003      	movs	r3, r0
 8001146:	465a      	mov	r2, fp
 8001148:	3b28      	subs	r3, #40	; 0x28
 800114a:	409a      	lsls	r2, r3
 800114c:	2700      	movs	r7, #0
 800114e:	4691      	mov	r9, r2
 8001150:	e688      	b.n	8000e64 <__aeabi_ddiv+0x198>
 8001152:	4658      	mov	r0, fp
 8001154:	f001 f912 	bl	800237c <__clzsi2>
 8001158:	3020      	adds	r0, #32
 800115a:	e672      	b.n	8000e42 <__aeabi_ddiv+0x176>
 800115c:	0003      	movs	r3, r0
 800115e:	4652      	mov	r2, sl
 8001160:	3b28      	subs	r3, #40	; 0x28
 8001162:	409a      	lsls	r2, r3
 8001164:	4693      	mov	fp, r2
 8001166:	2200      	movs	r2, #0
 8001168:	e6b4      	b.n	8000ed4 <__aeabi_ddiv+0x208>
 800116a:	4650      	mov	r0, sl
 800116c:	f001 f906 	bl	800237c <__clzsi2>
 8001170:	3020      	adds	r0, #32
 8001172:	e69a      	b.n	8000eaa <__aeabi_ddiv+0x1de>
 8001174:	42a6      	cmp	r6, r4
 8001176:	d1e2      	bne.n	800113e <__aeabi_ddiv+0x472>
 8001178:	45b8      	cmp	r8, r7
 800117a:	d9dc      	bls.n	8001136 <__aeabi_ddiv+0x46a>
 800117c:	1a34      	subs	r4, r6, r0
 800117e:	469b      	mov	fp, r3
 8001180:	e759      	b.n	8001036 <__aeabi_ddiv+0x36a>
 8001182:	2b1f      	cmp	r3, #31
 8001184:	dc65      	bgt.n	8001252 <__aeabi_ddiv+0x586>
 8001186:	4c50      	ldr	r4, [pc, #320]	; (80012c8 <__aeabi_ddiv+0x5fc>)
 8001188:	9900      	ldr	r1, [sp, #0]
 800118a:	46a4      	mov	ip, r4
 800118c:	465c      	mov	r4, fp
 800118e:	4461      	add	r1, ip
 8001190:	0008      	movs	r0, r1
 8001192:	408c      	lsls	r4, r1
 8001194:	0011      	movs	r1, r2
 8001196:	4082      	lsls	r2, r0
 8001198:	40d9      	lsrs	r1, r3
 800119a:	1e50      	subs	r0, r2, #1
 800119c:	4182      	sbcs	r2, r0
 800119e:	430c      	orrs	r4, r1
 80011a0:	4314      	orrs	r4, r2
 80011a2:	465a      	mov	r2, fp
 80011a4:	40da      	lsrs	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	0762      	lsls	r2, r4, #29
 80011aa:	d009      	beq.n	80011c0 <__aeabi_ddiv+0x4f4>
 80011ac:	220f      	movs	r2, #15
 80011ae:	4022      	ands	r2, r4
 80011b0:	2a04      	cmp	r2, #4
 80011b2:	d005      	beq.n	80011c0 <__aeabi_ddiv+0x4f4>
 80011b4:	0022      	movs	r2, r4
 80011b6:	1d14      	adds	r4, r2, #4
 80011b8:	4294      	cmp	r4, r2
 80011ba:	4189      	sbcs	r1, r1
 80011bc:	4249      	negs	r1, r1
 80011be:	185b      	adds	r3, r3, r1
 80011c0:	021a      	lsls	r2, r3, #8
 80011c2:	d562      	bpl.n	800128a <__aeabi_ddiv+0x5be>
 80011c4:	2201      	movs	r2, #1
 80011c6:	2300      	movs	r3, #0
 80011c8:	2700      	movs	r7, #0
 80011ca:	e60d      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	d800      	bhi.n	80011d2 <__aeabi_ddiv+0x506>
 80011d0:	e70a      	b.n	8000fe8 <__aeabi_ddiv+0x31c>
 80011d2:	1e83      	subs	r3, r0, #2
 80011d4:	1989      	adds	r1, r1, r6
 80011d6:	e707      	b.n	8000fe8 <__aeabi_ddiv+0x31c>
 80011d8:	230f      	movs	r3, #15
 80011da:	4013      	ands	r3, r2
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x516>
 80011e0:	e5e6      	b.n	8000db0 <__aeabi_ddiv+0xe4>
 80011e2:	1d17      	adds	r7, r2, #4
 80011e4:	4297      	cmp	r7, r2
 80011e6:	4192      	sbcs	r2, r2
 80011e8:	4253      	negs	r3, r2
 80011ea:	449b      	add	fp, r3
 80011ec:	08fa      	lsrs	r2, r7, #3
 80011ee:	e5e0      	b.n	8000db2 <__aeabi_ddiv+0xe6>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x52a>
 80011f4:	e5d7      	b.n	8000da6 <__aeabi_ddiv+0xda>
 80011f6:	1871      	adds	r1, r6, r1
 80011f8:	1e53      	subs	r3, r2, #1
 80011fa:	42b1      	cmp	r1, r6
 80011fc:	d327      	bcc.n	800124e <__aeabi_ddiv+0x582>
 80011fe:	42a9      	cmp	r1, r5
 8001200:	d315      	bcc.n	800122e <__aeabi_ddiv+0x562>
 8001202:	d058      	beq.n	80012b6 <__aeabi_ddiv+0x5ea>
 8001204:	001a      	movs	r2, r3
 8001206:	e773      	b.n	80010f0 <__aeabi_ddiv+0x424>
 8001208:	2b00      	cmp	r3, #0
 800120a:	dc00      	bgt.n	800120e <__aeabi_ddiv+0x542>
 800120c:	e604      	b.n	8000e18 <__aeabi_ddiv+0x14c>
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	449b      	add	fp, r3
 8001214:	e5cd      	b.n	8000db2 <__aeabi_ddiv+0xe6>
 8001216:	2302      	movs	r3, #2
 8001218:	4447      	add	r7, r8
 800121a:	4547      	cmp	r7, r8
 800121c:	4189      	sbcs	r1, r1
 800121e:	425b      	negs	r3, r3
 8001220:	469c      	mov	ip, r3
 8001222:	4249      	negs	r1, r1
 8001224:	1989      	adds	r1, r1, r6
 8001226:	190c      	adds	r4, r1, r4
 8001228:	44e3      	add	fp, ip
 800122a:	1a24      	subs	r4, r4, r0
 800122c:	e703      	b.n	8001036 <__aeabi_ddiv+0x36a>
 800122e:	4643      	mov	r3, r8
 8001230:	005f      	lsls	r7, r3, #1
 8001232:	4547      	cmp	r7, r8
 8001234:	419b      	sbcs	r3, r3
 8001236:	46b8      	mov	r8, r7
 8001238:	425b      	negs	r3, r3
 800123a:	199e      	adds	r6, r3, r6
 800123c:	3a02      	subs	r2, #2
 800123e:	1989      	adds	r1, r1, r6
 8001240:	42a9      	cmp	r1, r5
 8001242:	d000      	beq.n	8001246 <__aeabi_ddiv+0x57a>
 8001244:	e754      	b.n	80010f0 <__aeabi_ddiv+0x424>
 8001246:	4540      	cmp	r0, r8
 8001248:	d000      	beq.n	800124c <__aeabi_ddiv+0x580>
 800124a:	e751      	b.n	80010f0 <__aeabi_ddiv+0x424>
 800124c:	e5ab      	b.n	8000da6 <__aeabi_ddiv+0xda>
 800124e:	001a      	movs	r2, r3
 8001250:	e7f6      	b.n	8001240 <__aeabi_ddiv+0x574>
 8001252:	211f      	movs	r1, #31
 8001254:	465f      	mov	r7, fp
 8001256:	4249      	negs	r1, r1
 8001258:	1b0c      	subs	r4, r1, r4
 800125a:	40e7      	lsrs	r7, r4
 800125c:	2b20      	cmp	r3, #32
 800125e:	d007      	beq.n	8001270 <__aeabi_ddiv+0x5a4>
 8001260:	491a      	ldr	r1, [pc, #104]	; (80012cc <__aeabi_ddiv+0x600>)
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	468c      	mov	ip, r1
 8001266:	4463      	add	r3, ip
 8001268:	0018      	movs	r0, r3
 800126a:	465b      	mov	r3, fp
 800126c:	4083      	lsls	r3, r0
 800126e:	431a      	orrs	r2, r3
 8001270:	1e50      	subs	r0, r2, #1
 8001272:	4182      	sbcs	r2, r0
 8001274:	433a      	orrs	r2, r7
 8001276:	2707      	movs	r7, #7
 8001278:	2300      	movs	r3, #0
 800127a:	4017      	ands	r7, r2
 800127c:	d009      	beq.n	8001292 <__aeabi_ddiv+0x5c6>
 800127e:	210f      	movs	r1, #15
 8001280:	2300      	movs	r3, #0
 8001282:	4011      	ands	r1, r2
 8001284:	0014      	movs	r4, r2
 8001286:	2904      	cmp	r1, #4
 8001288:	d195      	bne.n	80011b6 <__aeabi_ddiv+0x4ea>
 800128a:	0022      	movs	r2, r4
 800128c:	075f      	lsls	r7, r3, #29
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	0b1b      	lsrs	r3, r3, #12
 8001292:	08d2      	lsrs	r2, r2, #3
 8001294:	4317      	orrs	r7, r2
 8001296:	2200      	movs	r2, #0
 8001298:	e5a6      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	4659      	mov	r1, fp
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	430b      	orrs	r3, r1
 80012a2:	031b      	lsls	r3, r3, #12
 80012a4:	0017      	movs	r7, r2
 80012a6:	0b1b      	lsrs	r3, r3, #12
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <__aeabi_ddiv+0x5f8>)
 80012aa:	e59d      	b.n	8000de8 <__aeabi_ddiv+0x11c>
 80012ac:	42bd      	cmp	r5, r7
 80012ae:	d8b2      	bhi.n	8001216 <__aeabi_ddiv+0x54a>
 80012b0:	469b      	mov	fp, r3
 80012b2:	2400      	movs	r4, #0
 80012b4:	e6bf      	b.n	8001036 <__aeabi_ddiv+0x36a>
 80012b6:	4580      	cmp	r8, r0
 80012b8:	d3b9      	bcc.n	800122e <__aeabi_ddiv+0x562>
 80012ba:	001a      	movs	r2, r3
 80012bc:	e7c3      	b.n	8001246 <__aeabi_ddiv+0x57a>
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	000003ff 	.word	0x000003ff
 80012c4:	000007ff 	.word	0x000007ff
 80012c8:	0000041e 	.word	0x0000041e
 80012cc:	0000043e 	.word	0x0000043e

080012d0 <__eqdf2>:
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	464f      	mov	r7, r9
 80012d4:	4646      	mov	r6, r8
 80012d6:	46d6      	mov	lr, sl
 80012d8:	4684      	mov	ip, r0
 80012da:	b5c0      	push	{r6, r7, lr}
 80012dc:	4680      	mov	r8, r0
 80012de:	4e19      	ldr	r6, [pc, #100]	; (8001344 <__eqdf2+0x74>)
 80012e0:	0318      	lsls	r0, r3, #12
 80012e2:	030f      	lsls	r7, r1, #12
 80012e4:	004d      	lsls	r5, r1, #1
 80012e6:	0b00      	lsrs	r0, r0, #12
 80012e8:	005c      	lsls	r4, r3, #1
 80012ea:	4682      	mov	sl, r0
 80012ec:	0b3f      	lsrs	r7, r7, #12
 80012ee:	0d6d      	lsrs	r5, r5, #21
 80012f0:	0fc9      	lsrs	r1, r1, #31
 80012f2:	4691      	mov	r9, r2
 80012f4:	0d64      	lsrs	r4, r4, #21
 80012f6:	0fdb      	lsrs	r3, r3, #31
 80012f8:	2001      	movs	r0, #1
 80012fa:	42b5      	cmp	r5, r6
 80012fc:	d00a      	beq.n	8001314 <__eqdf2+0x44>
 80012fe:	42b4      	cmp	r4, r6
 8001300:	d003      	beq.n	800130a <__eqdf2+0x3a>
 8001302:	42a5      	cmp	r5, r4
 8001304:	d101      	bne.n	800130a <__eqdf2+0x3a>
 8001306:	4557      	cmp	r7, sl
 8001308:	d00c      	beq.n	8001324 <__eqdf2+0x54>
 800130a:	bc1c      	pop	{r2, r3, r4}
 800130c:	4690      	mov	r8, r2
 800130e:	4699      	mov	r9, r3
 8001310:	46a2      	mov	sl, r4
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	4666      	mov	r6, ip
 8001316:	433e      	orrs	r6, r7
 8001318:	d1f7      	bne.n	800130a <__eqdf2+0x3a>
 800131a:	42ac      	cmp	r4, r5
 800131c:	d1f5      	bne.n	800130a <__eqdf2+0x3a>
 800131e:	4654      	mov	r4, sl
 8001320:	4314      	orrs	r4, r2
 8001322:	d1f2      	bne.n	800130a <__eqdf2+0x3a>
 8001324:	2001      	movs	r0, #1
 8001326:	45c8      	cmp	r8, r9
 8001328:	d1ef      	bne.n	800130a <__eqdf2+0x3a>
 800132a:	4299      	cmp	r1, r3
 800132c:	d007      	beq.n	800133e <__eqdf2+0x6e>
 800132e:	2d00      	cmp	r5, #0
 8001330:	d1eb      	bne.n	800130a <__eqdf2+0x3a>
 8001332:	4663      	mov	r3, ip
 8001334:	431f      	orrs	r7, r3
 8001336:	0038      	movs	r0, r7
 8001338:	1e47      	subs	r7, r0, #1
 800133a:	41b8      	sbcs	r0, r7
 800133c:	e7e5      	b.n	800130a <__eqdf2+0x3a>
 800133e:	2000      	movs	r0, #0
 8001340:	e7e3      	b.n	800130a <__eqdf2+0x3a>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	000007ff 	.word	0x000007ff

08001348 <__gedf2>:
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	464f      	mov	r7, r9
 800134c:	4646      	mov	r6, r8
 800134e:	46d6      	mov	lr, sl
 8001350:	004d      	lsls	r5, r1, #1
 8001352:	b5c0      	push	{r6, r7, lr}
 8001354:	030e      	lsls	r6, r1, #12
 8001356:	0fc9      	lsrs	r1, r1, #31
 8001358:	468a      	mov	sl, r1
 800135a:	492c      	ldr	r1, [pc, #176]	; (800140c <__gedf2+0xc4>)
 800135c:	031f      	lsls	r7, r3, #12
 800135e:	005c      	lsls	r4, r3, #1
 8001360:	4680      	mov	r8, r0
 8001362:	0b36      	lsrs	r6, r6, #12
 8001364:	0d6d      	lsrs	r5, r5, #21
 8001366:	4691      	mov	r9, r2
 8001368:	0b3f      	lsrs	r7, r7, #12
 800136a:	0d64      	lsrs	r4, r4, #21
 800136c:	0fdb      	lsrs	r3, r3, #31
 800136e:	428d      	cmp	r5, r1
 8001370:	d01e      	beq.n	80013b0 <__gedf2+0x68>
 8001372:	428c      	cmp	r4, r1
 8001374:	d016      	beq.n	80013a4 <__gedf2+0x5c>
 8001376:	2d00      	cmp	r5, #0
 8001378:	d11e      	bne.n	80013b8 <__gedf2+0x70>
 800137a:	4330      	orrs	r0, r6
 800137c:	4684      	mov	ip, r0
 800137e:	2c00      	cmp	r4, #0
 8001380:	d101      	bne.n	8001386 <__gedf2+0x3e>
 8001382:	433a      	orrs	r2, r7
 8001384:	d023      	beq.n	80013ce <__gedf2+0x86>
 8001386:	4662      	mov	r2, ip
 8001388:	2a00      	cmp	r2, #0
 800138a:	d01a      	beq.n	80013c2 <__gedf2+0x7a>
 800138c:	459a      	cmp	sl, r3
 800138e:	d029      	beq.n	80013e4 <__gedf2+0x9c>
 8001390:	4651      	mov	r1, sl
 8001392:	2002      	movs	r0, #2
 8001394:	3901      	subs	r1, #1
 8001396:	4008      	ands	r0, r1
 8001398:	3801      	subs	r0, #1
 800139a:	bc1c      	pop	{r2, r3, r4}
 800139c:	4690      	mov	r8, r2
 800139e:	4699      	mov	r9, r3
 80013a0:	46a2      	mov	sl, r4
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	0039      	movs	r1, r7
 80013a6:	4311      	orrs	r1, r2
 80013a8:	d0e5      	beq.n	8001376 <__gedf2+0x2e>
 80013aa:	2002      	movs	r0, #2
 80013ac:	4240      	negs	r0, r0
 80013ae:	e7f4      	b.n	800139a <__gedf2+0x52>
 80013b0:	4330      	orrs	r0, r6
 80013b2:	d1fa      	bne.n	80013aa <__gedf2+0x62>
 80013b4:	42ac      	cmp	r4, r5
 80013b6:	d00f      	beq.n	80013d8 <__gedf2+0x90>
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d10f      	bne.n	80013dc <__gedf2+0x94>
 80013bc:	433a      	orrs	r2, r7
 80013be:	d0e7      	beq.n	8001390 <__gedf2+0x48>
 80013c0:	e00c      	b.n	80013dc <__gedf2+0x94>
 80013c2:	2201      	movs	r2, #1
 80013c4:	3b01      	subs	r3, #1
 80013c6:	4393      	bics	r3, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	3001      	adds	r0, #1
 80013cc:	e7e5      	b.n	800139a <__gedf2+0x52>
 80013ce:	4663      	mov	r3, ip
 80013d0:	2000      	movs	r0, #0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0e1      	beq.n	800139a <__gedf2+0x52>
 80013d6:	e7db      	b.n	8001390 <__gedf2+0x48>
 80013d8:	433a      	orrs	r2, r7
 80013da:	d1e6      	bne.n	80013aa <__gedf2+0x62>
 80013dc:	459a      	cmp	sl, r3
 80013de:	d1d7      	bne.n	8001390 <__gedf2+0x48>
 80013e0:	42a5      	cmp	r5, r4
 80013e2:	dcd5      	bgt.n	8001390 <__gedf2+0x48>
 80013e4:	42a5      	cmp	r5, r4
 80013e6:	db05      	blt.n	80013f4 <__gedf2+0xac>
 80013e8:	42be      	cmp	r6, r7
 80013ea:	d8d1      	bhi.n	8001390 <__gedf2+0x48>
 80013ec:	d008      	beq.n	8001400 <__gedf2+0xb8>
 80013ee:	2000      	movs	r0, #0
 80013f0:	42be      	cmp	r6, r7
 80013f2:	d2d2      	bcs.n	800139a <__gedf2+0x52>
 80013f4:	4650      	mov	r0, sl
 80013f6:	2301      	movs	r3, #1
 80013f8:	3801      	subs	r0, #1
 80013fa:	4398      	bics	r0, r3
 80013fc:	3001      	adds	r0, #1
 80013fe:	e7cc      	b.n	800139a <__gedf2+0x52>
 8001400:	45c8      	cmp	r8, r9
 8001402:	d8c5      	bhi.n	8001390 <__gedf2+0x48>
 8001404:	2000      	movs	r0, #0
 8001406:	45c8      	cmp	r8, r9
 8001408:	d3f4      	bcc.n	80013f4 <__gedf2+0xac>
 800140a:	e7c6      	b.n	800139a <__gedf2+0x52>
 800140c:	000007ff 	.word	0x000007ff

08001410 <__ledf2>:
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	464f      	mov	r7, r9
 8001414:	4646      	mov	r6, r8
 8001416:	46d6      	mov	lr, sl
 8001418:	004d      	lsls	r5, r1, #1
 800141a:	b5c0      	push	{r6, r7, lr}
 800141c:	030e      	lsls	r6, r1, #12
 800141e:	0fc9      	lsrs	r1, r1, #31
 8001420:	468a      	mov	sl, r1
 8001422:	492e      	ldr	r1, [pc, #184]	; (80014dc <__ledf2+0xcc>)
 8001424:	031f      	lsls	r7, r3, #12
 8001426:	005c      	lsls	r4, r3, #1
 8001428:	4680      	mov	r8, r0
 800142a:	0b36      	lsrs	r6, r6, #12
 800142c:	0d6d      	lsrs	r5, r5, #21
 800142e:	4691      	mov	r9, r2
 8001430:	0b3f      	lsrs	r7, r7, #12
 8001432:	0d64      	lsrs	r4, r4, #21
 8001434:	0fdb      	lsrs	r3, r3, #31
 8001436:	428d      	cmp	r5, r1
 8001438:	d018      	beq.n	800146c <__ledf2+0x5c>
 800143a:	428c      	cmp	r4, r1
 800143c:	d011      	beq.n	8001462 <__ledf2+0x52>
 800143e:	2d00      	cmp	r5, #0
 8001440:	d118      	bne.n	8001474 <__ledf2+0x64>
 8001442:	4330      	orrs	r0, r6
 8001444:	4684      	mov	ip, r0
 8001446:	2c00      	cmp	r4, #0
 8001448:	d11e      	bne.n	8001488 <__ledf2+0x78>
 800144a:	433a      	orrs	r2, r7
 800144c:	d11c      	bne.n	8001488 <__ledf2+0x78>
 800144e:	4663      	mov	r3, ip
 8001450:	2000      	movs	r0, #0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d030      	beq.n	80014b8 <__ledf2+0xa8>
 8001456:	4651      	mov	r1, sl
 8001458:	2002      	movs	r0, #2
 800145a:	3901      	subs	r1, #1
 800145c:	4008      	ands	r0, r1
 800145e:	3801      	subs	r0, #1
 8001460:	e02a      	b.n	80014b8 <__ledf2+0xa8>
 8001462:	0039      	movs	r1, r7
 8001464:	4311      	orrs	r1, r2
 8001466:	d0ea      	beq.n	800143e <__ledf2+0x2e>
 8001468:	2002      	movs	r0, #2
 800146a:	e025      	b.n	80014b8 <__ledf2+0xa8>
 800146c:	4330      	orrs	r0, r6
 800146e:	d1fb      	bne.n	8001468 <__ledf2+0x58>
 8001470:	42ac      	cmp	r4, r5
 8001472:	d026      	beq.n	80014c2 <__ledf2+0xb2>
 8001474:	2c00      	cmp	r4, #0
 8001476:	d126      	bne.n	80014c6 <__ledf2+0xb6>
 8001478:	433a      	orrs	r2, r7
 800147a:	d124      	bne.n	80014c6 <__ledf2+0xb6>
 800147c:	4651      	mov	r1, sl
 800147e:	2002      	movs	r0, #2
 8001480:	3901      	subs	r1, #1
 8001482:	4008      	ands	r0, r1
 8001484:	3801      	subs	r0, #1
 8001486:	e017      	b.n	80014b8 <__ledf2+0xa8>
 8001488:	4662      	mov	r2, ip
 800148a:	2a00      	cmp	r2, #0
 800148c:	d00f      	beq.n	80014ae <__ledf2+0x9e>
 800148e:	459a      	cmp	sl, r3
 8001490:	d1e1      	bne.n	8001456 <__ledf2+0x46>
 8001492:	42a5      	cmp	r5, r4
 8001494:	db05      	blt.n	80014a2 <__ledf2+0x92>
 8001496:	42be      	cmp	r6, r7
 8001498:	d8dd      	bhi.n	8001456 <__ledf2+0x46>
 800149a:	d019      	beq.n	80014d0 <__ledf2+0xc0>
 800149c:	2000      	movs	r0, #0
 800149e:	42be      	cmp	r6, r7
 80014a0:	d20a      	bcs.n	80014b8 <__ledf2+0xa8>
 80014a2:	4650      	mov	r0, sl
 80014a4:	2301      	movs	r3, #1
 80014a6:	3801      	subs	r0, #1
 80014a8:	4398      	bics	r0, r3
 80014aa:	3001      	adds	r0, #1
 80014ac:	e004      	b.n	80014b8 <__ledf2+0xa8>
 80014ae:	2201      	movs	r2, #1
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4393      	bics	r3, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	3001      	adds	r0, #1
 80014b8:	bc1c      	pop	{r2, r3, r4}
 80014ba:	4690      	mov	r8, r2
 80014bc:	4699      	mov	r9, r3
 80014be:	46a2      	mov	sl, r4
 80014c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c2:	433a      	orrs	r2, r7
 80014c4:	d1d0      	bne.n	8001468 <__ledf2+0x58>
 80014c6:	459a      	cmp	sl, r3
 80014c8:	d1c5      	bne.n	8001456 <__ledf2+0x46>
 80014ca:	42a5      	cmp	r5, r4
 80014cc:	dcc3      	bgt.n	8001456 <__ledf2+0x46>
 80014ce:	e7e0      	b.n	8001492 <__ledf2+0x82>
 80014d0:	45c8      	cmp	r8, r9
 80014d2:	d8c0      	bhi.n	8001456 <__ledf2+0x46>
 80014d4:	2000      	movs	r0, #0
 80014d6:	45c8      	cmp	r8, r9
 80014d8:	d3e3      	bcc.n	80014a2 <__ledf2+0x92>
 80014da:	e7ed      	b.n	80014b8 <__ledf2+0xa8>
 80014dc:	000007ff 	.word	0x000007ff

080014e0 <__aeabi_dmul>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	4657      	mov	r7, sl
 80014e4:	46de      	mov	lr, fp
 80014e6:	464e      	mov	r6, r9
 80014e8:	4645      	mov	r5, r8
 80014ea:	b5e0      	push	{r5, r6, r7, lr}
 80014ec:	4683      	mov	fp, r0
 80014ee:	0006      	movs	r6, r0
 80014f0:	030f      	lsls	r7, r1, #12
 80014f2:	0048      	lsls	r0, r1, #1
 80014f4:	b087      	sub	sp, #28
 80014f6:	4692      	mov	sl, r2
 80014f8:	001d      	movs	r5, r3
 80014fa:	0b3f      	lsrs	r7, r7, #12
 80014fc:	0d40      	lsrs	r0, r0, #21
 80014fe:	0fcc      	lsrs	r4, r1, #31
 8001500:	2800      	cmp	r0, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x26>
 8001504:	e06f      	b.n	80015e6 <__aeabi_dmul+0x106>
 8001506:	4bde      	ldr	r3, [pc, #888]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001508:	4298      	cmp	r0, r3
 800150a:	d038      	beq.n	800157e <__aeabi_dmul+0x9e>
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	00ff      	lsls	r7, r7, #3
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431f      	orrs	r7, r3
 8001514:	0f73      	lsrs	r3, r6, #29
 8001516:	433b      	orrs	r3, r7
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	4bda      	ldr	r3, [pc, #872]	; (8001884 <__aeabi_dmul+0x3a4>)
 800151c:	2700      	movs	r7, #0
 800151e:	4699      	mov	r9, r3
 8001520:	2300      	movs	r3, #0
 8001522:	469b      	mov	fp, r3
 8001524:	00f6      	lsls	r6, r6, #3
 8001526:	4481      	add	r9, r0
 8001528:	032b      	lsls	r3, r5, #12
 800152a:	0069      	lsls	r1, r5, #1
 800152c:	0b1b      	lsrs	r3, r3, #12
 800152e:	4652      	mov	r2, sl
 8001530:	4698      	mov	r8, r3
 8001532:	0d49      	lsrs	r1, r1, #21
 8001534:	0fed      	lsrs	r5, r5, #31
 8001536:	2900      	cmp	r1, #0
 8001538:	d100      	bne.n	800153c <__aeabi_dmul+0x5c>
 800153a:	e085      	b.n	8001648 <__aeabi_dmul+0x168>
 800153c:	4bd0      	ldr	r3, [pc, #832]	; (8001880 <__aeabi_dmul+0x3a0>)
 800153e:	4299      	cmp	r1, r3
 8001540:	d100      	bne.n	8001544 <__aeabi_dmul+0x64>
 8001542:	e073      	b.n	800162c <__aeabi_dmul+0x14c>
 8001544:	4643      	mov	r3, r8
 8001546:	00da      	lsls	r2, r3, #3
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	041b      	lsls	r3, r3, #16
 800154c:	4313      	orrs	r3, r2
 800154e:	4652      	mov	r2, sl
 8001550:	48cc      	ldr	r0, [pc, #816]	; (8001884 <__aeabi_dmul+0x3a4>)
 8001552:	0f52      	lsrs	r2, r2, #29
 8001554:	4684      	mov	ip, r0
 8001556:	4313      	orrs	r3, r2
 8001558:	4652      	mov	r2, sl
 800155a:	2000      	movs	r0, #0
 800155c:	4461      	add	r1, ip
 800155e:	00d2      	lsls	r2, r2, #3
 8001560:	4489      	add	r9, r1
 8001562:	0021      	movs	r1, r4
 8001564:	4069      	eors	r1, r5
 8001566:	9100      	str	r1, [sp, #0]
 8001568:	468c      	mov	ip, r1
 800156a:	2101      	movs	r1, #1
 800156c:	4449      	add	r1, r9
 800156e:	468a      	mov	sl, r1
 8001570:	2f0f      	cmp	r7, #15
 8001572:	d900      	bls.n	8001576 <__aeabi_dmul+0x96>
 8001574:	e090      	b.n	8001698 <__aeabi_dmul+0x1b8>
 8001576:	49c4      	ldr	r1, [pc, #784]	; (8001888 <__aeabi_dmul+0x3a8>)
 8001578:	00bf      	lsls	r7, r7, #2
 800157a:	59cf      	ldr	r7, [r1, r7]
 800157c:	46bf      	mov	pc, r7
 800157e:	465b      	mov	r3, fp
 8001580:	433b      	orrs	r3, r7
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	d000      	beq.n	8001588 <__aeabi_dmul+0xa8>
 8001586:	e16a      	b.n	800185e <__aeabi_dmul+0x37e>
 8001588:	2302      	movs	r3, #2
 800158a:	2708      	movs	r7, #8
 800158c:	2600      	movs	r6, #0
 800158e:	4681      	mov	r9, r0
 8001590:	469b      	mov	fp, r3
 8001592:	e7c9      	b.n	8001528 <__aeabi_dmul+0x48>
 8001594:	0032      	movs	r2, r6
 8001596:	4658      	mov	r0, fp
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	4661      	mov	r1, ip
 800159c:	9100      	str	r1, [sp, #0]
 800159e:	2802      	cmp	r0, #2
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0xc4>
 80015a2:	e075      	b.n	8001690 <__aeabi_dmul+0x1b0>
 80015a4:	2803      	cmp	r0, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0xca>
 80015a8:	e1fe      	b.n	80019a8 <__aeabi_dmul+0x4c8>
 80015aa:	2801      	cmp	r0, #1
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xd0>
 80015ae:	e12c      	b.n	800180a <__aeabi_dmul+0x32a>
 80015b0:	2300      	movs	r3, #0
 80015b2:	2700      	movs	r7, #0
 80015b4:	2600      	movs	r6, #0
 80015b6:	2500      	movs	r5, #0
 80015b8:	033f      	lsls	r7, r7, #12
 80015ba:	0d2a      	lsrs	r2, r5, #20
 80015bc:	0b3f      	lsrs	r7, r7, #12
 80015be:	48b3      	ldr	r0, [pc, #716]	; (800188c <__aeabi_dmul+0x3ac>)
 80015c0:	0512      	lsls	r2, r2, #20
 80015c2:	433a      	orrs	r2, r7
 80015c4:	4002      	ands	r2, r0
 80015c6:	051b      	lsls	r3, r3, #20
 80015c8:	4313      	orrs	r3, r2
 80015ca:	9a00      	ldr	r2, [sp, #0]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	07d1      	lsls	r1, r2, #31
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	430b      	orrs	r3, r1
 80015d4:	0030      	movs	r0, r6
 80015d6:	0019      	movs	r1, r3
 80015d8:	b007      	add	sp, #28
 80015da:	bc3c      	pop	{r2, r3, r4, r5}
 80015dc:	4690      	mov	r8, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	46a2      	mov	sl, r4
 80015e2:	46ab      	mov	fp, r5
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	465b      	mov	r3, fp
 80015e8:	433b      	orrs	r3, r7
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dmul+0x110>
 80015ee:	e12f      	b.n	8001850 <__aeabi_dmul+0x370>
 80015f0:	2f00      	cmp	r7, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dmul+0x116>
 80015f4:	e1a5      	b.n	8001942 <__aeabi_dmul+0x462>
 80015f6:	0038      	movs	r0, r7
 80015f8:	f000 fec0 	bl	800237c <__clzsi2>
 80015fc:	0003      	movs	r3, r0
 80015fe:	3b0b      	subs	r3, #11
 8001600:	2b1c      	cmp	r3, #28
 8001602:	dd00      	ble.n	8001606 <__aeabi_dmul+0x126>
 8001604:	e196      	b.n	8001934 <__aeabi_dmul+0x454>
 8001606:	221d      	movs	r2, #29
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	465a      	mov	r2, fp
 800160c:	0001      	movs	r1, r0
 800160e:	40da      	lsrs	r2, r3
 8001610:	465e      	mov	r6, fp
 8001612:	3908      	subs	r1, #8
 8001614:	408f      	lsls	r7, r1
 8001616:	0013      	movs	r3, r2
 8001618:	408e      	lsls	r6, r1
 800161a:	433b      	orrs	r3, r7
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	4b9c      	ldr	r3, [pc, #624]	; (8001890 <__aeabi_dmul+0x3b0>)
 8001620:	2700      	movs	r7, #0
 8001622:	1a1b      	subs	r3, r3, r0
 8001624:	4699      	mov	r9, r3
 8001626:	2300      	movs	r3, #0
 8001628:	469b      	mov	fp, r3
 800162a:	e77d      	b.n	8001528 <__aeabi_dmul+0x48>
 800162c:	4641      	mov	r1, r8
 800162e:	4653      	mov	r3, sl
 8001630:	430b      	orrs	r3, r1
 8001632:	4993      	ldr	r1, [pc, #588]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001634:	468c      	mov	ip, r1
 8001636:	44e1      	add	r9, ip
 8001638:	2b00      	cmp	r3, #0
 800163a:	d000      	beq.n	800163e <__aeabi_dmul+0x15e>
 800163c:	e11a      	b.n	8001874 <__aeabi_dmul+0x394>
 800163e:	2202      	movs	r2, #2
 8001640:	2002      	movs	r0, #2
 8001642:	4317      	orrs	r7, r2
 8001644:	2200      	movs	r2, #0
 8001646:	e78c      	b.n	8001562 <__aeabi_dmul+0x82>
 8001648:	4313      	orrs	r3, r2
 800164a:	d100      	bne.n	800164e <__aeabi_dmul+0x16e>
 800164c:	e10d      	b.n	800186a <__aeabi_dmul+0x38a>
 800164e:	4643      	mov	r3, r8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dmul+0x176>
 8001654:	e181      	b.n	800195a <__aeabi_dmul+0x47a>
 8001656:	4640      	mov	r0, r8
 8001658:	f000 fe90 	bl	800237c <__clzsi2>
 800165c:	0002      	movs	r2, r0
 800165e:	3a0b      	subs	r2, #11
 8001660:	2a1c      	cmp	r2, #28
 8001662:	dd00      	ble.n	8001666 <__aeabi_dmul+0x186>
 8001664:	e172      	b.n	800194c <__aeabi_dmul+0x46c>
 8001666:	0001      	movs	r1, r0
 8001668:	4643      	mov	r3, r8
 800166a:	3908      	subs	r1, #8
 800166c:	408b      	lsls	r3, r1
 800166e:	4698      	mov	r8, r3
 8001670:	231d      	movs	r3, #29
 8001672:	1a9a      	subs	r2, r3, r2
 8001674:	4653      	mov	r3, sl
 8001676:	40d3      	lsrs	r3, r2
 8001678:	001a      	movs	r2, r3
 800167a:	4643      	mov	r3, r8
 800167c:	4313      	orrs	r3, r2
 800167e:	4652      	mov	r2, sl
 8001680:	408a      	lsls	r2, r1
 8001682:	4649      	mov	r1, r9
 8001684:	1a08      	subs	r0, r1, r0
 8001686:	4982      	ldr	r1, [pc, #520]	; (8001890 <__aeabi_dmul+0x3b0>)
 8001688:	4689      	mov	r9, r1
 800168a:	4481      	add	r9, r0
 800168c:	2000      	movs	r0, #0
 800168e:	e768      	b.n	8001562 <__aeabi_dmul+0x82>
 8001690:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <__aeabi_dmul+0x3a0>)
 8001692:	2700      	movs	r7, #0
 8001694:	2600      	movs	r6, #0
 8001696:	e78e      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001698:	0c14      	lsrs	r4, r2, #16
 800169a:	0412      	lsls	r2, r2, #16
 800169c:	0c12      	lsrs	r2, r2, #16
 800169e:	0011      	movs	r1, r2
 80016a0:	0c37      	lsrs	r7, r6, #16
 80016a2:	0436      	lsls	r6, r6, #16
 80016a4:	0c35      	lsrs	r5, r6, #16
 80016a6:	4379      	muls	r1, r7
 80016a8:	0028      	movs	r0, r5
 80016aa:	468c      	mov	ip, r1
 80016ac:	002e      	movs	r6, r5
 80016ae:	4360      	muls	r0, r4
 80016b0:	4460      	add	r0, ip
 80016b2:	4683      	mov	fp, r0
 80016b4:	4356      	muls	r6, r2
 80016b6:	0021      	movs	r1, r4
 80016b8:	0c30      	lsrs	r0, r6, #16
 80016ba:	4680      	mov	r8, r0
 80016bc:	4658      	mov	r0, fp
 80016be:	4379      	muls	r1, r7
 80016c0:	4440      	add	r0, r8
 80016c2:	9102      	str	r1, [sp, #8]
 80016c4:	4584      	cmp	ip, r0
 80016c6:	d906      	bls.n	80016d6 <__aeabi_dmul+0x1f6>
 80016c8:	4688      	mov	r8, r1
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0249      	lsls	r1, r1, #9
 80016ce:	468c      	mov	ip, r1
 80016d0:	44e0      	add	r8, ip
 80016d2:	4641      	mov	r1, r8
 80016d4:	9102      	str	r1, [sp, #8]
 80016d6:	0436      	lsls	r6, r6, #16
 80016d8:	0c01      	lsrs	r1, r0, #16
 80016da:	0c36      	lsrs	r6, r6, #16
 80016dc:	0400      	lsls	r0, r0, #16
 80016de:	468b      	mov	fp, r1
 80016e0:	1981      	adds	r1, r0, r6
 80016e2:	0c1e      	lsrs	r6, r3, #16
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	0c1b      	lsrs	r3, r3, #16
 80016e8:	9103      	str	r1, [sp, #12]
 80016ea:	0019      	movs	r1, r3
 80016ec:	4379      	muls	r1, r7
 80016ee:	468c      	mov	ip, r1
 80016f0:	0028      	movs	r0, r5
 80016f2:	4375      	muls	r5, r6
 80016f4:	4465      	add	r5, ip
 80016f6:	46a8      	mov	r8, r5
 80016f8:	4358      	muls	r0, r3
 80016fa:	0c05      	lsrs	r5, r0, #16
 80016fc:	4445      	add	r5, r8
 80016fe:	4377      	muls	r7, r6
 8001700:	42a9      	cmp	r1, r5
 8001702:	d903      	bls.n	800170c <__aeabi_dmul+0x22c>
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0249      	lsls	r1, r1, #9
 8001708:	468c      	mov	ip, r1
 800170a:	4467      	add	r7, ip
 800170c:	0c29      	lsrs	r1, r5, #16
 800170e:	468c      	mov	ip, r1
 8001710:	0039      	movs	r1, r7
 8001712:	0400      	lsls	r0, r0, #16
 8001714:	0c00      	lsrs	r0, r0, #16
 8001716:	042d      	lsls	r5, r5, #16
 8001718:	182d      	adds	r5, r5, r0
 800171a:	4461      	add	r1, ip
 800171c:	44ab      	add	fp, r5
 800171e:	9105      	str	r1, [sp, #20]
 8001720:	4659      	mov	r1, fp
 8001722:	9104      	str	r1, [sp, #16]
 8001724:	9901      	ldr	r1, [sp, #4]
 8001726:	040f      	lsls	r7, r1, #16
 8001728:	0c3f      	lsrs	r7, r7, #16
 800172a:	0c08      	lsrs	r0, r1, #16
 800172c:	0039      	movs	r1, r7
 800172e:	4351      	muls	r1, r2
 8001730:	4342      	muls	r2, r0
 8001732:	4690      	mov	r8, r2
 8001734:	0002      	movs	r2, r0
 8001736:	468c      	mov	ip, r1
 8001738:	0c09      	lsrs	r1, r1, #16
 800173a:	468b      	mov	fp, r1
 800173c:	4362      	muls	r2, r4
 800173e:	437c      	muls	r4, r7
 8001740:	4444      	add	r4, r8
 8001742:	445c      	add	r4, fp
 8001744:	45a0      	cmp	r8, r4
 8001746:	d903      	bls.n	8001750 <__aeabi_dmul+0x270>
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0249      	lsls	r1, r1, #9
 800174c:	4688      	mov	r8, r1
 800174e:	4442      	add	r2, r8
 8001750:	0c21      	lsrs	r1, r4, #16
 8001752:	4688      	mov	r8, r1
 8001754:	4661      	mov	r1, ip
 8001756:	0409      	lsls	r1, r1, #16
 8001758:	0c09      	lsrs	r1, r1, #16
 800175a:	468c      	mov	ip, r1
 800175c:	0039      	movs	r1, r7
 800175e:	4359      	muls	r1, r3
 8001760:	4343      	muls	r3, r0
 8001762:	4370      	muls	r0, r6
 8001764:	437e      	muls	r6, r7
 8001766:	0c0f      	lsrs	r7, r1, #16
 8001768:	18f6      	adds	r6, r6, r3
 800176a:	0424      	lsls	r4, r4, #16
 800176c:	19be      	adds	r6, r7, r6
 800176e:	4464      	add	r4, ip
 8001770:	4442      	add	r2, r8
 8001772:	468c      	mov	ip, r1
 8001774:	42b3      	cmp	r3, r6
 8001776:	d903      	bls.n	8001780 <__aeabi_dmul+0x2a0>
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	4698      	mov	r8, r3
 800177e:	4440      	add	r0, r8
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4661      	mov	r1, ip
 8001784:	4698      	mov	r8, r3
 8001786:	9b04      	ldr	r3, [sp, #16]
 8001788:	0437      	lsls	r7, r6, #16
 800178a:	4443      	add	r3, r8
 800178c:	469b      	mov	fp, r3
 800178e:	45ab      	cmp	fp, r5
 8001790:	41ad      	sbcs	r5, r5
 8001792:	426b      	negs	r3, r5
 8001794:	040d      	lsls	r5, r1, #16
 8001796:	9905      	ldr	r1, [sp, #20]
 8001798:	0c2d      	lsrs	r5, r5, #16
 800179a:	468c      	mov	ip, r1
 800179c:	197f      	adds	r7, r7, r5
 800179e:	4467      	add	r7, ip
 80017a0:	18fd      	adds	r5, r7, r3
 80017a2:	46a8      	mov	r8, r5
 80017a4:	465d      	mov	r5, fp
 80017a6:	192d      	adds	r5, r5, r4
 80017a8:	42a5      	cmp	r5, r4
 80017aa:	41a4      	sbcs	r4, r4
 80017ac:	4693      	mov	fp, r2
 80017ae:	4264      	negs	r4, r4
 80017b0:	46a4      	mov	ip, r4
 80017b2:	44c3      	add	fp, r8
 80017b4:	44dc      	add	ip, fp
 80017b6:	428f      	cmp	r7, r1
 80017b8:	41bf      	sbcs	r7, r7
 80017ba:	4598      	cmp	r8, r3
 80017bc:	419b      	sbcs	r3, r3
 80017be:	4593      	cmp	fp, r2
 80017c0:	4192      	sbcs	r2, r2
 80017c2:	45a4      	cmp	ip, r4
 80017c4:	41a4      	sbcs	r4, r4
 80017c6:	425b      	negs	r3, r3
 80017c8:	427f      	negs	r7, r7
 80017ca:	431f      	orrs	r7, r3
 80017cc:	0c36      	lsrs	r6, r6, #16
 80017ce:	4252      	negs	r2, r2
 80017d0:	4264      	negs	r4, r4
 80017d2:	19bf      	adds	r7, r7, r6
 80017d4:	4322      	orrs	r2, r4
 80017d6:	18bf      	adds	r7, r7, r2
 80017d8:	4662      	mov	r2, ip
 80017da:	1838      	adds	r0, r7, r0
 80017dc:	0243      	lsls	r3, r0, #9
 80017de:	0dd2      	lsrs	r2, r2, #23
 80017e0:	9903      	ldr	r1, [sp, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	026a      	lsls	r2, r5, #9
 80017e6:	430a      	orrs	r2, r1
 80017e8:	1e50      	subs	r0, r2, #1
 80017ea:	4182      	sbcs	r2, r0
 80017ec:	4661      	mov	r1, ip
 80017ee:	0ded      	lsrs	r5, r5, #23
 80017f0:	432a      	orrs	r2, r5
 80017f2:	024e      	lsls	r6, r1, #9
 80017f4:	4332      	orrs	r2, r6
 80017f6:	01d9      	lsls	r1, r3, #7
 80017f8:	d400      	bmi.n	80017fc <__aeabi_dmul+0x31c>
 80017fa:	e0b3      	b.n	8001964 <__aeabi_dmul+0x484>
 80017fc:	2601      	movs	r6, #1
 80017fe:	0850      	lsrs	r0, r2, #1
 8001800:	4032      	ands	r2, r6
 8001802:	4302      	orrs	r2, r0
 8001804:	07de      	lsls	r6, r3, #31
 8001806:	4332      	orrs	r2, r6
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	4c22      	ldr	r4, [pc, #136]	; (8001894 <__aeabi_dmul+0x3b4>)
 800180c:	4454      	add	r4, sl
 800180e:	2c00      	cmp	r4, #0
 8001810:	dd62      	ble.n	80018d8 <__aeabi_dmul+0x3f8>
 8001812:	0751      	lsls	r1, r2, #29
 8001814:	d009      	beq.n	800182a <__aeabi_dmul+0x34a>
 8001816:	200f      	movs	r0, #15
 8001818:	4010      	ands	r0, r2
 800181a:	2804      	cmp	r0, #4
 800181c:	d005      	beq.n	800182a <__aeabi_dmul+0x34a>
 800181e:	1d10      	adds	r0, r2, #4
 8001820:	4290      	cmp	r0, r2
 8001822:	4192      	sbcs	r2, r2
 8001824:	4252      	negs	r2, r2
 8001826:	189b      	adds	r3, r3, r2
 8001828:	0002      	movs	r2, r0
 800182a:	01d9      	lsls	r1, r3, #7
 800182c:	d504      	bpl.n	8001838 <__aeabi_dmul+0x358>
 800182e:	2480      	movs	r4, #128	; 0x80
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <__aeabi_dmul+0x3b8>)
 8001832:	00e4      	lsls	r4, r4, #3
 8001834:	4003      	ands	r3, r0
 8001836:	4454      	add	r4, sl
 8001838:	4818      	ldr	r0, [pc, #96]	; (800189c <__aeabi_dmul+0x3bc>)
 800183a:	4284      	cmp	r4, r0
 800183c:	dd00      	ble.n	8001840 <__aeabi_dmul+0x360>
 800183e:	e727      	b.n	8001690 <__aeabi_dmul+0x1b0>
 8001840:	075e      	lsls	r6, r3, #29
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	08d2      	lsrs	r2, r2, #3
 8001846:	0b1f      	lsrs	r7, r3, #12
 8001848:	0563      	lsls	r3, r4, #21
 800184a:	4316      	orrs	r6, r2
 800184c:	0d5b      	lsrs	r3, r3, #21
 800184e:	e6b2      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001850:	2300      	movs	r3, #0
 8001852:	4699      	mov	r9, r3
 8001854:	3301      	adds	r3, #1
 8001856:	2704      	movs	r7, #4
 8001858:	2600      	movs	r6, #0
 800185a:	469b      	mov	fp, r3
 800185c:	e664      	b.n	8001528 <__aeabi_dmul+0x48>
 800185e:	2303      	movs	r3, #3
 8001860:	9701      	str	r7, [sp, #4]
 8001862:	4681      	mov	r9, r0
 8001864:	270c      	movs	r7, #12
 8001866:	469b      	mov	fp, r3
 8001868:	e65e      	b.n	8001528 <__aeabi_dmul+0x48>
 800186a:	2201      	movs	r2, #1
 800186c:	2001      	movs	r0, #1
 800186e:	4317      	orrs	r7, r2
 8001870:	2200      	movs	r2, #0
 8001872:	e676      	b.n	8001562 <__aeabi_dmul+0x82>
 8001874:	2303      	movs	r3, #3
 8001876:	2003      	movs	r0, #3
 8001878:	431f      	orrs	r7, r3
 800187a:	4643      	mov	r3, r8
 800187c:	e671      	b.n	8001562 <__aeabi_dmul+0x82>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff
 8001884:	fffffc01 	.word	0xfffffc01
 8001888:	0800e644 	.word	0x0800e644
 800188c:	800fffff 	.word	0x800fffff
 8001890:	fffffc0d 	.word	0xfffffc0d
 8001894:	000003ff 	.word	0x000003ff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	2300      	movs	r3, #0
 80018a2:	2780      	movs	r7, #128	; 0x80
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	033f      	lsls	r7, r7, #12
 80018a8:	2600      	movs	r6, #0
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80018ac:	e683      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80018ae:	9b01      	ldr	r3, [sp, #4]
 80018b0:	0032      	movs	r2, r6
 80018b2:	46a4      	mov	ip, r4
 80018b4:	4658      	mov	r0, fp
 80018b6:	e670      	b.n	800159a <__aeabi_dmul+0xba>
 80018b8:	46ac      	mov	ip, r5
 80018ba:	e66e      	b.n	800159a <__aeabi_dmul+0xba>
 80018bc:	2780      	movs	r7, #128	; 0x80
 80018be:	9901      	ldr	r1, [sp, #4]
 80018c0:	033f      	lsls	r7, r7, #12
 80018c2:	4239      	tst	r1, r7
 80018c4:	d02d      	beq.n	8001922 <__aeabi_dmul+0x442>
 80018c6:	423b      	tst	r3, r7
 80018c8:	d12b      	bne.n	8001922 <__aeabi_dmul+0x442>
 80018ca:	431f      	orrs	r7, r3
 80018cc:	033f      	lsls	r7, r7, #12
 80018ce:	0b3f      	lsrs	r7, r7, #12
 80018d0:	9500      	str	r5, [sp, #0]
 80018d2:	0016      	movs	r6, r2
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80018d6:	e66e      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80018d8:	2501      	movs	r5, #1
 80018da:	1b2d      	subs	r5, r5, r4
 80018dc:	2d38      	cmp	r5, #56	; 0x38
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dmul+0x402>
 80018e0:	e666      	b.n	80015b0 <__aeabi_dmul+0xd0>
 80018e2:	2d1f      	cmp	r5, #31
 80018e4:	dc40      	bgt.n	8001968 <__aeabi_dmul+0x488>
 80018e6:	4835      	ldr	r0, [pc, #212]	; (80019bc <__aeabi_dmul+0x4dc>)
 80018e8:	001c      	movs	r4, r3
 80018ea:	4450      	add	r0, sl
 80018ec:	0016      	movs	r6, r2
 80018ee:	4082      	lsls	r2, r0
 80018f0:	4084      	lsls	r4, r0
 80018f2:	40ee      	lsrs	r6, r5
 80018f4:	1e50      	subs	r0, r2, #1
 80018f6:	4182      	sbcs	r2, r0
 80018f8:	4334      	orrs	r4, r6
 80018fa:	4314      	orrs	r4, r2
 80018fc:	40eb      	lsrs	r3, r5
 80018fe:	0762      	lsls	r2, r4, #29
 8001900:	d009      	beq.n	8001916 <__aeabi_dmul+0x436>
 8001902:	220f      	movs	r2, #15
 8001904:	4022      	ands	r2, r4
 8001906:	2a04      	cmp	r2, #4
 8001908:	d005      	beq.n	8001916 <__aeabi_dmul+0x436>
 800190a:	0022      	movs	r2, r4
 800190c:	1d14      	adds	r4, r2, #4
 800190e:	4294      	cmp	r4, r2
 8001910:	4180      	sbcs	r0, r0
 8001912:	4240      	negs	r0, r0
 8001914:	181b      	adds	r3, r3, r0
 8001916:	021a      	lsls	r2, r3, #8
 8001918:	d53e      	bpl.n	8001998 <__aeabi_dmul+0x4b8>
 800191a:	2301      	movs	r3, #1
 800191c:	2700      	movs	r7, #0
 800191e:	2600      	movs	r6, #0
 8001920:	e649      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001922:	2780      	movs	r7, #128	; 0x80
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	033f      	lsls	r7, r7, #12
 8001928:	431f      	orrs	r7, r3
 800192a:	033f      	lsls	r7, r7, #12
 800192c:	0b3f      	lsrs	r7, r7, #12
 800192e:	9400      	str	r4, [sp, #0]
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <__aeabi_dmul+0x4d8>)
 8001932:	e640      	b.n	80015b6 <__aeabi_dmul+0xd6>
 8001934:	0003      	movs	r3, r0
 8001936:	465a      	mov	r2, fp
 8001938:	3b28      	subs	r3, #40	; 0x28
 800193a:	409a      	lsls	r2, r3
 800193c:	2600      	movs	r6, #0
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	e66d      	b.n	800161e <__aeabi_dmul+0x13e>
 8001942:	4658      	mov	r0, fp
 8001944:	f000 fd1a 	bl	800237c <__clzsi2>
 8001948:	3020      	adds	r0, #32
 800194a:	e657      	b.n	80015fc <__aeabi_dmul+0x11c>
 800194c:	0003      	movs	r3, r0
 800194e:	4652      	mov	r2, sl
 8001950:	3b28      	subs	r3, #40	; 0x28
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	e693      	b.n	8001682 <__aeabi_dmul+0x1a2>
 800195a:	4650      	mov	r0, sl
 800195c:	f000 fd0e 	bl	800237c <__clzsi2>
 8001960:	3020      	adds	r0, #32
 8001962:	e67b      	b.n	800165c <__aeabi_dmul+0x17c>
 8001964:	46ca      	mov	sl, r9
 8001966:	e750      	b.n	800180a <__aeabi_dmul+0x32a>
 8001968:	201f      	movs	r0, #31
 800196a:	001e      	movs	r6, r3
 800196c:	4240      	negs	r0, r0
 800196e:	1b04      	subs	r4, r0, r4
 8001970:	40e6      	lsrs	r6, r4
 8001972:	2d20      	cmp	r5, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dmul+0x49e>
 8001976:	4c12      	ldr	r4, [pc, #72]	; (80019c0 <__aeabi_dmul+0x4e0>)
 8001978:	4454      	add	r4, sl
 800197a:	40a3      	lsls	r3, r4
 800197c:	431a      	orrs	r2, r3
 800197e:	1e50      	subs	r0, r2, #1
 8001980:	4182      	sbcs	r2, r0
 8001982:	4332      	orrs	r2, r6
 8001984:	2607      	movs	r6, #7
 8001986:	2700      	movs	r7, #0
 8001988:	4016      	ands	r6, r2
 800198a:	d009      	beq.n	80019a0 <__aeabi_dmul+0x4c0>
 800198c:	200f      	movs	r0, #15
 800198e:	2300      	movs	r3, #0
 8001990:	4010      	ands	r0, r2
 8001992:	0014      	movs	r4, r2
 8001994:	2804      	cmp	r0, #4
 8001996:	d1b9      	bne.n	800190c <__aeabi_dmul+0x42c>
 8001998:	0022      	movs	r2, r4
 800199a:	075e      	lsls	r6, r3, #29
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	0b1f      	lsrs	r7, r3, #12
 80019a0:	08d2      	lsrs	r2, r2, #3
 80019a2:	4316      	orrs	r6, r2
 80019a4:	2300      	movs	r3, #0
 80019a6:	e606      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80019a8:	2780      	movs	r7, #128	; 0x80
 80019aa:	033f      	lsls	r7, r7, #12
 80019ac:	431f      	orrs	r7, r3
 80019ae:	033f      	lsls	r7, r7, #12
 80019b0:	0b3f      	lsrs	r7, r7, #12
 80019b2:	0016      	movs	r6, r2
 80019b4:	4b00      	ldr	r3, [pc, #0]	; (80019b8 <__aeabi_dmul+0x4d8>)
 80019b6:	e5fe      	b.n	80015b6 <__aeabi_dmul+0xd6>
 80019b8:	000007ff 	.word	0x000007ff
 80019bc:	0000041e 	.word	0x0000041e
 80019c0:	0000043e 	.word	0x0000043e

080019c4 <__aeabi_dsub>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	4657      	mov	r7, sl
 80019c8:	464e      	mov	r6, r9
 80019ca:	4645      	mov	r5, r8
 80019cc:	46de      	mov	lr, fp
 80019ce:	000c      	movs	r4, r1
 80019d0:	0309      	lsls	r1, r1, #12
 80019d2:	b5e0      	push	{r5, r6, r7, lr}
 80019d4:	0a49      	lsrs	r1, r1, #9
 80019d6:	0f46      	lsrs	r6, r0, #29
 80019d8:	005f      	lsls	r7, r3, #1
 80019da:	4331      	orrs	r1, r6
 80019dc:	031e      	lsls	r6, r3, #12
 80019de:	0fdb      	lsrs	r3, r3, #31
 80019e0:	0a76      	lsrs	r6, r6, #9
 80019e2:	469b      	mov	fp, r3
 80019e4:	0f53      	lsrs	r3, r2, #29
 80019e6:	4333      	orrs	r3, r6
 80019e8:	4ec8      	ldr	r6, [pc, #800]	; (8001d0c <__aeabi_dsub+0x348>)
 80019ea:	0065      	lsls	r5, r4, #1
 80019ec:	00c0      	lsls	r0, r0, #3
 80019ee:	0fe4      	lsrs	r4, r4, #31
 80019f0:	00d2      	lsls	r2, r2, #3
 80019f2:	0d6d      	lsrs	r5, r5, #21
 80019f4:	46a2      	mov	sl, r4
 80019f6:	4681      	mov	r9, r0
 80019f8:	0d7f      	lsrs	r7, r7, #21
 80019fa:	469c      	mov	ip, r3
 80019fc:	4690      	mov	r8, r2
 80019fe:	42b7      	cmp	r7, r6
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x40>
 8001a02:	e0b9      	b.n	8001b78 <__aeabi_dsub+0x1b4>
 8001a04:	465b      	mov	r3, fp
 8001a06:	2601      	movs	r6, #1
 8001a08:	4073      	eors	r3, r6
 8001a0a:	469b      	mov	fp, r3
 8001a0c:	1bee      	subs	r6, r5, r7
 8001a0e:	45a3      	cmp	fp, r4
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x50>
 8001a12:	e083      	b.n	8001b1c <__aeabi_dsub+0x158>
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	dd63      	ble.n	8001ae0 <__aeabi_dsub+0x11c>
 8001a18:	2f00      	cmp	r7, #0
 8001a1a:	d000      	beq.n	8001a1e <__aeabi_dsub+0x5a>
 8001a1c:	e0b1      	b.n	8001b82 <__aeabi_dsub+0x1be>
 8001a1e:	4663      	mov	r3, ip
 8001a20:	4313      	orrs	r3, r2
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dsub+0x62>
 8001a24:	e123      	b.n	8001c6e <__aeabi_dsub+0x2aa>
 8001a26:	1e73      	subs	r3, r6, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x6a>
 8001a2c:	e1ba      	b.n	8001da4 <__aeabi_dsub+0x3e0>
 8001a2e:	1a86      	subs	r6, r0, r2
 8001a30:	4663      	mov	r3, ip
 8001a32:	42b0      	cmp	r0, r6
 8001a34:	4180      	sbcs	r0, r0
 8001a36:	2501      	movs	r5, #1
 8001a38:	1ac9      	subs	r1, r1, r3
 8001a3a:	4240      	negs	r0, r0
 8001a3c:	1a09      	subs	r1, r1, r0
 8001a3e:	020b      	lsls	r3, r1, #8
 8001a40:	d400      	bmi.n	8001a44 <__aeabi_dsub+0x80>
 8001a42:	e147      	b.n	8001cd4 <__aeabi_dsub+0x310>
 8001a44:	0249      	lsls	r1, r1, #9
 8001a46:	0a4b      	lsrs	r3, r1, #9
 8001a48:	4698      	mov	r8, r3
 8001a4a:	4643      	mov	r3, r8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x8e>
 8001a50:	e189      	b.n	8001d66 <__aeabi_dsub+0x3a2>
 8001a52:	4640      	mov	r0, r8
 8001a54:	f000 fc92 	bl	800237c <__clzsi2>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	dd00      	ble.n	8001a62 <__aeabi_dsub+0x9e>
 8001a60:	e17c      	b.n	8001d5c <__aeabi_dsub+0x398>
 8001a62:	2220      	movs	r2, #32
 8001a64:	0030      	movs	r0, r6
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	4641      	mov	r1, r8
 8001a6a:	40d0      	lsrs	r0, r2
 8001a6c:	4099      	lsls	r1, r3
 8001a6e:	0002      	movs	r2, r0
 8001a70:	409e      	lsls	r6, r3
 8001a72:	430a      	orrs	r2, r1
 8001a74:	429d      	cmp	r5, r3
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dsub+0xb6>
 8001a78:	e16a      	b.n	8001d50 <__aeabi_dsub+0x38c>
 8001a7a:	1b5d      	subs	r5, r3, r5
 8001a7c:	1c6b      	adds	r3, r5, #1
 8001a7e:	2b1f      	cmp	r3, #31
 8001a80:	dd00      	ble.n	8001a84 <__aeabi_dsub+0xc0>
 8001a82:	e194      	b.n	8001dae <__aeabi_dsub+0x3ea>
 8001a84:	2120      	movs	r1, #32
 8001a86:	0010      	movs	r0, r2
 8001a88:	0035      	movs	r5, r6
 8001a8a:	1ac9      	subs	r1, r1, r3
 8001a8c:	408e      	lsls	r6, r1
 8001a8e:	40da      	lsrs	r2, r3
 8001a90:	4088      	lsls	r0, r1
 8001a92:	40dd      	lsrs	r5, r3
 8001a94:	1e71      	subs	r1, r6, #1
 8001a96:	418e      	sbcs	r6, r1
 8001a98:	0011      	movs	r1, r2
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4328      	orrs	r0, r5
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	4306      	orrs	r6, r0
 8001aa2:	4032      	ands	r2, r6
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d009      	beq.n	8001abc <__aeabi_dsub+0xf8>
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	4033      	ands	r3, r6
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d005      	beq.n	8001abc <__aeabi_dsub+0xf8>
 8001ab0:	1d33      	adds	r3, r6, #4
 8001ab2:	42b3      	cmp	r3, r6
 8001ab4:	41b6      	sbcs	r6, r6
 8001ab6:	4276      	negs	r6, r6
 8001ab8:	1989      	adds	r1, r1, r6
 8001aba:	001e      	movs	r6, r3
 8001abc:	020b      	lsls	r3, r1, #8
 8001abe:	d400      	bmi.n	8001ac2 <__aeabi_dsub+0xfe>
 8001ac0:	e23d      	b.n	8001f3e <__aeabi_dsub+0x57a>
 8001ac2:	1c6a      	adds	r2, r5, #1
 8001ac4:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <__aeabi_dsub+0x348>)
 8001ac6:	0555      	lsls	r5, r2, #21
 8001ac8:	0d6d      	lsrs	r5, r5, #21
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x10c>
 8001ace:	e119      	b.n	8001d04 <__aeabi_dsub+0x340>
 8001ad0:	4a8f      	ldr	r2, [pc, #572]	; (8001d10 <__aeabi_dsub+0x34c>)
 8001ad2:	08f6      	lsrs	r6, r6, #3
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	0757      	lsls	r7, r2, #29
 8001ad8:	0252      	lsls	r2, r2, #9
 8001ada:	4337      	orrs	r7, r6
 8001adc:	0b12      	lsrs	r2, r2, #12
 8001ade:	e09b      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001ae0:	2e00      	cmp	r6, #0
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x122>
 8001ae4:	e0c5      	b.n	8001c72 <__aeabi_dsub+0x2ae>
 8001ae6:	1c6e      	adds	r6, r5, #1
 8001ae8:	0576      	lsls	r6, r6, #21
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	2e01      	cmp	r6, #1
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dsub+0x12e>
 8001af0:	e148      	b.n	8001d84 <__aeabi_dsub+0x3c0>
 8001af2:	4667      	mov	r7, ip
 8001af4:	1a86      	subs	r6, r0, r2
 8001af6:	1bcb      	subs	r3, r1, r7
 8001af8:	42b0      	cmp	r0, r6
 8001afa:	41bf      	sbcs	r7, r7
 8001afc:	427f      	negs	r7, r7
 8001afe:	46b8      	mov	r8, r7
 8001b00:	001f      	movs	r7, r3
 8001b02:	4643      	mov	r3, r8
 8001b04:	1aff      	subs	r7, r7, r3
 8001b06:	003b      	movs	r3, r7
 8001b08:	46b8      	mov	r8, r7
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	d500      	bpl.n	8001b10 <__aeabi_dsub+0x14c>
 8001b0e:	e15f      	b.n	8001dd0 <__aeabi_dsub+0x40c>
 8001b10:	4337      	orrs	r7, r6
 8001b12:	d19a      	bne.n	8001a4a <__aeabi_dsub+0x86>
 8001b14:	2200      	movs	r2, #0
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e079      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001b1c:	2e00      	cmp	r6, #0
 8001b1e:	dc00      	bgt.n	8001b22 <__aeabi_dsub+0x15e>
 8001b20:	e0fa      	b.n	8001d18 <__aeabi_dsub+0x354>
 8001b22:	2f00      	cmp	r7, #0
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x164>
 8001b26:	e08d      	b.n	8001c44 <__aeabi_dsub+0x280>
 8001b28:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b2a:	429d      	cmp	r5, r3
 8001b2c:	d067      	beq.n	8001bfe <__aeabi_dsub+0x23a>
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	4667      	mov	r7, ip
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	431f      	orrs	r7, r3
 8001b36:	46bc      	mov	ip, r7
 8001b38:	2e38      	cmp	r6, #56	; 0x38
 8001b3a:	dc00      	bgt.n	8001b3e <__aeabi_dsub+0x17a>
 8001b3c:	e152      	b.n	8001de4 <__aeabi_dsub+0x420>
 8001b3e:	4663      	mov	r3, ip
 8001b40:	4313      	orrs	r3, r2
 8001b42:	1e5a      	subs	r2, r3, #1
 8001b44:	4193      	sbcs	r3, r2
 8001b46:	181e      	adds	r6, r3, r0
 8001b48:	4286      	cmp	r6, r0
 8001b4a:	4180      	sbcs	r0, r0
 8001b4c:	4240      	negs	r0, r0
 8001b4e:	1809      	adds	r1, r1, r0
 8001b50:	020b      	lsls	r3, r1, #8
 8001b52:	d400      	bmi.n	8001b56 <__aeabi_dsub+0x192>
 8001b54:	e0be      	b.n	8001cd4 <__aeabi_dsub+0x310>
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b58:	3501      	adds	r5, #1
 8001b5a:	429d      	cmp	r5, r3
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x19c>
 8001b5e:	e0d2      	b.n	8001d06 <__aeabi_dsub+0x342>
 8001b60:	4a6b      	ldr	r2, [pc, #428]	; (8001d10 <__aeabi_dsub+0x34c>)
 8001b62:	0873      	lsrs	r3, r6, #1
 8001b64:	400a      	ands	r2, r1
 8001b66:	2101      	movs	r1, #1
 8001b68:	400e      	ands	r6, r1
 8001b6a:	431e      	orrs	r6, r3
 8001b6c:	0851      	lsrs	r1, r2, #1
 8001b6e:	07d3      	lsls	r3, r2, #31
 8001b70:	2207      	movs	r2, #7
 8001b72:	431e      	orrs	r6, r3
 8001b74:	4032      	ands	r2, r6
 8001b76:	e795      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001b78:	001e      	movs	r6, r3
 8001b7a:	4316      	orrs	r6, r2
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dsub+0x1bc>
 8001b7e:	e745      	b.n	8001a0c <__aeabi_dsub+0x48>
 8001b80:	e740      	b.n	8001a04 <__aeabi_dsub+0x40>
 8001b82:	4b62      	ldr	r3, [pc, #392]	; (8001d0c <__aeabi_dsub+0x348>)
 8001b84:	429d      	cmp	r5, r3
 8001b86:	d03a      	beq.n	8001bfe <__aeabi_dsub+0x23a>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	4667      	mov	r7, ip
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431f      	orrs	r7, r3
 8001b90:	46bc      	mov	ip, r7
 8001b92:	2e38      	cmp	r6, #56	; 0x38
 8001b94:	dd00      	ble.n	8001b98 <__aeabi_dsub+0x1d4>
 8001b96:	e0eb      	b.n	8001d70 <__aeabi_dsub+0x3ac>
 8001b98:	2e1f      	cmp	r6, #31
 8001b9a:	dc00      	bgt.n	8001b9e <__aeabi_dsub+0x1da>
 8001b9c:	e13a      	b.n	8001e14 <__aeabi_dsub+0x450>
 8001b9e:	0033      	movs	r3, r6
 8001ba0:	4667      	mov	r7, ip
 8001ba2:	3b20      	subs	r3, #32
 8001ba4:	40df      	lsrs	r7, r3
 8001ba6:	003b      	movs	r3, r7
 8001ba8:	2e20      	cmp	r6, #32
 8001baa:	d005      	beq.n	8001bb8 <__aeabi_dsub+0x1f4>
 8001bac:	2740      	movs	r7, #64	; 0x40
 8001bae:	1bbf      	subs	r7, r7, r6
 8001bb0:	4666      	mov	r6, ip
 8001bb2:	40be      	lsls	r6, r7
 8001bb4:	4332      	orrs	r2, r6
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4646      	mov	r6, r8
 8001bba:	1e72      	subs	r2, r6, #1
 8001bbc:	4196      	sbcs	r6, r2
 8001bbe:	4333      	orrs	r3, r6
 8001bc0:	e0da      	b.n	8001d78 <__aeabi_dsub+0x3b4>
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x204>
 8001bc6:	e214      	b.n	8001ff2 <__aeabi_dsub+0x62e>
 8001bc8:	4663      	mov	r3, ip
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dsub+0x20c>
 8001bce:	e168      	b.n	8001ea2 <__aeabi_dsub+0x4de>
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	074e      	lsls	r6, r1, #29
 8001bd4:	08c0      	lsrs	r0, r0, #3
 8001bd6:	08c9      	lsrs	r1, r1, #3
 8001bd8:	031b      	lsls	r3, r3, #12
 8001bda:	4306      	orrs	r6, r0
 8001bdc:	4219      	tst	r1, r3
 8001bde:	d008      	beq.n	8001bf2 <__aeabi_dsub+0x22e>
 8001be0:	4660      	mov	r0, ip
 8001be2:	08c0      	lsrs	r0, r0, #3
 8001be4:	4218      	tst	r0, r3
 8001be6:	d104      	bne.n	8001bf2 <__aeabi_dsub+0x22e>
 8001be8:	4663      	mov	r3, ip
 8001bea:	0001      	movs	r1, r0
 8001bec:	08d2      	lsrs	r2, r2, #3
 8001bee:	075e      	lsls	r6, r3, #29
 8001bf0:	4316      	orrs	r6, r2
 8001bf2:	00f3      	lsls	r3, r6, #3
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	00c9      	lsls	r1, r1, #3
 8001bf8:	0f72      	lsrs	r2, r6, #29
 8001bfa:	4d44      	ldr	r5, [pc, #272]	; (8001d0c <__aeabi_dsub+0x348>)
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	464b      	mov	r3, r9
 8001c00:	08de      	lsrs	r6, r3, #3
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <__aeabi_dsub+0x348>)
 8001c04:	074f      	lsls	r7, r1, #29
 8001c06:	4337      	orrs	r7, r6
 8001c08:	08ca      	lsrs	r2, r1, #3
 8001c0a:	429d      	cmp	r5, r3
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x24c>
 8001c0e:	e06e      	b.n	8001cee <__aeabi_dsub+0x32a>
 8001c10:	0312      	lsls	r2, r2, #12
 8001c12:	056d      	lsls	r5, r5, #21
 8001c14:	0b12      	lsrs	r2, r2, #12
 8001c16:	0d6d      	lsrs	r5, r5, #21
 8001c18:	2100      	movs	r1, #0
 8001c1a:	0312      	lsls	r2, r2, #12
 8001c1c:	0b13      	lsrs	r3, r2, #12
 8001c1e:	0d0a      	lsrs	r2, r1, #20
 8001c20:	0512      	lsls	r2, r2, #20
 8001c22:	431a      	orrs	r2, r3
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <__aeabi_dsub+0x350>)
 8001c26:	052d      	lsls	r5, r5, #20
 8001c28:	4013      	ands	r3, r2
 8001c2a:	432b      	orrs	r3, r5
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	07e4      	lsls	r4, r4, #31
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	4323      	orrs	r3, r4
 8001c34:	0038      	movs	r0, r7
 8001c36:	0019      	movs	r1, r3
 8001c38:	bc3c      	pop	{r2, r3, r4, r5}
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	46a2      	mov	sl, r4
 8001c40:	46ab      	mov	fp, r5
 8001c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c44:	4663      	mov	r3, ip
 8001c46:	4313      	orrs	r3, r2
 8001c48:	d011      	beq.n	8001c6e <__aeabi_dsub+0x2aa>
 8001c4a:	1e73      	subs	r3, r6, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dsub+0x28e>
 8001c50:	e107      	b.n	8001e62 <__aeabi_dsub+0x49e>
 8001c52:	1886      	adds	r6, r0, r2
 8001c54:	4286      	cmp	r6, r0
 8001c56:	4180      	sbcs	r0, r0
 8001c58:	4461      	add	r1, ip
 8001c5a:	4240      	negs	r0, r0
 8001c5c:	1809      	adds	r1, r1, r0
 8001c5e:	2501      	movs	r5, #1
 8001c60:	020b      	lsls	r3, r1, #8
 8001c62:	d537      	bpl.n	8001cd4 <__aeabi_dsub+0x310>
 8001c64:	2502      	movs	r5, #2
 8001c66:	e77b      	b.n	8001b60 <__aeabi_dsub+0x19c>
 8001c68:	003e      	movs	r6, r7
 8001c6a:	4661      	mov	r1, ip
 8001c6c:	4691      	mov	r9, r2
 8001c6e:	0035      	movs	r5, r6
 8001c70:	e7c5      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001c72:	465c      	mov	r4, fp
 8001c74:	2d00      	cmp	r5, #0
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dsub+0x2b6>
 8001c78:	e0e1      	b.n	8001e3e <__aeabi_dsub+0x47a>
 8001c7a:	000b      	movs	r3, r1
 8001c7c:	4303      	orrs	r3, r0
 8001c7e:	d0f3      	beq.n	8001c68 <__aeabi_dsub+0x2a4>
 8001c80:	1c73      	adds	r3, r6, #1
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x2c2>
 8001c84:	e1ac      	b.n	8001fe0 <__aeabi_dsub+0x61c>
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <__aeabi_dsub+0x348>)
 8001c88:	429f      	cmp	r7, r3
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x2ca>
 8001c8c:	e13a      	b.n	8001f04 <__aeabi_dsub+0x540>
 8001c8e:	43f3      	mvns	r3, r6
 8001c90:	2b38      	cmp	r3, #56	; 0x38
 8001c92:	dd00      	ble.n	8001c96 <__aeabi_dsub+0x2d2>
 8001c94:	e16f      	b.n	8001f76 <__aeabi_dsub+0x5b2>
 8001c96:	2b1f      	cmp	r3, #31
 8001c98:	dd00      	ble.n	8001c9c <__aeabi_dsub+0x2d8>
 8001c9a:	e18c      	b.n	8001fb6 <__aeabi_dsub+0x5f2>
 8001c9c:	2520      	movs	r5, #32
 8001c9e:	000e      	movs	r6, r1
 8001ca0:	1aed      	subs	r5, r5, r3
 8001ca2:	40ae      	lsls	r6, r5
 8001ca4:	46b0      	mov	r8, r6
 8001ca6:	0006      	movs	r6, r0
 8001ca8:	46aa      	mov	sl, r5
 8001caa:	40de      	lsrs	r6, r3
 8001cac:	4645      	mov	r5, r8
 8001cae:	4335      	orrs	r5, r6
 8001cb0:	002e      	movs	r6, r5
 8001cb2:	4655      	mov	r5, sl
 8001cb4:	40d9      	lsrs	r1, r3
 8001cb6:	40a8      	lsls	r0, r5
 8001cb8:	4663      	mov	r3, ip
 8001cba:	1e45      	subs	r5, r0, #1
 8001cbc:	41a8      	sbcs	r0, r5
 8001cbe:	1a5b      	subs	r3, r3, r1
 8001cc0:	469c      	mov	ip, r3
 8001cc2:	4330      	orrs	r0, r6
 8001cc4:	1a16      	subs	r6, r2, r0
 8001cc6:	42b2      	cmp	r2, r6
 8001cc8:	4192      	sbcs	r2, r2
 8001cca:	4663      	mov	r3, ip
 8001ccc:	4252      	negs	r2, r2
 8001cce:	1a99      	subs	r1, r3, r2
 8001cd0:	003d      	movs	r5, r7
 8001cd2:	e6b4      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4032      	ands	r2, r6
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d000      	beq.n	8001cde <__aeabi_dsub+0x31a>
 8001cdc:	e6e4      	b.n	8001aa8 <__aeabi_dsub+0xe4>
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__aeabi_dsub+0x348>)
 8001ce0:	08f6      	lsrs	r6, r6, #3
 8001ce2:	074f      	lsls	r7, r1, #29
 8001ce4:	4337      	orrs	r7, r6
 8001ce6:	08ca      	lsrs	r2, r1, #3
 8001ce8:	429d      	cmp	r5, r3
 8001cea:	d000      	beq.n	8001cee <__aeabi_dsub+0x32a>
 8001cec:	e790      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001cee:	003b      	movs	r3, r7
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x332>
 8001cf4:	e1a6      	b.n	8002044 <__aeabi_dsub+0x680>
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	0312      	lsls	r2, r2, #12
 8001cfe:	0b12      	lsrs	r2, r2, #12
 8001d00:	4d02      	ldr	r5, [pc, #8]	; (8001d0c <__aeabi_dsub+0x348>)
 8001d02:	e789      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001d04:	0015      	movs	r5, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	2700      	movs	r7, #0
 8001d0a:	e785      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001d0c:	000007ff 	.word	0x000007ff
 8001d10:	ff7fffff 	.word	0xff7fffff
 8001d14:	800fffff 	.word	0x800fffff
 8001d18:	2e00      	cmp	r6, #0
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x35a>
 8001d1c:	e0c7      	b.n	8001eae <__aeabi_dsub+0x4ea>
 8001d1e:	1c6b      	adds	r3, r5, #1
 8001d20:	055e      	lsls	r6, r3, #21
 8001d22:	0d76      	lsrs	r6, r6, #21
 8001d24:	2e01      	cmp	r6, #1
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x366>
 8001d28:	e0f0      	b.n	8001f0c <__aeabi_dsub+0x548>
 8001d2a:	4dc8      	ldr	r5, [pc, #800]	; (800204c <__aeabi_dsub+0x688>)
 8001d2c:	42ab      	cmp	r3, r5
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x36e>
 8001d30:	e0b9      	b.n	8001ea6 <__aeabi_dsub+0x4e2>
 8001d32:	1885      	adds	r5, r0, r2
 8001d34:	000a      	movs	r2, r1
 8001d36:	4285      	cmp	r5, r0
 8001d38:	4189      	sbcs	r1, r1
 8001d3a:	4462      	add	r2, ip
 8001d3c:	4249      	negs	r1, r1
 8001d3e:	1851      	adds	r1, r2, r1
 8001d40:	2207      	movs	r2, #7
 8001d42:	07ce      	lsls	r6, r1, #31
 8001d44:	086d      	lsrs	r5, r5, #1
 8001d46:	432e      	orrs	r6, r5
 8001d48:	0849      	lsrs	r1, r1, #1
 8001d4a:	4032      	ands	r2, r6
 8001d4c:	001d      	movs	r5, r3
 8001d4e:	e6a9      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001d50:	49bf      	ldr	r1, [pc, #764]	; (8002050 <__aeabi_dsub+0x68c>)
 8001d52:	1aed      	subs	r5, r5, r3
 8001d54:	4011      	ands	r1, r2
 8001d56:	2207      	movs	r2, #7
 8001d58:	4032      	ands	r2, r6
 8001d5a:	e6a3      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001d5c:	0032      	movs	r2, r6
 8001d5e:	3828      	subs	r0, #40	; 0x28
 8001d60:	4082      	lsls	r2, r0
 8001d62:	2600      	movs	r6, #0
 8001d64:	e686      	b.n	8001a74 <__aeabi_dsub+0xb0>
 8001d66:	0030      	movs	r0, r6
 8001d68:	f000 fb08 	bl	800237c <__clzsi2>
 8001d6c:	3020      	adds	r0, #32
 8001d6e:	e673      	b.n	8001a58 <__aeabi_dsub+0x94>
 8001d70:	4663      	mov	r3, ip
 8001d72:	4313      	orrs	r3, r2
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	4193      	sbcs	r3, r2
 8001d78:	1ac6      	subs	r6, r0, r3
 8001d7a:	42b0      	cmp	r0, r6
 8001d7c:	4180      	sbcs	r0, r0
 8001d7e:	4240      	negs	r0, r0
 8001d80:	1a09      	subs	r1, r1, r0
 8001d82:	e65c      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001d84:	000e      	movs	r6, r1
 8001d86:	4667      	mov	r7, ip
 8001d88:	4306      	orrs	r6, r0
 8001d8a:	4317      	orrs	r7, r2
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d15e      	bne.n	8001e4e <__aeabi_dsub+0x48a>
 8001d90:	2e00      	cmp	r6, #0
 8001d92:	d000      	beq.n	8001d96 <__aeabi_dsub+0x3d2>
 8001d94:	e0f3      	b.n	8001f7e <__aeabi_dsub+0x5ba>
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x3d8>
 8001d9a:	e11e      	b.n	8001fda <__aeabi_dsub+0x616>
 8001d9c:	465c      	mov	r4, fp
 8001d9e:	4661      	mov	r1, ip
 8001da0:	4691      	mov	r9, r2
 8001da2:	e72c      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001da4:	4fa9      	ldr	r7, [pc, #676]	; (800204c <__aeabi_dsub+0x688>)
 8001da6:	42be      	cmp	r6, r7
 8001da8:	d07b      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001daa:	001e      	movs	r6, r3
 8001dac:	e6f1      	b.n	8001b92 <__aeabi_dsub+0x1ce>
 8001dae:	0010      	movs	r0, r2
 8001db0:	3d1f      	subs	r5, #31
 8001db2:	40e8      	lsrs	r0, r5
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d003      	beq.n	8001dc0 <__aeabi_dsub+0x3fc>
 8001db8:	2140      	movs	r1, #64	; 0x40
 8001dba:	1acb      	subs	r3, r1, r3
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	4316      	orrs	r6, r2
 8001dc0:	1e73      	subs	r3, r6, #1
 8001dc2:	419e      	sbcs	r6, r3
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	4306      	orrs	r6, r0
 8001dc8:	4032      	ands	r2, r6
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2500      	movs	r5, #0
 8001dce:	e783      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8001dd0:	1a16      	subs	r6, r2, r0
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	42b2      	cmp	r2, r6
 8001dd6:	4180      	sbcs	r0, r0
 8001dd8:	1a59      	subs	r1, r3, r1
 8001dda:	4240      	negs	r0, r0
 8001ddc:	1a0b      	subs	r3, r1, r0
 8001dde:	4698      	mov	r8, r3
 8001de0:	465c      	mov	r4, fp
 8001de2:	e632      	b.n	8001a4a <__aeabi_dsub+0x86>
 8001de4:	2e1f      	cmp	r6, #31
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x426>
 8001de8:	e0ab      	b.n	8001f42 <__aeabi_dsub+0x57e>
 8001dea:	2720      	movs	r7, #32
 8001dec:	1bbb      	subs	r3, r7, r6
 8001dee:	469a      	mov	sl, r3
 8001df0:	4663      	mov	r3, ip
 8001df2:	4657      	mov	r7, sl
 8001df4:	40bb      	lsls	r3, r7
 8001df6:	4699      	mov	r9, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	464f      	mov	r7, r9
 8001dfc:	40f3      	lsrs	r3, r6
 8001dfe:	431f      	orrs	r7, r3
 8001e00:	003b      	movs	r3, r7
 8001e02:	4657      	mov	r7, sl
 8001e04:	40ba      	lsls	r2, r7
 8001e06:	1e57      	subs	r7, r2, #1
 8001e08:	41ba      	sbcs	r2, r7
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	4662      	mov	r2, ip
 8001e0e:	40f2      	lsrs	r2, r6
 8001e10:	1889      	adds	r1, r1, r2
 8001e12:	e698      	b.n	8001b46 <__aeabi_dsub+0x182>
 8001e14:	2720      	movs	r7, #32
 8001e16:	1bbb      	subs	r3, r7, r6
 8001e18:	469a      	mov	sl, r3
 8001e1a:	4663      	mov	r3, ip
 8001e1c:	4657      	mov	r7, sl
 8001e1e:	40bb      	lsls	r3, r7
 8001e20:	4699      	mov	r9, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	464f      	mov	r7, r9
 8001e26:	40f3      	lsrs	r3, r6
 8001e28:	431f      	orrs	r7, r3
 8001e2a:	003b      	movs	r3, r7
 8001e2c:	4657      	mov	r7, sl
 8001e2e:	40ba      	lsls	r2, r7
 8001e30:	1e57      	subs	r7, r2, #1
 8001e32:	41ba      	sbcs	r2, r7
 8001e34:	4313      	orrs	r3, r2
 8001e36:	4662      	mov	r2, ip
 8001e38:	40f2      	lsrs	r2, r6
 8001e3a:	1a89      	subs	r1, r1, r2
 8001e3c:	e79c      	b.n	8001d78 <__aeabi_dsub+0x3b4>
 8001e3e:	4b83      	ldr	r3, [pc, #524]	; (800204c <__aeabi_dsub+0x688>)
 8001e40:	429f      	cmp	r7, r3
 8001e42:	d05f      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001e44:	2580      	movs	r5, #128	; 0x80
 8001e46:	042d      	lsls	r5, r5, #16
 8001e48:	4273      	negs	r3, r6
 8001e4a:	4329      	orrs	r1, r5
 8001e4c:	e720      	b.n	8001c90 <__aeabi_dsub+0x2cc>
 8001e4e:	2e00      	cmp	r6, #0
 8001e50:	d10c      	bne.n	8001e6c <__aeabi_dsub+0x4a8>
 8001e52:	2f00      	cmp	r7, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x494>
 8001e56:	e0d0      	b.n	8001ffa <__aeabi_dsub+0x636>
 8001e58:	465c      	mov	r4, fp
 8001e5a:	4661      	mov	r1, ip
 8001e5c:	4691      	mov	r9, r2
 8001e5e:	4d7b      	ldr	r5, [pc, #492]	; (800204c <__aeabi_dsub+0x688>)
 8001e60:	e6cd      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001e62:	4f7a      	ldr	r7, [pc, #488]	; (800204c <__aeabi_dsub+0x688>)
 8001e64:	42be      	cmp	r6, r7
 8001e66:	d01c      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001e68:	001e      	movs	r6, r3
 8001e6a:	e665      	b.n	8001b38 <__aeabi_dsub+0x174>
 8001e6c:	2f00      	cmp	r7, #0
 8001e6e:	d018      	beq.n	8001ea2 <__aeabi_dsub+0x4de>
 8001e70:	08c0      	lsrs	r0, r0, #3
 8001e72:	074e      	lsls	r6, r1, #29
 8001e74:	4306      	orrs	r6, r0
 8001e76:	2080      	movs	r0, #128	; 0x80
 8001e78:	08c9      	lsrs	r1, r1, #3
 8001e7a:	0300      	lsls	r0, r0, #12
 8001e7c:	4201      	tst	r1, r0
 8001e7e:	d008      	beq.n	8001e92 <__aeabi_dsub+0x4ce>
 8001e80:	4663      	mov	r3, ip
 8001e82:	08dc      	lsrs	r4, r3, #3
 8001e84:	4204      	tst	r4, r0
 8001e86:	d104      	bne.n	8001e92 <__aeabi_dsub+0x4ce>
 8001e88:	0021      	movs	r1, r4
 8001e8a:	46da      	mov	sl, fp
 8001e8c:	08d2      	lsrs	r2, r2, #3
 8001e8e:	075e      	lsls	r6, r3, #29
 8001e90:	4316      	orrs	r6, r2
 8001e92:	00f3      	lsls	r3, r6, #3
 8001e94:	4699      	mov	r9, r3
 8001e96:	2401      	movs	r4, #1
 8001e98:	4653      	mov	r3, sl
 8001e9a:	00c9      	lsls	r1, r1, #3
 8001e9c:	0f72      	lsrs	r2, r6, #29
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	401c      	ands	r4, r3
 8001ea2:	4d6a      	ldr	r5, [pc, #424]	; (800204c <__aeabi_dsub+0x688>)
 8001ea4:	e6ab      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001ea6:	001d      	movs	r5, r3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2700      	movs	r7, #0
 8001eac:	e6b4      	b.n	8001c18 <__aeabi_dsub+0x254>
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	d159      	bne.n	8001f66 <__aeabi_dsub+0x5a2>
 8001eb2:	000b      	movs	r3, r1
 8001eb4:	4303      	orrs	r3, r0
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x4f6>
 8001eb8:	e6d6      	b.n	8001c68 <__aeabi_dsub+0x2a4>
 8001eba:	1c73      	adds	r3, r6, #1
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0x4fc>
 8001ebe:	e0b2      	b.n	8002026 <__aeabi_dsub+0x662>
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <__aeabi_dsub+0x688>)
 8001ec2:	429f      	cmp	r7, r3
 8001ec4:	d01e      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001ec6:	43f3      	mvns	r3, r6
 8001ec8:	2b38      	cmp	r3, #56	; 0x38
 8001eca:	dc6f      	bgt.n	8001fac <__aeabi_dsub+0x5e8>
 8001ecc:	2b1f      	cmp	r3, #31
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0x50e>
 8001ed0:	e097      	b.n	8002002 <__aeabi_dsub+0x63e>
 8001ed2:	2520      	movs	r5, #32
 8001ed4:	000e      	movs	r6, r1
 8001ed6:	1aed      	subs	r5, r5, r3
 8001ed8:	40ae      	lsls	r6, r5
 8001eda:	46b0      	mov	r8, r6
 8001edc:	0006      	movs	r6, r0
 8001ede:	46aa      	mov	sl, r5
 8001ee0:	40de      	lsrs	r6, r3
 8001ee2:	4645      	mov	r5, r8
 8001ee4:	4335      	orrs	r5, r6
 8001ee6:	002e      	movs	r6, r5
 8001ee8:	4655      	mov	r5, sl
 8001eea:	40a8      	lsls	r0, r5
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	1e45      	subs	r5, r0, #1
 8001ef0:	41a8      	sbcs	r0, r5
 8001ef2:	448c      	add	ip, r1
 8001ef4:	4306      	orrs	r6, r0
 8001ef6:	18b6      	adds	r6, r6, r2
 8001ef8:	4296      	cmp	r6, r2
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4251      	negs	r1, r2
 8001efe:	4461      	add	r1, ip
 8001f00:	003d      	movs	r5, r7
 8001f02:	e625      	b.n	8001b50 <__aeabi_dsub+0x18c>
 8001f04:	003d      	movs	r5, r7
 8001f06:	4661      	mov	r1, ip
 8001f08:	4691      	mov	r9, r2
 8001f0a:	e678      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f0c:	000b      	movs	r3, r1
 8001f0e:	4303      	orrs	r3, r0
 8001f10:	2d00      	cmp	r5, #0
 8001f12:	d000      	beq.n	8001f16 <__aeabi_dsub+0x552>
 8001f14:	e655      	b.n	8001bc2 <__aeabi_dsub+0x1fe>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f5      	beq.n	8001f06 <__aeabi_dsub+0x542>
 8001f1a:	4663      	mov	r3, ip
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x55e>
 8001f20:	e66d      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f22:	1886      	adds	r6, r0, r2
 8001f24:	4286      	cmp	r6, r0
 8001f26:	4180      	sbcs	r0, r0
 8001f28:	4461      	add	r1, ip
 8001f2a:	4240      	negs	r0, r0
 8001f2c:	1809      	adds	r1, r1, r0
 8001f2e:	2200      	movs	r2, #0
 8001f30:	020b      	lsls	r3, r1, #8
 8001f32:	d400      	bmi.n	8001f36 <__aeabi_dsub+0x572>
 8001f34:	e6d0      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <__aeabi_dsub+0x68c>)
 8001f38:	3501      	adds	r5, #1
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	e5b2      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001f3e:	46b1      	mov	r9, r6
 8001f40:	e65d      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f42:	0033      	movs	r3, r6
 8001f44:	4667      	mov	r7, ip
 8001f46:	3b20      	subs	r3, #32
 8001f48:	40df      	lsrs	r7, r3
 8001f4a:	003b      	movs	r3, r7
 8001f4c:	2e20      	cmp	r6, #32
 8001f4e:	d005      	beq.n	8001f5c <__aeabi_dsub+0x598>
 8001f50:	2740      	movs	r7, #64	; 0x40
 8001f52:	1bbf      	subs	r7, r7, r6
 8001f54:	4666      	mov	r6, ip
 8001f56:	40be      	lsls	r6, r7
 8001f58:	4332      	orrs	r2, r6
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4646      	mov	r6, r8
 8001f5e:	1e72      	subs	r2, r6, #1
 8001f60:	4196      	sbcs	r6, r2
 8001f62:	4333      	orrs	r3, r6
 8001f64:	e5ef      	b.n	8001b46 <__aeabi_dsub+0x182>
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <__aeabi_dsub+0x688>)
 8001f68:	429f      	cmp	r7, r3
 8001f6a:	d0cb      	beq.n	8001f04 <__aeabi_dsub+0x540>
 8001f6c:	2580      	movs	r5, #128	; 0x80
 8001f6e:	042d      	lsls	r5, r5, #16
 8001f70:	4273      	negs	r3, r6
 8001f72:	4329      	orrs	r1, r5
 8001f74:	e7a8      	b.n	8001ec8 <__aeabi_dsub+0x504>
 8001f76:	4308      	orrs	r0, r1
 8001f78:	1e41      	subs	r1, r0, #1
 8001f7a:	4188      	sbcs	r0, r1
 8001f7c:	e6a2      	b.n	8001cc4 <__aeabi_dsub+0x300>
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x5c0>
 8001f82:	e63c      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001f84:	4663      	mov	r3, ip
 8001f86:	1a86      	subs	r6, r0, r2
 8001f88:	1acf      	subs	r7, r1, r3
 8001f8a:	42b0      	cmp	r0, r6
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	425b      	negs	r3, r3
 8001f90:	1afb      	subs	r3, r7, r3
 8001f92:	4698      	mov	r8, r3
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	d54e      	bpl.n	8002036 <__aeabi_dsub+0x672>
 8001f98:	1a16      	subs	r6, r2, r0
 8001f9a:	4663      	mov	r3, ip
 8001f9c:	42b2      	cmp	r2, r6
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	1a59      	subs	r1, r3, r1
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	1a89      	subs	r1, r1, r2
 8001fa6:	465c      	mov	r4, fp
 8001fa8:	2200      	movs	r2, #0
 8001faa:	e57b      	b.n	8001aa4 <__aeabi_dsub+0xe0>
 8001fac:	4301      	orrs	r1, r0
 8001fae:	000e      	movs	r6, r1
 8001fb0:	1e71      	subs	r1, r6, #1
 8001fb2:	418e      	sbcs	r6, r1
 8001fb4:	e79f      	b.n	8001ef6 <__aeabi_dsub+0x532>
 8001fb6:	001d      	movs	r5, r3
 8001fb8:	000e      	movs	r6, r1
 8001fba:	3d20      	subs	r5, #32
 8001fbc:	40ee      	lsrs	r6, r5
 8001fbe:	46b0      	mov	r8, r6
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d004      	beq.n	8001fce <__aeabi_dsub+0x60a>
 8001fc4:	2540      	movs	r5, #64	; 0x40
 8001fc6:	1aeb      	subs	r3, r5, r3
 8001fc8:	4099      	lsls	r1, r3
 8001fca:	4308      	orrs	r0, r1
 8001fcc:	4681      	mov	r9, r0
 8001fce:	4648      	mov	r0, r9
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	1e41      	subs	r1, r0, #1
 8001fd4:	4188      	sbcs	r0, r1
 8001fd6:	4318      	orrs	r0, r3
 8001fd8:	e674      	b.n	8001cc4 <__aeabi_dsub+0x300>
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2400      	movs	r4, #0
 8001fde:	e617      	b.n	8001c10 <__aeabi_dsub+0x24c>
 8001fe0:	1a16      	subs	r6, r2, r0
 8001fe2:	4663      	mov	r3, ip
 8001fe4:	42b2      	cmp	r2, r6
 8001fe6:	4192      	sbcs	r2, r2
 8001fe8:	1a59      	subs	r1, r3, r1
 8001fea:	4252      	negs	r2, r2
 8001fec:	1a89      	subs	r1, r1, r2
 8001fee:	003d      	movs	r5, r7
 8001ff0:	e525      	b.n	8001a3e <__aeabi_dsub+0x7a>
 8001ff2:	4661      	mov	r1, ip
 8001ff4:	4691      	mov	r9, r2
 8001ff6:	4d15      	ldr	r5, [pc, #84]	; (800204c <__aeabi_dsub+0x688>)
 8001ff8:	e601      	b.n	8001bfe <__aeabi_dsub+0x23a>
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	0312      	lsls	r2, r2, #12
 8002000:	e679      	b.n	8001cf6 <__aeabi_dsub+0x332>
 8002002:	001d      	movs	r5, r3
 8002004:	000e      	movs	r6, r1
 8002006:	3d20      	subs	r5, #32
 8002008:	40ee      	lsrs	r6, r5
 800200a:	46b0      	mov	r8, r6
 800200c:	2b20      	cmp	r3, #32
 800200e:	d004      	beq.n	800201a <__aeabi_dsub+0x656>
 8002010:	2540      	movs	r5, #64	; 0x40
 8002012:	1aeb      	subs	r3, r5, r3
 8002014:	4099      	lsls	r1, r3
 8002016:	4308      	orrs	r0, r1
 8002018:	4681      	mov	r9, r0
 800201a:	464e      	mov	r6, r9
 800201c:	4643      	mov	r3, r8
 800201e:	1e71      	subs	r1, r6, #1
 8002020:	418e      	sbcs	r6, r1
 8002022:	431e      	orrs	r6, r3
 8002024:	e767      	b.n	8001ef6 <__aeabi_dsub+0x532>
 8002026:	1886      	adds	r6, r0, r2
 8002028:	4296      	cmp	r6, r2
 800202a:	419b      	sbcs	r3, r3
 800202c:	4461      	add	r1, ip
 800202e:	425b      	negs	r3, r3
 8002030:	18c9      	adds	r1, r1, r3
 8002032:	003d      	movs	r5, r7
 8002034:	e58c      	b.n	8001b50 <__aeabi_dsub+0x18c>
 8002036:	4647      	mov	r7, r8
 8002038:	4337      	orrs	r7, r6
 800203a:	d0ce      	beq.n	8001fda <__aeabi_dsub+0x616>
 800203c:	2207      	movs	r2, #7
 800203e:	4641      	mov	r1, r8
 8002040:	4032      	ands	r2, r6
 8002042:	e649      	b.n	8001cd8 <__aeabi_dsub+0x314>
 8002044:	2700      	movs	r7, #0
 8002046:	003a      	movs	r2, r7
 8002048:	e5e6      	b.n	8001c18 <__aeabi_dsub+0x254>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	000007ff 	.word	0x000007ff
 8002050:	ff7fffff 	.word	0xff7fffff

08002054 <__aeabi_dcmpun>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	4e0c      	ldr	r6, [pc, #48]	; (8002088 <__aeabi_dcmpun+0x34>)
 8002058:	030d      	lsls	r5, r1, #12
 800205a:	031c      	lsls	r4, r3, #12
 800205c:	0049      	lsls	r1, r1, #1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	0b2d      	lsrs	r5, r5, #12
 8002062:	0d49      	lsrs	r1, r1, #21
 8002064:	0b24      	lsrs	r4, r4, #12
 8002066:	0d5b      	lsrs	r3, r3, #21
 8002068:	42b1      	cmp	r1, r6
 800206a:	d008      	beq.n	800207e <__aeabi_dcmpun+0x2a>
 800206c:	4906      	ldr	r1, [pc, #24]	; (8002088 <__aeabi_dcmpun+0x34>)
 800206e:	2000      	movs	r0, #0
 8002070:	428b      	cmp	r3, r1
 8002072:	d103      	bne.n	800207c <__aeabi_dcmpun+0x28>
 8002074:	4314      	orrs	r4, r2
 8002076:	0020      	movs	r0, r4
 8002078:	1e44      	subs	r4, r0, #1
 800207a:	41a0      	sbcs	r0, r4
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	4305      	orrs	r5, r0
 8002080:	2001      	movs	r0, #1
 8002082:	2d00      	cmp	r5, #0
 8002084:	d1fa      	bne.n	800207c <__aeabi_dcmpun+0x28>
 8002086:	e7f1      	b.n	800206c <__aeabi_dcmpun+0x18>
 8002088:	000007ff 	.word	0x000007ff

0800208c <__aeabi_d2iz>:
 800208c:	b530      	push	{r4, r5, lr}
 800208e:	4d14      	ldr	r5, [pc, #80]	; (80020e0 <__aeabi_d2iz+0x54>)
 8002090:	030a      	lsls	r2, r1, #12
 8002092:	004b      	lsls	r3, r1, #1
 8002094:	0b12      	lsrs	r2, r2, #12
 8002096:	0d5b      	lsrs	r3, r3, #21
 8002098:	0fc9      	lsrs	r1, r1, #31
 800209a:	2400      	movs	r4, #0
 800209c:	42ab      	cmp	r3, r5
 800209e:	dd11      	ble.n	80020c4 <__aeabi_d2iz+0x38>
 80020a0:	4c10      	ldr	r4, [pc, #64]	; (80020e4 <__aeabi_d2iz+0x58>)
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	dc10      	bgt.n	80020c8 <__aeabi_d2iz+0x3c>
 80020a6:	2480      	movs	r4, #128	; 0x80
 80020a8:	0364      	lsls	r4, r4, #13
 80020aa:	4322      	orrs	r2, r4
 80020ac:	4c0e      	ldr	r4, [pc, #56]	; (80020e8 <__aeabi_d2iz+0x5c>)
 80020ae:	1ae4      	subs	r4, r4, r3
 80020b0:	2c1f      	cmp	r4, #31
 80020b2:	dd0c      	ble.n	80020ce <__aeabi_d2iz+0x42>
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <__aeabi_d2iz+0x60>)
 80020b6:	1ac3      	subs	r3, r0, r3
 80020b8:	40da      	lsrs	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	425c      	negs	r4, r3
 80020be:	2900      	cmp	r1, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_d2iz+0x38>
 80020c2:	001c      	movs	r4, r3
 80020c4:	0020      	movs	r0, r4
 80020c6:	bd30      	pop	{r4, r5, pc}
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <__aeabi_d2iz+0x64>)
 80020ca:	18cc      	adds	r4, r1, r3
 80020cc:	e7fa      	b.n	80020c4 <__aeabi_d2iz+0x38>
 80020ce:	4d09      	ldr	r5, [pc, #36]	; (80020f4 <__aeabi_d2iz+0x68>)
 80020d0:	40e0      	lsrs	r0, r4
 80020d2:	46ac      	mov	ip, r5
 80020d4:	4463      	add	r3, ip
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	4303      	orrs	r3, r0
 80020dc:	e7ee      	b.n	80020bc <__aeabi_d2iz+0x30>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	000003fe 	.word	0x000003fe
 80020e4:	0000041d 	.word	0x0000041d
 80020e8:	00000433 	.word	0x00000433
 80020ec:	00000413 	.word	0x00000413
 80020f0:	7fffffff 	.word	0x7fffffff
 80020f4:	fffffbed 	.word	0xfffffbed

080020f8 <__aeabi_i2d>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	2800      	cmp	r0, #0
 80020fc:	d02d      	beq.n	800215a <__aeabi_i2d+0x62>
 80020fe:	17c3      	asrs	r3, r0, #31
 8002100:	18c5      	adds	r5, r0, r3
 8002102:	405d      	eors	r5, r3
 8002104:	0fc4      	lsrs	r4, r0, #31
 8002106:	0028      	movs	r0, r5
 8002108:	f000 f938 	bl	800237c <__clzsi2>
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <__aeabi_i2d+0x6c>)
 800210e:	1a1b      	subs	r3, r3, r0
 8002110:	055b      	lsls	r3, r3, #21
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	280a      	cmp	r0, #10
 8002116:	dd15      	ble.n	8002144 <__aeabi_i2d+0x4c>
 8002118:	380b      	subs	r0, #11
 800211a:	4085      	lsls	r5, r0
 800211c:	2200      	movs	r2, #0
 800211e:	032d      	lsls	r5, r5, #12
 8002120:	0b2d      	lsrs	r5, r5, #12
 8002122:	2100      	movs	r1, #0
 8002124:	0010      	movs	r0, r2
 8002126:	032d      	lsls	r5, r5, #12
 8002128:	0d0a      	lsrs	r2, r1, #20
 800212a:	0b2d      	lsrs	r5, r5, #12
 800212c:	0512      	lsls	r2, r2, #20
 800212e:	432a      	orrs	r2, r5
 8002130:	4d0d      	ldr	r5, [pc, #52]	; (8002168 <__aeabi_i2d+0x70>)
 8002132:	051b      	lsls	r3, r3, #20
 8002134:	402a      	ands	r2, r5
 8002136:	4313      	orrs	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	07e4      	lsls	r4, r4, #31
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	4323      	orrs	r3, r4
 8002140:	0019      	movs	r1, r3
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	0002      	movs	r2, r0
 8002146:	0029      	movs	r1, r5
 8002148:	3215      	adds	r2, #21
 800214a:	4091      	lsls	r1, r2
 800214c:	000a      	movs	r2, r1
 800214e:	210b      	movs	r1, #11
 8002150:	1a08      	subs	r0, r1, r0
 8002152:	40c5      	lsrs	r5, r0
 8002154:	032d      	lsls	r5, r5, #12
 8002156:	0b2d      	lsrs	r5, r5, #12
 8002158:	e7e3      	b.n	8002122 <__aeabi_i2d+0x2a>
 800215a:	2400      	movs	r4, #0
 800215c:	2300      	movs	r3, #0
 800215e:	2500      	movs	r5, #0
 8002160:	2200      	movs	r2, #0
 8002162:	e7de      	b.n	8002122 <__aeabi_i2d+0x2a>
 8002164:	0000041e 	.word	0x0000041e
 8002168:	800fffff 	.word	0x800fffff

0800216c <__aeabi_ui2d>:
 800216c:	b510      	push	{r4, lr}
 800216e:	1e04      	subs	r4, r0, #0
 8002170:	d025      	beq.n	80021be <__aeabi_ui2d+0x52>
 8002172:	f000 f903 	bl	800237c <__clzsi2>
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <__aeabi_ui2d+0x5c>)
 8002178:	1a1b      	subs	r3, r3, r0
 800217a:	055b      	lsls	r3, r3, #21
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	280a      	cmp	r0, #10
 8002180:	dd12      	ble.n	80021a8 <__aeabi_ui2d+0x3c>
 8002182:	380b      	subs	r0, #11
 8002184:	4084      	lsls	r4, r0
 8002186:	2200      	movs	r2, #0
 8002188:	0324      	lsls	r4, r4, #12
 800218a:	0b24      	lsrs	r4, r4, #12
 800218c:	2100      	movs	r1, #0
 800218e:	0010      	movs	r0, r2
 8002190:	0324      	lsls	r4, r4, #12
 8002192:	0d0a      	lsrs	r2, r1, #20
 8002194:	0b24      	lsrs	r4, r4, #12
 8002196:	0512      	lsls	r2, r2, #20
 8002198:	4322      	orrs	r2, r4
 800219a:	4c0c      	ldr	r4, [pc, #48]	; (80021cc <__aeabi_ui2d+0x60>)
 800219c:	051b      	lsls	r3, r3, #20
 800219e:	4022      	ands	r2, r4
 80021a0:	4313      	orrs	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	0859      	lsrs	r1, r3, #1
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	0002      	movs	r2, r0
 80021aa:	0021      	movs	r1, r4
 80021ac:	3215      	adds	r2, #21
 80021ae:	4091      	lsls	r1, r2
 80021b0:	000a      	movs	r2, r1
 80021b2:	210b      	movs	r1, #11
 80021b4:	1a08      	subs	r0, r1, r0
 80021b6:	40c4      	lsrs	r4, r0
 80021b8:	0324      	lsls	r4, r4, #12
 80021ba:	0b24      	lsrs	r4, r4, #12
 80021bc:	e7e6      	b.n	800218c <__aeabi_ui2d+0x20>
 80021be:	2300      	movs	r3, #0
 80021c0:	2400      	movs	r4, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	e7e2      	b.n	800218c <__aeabi_ui2d+0x20>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	0000041e 	.word	0x0000041e
 80021cc:	800fffff 	.word	0x800fffff

080021d0 <__aeabi_f2d>:
 80021d0:	0041      	lsls	r1, r0, #1
 80021d2:	0e09      	lsrs	r1, r1, #24
 80021d4:	1c4b      	adds	r3, r1, #1
 80021d6:	b570      	push	{r4, r5, r6, lr}
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	0246      	lsls	r6, r0, #9
 80021dc:	0a75      	lsrs	r5, r6, #9
 80021de:	0fc4      	lsrs	r4, r0, #31
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	dd14      	ble.n	800220e <__aeabi_f2d+0x3e>
 80021e4:	23e0      	movs	r3, #224	; 0xe0
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	076d      	lsls	r5, r5, #29
 80021ea:	0b36      	lsrs	r6, r6, #12
 80021ec:	18cb      	adds	r3, r1, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	0d0a      	lsrs	r2, r1, #20
 80021f2:	0028      	movs	r0, r5
 80021f4:	0512      	lsls	r2, r2, #20
 80021f6:	4d1c      	ldr	r5, [pc, #112]	; (8002268 <__aeabi_f2d+0x98>)
 80021f8:	4332      	orrs	r2, r6
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	402a      	ands	r2, r5
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	4313      	orrs	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	07e4      	lsls	r4, r4, #31
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	4323      	orrs	r3, r4
 800220a:	0019      	movs	r1, r3
 800220c:	bd70      	pop	{r4, r5, r6, pc}
 800220e:	2900      	cmp	r1, #0
 8002210:	d114      	bne.n	800223c <__aeabi_f2d+0x6c>
 8002212:	2d00      	cmp	r5, #0
 8002214:	d01e      	beq.n	8002254 <__aeabi_f2d+0x84>
 8002216:	0028      	movs	r0, r5
 8002218:	f000 f8b0 	bl	800237c <__clzsi2>
 800221c:	280a      	cmp	r0, #10
 800221e:	dc1c      	bgt.n	800225a <__aeabi_f2d+0x8a>
 8002220:	230b      	movs	r3, #11
 8002222:	002a      	movs	r2, r5
 8002224:	1a1b      	subs	r3, r3, r0
 8002226:	40da      	lsrs	r2, r3
 8002228:	0003      	movs	r3, r0
 800222a:	3315      	adds	r3, #21
 800222c:	409d      	lsls	r5, r3
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <__aeabi_f2d+0x9c>)
 8002230:	0312      	lsls	r2, r2, #12
 8002232:	1a1b      	subs	r3, r3, r0
 8002234:	055b      	lsls	r3, r3, #21
 8002236:	0b16      	lsrs	r6, r2, #12
 8002238:	0d5b      	lsrs	r3, r3, #21
 800223a:	e7d8      	b.n	80021ee <__aeabi_f2d+0x1e>
 800223c:	2d00      	cmp	r5, #0
 800223e:	d006      	beq.n	800224e <__aeabi_f2d+0x7e>
 8002240:	0b32      	lsrs	r2, r6, #12
 8002242:	2680      	movs	r6, #128	; 0x80
 8002244:	0336      	lsls	r6, r6, #12
 8002246:	076d      	lsls	r5, r5, #29
 8002248:	4316      	orrs	r6, r2
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <__aeabi_f2d+0xa0>)
 800224c:	e7cf      	b.n	80021ee <__aeabi_f2d+0x1e>
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <__aeabi_f2d+0xa0>)
 8002250:	2600      	movs	r6, #0
 8002252:	e7cc      	b.n	80021ee <__aeabi_f2d+0x1e>
 8002254:	2300      	movs	r3, #0
 8002256:	2600      	movs	r6, #0
 8002258:	e7c9      	b.n	80021ee <__aeabi_f2d+0x1e>
 800225a:	0003      	movs	r3, r0
 800225c:	002a      	movs	r2, r5
 800225e:	3b0b      	subs	r3, #11
 8002260:	409a      	lsls	r2, r3
 8002262:	2500      	movs	r5, #0
 8002264:	e7e3      	b.n	800222e <__aeabi_f2d+0x5e>
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	800fffff 	.word	0x800fffff
 800226c:	00000389 	.word	0x00000389
 8002270:	000007ff 	.word	0x000007ff

08002274 <__aeabi_d2f>:
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	004c      	lsls	r4, r1, #1
 8002278:	0d64      	lsrs	r4, r4, #21
 800227a:	030b      	lsls	r3, r1, #12
 800227c:	1c62      	adds	r2, r4, #1
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	0f46      	lsrs	r6, r0, #29
 8002282:	0552      	lsls	r2, r2, #21
 8002284:	0fc9      	lsrs	r1, r1, #31
 8002286:	431e      	orrs	r6, r3
 8002288:	00c5      	lsls	r5, r0, #3
 800228a:	0d52      	lsrs	r2, r2, #21
 800228c:	2a01      	cmp	r2, #1
 800228e:	dd29      	ble.n	80022e4 <__aeabi_d2f+0x70>
 8002290:	4b37      	ldr	r3, [pc, #220]	; (8002370 <__aeabi_d2f+0xfc>)
 8002292:	18e7      	adds	r7, r4, r3
 8002294:	2ffe      	cmp	r7, #254	; 0xfe
 8002296:	dc1c      	bgt.n	80022d2 <__aeabi_d2f+0x5e>
 8002298:	2f00      	cmp	r7, #0
 800229a:	dd3b      	ble.n	8002314 <__aeabi_d2f+0xa0>
 800229c:	0180      	lsls	r0, r0, #6
 800229e:	1e43      	subs	r3, r0, #1
 80022a0:	4198      	sbcs	r0, r3
 80022a2:	2207      	movs	r2, #7
 80022a4:	00f3      	lsls	r3, r6, #3
 80022a6:	0f6d      	lsrs	r5, r5, #29
 80022a8:	4303      	orrs	r3, r0
 80022aa:	432b      	orrs	r3, r5
 80022ac:	401a      	ands	r2, r3
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	d004      	beq.n	80022bc <__aeabi_d2f+0x48>
 80022b2:	220f      	movs	r2, #15
 80022b4:	401a      	ands	r2, r3
 80022b6:	2a04      	cmp	r2, #4
 80022b8:	d000      	beq.n	80022bc <__aeabi_d2f+0x48>
 80022ba:	3304      	adds	r3, #4
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	04d2      	lsls	r2, r2, #19
 80022c0:	401a      	ands	r2, r3
 80022c2:	d024      	beq.n	800230e <__aeabi_d2f+0x9a>
 80022c4:	3701      	adds	r7, #1
 80022c6:	b2fa      	uxtb	r2, r7
 80022c8:	2fff      	cmp	r7, #255	; 0xff
 80022ca:	d002      	beq.n	80022d2 <__aeabi_d2f+0x5e>
 80022cc:	019b      	lsls	r3, r3, #6
 80022ce:	0a58      	lsrs	r0, r3, #9
 80022d0:	e001      	b.n	80022d6 <__aeabi_d2f+0x62>
 80022d2:	22ff      	movs	r2, #255	; 0xff
 80022d4:	2000      	movs	r0, #0
 80022d6:	0240      	lsls	r0, r0, #9
 80022d8:	05d2      	lsls	r2, r2, #23
 80022da:	0a40      	lsrs	r0, r0, #9
 80022dc:	07c9      	lsls	r1, r1, #31
 80022de:	4310      	orrs	r0, r2
 80022e0:	4308      	orrs	r0, r1
 80022e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e4:	4335      	orrs	r5, r6
 80022e6:	2c00      	cmp	r4, #0
 80022e8:	d104      	bne.n	80022f4 <__aeabi_d2f+0x80>
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	d10a      	bne.n	8002304 <__aeabi_d2f+0x90>
 80022ee:	2200      	movs	r2, #0
 80022f0:	2000      	movs	r0, #0
 80022f2:	e7f0      	b.n	80022d6 <__aeabi_d2f+0x62>
 80022f4:	2d00      	cmp	r5, #0
 80022f6:	d0ec      	beq.n	80022d2 <__aeabi_d2f+0x5e>
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	03c0      	lsls	r0, r0, #15
 80022fc:	4330      	orrs	r0, r6
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	e7e9      	b.n	80022d6 <__aeabi_d2f+0x62>
 8002302:	2400      	movs	r4, #0
 8002304:	2300      	movs	r3, #0
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	0a58      	lsrs	r0, r3, #9
 800230a:	b2e2      	uxtb	r2, r4
 800230c:	e7e3      	b.n	80022d6 <__aeabi_d2f+0x62>
 800230e:	08db      	lsrs	r3, r3, #3
 8002310:	003c      	movs	r4, r7
 8002312:	e7f8      	b.n	8002306 <__aeabi_d2f+0x92>
 8002314:	003b      	movs	r3, r7
 8002316:	3317      	adds	r3, #23
 8002318:	dbf3      	blt.n	8002302 <__aeabi_d2f+0x8e>
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	4333      	orrs	r3, r6
 8002320:	261e      	movs	r6, #30
 8002322:	1bf6      	subs	r6, r6, r7
 8002324:	2e1f      	cmp	r6, #31
 8002326:	dd14      	ble.n	8002352 <__aeabi_d2f+0xde>
 8002328:	2202      	movs	r2, #2
 800232a:	4252      	negs	r2, r2
 800232c:	1bd7      	subs	r7, r2, r7
 800232e:	001a      	movs	r2, r3
 8002330:	40fa      	lsrs	r2, r7
 8002332:	0017      	movs	r7, r2
 8002334:	2e20      	cmp	r6, #32
 8002336:	d004      	beq.n	8002342 <__aeabi_d2f+0xce>
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <__aeabi_d2f+0x100>)
 800233a:	4694      	mov	ip, r2
 800233c:	4464      	add	r4, ip
 800233e:	40a3      	lsls	r3, r4
 8002340:	431d      	orrs	r5, r3
 8002342:	002b      	movs	r3, r5
 8002344:	1e5d      	subs	r5, r3, #1
 8002346:	41ab      	sbcs	r3, r5
 8002348:	2207      	movs	r2, #7
 800234a:	433b      	orrs	r3, r7
 800234c:	401a      	ands	r2, r3
 800234e:	2700      	movs	r7, #0
 8002350:	e7ad      	b.n	80022ae <__aeabi_d2f+0x3a>
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <__aeabi_d2f+0x104>)
 8002354:	0028      	movs	r0, r5
 8002356:	18a2      	adds	r2, r4, r2
 8002358:	4095      	lsls	r5, r2
 800235a:	4093      	lsls	r3, r2
 800235c:	1e6c      	subs	r4, r5, #1
 800235e:	41a5      	sbcs	r5, r4
 8002360:	40f0      	lsrs	r0, r6
 8002362:	2207      	movs	r2, #7
 8002364:	432b      	orrs	r3, r5
 8002366:	4303      	orrs	r3, r0
 8002368:	401a      	ands	r2, r3
 800236a:	2700      	movs	r7, #0
 800236c:	e79f      	b.n	80022ae <__aeabi_d2f+0x3a>
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	fffffc80 	.word	0xfffffc80
 8002374:	fffffca2 	.word	0xfffffca2
 8002378:	fffffc82 	.word	0xfffffc82

0800237c <__clzsi2>:
 800237c:	211c      	movs	r1, #28
 800237e:	2301      	movs	r3, #1
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	4298      	cmp	r0, r3
 8002384:	d301      	bcc.n	800238a <__clzsi2+0xe>
 8002386:	0c00      	lsrs	r0, r0, #16
 8002388:	3910      	subs	r1, #16
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	4298      	cmp	r0, r3
 800238e:	d301      	bcc.n	8002394 <__clzsi2+0x18>
 8002390:	0a00      	lsrs	r0, r0, #8
 8002392:	3908      	subs	r1, #8
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	4298      	cmp	r0, r3
 8002398:	d301      	bcc.n	800239e <__clzsi2+0x22>
 800239a:	0900      	lsrs	r0, r0, #4
 800239c:	3904      	subs	r1, #4
 800239e:	a202      	add	r2, pc, #8	; (adr r2, 80023a8 <__clzsi2+0x2c>)
 80023a0:	5c10      	ldrb	r0, [r2, r0]
 80023a2:	1840      	adds	r0, r0, r1
 80023a4:	4770      	bx	lr
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	02020304 	.word	0x02020304
 80023ac:	01010101 	.word	0x01010101
	...

080023b8 <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af04      	add	r7, sp, #16
 80023ca:	0002      	movs	r2, r0
 80023cc:	1dfb      	adds	r3, r7, #7
 80023ce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023d0:	4808      	ldr	r0, [pc, #32]	; (80023f4 <ssd1306_WriteCommand+0x30>)
 80023d2:	2301      	movs	r3, #1
 80023d4:	425b      	negs	r3, r3
 80023d6:	9302      	str	r3, [sp, #8]
 80023d8:	2301      	movs	r3, #1
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2301      	movs	r3, #1
 80023e2:	2200      	movs	r2, #0
 80023e4:	2178      	movs	r1, #120	; 0x78
 80023e6:	f001 fb5b 	bl	8003aa0 <HAL_I2C_Mem_Write>
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	200009b8 	.word	0x200009b8

080023f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af04      	add	r7, sp, #16
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	4808      	ldr	r0, [pc, #32]	; (8002428 <ssd1306_WriteData+0x30>)
 8002408:	2201      	movs	r2, #1
 800240a:	4252      	negs	r2, r2
 800240c:	9202      	str	r2, [sp, #8]
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2301      	movs	r3, #1
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	2178      	movs	r1, #120	; 0x78
 800241a:	f001 fb41 	bl	8003aa0 <HAL_I2C_Mem_Write>
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	200009b8 	.word	0x200009b8

0800242c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8002430:	f7ff ffc2 	bl	80023b8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f000 ffeb 	bl	8003410 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800243a:	20ae      	movs	r0, #174	; 0xae
 800243c:	f7ff ffc2 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002440:	2020      	movs	r0, #32
 8002442:	f7ff ffbf 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff ffbc 	bl	80023c4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800244c:	20b0      	movs	r0, #176	; 0xb0
 800244e:	f7ff ffb9 	bl	80023c4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002452:	20c8      	movs	r0, #200	; 0xc8
 8002454:	f7ff ffb6 	bl	80023c4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002458:	2000      	movs	r0, #0
 800245a:	f7ff ffb3 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800245e:	2010      	movs	r0, #16
 8002460:	f7ff ffb0 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002464:	2040      	movs	r0, #64	; 0x40
 8002466:	f7ff ffad 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800246a:	2081      	movs	r0, #129	; 0x81
 800246c:	f7ff ffaa 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8002470:	20ff      	movs	r0, #255	; 0xff
 8002472:	f7ff ffa7 	bl	80023c4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002476:	20a1      	movs	r0, #161	; 0xa1
 8002478:	f7ff ffa4 	bl	80023c4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800247c:	20a6      	movs	r0, #166	; 0xa6
 800247e:	f7ff ffa1 	bl	80023c4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002482:	20a8      	movs	r0, #168	; 0xa8
 8002484:	f7ff ff9e 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8002488:	203f      	movs	r0, #63	; 0x3f
 800248a:	f7ff ff9b 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800248e:	20a4      	movs	r0, #164	; 0xa4
 8002490:	f7ff ff98 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002494:	20d3      	movs	r0, #211	; 0xd3
 8002496:	f7ff ff95 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800249a:	2000      	movs	r0, #0
 800249c:	f7ff ff92 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80024a0:	20d5      	movs	r0, #213	; 0xd5
 80024a2:	f7ff ff8f 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80024a6:	20f0      	movs	r0, #240	; 0xf0
 80024a8:	f7ff ff8c 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80024ac:	20d9      	movs	r0, #217	; 0xd9
 80024ae:	f7ff ff89 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80024b2:	2022      	movs	r0, #34	; 0x22
 80024b4:	f7ff ff86 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024b8:	20da      	movs	r0, #218	; 0xda
 80024ba:	f7ff ff83 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80024be:	2012      	movs	r0, #18
 80024c0:	f7ff ff80 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024c4:	20db      	movs	r0, #219	; 0xdb
 80024c6:	f7ff ff7d 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024ca:	2020      	movs	r0, #32
 80024cc:	f7ff ff7a 	bl	80023c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024d0:	208d      	movs	r0, #141	; 0x8d
 80024d2:	f7ff ff77 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024d6:	2014      	movs	r0, #20
 80024d8:	f7ff ff74 	bl	80023c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80024dc:	20af      	movs	r0, #175	; 0xaf
 80024de:	f7ff ff71 	bl	80023c4 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f810 	bl	8002508 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024e8:	f000 f832 	bl	8002550 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <ssd1306_Init+0xd8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <ssd1306_Init+0xd8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <ssd1306_Init+0xd8>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	715a      	strb	r2, [r3, #5]
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000780 	.word	0x20000780

08002508 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	0002      	movs	r2, r0
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e00e      	b.n	8002538 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <ssd1306_Fill+0x1e>
 8002522:	2100      	movs	r1, #0
 8002524:	e000      	b.n	8002528 <ssd1306_Fill+0x20>
 8002526:	21ff      	movs	r1, #255	; 0xff
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <ssd1306_Fill+0x40>)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	1c0a      	adds	r2, r1, #0
 8002530:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3301      	adds	r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <ssd1306_Fill+0x44>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d9ec      	bls.n	800251a <ssd1306_Fill+0x12>
    }
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b004      	add	sp, #16
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000370 	.word	0x20000370
 800254c:	0000040f 	.word	0x0000040f

08002550 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e01e      	b.n	800259c <ssd1306_UpdateScreen+0x4c>
        ssd1306_WriteCommand(0xB0 + i);
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	3b50      	subs	r3, #80	; 0x50
 8002564:	b2db      	uxtb	r3, r3
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff ff2c 	bl	80023c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff ff29 	bl	80023c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002572:	2010      	movs	r0, #16
 8002574:	f7ff ff26 	bl	80023c4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	0013      	movs	r3, r2
 800257e:	019b      	lsls	r3, r3, #6
 8002580:	189b      	adds	r3, r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	001a      	movs	r2, r3
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <ssd1306_UpdateScreen+0x5c>)
 8002588:	18d3      	adds	r3, r2, r3
 800258a:	2182      	movs	r1, #130	; 0x82
 800258c:	0018      	movs	r0, r3
 800258e:	f7ff ff33 	bl	80023f8 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	3201      	adds	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b07      	cmp	r3, #7
 80025a2:	d9dc      	bls.n	800255e <ssd1306_UpdateScreen+0xe>
    }
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000370 	.word	0x20000370

080025b0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	0004      	movs	r4, r0
 80025b8:	0008      	movs	r0, r1
 80025ba:	0011      	movs	r1, r2
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	1c22      	adds	r2, r4, #0
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	1dbb      	adds	r3, r7, #6
 80025c4:	1c02      	adds	r2, r0, #0
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	1d7b      	adds	r3, r7, #5
 80025ca:	1c0a      	adds	r2, r1, #0
 80025cc:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b81      	cmp	r3, #129	; 0x81
 80025d4:	d85e      	bhi.n	8002694 <ssd1306_DrawPixel+0xe4>
 80025d6:	1dbb      	adds	r3, r7, #6
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b3f      	cmp	r3, #63	; 0x3f
 80025dc:	d85a      	bhi.n	8002694 <ssd1306_DrawPixel+0xe4>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <ssd1306_DrawPixel+0xec>)
 80025e0:	791b      	ldrb	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <ssd1306_DrawPixel+0x44>
        color = (SSD1306_COLOR)!color;
 80025e6:	1d7b      	adds	r3, r7, #5
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	425a      	negs	r2, r3
 80025ec:	4153      	adcs	r3, r2
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	1d7b      	adds	r3, r7, #5
 80025f2:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 80025f4:	1d7b      	adds	r3, r7, #5
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d124      	bne.n	8002646 <ssd1306_DrawPixel+0x96>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025fc:	1dfb      	adds	r3, r7, #7
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	b2d8      	uxtb	r0, r3
 8002608:	0001      	movs	r1, r0
 800260a:	000b      	movs	r3, r1
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	185b      	adds	r3, r3, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	18d3      	adds	r3, r2, r3
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <ssd1306_DrawPixel+0xf0>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	b25a      	sxtb	r2, r3
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2107      	movs	r1, #7
 8002620:	400b      	ands	r3, r1
 8002622:	2101      	movs	r1, #1
 8002624:	4099      	lsls	r1, r3
 8002626:	000b      	movs	r3, r1
 8002628:	b25b      	sxtb	r3, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	b25c      	sxtb	r4, r3
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	0001      	movs	r1, r0
 8002634:	000b      	movs	r3, r1
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	185b      	adds	r3, r3, r1
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	18d3      	adds	r3, r2, r3
 800263e:	b2e1      	uxtb	r1, r4
 8002640:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <ssd1306_DrawPixel+0xf0>)
 8002642:	54d1      	strb	r1, [r2, r3]
 8002644:	e027      	b.n	8002696 <ssd1306_DrawPixel+0xe6>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002646:	1dfb      	adds	r3, r7, #7
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	1dbb      	adds	r3, r7, #6
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	08db      	lsrs	r3, r3, #3
 8002650:	b2d8      	uxtb	r0, r3
 8002652:	0001      	movs	r1, r0
 8002654:	000b      	movs	r3, r1
 8002656:	019b      	lsls	r3, r3, #6
 8002658:	185b      	adds	r3, r3, r1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	18d3      	adds	r3, r2, r3
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <ssd1306_DrawPixel+0xf0>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	b25b      	sxtb	r3, r3
 8002664:	1dba      	adds	r2, r7, #6
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	2107      	movs	r1, #7
 800266a:	400a      	ands	r2, r1
 800266c:	2101      	movs	r1, #1
 800266e:	4091      	lsls	r1, r2
 8002670:	000a      	movs	r2, r1
 8002672:	b252      	sxtb	r2, r2
 8002674:	43d2      	mvns	r2, r2
 8002676:	b252      	sxtb	r2, r2
 8002678:	4013      	ands	r3, r2
 800267a:	b25c      	sxtb	r4, r3
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	0001      	movs	r1, r0
 8002682:	000b      	movs	r3, r1
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	185b      	adds	r3, r3, r1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	18d3      	adds	r3, r2, r3
 800268c:	b2e1      	uxtb	r1, r4
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <ssd1306_DrawPixel+0xf0>)
 8002690:	54d1      	strb	r1, [r2, r3]
 8002692:	e000      	b.n	8002696 <ssd1306_DrawPixel+0xe6>
        return;
 8002694:	46c0      	nop			; (mov r8, r8)
    }
}
 8002696:	46bd      	mov	sp, r7
 8002698:	b003      	add	sp, #12
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	20000780 	.word	0x20000780
 80026a0:	20000370 	.word	0x20000370

080026a4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	0004      	movs	r4, r0
 80026ac:	1d38      	adds	r0, r7, #4
 80026ae:	6001      	str	r1, [r0, #0]
 80026b0:	6042      	str	r2, [r0, #4]
 80026b2:	0019      	movs	r1, r3
 80026b4:	200f      	movs	r0, #15
 80026b6:	183b      	adds	r3, r7, r0
 80026b8:	1c22      	adds	r2, r4, #0
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	230e      	movs	r3, #14
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	1c0a      	adds	r2, r1, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80026c4:	183b      	adds	r3, r7, r0
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b1f      	cmp	r3, #31
 80026ca:	d904      	bls.n	80026d6 <ssd1306_WriteChar+0x32>
 80026cc:	230f      	movs	r3, #15
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b7e      	cmp	r3, #126	; 0x7e
 80026d4:	d901      	bls.n	80026da <ssd1306_WriteChar+0x36>
        return 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e078      	b.n	80027cc <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80026da:	4b3e      	ldr	r3, [pc, #248]	; (80027d4 <ssd1306_WriteChar+0x130>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	001a      	movs	r2, r3
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	2b82      	cmp	r3, #130	; 0x82
 80026e8:	dc07      	bgt.n	80026fa <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80026ea:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <ssd1306_WriteChar+0x130>)
 80026ec:	885b      	ldrh	r3, [r3, #2]
 80026ee:	001a      	movs	r2, r3
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	785b      	ldrb	r3, [r3, #1]
 80026f4:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	dd01      	ble.n	80026fe <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e066      	b.n	80027cc <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e051      	b.n	80027a8 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	230f      	movs	r3, #15
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	3b20      	subs	r3, #32
 8002710:	1d39      	adds	r1, r7, #4
 8002712:	7849      	ldrb	r1, [r1, #1]
 8002714:	434b      	muls	r3, r1
 8002716:	0019      	movs	r1, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	18cb      	adds	r3, r1, r3
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	18d3      	adds	r3, r2, r3
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e035      	b.n	8002796 <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	409a      	lsls	r2, r3
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	4013      	ands	r3, r2
 8002736:	d014      	beq.n	8002762 <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <ssd1306_WriteChar+0x130>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	18d3      	adds	r3, r2, r3
 8002744:	b2d8      	uxtb	r0, r3
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <ssd1306_WriteChar+0x130>)
 8002748:	885b      	ldrh	r3, [r3, #2]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	b2d9      	uxtb	r1, r3
 8002754:	230e      	movs	r3, #14
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	001a      	movs	r2, r3
 800275c:	f7ff ff28 	bl	80025b0 <ssd1306_DrawPixel>
 8002760:	e016      	b.n	8002790 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <ssd1306_WriteChar+0x130>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	18d3      	adds	r3, r2, r3
 800276e:	b2d8      	uxtb	r0, r3
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <ssd1306_WriteChar+0x130>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	18d3      	adds	r3, r2, r3
 800277c:	b2d9      	uxtb	r1, r3
 800277e:	230e      	movs	r3, #14
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	425a      	negs	r2, r3
 8002786:	4153      	adcs	r3, r2
 8002788:	b2db      	uxtb	r3, r3
 800278a:	001a      	movs	r2, r3
 800278c:	f7ff ff10 	bl	80025b0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	3301      	adds	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	001a      	movs	r2, r3
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4293      	cmp	r3, r2
 80027a0:	d3c3      	bcc.n	800272a <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3301      	adds	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	001a      	movs	r2, r3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d3a7      	bcc.n	8002704 <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <ssd1306_WriteChar+0x130>)
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	18d3      	adds	r3, r2, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <ssd1306_WriteChar+0x130>)
 80027c4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80027c6:	230f      	movs	r3, #15
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b009      	add	sp, #36	; 0x24
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	20000780 	.word	0x20000780

080027d8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	1d38      	adds	r0, r7, #4
 80027e2:	6001      	str	r1, [r0, #0]
 80027e4:	6042      	str	r2, [r0, #4]
 80027e6:	001a      	movs	r2, r3
 80027e8:	1cfb      	adds	r3, r7, #3
 80027ea:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 80027ec:	e014      	b.n	8002818 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	7818      	ldrb	r0, [r3, #0]
 80027f2:	1cfb      	adds	r3, r7, #3
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	1d3a      	adds	r2, r7, #4
 80027f8:	6811      	ldr	r1, [r2, #0]
 80027fa:	6852      	ldr	r2, [r2, #4]
 80027fc:	f7ff ff52 	bl	80026a4 <ssd1306_WriteChar>
 8002800:	0003      	movs	r3, r0
 8002802:	001a      	movs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d002      	beq.n	8002812 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	e008      	b.n	8002824 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e6      	bne.n	80027ee <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	781b      	ldrb	r3, [r3, #0]
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}

0800282c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	0002      	movs	r2, r0
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	1dbb      	adds	r3, r7, #6
 800283a:	1c0a      	adds	r2, r1, #0
 800283c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800283e:	1dfb      	adds	r3, r7, #7
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <ssd1306_SetCursor+0x30>)
 8002846:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002848:	1dbb      	adds	r3, r7, #6
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b03      	ldr	r3, [pc, #12]	; (800285c <ssd1306_SetCursor+0x30>)
 8002850:	805a      	strh	r2, [r3, #2]
}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b002      	add	sp, #8
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000780 	.word	0x20000780

08002860 <DisplayData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DisplayData() {
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 char str[25];
    ssd1306_Fill(Black);
 8002866:	2000      	movs	r0, #0
 8002868:	f7ff fe4e 	bl	8002508 <ssd1306_Fill>
    ssd1306_SetCursor(20, 20);
 800286c:	2114      	movs	r1, #20
 800286e:	2014      	movs	r0, #20
 8002870:	f7ff ffdc 	bl	800282c <ssd1306_SetCursor>
    sprintf(&str[0],"%.1fC",temperature[0]);
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <DisplayData+0x78>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	1c18      	adds	r0, r3, #0
 800287a:	f7ff fca9 	bl	80021d0 <__aeabi_f2d>
 800287e:	0003      	movs	r3, r0
 8002880:	000c      	movs	r4, r1
 8002882:	4916      	ldr	r1, [pc, #88]	; (80028dc <DisplayData+0x7c>)
 8002884:	1d38      	adds	r0, r7, #4
 8002886:	001a      	movs	r2, r3
 8002888:	0023      	movs	r3, r4
 800288a:	f009 fd8b 	bl	800c3a4 <siprintf>
    ssd1306_WriteString(str, Font_16x26, White);
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <DisplayData+0x80>)
 8002890:	1d38      	adds	r0, r7, #4
 8002892:	2301      	movs	r3, #1
 8002894:	6811      	ldr	r1, [r2, #0]
 8002896:	6852      	ldr	r2, [r2, #4]
 8002898:	f7ff ff9e 	bl	80027d8 <ssd1306_WriteString>
    ssd1306_SetCursor(130-16, 64-26);
 800289c:	2126      	movs	r1, #38	; 0x26
 800289e:	2072      	movs	r0, #114	; 0x72
 80028a0:	f7ff ffc4 	bl	800282c <ssd1306_SetCursor>
    if (heat>0) ssd1306_WriteString("*", Font_16x26, White); else ssd1306_WriteString(" ", Font_16x26, White);
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <DisplayData+0x84>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dd07      	ble.n	80028bc <DisplayData+0x5c>
 80028ac:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <DisplayData+0x80>)
 80028ae:	480e      	ldr	r0, [pc, #56]	; (80028e8 <DisplayData+0x88>)
 80028b0:	2301      	movs	r3, #1
 80028b2:	6811      	ldr	r1, [r2, #0]
 80028b4:	6852      	ldr	r2, [r2, #4]
 80028b6:	f7ff ff8f 	bl	80027d8 <ssd1306_WriteString>
 80028ba:	e006      	b.n	80028ca <DisplayData+0x6a>
 80028bc:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <DisplayData+0x80>)
 80028be:	480b      	ldr	r0, [pc, #44]	; (80028ec <DisplayData+0x8c>)
 80028c0:	2301      	movs	r3, #1
 80028c2:	6811      	ldr	r1, [r2, #0]
 80028c4:	6852      	ldr	r2, [r2, #4]
 80028c6:	f7ff ff87 	bl	80027d8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80028ca:	f7ff fe41 	bl	8002550 <ssd1306_UpdateScreen>
}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b009      	add	sp, #36	; 0x24
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	20000a04 	.word	0x20000a04
 80028dc:	0800e558 	.word	0x0800e558
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000a14 	.word	0x20000a14
 80028e8:	0800e560 	.word	0x0800e560
 80028ec:	0800e564 	.word	0x0800e564

080028f0 <Heat>:

void Heat() {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	if (temperature[0]>600) {
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <Heat+0x50>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4912      	ldr	r1, [pc, #72]	; (8002944 <Heat+0x54>)
 80028fa:	1c18      	adds	r0, r3, #0
 80028fc:	f7fd fdf0 	bl	80004e0 <__aeabi_fcmpgt>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d008      	beq.n	8002916 <Heat+0x26>
		HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <Heat+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	2108      	movs	r1, #8
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fffa 	bl	8003904 <HAL_GPIO_WritePin>
		heat=0;
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <Heat+0x5c>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
	}
	if (temperature[0]<580) {
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <Heat+0x50>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	490d      	ldr	r1, [pc, #52]	; (8002950 <Heat+0x60>)
 800291c:	1c18      	adds	r0, r3, #0
 800291e:	f7fd fdcb 	bl	80004b8 <__aeabi_fcmplt>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d100      	bne.n	8002928 <Heat+0x38>
		HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
		heat=1;
	}

}
 8002926:	e008      	b.n	800293a <Heat+0x4a>
		HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <Heat+0x58>)
 800292a:	2201      	movs	r2, #1
 800292c:	2108      	movs	r1, #8
 800292e:	0018      	movs	r0, r3
 8002930:	f000 ffe8 	bl	8003904 <HAL_GPIO_WritePin>
		heat=1;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <Heat+0x5c>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]
}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000a04 	.word	0x20000a04
 8002944:	44160000 	.word	0x44160000
 8002948:	50000400 	.word	0x50000400
 800294c:	20000a14 	.word	0x20000a14
 8002950:	44110000 	.word	0x44110000

08002954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	b0bf      	sub	sp, #252	; 0xfc
 8002958:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800295a:	f000 fce9 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800295e:	f000 f85f 	bl	8002a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002962:	f000 f9a5 	bl	8002cb0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002966:	f000 f915 	bl	8002b94 <MX_SPI1_Init>
  MX_TIM2_Init();
 800296a:	f000 f94b 	bl	8002c04 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800296e:	f008 faff 	bl	800af70 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8002972:	f000 f8cf 	bl	8002b14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#ifdef oled
  ssd1306_Init();
 8002976:	f7ff fd59 	bl	800242c <ssd1306_Init>
  DisplayData();
 800297a:	f7ff ff71 	bl	8002860 <DisplayData>
#endif
#ifdef max31855
  max31855_init();
#else
  max6675_init();
 800297e:	f000 fa00 	bl	8002d82 <max6675_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t buffer[200];

	  temperature[0]= max6675_readTemp(3);
 8002982:	2003      	movs	r0, #3
 8002984:	f000 fab6 	bl	8002ef4 <max6675_readTemp>
 8002988:	1c02      	adds	r2, r0, #0
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <main+0xc4>)
 800298c:	601a      	str	r2, [r3, #0]
	  Heat();
 800298e:	f7ff ffaf 	bl	80028f0 <Heat>
	  DisplayData();
 8002992:	f7ff ff65 	bl	8002860 <DisplayData>
		  temperature[i]= max6675_readTemp(i);
        #endif
		  HAL_Delay(1);
	  }*/

	  int len=sprintf(&buffer,"{\"temp1\":%.2f,\"temp2\":%.2f,\"temp3\":%.2f,\"temp4\":%.2f}\r\n",temperature[3],temperature[0],temperature[1],temperature[2]);
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <main+0xc4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	1c18      	adds	r0, r3, #0
 800299c:	f7ff fc18 	bl	80021d0 <__aeabi_f2d>
 80029a0:	60b8      	str	r0, [r7, #8]
 80029a2:	60f9      	str	r1, [r7, #12]
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <main+0xc4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1c18      	adds	r0, r3, #0
 80029aa:	f7ff fc11 	bl	80021d0 <__aeabi_f2d>
 80029ae:	0004      	movs	r4, r0
 80029b0:	000d      	movs	r5, r1
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <main+0xc4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	1c18      	adds	r0, r3, #0
 80029b8:	f7ff fc0a 	bl	80021d0 <__aeabi_f2d>
 80029bc:	6038      	str	r0, [r7, #0]
 80029be:	6079      	str	r1, [r7, #4]
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <main+0xc4>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	1c18      	adds	r0, r3, #0
 80029c6:	f7ff fc03 	bl	80021d0 <__aeabi_f2d>
 80029ca:	0002      	movs	r2, r0
 80029cc:	000b      	movs	r3, r1
 80029ce:	4913      	ldr	r1, [pc, #76]	; (8002a1c <main+0xc8>)
 80029d0:	2614      	movs	r6, #20
 80029d2:	19b8      	adds	r0, r7, r6
 80029d4:	9204      	str	r2, [sp, #16]
 80029d6:	9305      	str	r3, [sp, #20]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	9202      	str	r2, [sp, #8]
 80029de:	9303      	str	r3, [sp, #12]
 80029e0:	9400      	str	r4, [sp, #0]
 80029e2:	9501      	str	r5, [sp, #4]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f009 fcdc 	bl	800c3a4 <siprintf>
 80029ec:	0003      	movs	r3, r0
 80029ee:	22cc      	movs	r2, #204	; 0xcc
 80029f0:	2010      	movs	r0, #16
 80029f2:	1839      	adds	r1, r7, r0
 80029f4:	1889      	adds	r1, r1, r2
 80029f6:	600b      	str	r3, [r1, #0]
	  CDC_Transmit_FS(buffer, len);
 80029f8:	183b      	adds	r3, r7, r0
 80029fa:	189b      	adds	r3, r3, r2
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	19bb      	adds	r3, r7, r6
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f008 fb57 	bl	800b0b8 <CDC_Transmit_FS>
	  HAL_Delay(300);
 8002a0a:	2396      	movs	r3, #150	; 0x96
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 fcfe 	bl	8003410 <HAL_Delay>
  {
 8002a14:	e7b5      	b.n	8002982 <main+0x2e>
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	20000a04 	.word	0x20000a04
 8002a1c:	0800e568 	.word	0x0800e568

08002a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b09d      	sub	sp, #116	; 0x74
 8002a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a26:	2438      	movs	r4, #56	; 0x38
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	2338      	movs	r3, #56	; 0x38
 8002a2e:	001a      	movs	r2, r3
 8002a30:	2100      	movs	r1, #0
 8002a32:	f009 f836 	bl	800baa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a36:	2324      	movs	r3, #36	; 0x24
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	2314      	movs	r3, #20
 8002a3e:	001a      	movs	r2, r3
 8002a40:	2100      	movs	r1, #0
 8002a42:	f009 f82e 	bl	800baa2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a46:	003b      	movs	r3, r7
 8002a48:	0018      	movs	r0, r3
 8002a4a:	2324      	movs	r3, #36	; 0x24
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f009 f827 	bl	800baa2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <SystemClock_Config+0xec>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2d      	ldr	r2, [pc, #180]	; (8002b10 <SystemClock_Config+0xf0>)
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <SystemClock_Config+0xec>)
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	0109      	lsls	r1, r1, #4
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002a66:	0021      	movs	r1, r4
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2222      	movs	r2, #34	; 0x22
 8002a6c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	2201      	movs	r2, #1
 8002a72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2210      	movs	r2, #16
 8002a78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	2202      	movs	r2, #2
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	2200      	movs	r2, #0
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	02d2      	lsls	r2, r2, #11
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	03d2      	lsls	r2, r2, #15
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f003 f842 	bl	8005b28 <HAL_RCC_OscConfig>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002aa8:	f000 f966 	bl	8002d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aac:	2124      	movs	r1, #36	; 0x24
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2101      	movs	r1, #1
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f003 fbf9 	bl	80062c8 <HAL_RCC_ClockConfig>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d001      	beq.n	8002ade <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002ada:	f000 f94d 	bl	8002d78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8002ade:	003b      	movs	r3, r7
 8002ae0:	2248      	movs	r2, #72	; 0x48
 8002ae2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ae4:	003b      	movs	r3, r7
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002aea:	003b      	movs	r3, r7
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	04d2      	lsls	r2, r2, #19
 8002af0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af2:	003b      	movs	r3, r7
 8002af4:	0018      	movs	r0, r3
 8002af6:	f003 fd95 	bl	8006624 <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002afe:	f000 f93b 	bl	8002d78 <Error_Handler>
  }
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b01d      	add	sp, #116	; 0x74
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	ffffe7ff 	.word	0xffffe7ff

08002b14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <MX_I2C1_Init+0x78>)
 8002b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <MX_I2C1_Init+0x7c>)
 8002b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 ff0f 	bl	8003974 <HAL_I2C_Init>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d001      	beq.n	8002b5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b5a:	f000 f90d 	bl	8002d78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b60:	2100      	movs	r1, #0
 8002b62:	0018      	movs	r0, r3
 8002b64:	f001 faa6 	bl	80040b4 <HAL_I2CEx_ConfigAnalogFilter>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b6c:	f000 f904 	bl	8002d78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <MX_I2C1_Init+0x74>)
 8002b72:	2100      	movs	r1, #0
 8002b74:	0018      	movs	r0, r3
 8002b76:	f001 fae9 	bl	800414c <HAL_I2CEx_ConfigDigitalFilter>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b7e:	f000 f8fb 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200009b8 	.word	0x200009b8
 8002b8c:	40005400 	.word	0x40005400
 8002b90:	00707cbb 	.word	0x00707cbb

08002b94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b98:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002b9a:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <MX_SPI1_Init+0x6c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002ba0:	2282      	movs	r2, #130	; 0x82
 8002ba2:	0052      	lsls	r2, r2, #1
 8002ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bc8:	2220      	movs	r2, #32
 8002bca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f003 fe74 	bl	80068d4 <HAL_SPI_Init>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002bf0:	f000 f8c2 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	20000a18 	.word	0x20000a18
 8002c00:	40013000 	.word	0x40013000

08002c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	0018      	movs	r0, r3
 8002c10:	2310      	movs	r3, #16
 8002c12:	001a      	movs	r2, r3
 8002c14:	2100      	movs	r1, #0
 8002c16:	f008 ff44 	bl	800baa2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1a:	003b      	movs	r3, r7
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	2308      	movs	r3, #8
 8002c20:	001a      	movs	r2, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	f008 ff3d 	bl	800baa2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c28:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c32:	22fa      	movs	r2, #250	; 0xfa
 8002c34:	01d2      	lsls	r2, r2, #7
 8002c36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c40:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <MX_TIM2_Init+0xa8>)
 8002c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c52:	0018      	movs	r0, r3
 8002c54:	f004 f911 	bl	8006e7a <HAL_TIM_Base_Init>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002c5c:	f000 f88c 	bl	8002d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c60:	2108      	movs	r1, #8
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	0152      	lsls	r2, r2, #5
 8002c68:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c6a:	187a      	adds	r2, r7, r1
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c6e:	0011      	movs	r1, r2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f004 fa17 	bl	80070a4 <HAL_TIM_ConfigClockSource>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002c7a:	f000 f87d 	bl	8002d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7e:	003b      	movs	r3, r7
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c84:	003b      	movs	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c8a:	003a      	movs	r2, r7
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_TIM2_Init+0xa4>)
 8002c8e:	0011      	movs	r1, r2
 8002c90:	0018      	movs	r0, r3
 8002c92:	f004 fbe5 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002c9a:	f000 f86d 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b006      	add	sp, #24
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	20000a70 	.word	0x20000a70
 8002cac:	000003e7 	.word	0x000003e7

08002cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb6:	240c      	movs	r4, #12
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	0018      	movs	r0, r3
 8002cbc:	2314      	movs	r3, #20
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f008 feee 	bl	800baa2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <MX_GPIO_Init+0xc0>)
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <MX_GPIO_Init+0xc0>)
 8002ccc:	2101      	movs	r1, #1
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd2:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <MX_GPIO_Init+0xc0>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <MX_GPIO_Init+0xc0>)
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <MX_GPIO_Init+0xc0>)
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <MX_GPIO_Init+0xc0>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|CS2_Pin, GPIO_PIN_SET);
 8002cf6:	23a0      	movs	r3, #160	; 0xa0
 8002cf8:	05db      	lsls	r3, r3, #23
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2118      	movs	r1, #24
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fe00 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS3_Pin|CS4_Pin, GPIO_PIN_SET);
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	2103      	movs	r1, #3
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 fdfa 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	2108      	movs	r1, #8
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fdf4 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS1_Pin CS2_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin;
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	2218      	movs	r2, #24
 8002d20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	2201      	movs	r2, #1
 8002d26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	193a      	adds	r2, r7, r4
 8002d36:	23a0      	movs	r3, #160	; 0xa0
 8002d38:	05db      	lsls	r3, r3, #23
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fc63 	bl	8003608 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS4_Pin Relay_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|CS4_Pin|Relay_Pin;
 8002d42:	0021      	movs	r1, r4
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	220b      	movs	r2, #11
 8002d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <MX_GPIO_Init+0xc4>)
 8002d60:	0019      	movs	r1, r3
 8002d62:	0010      	movs	r0, r2
 8002d64:	f000 fc50 	bl	8003608 <HAL_GPIO_Init>

}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b009      	add	sp, #36	; 0x24
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	50000400 	.word	0x50000400

08002d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <max6675_init>:
#include "max6675.h"
#include "stdbool.h"

extern SPI_HandleTypeDef hspi1;

void max6675_init(void){
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0

}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <SelSensor>:


volatile void SelSensor(int sensor_cs, bool select) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	000a      	movs	r2, r1
 8002d96:	1cfb      	adds	r3, r7, #3
 8002d98:	701a      	strb	r2, [r3, #0]
	switch (sensor_cs) {
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d01c      	beq.n	8002dda <SelSensor+0x4e>
 8002da0:	dc02      	bgt.n	8002da8 <SelSensor+0x1c>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <SelSensor+0x26>
	  else
  	    HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
	  } break;

	}
}
 8002da6:	e050      	b.n	8002e4a <SelSensor+0xbe>
	switch (sensor_cs) {
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d02a      	beq.n	8002e02 <SelSensor+0x76>
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d03a      	beq.n	8002e26 <SelSensor+0x9a>
}
 8002db0:	e04b      	b.n	8002e4a <SelSensor+0xbe>
	  if (select)
 8002db2:	1cfb      	adds	r3, r7, #3
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <SelSensor+0x3e>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8002dba:	23a0      	movs	r3, #160	; 0xa0
 8002dbc:	05db      	lsls	r3, r3, #23
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2108      	movs	r1, #8
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 fd9e 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002dc8:	e03f      	b.n	8002e4a <SelSensor+0xbe>
  	    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8002dca:	23a0      	movs	r3, #160	; 0xa0
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	2201      	movs	r2, #1
 8002dd0:	2108      	movs	r1, #8
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fd96 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002dd8:	e037      	b.n	8002e4a <SelSensor+0xbe>
	  if (select)
 8002dda:	1cfb      	adds	r3, r7, #3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <SelSensor+0x66>
		HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 8002de2:	23a0      	movs	r3, #160	; 0xa0
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	2200      	movs	r2, #0
 8002de8:	2110      	movs	r1, #16
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 fd8a 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002df0:	e02b      	b.n	8002e4a <SelSensor+0xbe>
  	    HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8002df2:	23a0      	movs	r3, #160	; 0xa0
 8002df4:	05db      	lsls	r3, r3, #23
 8002df6:	2201      	movs	r2, #1
 8002df8:	2110      	movs	r1, #16
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fd82 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002e00:	e023      	b.n	8002e4a <SelSensor+0xbe>
	  if (select)
 8002e02:	1cfb      	adds	r3, r7, #3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <SelSensor+0x8c>
		HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <SelSensor+0xc8>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2101      	movs	r1, #1
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 fd77 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002e16:	e018      	b.n	8002e4a <SelSensor+0xbe>
  	    HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_SET);
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <SelSensor+0xc8>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 fd70 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002e24:	e011      	b.n	8002e4a <SelSensor+0xbe>
	  if (select)
 8002e26:	1cfb      	adds	r3, r7, #3
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <SelSensor+0xb0>
		HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_RESET);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <SelSensor+0xc8>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	2102      	movs	r1, #2
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fd65 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002e3a:	e005      	b.n	8002e48 <SelSensor+0xbc>
  	    HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <SelSensor+0xc8>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2102      	movs	r1, #2
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 fd5e 	bl	8003904 <HAL_GPIO_WritePin>
	  } break;
 8002e48:	46c0      	nop			; (mov r8, r8)
}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b002      	add	sp, #8
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	50000400 	.word	0x50000400

08002e58 <max6675_readbits>:

volatile uint16_t max6675_readbits(int device){
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	6078      	str	r0, [r7, #4]
	uint8_t val[2];
	uint16_t outval=0xffff;
 8002e60:	240a      	movs	r4, #10
 8002e62:	193b      	adds	r3, r7, r4
 8002e64:	2201      	movs	r2, #1
 8002e66:	4252      	negs	r2, r2
 8002e68:	801a      	strh	r2, [r3, #0]
	uint16_t TempInt;
    SelSensor(device,true);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7ff ff8c 	bl	8002d8c <SelSensor>
    //HAL_SPI_Receive(&hspi1, &val, 2, 0xffff);
    HAL_SPI_TransmitReceive(&hspi1,&outval, &val[0], 2, 0xffff);
 8002e74:	250c      	movs	r5, #12
 8002e76:	197a      	adds	r2, r7, r5
 8002e78:	1939      	adds	r1, r7, r4
 8002e7a:	481b      	ldr	r0, [pc, #108]	; (8002ee8 <max6675_readbits+0x90>)
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <max6675_readbits+0x94>)
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2302      	movs	r3, #2
 8002e82:	f003 fd91 	bl	80069a8 <HAL_SPI_TransmitReceive>
	SelSensor(device,false);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff ff7e 	bl	8002d8c <SelSensor>
  if (val[1] & 0X04)  {
 8002e90:	197b      	adds	r3, r7, r5
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	001a      	movs	r2, r3
 8002e96:	2304      	movs	r3, #4
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d008      	beq.n	8002eae <max6675_readbits+0x56>
    val[1] = 0; //No thermocouple detected
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	705a      	strb	r2, [r3, #1]
    printf("No thermocouple 2\n detected");
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <max6675_readbits+0x98>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f009 fa62 	bl	800c370 <iprintf>
 8002eac:	e015      	b.n	8002eda <max6675_readbits+0x82>
  }
  else {
	TempInt=val[0];
 8002eae:	200c      	movs	r0, #12
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	210e      	movs	r1, #14
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	801a      	strh	r2, [r3, #0]
	TempInt=(TempInt<<8) | val[1];
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	b21a      	sxth	r2, r3
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	801a      	strh	r2, [r3, #0]
	TempInt>>=3; // Remove D0, 1, 2 bits
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	187a      	adds	r2, r7, r1
 8002ed4:	8812      	ldrh	r2, [r2, #0]
 8002ed6:	08d2      	lsrs	r2, r2, #3
 8002ed8:	801a      	strh	r2, [r3, #0]
  }
	return TempInt;
 8002eda:	230e      	movs	r3, #14
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	881b      	ldrh	r3, [r3, #0]
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee8:	20000a18 	.word	0x20000a18
 8002eec:	0000ffff 	.word	0x0000ffff
 8002ef0:	0800e5a0 	.word	0x0800e5a0

08002ef4 <max6675_readTemp>:

float max6675_readTemp(int sensor){
 8002ef4:	b5b0      	push	{r4, r5, r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint16_t tempint;
  float temp;

  tempint=max6675_readbits(sensor);
 8002efc:	250e      	movs	r5, #14
 8002efe:	197c      	adds	r4, r7, r5
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff ffa8 	bl	8002e58 <max6675_readbits>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	8023      	strh	r3, [r4, #0]
  temp=tempint*1023.75/4095;
 8002f0c:	197b      	adds	r3, r7, r5
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff f8f1 	bl	80020f8 <__aeabi_i2d>
 8002f16:	2200      	movs	r2, #0
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <max6675_readTemp+0x54>)
 8002f1a:	f7fe fae1 	bl	80014e0 <__aeabi_dmul>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	000c      	movs	r4, r1
 8002f22:	0018      	movs	r0, r3
 8002f24:	0021      	movs	r1, r4
 8002f26:	2200      	movs	r2, #0
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <max6675_readTemp+0x58>)
 8002f2a:	f7fd fecf 	bl	8000ccc <__aeabi_ddiv>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	000c      	movs	r4, r1
 8002f32:	0018      	movs	r0, r3
 8002f34:	0021      	movs	r1, r4
 8002f36:	f7ff f99d 	bl	8002274 <__aeabi_d2f>
 8002f3a:	1c03      	adds	r3, r0, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
  return temp;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
}
 8002f40:	1c18      	adds	r0, r3, #0
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b004      	add	sp, #16
 8002f46:	bdb0      	pop	{r4, r5, r7, pc}
 8002f48:	408ffe00 	.word	0x408ffe00
 8002f4c:	40affe00 	.word	0x40affe00

08002f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_MspInit+0x24>)
 8002f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_MspInit+0x24>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <HAL_MspInit+0x24>)
 8002f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_MspInit+0x24>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0549      	lsls	r1, r1, #21
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000

08002f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	230c      	movs	r3, #12
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	0018      	movs	r0, r3
 8002f86:	2314      	movs	r3, #20
 8002f88:	001a      	movs	r2, r3
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	f008 fd89 	bl	800baa2 <memset>
  if(hi2c->Instance==I2C1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_I2C_MspInit+0x80>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d12a      	bne.n	8002ff0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_I2C_MspInit+0x84>)
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_I2C_MspInit+0x84>)
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_I2C_MspInit+0x84>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fb2:	210c      	movs	r1, #12
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	22c0      	movs	r2, #192	; 0xc0
 8002fb8:	00d2      	lsls	r2, r2, #3
 8002fba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2212      	movs	r2, #18
 8002fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2206      	movs	r2, #6
 8002fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	187a      	adds	r2, r7, r1
 8002fd6:	23a0      	movs	r3, #160	; 0xa0
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fb13 	bl	8003608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_I2C_MspInit+0x84>)
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_I2C_MspInit+0x84>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	0389      	lsls	r1, r1, #14
 8002fec:	430a      	orrs	r2, r1
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b008      	add	sp, #32
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40005400 	.word	0x40005400
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	230c      	movs	r3, #12
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	0018      	movs	r0, r3
 800300e:	2314      	movs	r3, #20
 8003010:	001a      	movs	r2, r3
 8003012:	2100      	movs	r1, #0
 8003014:	f008 fd45 	bl	800baa2 <memset>
  if(hspi->Instance==SPI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a18      	ldr	r2, [pc, #96]	; (8003080 <HAL_SPI_MspInit+0x80>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d129      	bne.n	8003076 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_SPI_MspInit+0x84>)
 8003024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_SPI_MspInit+0x84>)
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	0149      	lsls	r1, r1, #5
 800302c:	430a      	orrs	r2, r1
 800302e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <HAL_SPI_MspInit+0x84>)
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_SPI_MspInit+0x84>)
 8003036:	2101      	movs	r1, #1
 8003038:	430a      	orrs	r2, r1
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_SPI_MspInit+0x84>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	2201      	movs	r2, #1
 8003042:	4013      	ands	r3, r2
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003048:	210c      	movs	r1, #12
 800304a:	187b      	adds	r3, r7, r1
 800304c:	22e0      	movs	r2, #224	; 0xe0
 800304e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	187b      	adds	r3, r7, r1
 8003052:	2202      	movs	r2, #2
 8003054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2203      	movs	r2, #3
 8003060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	187a      	adds	r2, r7, r1
 800306a:	23a0      	movs	r3, #160	; 0xa0
 800306c:	05db      	lsls	r3, r3, #23
 800306e:	0011      	movs	r1, r2
 8003070:	0018      	movs	r0, r3
 8003072:	f000 fac9 	bl	8003608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b008      	add	sp, #32
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	40013000 	.word	0x40013000
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	05db      	lsls	r3, r3, #23
 8003098:	429a      	cmp	r2, r3
 800309a:	d10d      	bne.n	80030b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_TIM_Base_MspInit+0x38>)
 800309e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_TIM_Base_MspInit+0x38>)
 80030a2:	2101      	movs	r1, #1
 80030a4:	430a      	orrs	r2, r1
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	200f      	movs	r0, #15
 80030ae:	f000 fa79 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030b2:	200f      	movs	r0, #15
 80030b4:	f000 fa8b 	bl	80035ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <HardFault_Handler+0x4>

080030d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ec:	f000 f974 	bl	80033d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <TIM2_IRQHandler+0x14>)
 80030fe:	0018      	movs	r0, r3
 8003100:	f003 fee7 	bl	8006ed2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	20000a70 	.word	0x20000a70

08003110 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <USB_IRQHandler+0x14>)
 8003116:	0018      	movs	r0, r3
 8003118:	f001 f99a 	bl	8004450 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	2000171c 	.word	0x2000171c

08003128 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00a      	b.n	8003150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800313a:	e000      	b.n	800313e <_read+0x16>
 800313c:	bf00      	nop
 800313e:	0001      	movs	r1, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	60ba      	str	r2, [r7, #8]
 8003146:	b2ca      	uxtb	r2, r1
 8003148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	dbf0      	blt.n	800313a <_read+0x12>
	}

return len;
 8003158:	687b      	ldr	r3, [r7, #4]
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b006      	add	sp, #24
 8003160:	bd80      	pop	{r7, pc}

08003162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e009      	b.n	8003188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	60ba      	str	r2, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	0018      	movs	r0, r3
 800317e:	e000      	b.n	8003182 <_write+0x20>
 8003180:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbf1      	blt.n	8003174 <_write+0x12>
	}
	return len;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b006      	add	sp, #24
 8003198:	bd80      	pop	{r7, pc}

0800319a <_close>:

int _close(int file)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
	return -1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	425b      	negs	r3, r3
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	0192      	lsls	r2, r2, #6
 80031be:	605a      	str	r2, [r3, #4]
	return 0;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b002      	add	sp, #8
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_isatty>:

int _isatty(int file)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
	return 1;
 80031d2:	2301      	movs	r3, #1
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
	return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <_sbrk+0x5c>)
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <_sbrk+0x60>)
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <_sbrk+0x64>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <_sbrk+0x64>)
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <_sbrk+0x68>)
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <_sbrk+0x64>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	18d3      	adds	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	429a      	cmp	r2, r3
 8003222:	d207      	bcs.n	8003234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003224:	f008 fc00 	bl	800ba28 <__errno>
 8003228:	0003      	movs	r3, r0
 800322a:	220c      	movs	r2, #12
 800322c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800322e:	2301      	movs	r3, #1
 8003230:	425b      	negs	r3, r3
 8003232:	e009      	b.n	8003248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <_sbrk+0x64>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <_sbrk+0x64>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	18d2      	adds	r2, r2, r3
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <_sbrk+0x64>)
 8003244:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b006      	add	sp, #24
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20005000 	.word	0x20005000
 8003254:	00000400 	.word	0x00000400
 8003258:	20000788 	.word	0x20000788
 800325c:	20001a18 	.word	0x20001a18

08003260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003264:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <SystemInit+0x64>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <SystemInit+0x64>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0049      	lsls	r1, r1, #1
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <SystemInit+0x64>)
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <SystemInit+0x64>)
 8003278:	4913      	ldr	r1, [pc, #76]	; (80032c8 <SystemInit+0x68>)
 800327a:	400a      	ands	r2, r1
 800327c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <SystemInit+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <SystemInit+0x64>)
 8003284:	4911      	ldr	r1, [pc, #68]	; (80032cc <SystemInit+0x6c>)
 8003286:	400a      	ands	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <SystemInit+0x64>)
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <SystemInit+0x64>)
 8003290:	2101      	movs	r1, #1
 8003292:	438a      	bics	r2, r1
 8003294:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <SystemInit+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <SystemInit+0x64>)
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <SystemInit+0x70>)
 800329e:	400a      	ands	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <SystemInit+0x64>)
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <SystemInit+0x64>)
 80032a8:	490a      	ldr	r1, [pc, #40]	; (80032d4 <SystemInit+0x74>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <SystemInit+0x64>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <SystemInit+0x78>)
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	0512      	lsls	r2, r2, #20
 80032ba:	609a      	str	r2, [r3, #8]
#endif
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	40021000 	.word	0x40021000
 80032c8:	88ff400c 	.word	0x88ff400c
 80032cc:	fef6fff6 	.word	0xfef6fff6
 80032d0:	fffbffff 	.word	0xfffbffff
 80032d4:	ff02ffff 	.word	0xff02ffff
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80032dc:	480d      	ldr	r0, [pc, #52]	; (8003314 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80032de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80032e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032e2:	e003      	b.n	80032ec <LoopCopyDataInit>

080032e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80032e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032ea:	3104      	adds	r1, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80032ec:	480b      	ldr	r0, [pc, #44]	; (800331c <LoopForever+0xa>)
  ldr  r3, =_edata
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <LoopForever+0xe>)
  adds  r2, r0, r1
 80032f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032f4:	d3f6      	bcc.n	80032e4 <CopyDataInit>
  ldr  r2, =_sbss
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <LoopForever+0x12>)
  b  LoopFillZerobss
 80032f8:	e002      	b.n	8003300 <LoopFillZerobss>

080032fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80032fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80032fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032fe:	3204      	adds	r2, #4

08003300 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <LoopForever+0x16>)
  cmp  r2, r3
 8003302:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003304:	d3f9      	bcc.n	80032fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003306:	f7ff ffab 	bl	8003260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330a:	f008 fb93 	bl	800ba34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800330e:	f7ff fb21 	bl	8002954 <main>

08003312 <LoopForever>:

LoopForever:
    b LoopForever
 8003312:	e7fe      	b.n	8003312 <LoopForever>
   ldr   r0, =_estack
 8003314:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003318:	0800fda8 	.word	0x0800fda8
  ldr  r0, =_sdata
 800331c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003320:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8003324:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8003328:	20001a14 	.word	0x20001a14

0800332c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC1_COMP_IRQHandler>
	...

08003330 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_Init+0x3c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_Init+0x3c>)
 8003342:	2140      	movs	r1, #64	; 0x40
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003348:	2000      	movs	r0, #0
 800334a:	f000 f811 	bl	8003370 <HAL_InitTick>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d003      	beq.n	800335a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e001      	b.n	800335e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800335a:	f7ff fdf9 	bl	8002f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	781b      	ldrb	r3, [r3, #0]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	40022000 	.word	0x40022000

08003370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_InitTick+0x5c>)
 800337a:	681c      	ldr	r4, [r3, #0]
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_InitTick+0x60>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	0019      	movs	r1, r3
 8003382:	23fa      	movs	r3, #250	; 0xfa
 8003384:	0098      	lsls	r0, r3, #2
 8003386:	f7fc fed1 	bl	800012c <__udivsi3>
 800338a:	0003      	movs	r3, r0
 800338c:	0019      	movs	r1, r3
 800338e:	0020      	movs	r0, r4
 8003390:	f7fc fecc 	bl	800012c <__udivsi3>
 8003394:	0003      	movs	r3, r0
 8003396:	0018      	movs	r0, r3
 8003398:	f000 f929 	bl	80035ee <HAL_SYSTICK_Config>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d001      	beq.n	80033a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e00f      	b.n	80033c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d80b      	bhi.n	80033c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	2301      	movs	r3, #1
 80033ae:	425b      	negs	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f8f6 	bl	80035a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_InitTick+0x64>)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b003      	add	sp, #12
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	20000008 	.word	0x20000008
 80033d0:	20000010 	.word	0x20000010
 80033d4:	2000000c 	.word	0x2000000c

080033d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_IncTick+0x1c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	001a      	movs	r2, r3
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_IncTick+0x20>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	18d2      	adds	r2, r2, r3
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <HAL_IncTick+0x20>)
 80033ea:	601a      	str	r2, [r3, #0]
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000010 	.word	0x20000010
 80033f8:	20000aac 	.word	0x20000aac

080033fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003400:	4b02      	ldr	r3, [pc, #8]	; (800340c <HAL_GetTick+0x10>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	20000aac 	.word	0x20000aac

08003410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff fff0 	bl	80033fc <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	d005      	beq.n	8003436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_Delay+0x40>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	001a      	movs	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	189b      	adds	r3, r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	f7ff ffe0 	bl	80033fc <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d8f7      	bhi.n	8003438 <HAL_Delay+0x28>
  {
  }
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b004      	add	sp, #16
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000010 	.word	0x20000010

08003454 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	0002      	movs	r2, r0
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	001a      	movs	r2, r3
 8003466:	231f      	movs	r3, #31
 8003468:	401a      	ands	r2, r3
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <NVIC_EnableIRQ+0x28>)
 800346c:	2101      	movs	r1, #1
 800346e:	4091      	lsls	r1, r2
 8003470:	000a      	movs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}
 800347c:	e000e100 	.word	0xe000e100

08003480 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	0002      	movs	r2, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800348e:	1dfb      	adds	r3, r7, #7
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b7f      	cmp	r3, #127	; 0x7f
 8003494:	d932      	bls.n	80034fc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003496:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <NVIC_SetPriority+0xd4>)
 8003498:	1dfb      	adds	r3, r7, #7
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	0019      	movs	r1, r3
 800349e:	230f      	movs	r3, #15
 80034a0:	400b      	ands	r3, r1
 80034a2:	3b08      	subs	r3, #8
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3306      	adds	r3, #6
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	18d3      	adds	r3, r2, r3
 80034ac:	3304      	adds	r3, #4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	1dfa      	adds	r2, r7, #7
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	0011      	movs	r1, r2
 80034b6:	2203      	movs	r2, #3
 80034b8:	400a      	ands	r2, r1
 80034ba:	00d2      	lsls	r2, r2, #3
 80034bc:	21ff      	movs	r1, #255	; 0xff
 80034be:	4091      	lsls	r1, r2
 80034c0:	000a      	movs	r2, r1
 80034c2:	43d2      	mvns	r2, r2
 80034c4:	401a      	ands	r2, r3
 80034c6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	019b      	lsls	r3, r3, #6
 80034cc:	22ff      	movs	r2, #255	; 0xff
 80034ce:	401a      	ands	r2, r3
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	0018      	movs	r0, r3
 80034d6:	2303      	movs	r3, #3
 80034d8:	4003      	ands	r3, r0
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034de:	481d      	ldr	r0, [pc, #116]	; (8003554 <NVIC_SetPriority+0xd4>)
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	001c      	movs	r4, r3
 80034e6:	230f      	movs	r3, #15
 80034e8:	4023      	ands	r3, r4
 80034ea:	3b08      	subs	r3, #8
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	430a      	orrs	r2, r1
 80034f0:	3306      	adds	r3, #6
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	18c3      	adds	r3, r0, r3
 80034f6:	3304      	adds	r3, #4
 80034f8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034fa:	e027      	b.n	800354c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034fc:	4a16      	ldr	r2, [pc, #88]	; (8003558 <NVIC_SetPriority+0xd8>)
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b25b      	sxtb	r3, r3
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	33c0      	adds	r3, #192	; 0xc0
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	589b      	ldr	r3, [r3, r2]
 800350c:	1dfa      	adds	r2, r7, #7
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	0011      	movs	r1, r2
 8003512:	2203      	movs	r2, #3
 8003514:	400a      	ands	r2, r1
 8003516:	00d2      	lsls	r2, r2, #3
 8003518:	21ff      	movs	r1, #255	; 0xff
 800351a:	4091      	lsls	r1, r2
 800351c:	000a      	movs	r2, r1
 800351e:	43d2      	mvns	r2, r2
 8003520:	401a      	ands	r2, r3
 8003522:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	019b      	lsls	r3, r3, #6
 8003528:	22ff      	movs	r2, #255	; 0xff
 800352a:	401a      	ands	r2, r3
 800352c:	1dfb      	adds	r3, r7, #7
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	0018      	movs	r0, r3
 8003532:	2303      	movs	r3, #3
 8003534:	4003      	ands	r3, r0
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800353a:	4807      	ldr	r0, [pc, #28]	; (8003558 <NVIC_SetPriority+0xd8>)
 800353c:	1dfb      	adds	r3, r7, #7
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b25b      	sxtb	r3, r3
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	430a      	orrs	r2, r1
 8003546:	33c0      	adds	r3, #192	; 0xc0
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	501a      	str	r2, [r3, r0]
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b003      	add	sp, #12
 8003552:	bd90      	pop	{r4, r7, pc}
 8003554:	e000ed00 	.word	0xe000ed00
 8003558:	e000e100 	.word	0xe000e100

0800355c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	4a0c      	ldr	r2, [pc, #48]	; (800359c <SysTick_Config+0x40>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356e:	2301      	movs	r3, #1
 8003570:	e010      	b.n	8003594 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <SysTick_Config+0x44>)
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	3a01      	subs	r2, #1
 8003578:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357a:	2301      	movs	r3, #1
 800357c:	425b      	negs	r3, r3
 800357e:	2103      	movs	r1, #3
 8003580:	0018      	movs	r0, r3
 8003582:	f7ff ff7d 	bl	8003480 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <SysTick_Config+0x44>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <SysTick_Config+0x44>)
 800358e:	2207      	movs	r2, #7
 8003590:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00ffffff 	.word	0x00ffffff
 80035a0:	e000e010 	.word	0xe000e010

080035a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	210f      	movs	r1, #15
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	1c02      	adds	r2, r0, #0
 80035b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff ff5d 	bl	8003480 <NVIC_SetPriority>
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	0002      	movs	r2, r0
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035da:	1dfb      	adds	r3, r7, #7
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b25b      	sxtb	r3, r3
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff ff37 	bl	8003454 <NVIC_EnableIRQ>
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7ff ffaf 	bl	800355c <SysTick_Config>
 80035fe:	0003      	movs	r3, r0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800361e:	e155      	b.n	80038cc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4091      	lsls	r1, r2
 800362a:	000a      	movs	r2, r1
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d100      	bne.n	8003638 <HAL_GPIO_Init+0x30>
 8003636:	e146      	b.n	80038c6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d00b      	beq.n	8003658 <HAL_GPIO_Init+0x50>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d007      	beq.n	8003658 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800364c:	2b11      	cmp	r3, #17
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b12      	cmp	r3, #18
 8003656:	d130      	bne.n	80036ba <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	409a      	lsls	r2, r3
 8003666:	0013      	movs	r3, r2
 8003668:	43da      	mvns	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	409a      	lsls	r2, r3
 800367a:	0013      	movs	r3, r2
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800368e:	2201      	movs	r2, #1
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
 8003694:	0013      	movs	r3, r2
 8003696:	43da      	mvns	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	2201      	movs	r2, #1
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
 80036ac:	0013      	movs	r3, r2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	2203      	movs	r2, #3
 80036c6:	409a      	lsls	r2, r3
 80036c8:	0013      	movs	r3, r2
 80036ca:	43da      	mvns	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4013      	ands	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	0013      	movs	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0xf2>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b12      	cmp	r3, #18
 80036f8:	d123      	bne.n	8003742 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3208      	adds	r2, #8
 8003702:	0092      	lsls	r2, r2, #2
 8003704:	58d3      	ldr	r3, [r2, r3]
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2207      	movs	r2, #7
 800370c:	4013      	ands	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	220f      	movs	r2, #15
 8003712:	409a      	lsls	r2, r3
 8003714:	0013      	movs	r3, r2
 8003716:	43da      	mvns	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2107      	movs	r1, #7
 8003726:	400b      	ands	r3, r1
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	409a      	lsls	r2, r3
 800372c:	0013      	movs	r3, r2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	08da      	lsrs	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3208      	adds	r2, #8
 800373c:	0092      	lsls	r2, r2, #2
 800373e:	6939      	ldr	r1, [r7, #16]
 8003740:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	409a      	lsls	r2, r3
 8003750:	0013      	movs	r3, r2
 8003752:	43da      	mvns	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2203      	movs	r2, #3
 8003760:	401a      	ands	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	409a      	lsls	r2, r3
 8003768:	0013      	movs	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	055b      	lsls	r3, r3, #21
 800377e:	4013      	ands	r3, r2
 8003780:	d100      	bne.n	8003784 <HAL_GPIO_Init+0x17c>
 8003782:	e0a0      	b.n	80038c6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003784:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_GPIO_Init+0x2dc>)
 8003786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003788:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <HAL_GPIO_Init+0x2dc>)
 800378a:	2101      	movs	r1, #1
 800378c:	430a      	orrs	r2, r1
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003790:	4a55      	ldr	r2, [pc, #340]	; (80038e8 <HAL_GPIO_Init+0x2e0>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	3302      	adds	r3, #2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	589b      	ldr	r3, [r3, r2]
 800379c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2203      	movs	r2, #3
 80037a2:	4013      	ands	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	220f      	movs	r2, #15
 80037a8:	409a      	lsls	r2, r3
 80037aa:	0013      	movs	r3, r2
 80037ac:	43da      	mvns	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	23a0      	movs	r3, #160	; 0xa0
 80037b8:	05db      	lsls	r3, r3, #23
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d01f      	beq.n	80037fe <HAL_GPIO_Init+0x1f6>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4a      	ldr	r2, [pc, #296]	; (80038ec <HAL_GPIO_Init+0x2e4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0x1f2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a49      	ldr	r2, [pc, #292]	; (80038f0 <HAL_GPIO_Init+0x2e8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x1ee>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a48      	ldr	r2, [pc, #288]	; (80038f4 <HAL_GPIO_Init+0x2ec>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x1ea>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a47      	ldr	r2, [pc, #284]	; (80038f8 <HAL_GPIO_Init+0x2f0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x1e6>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a46      	ldr	r2, [pc, #280]	; (80038fc <HAL_GPIO_Init+0x2f4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_GPIO_Init+0x1e2>
 80037e6:	2305      	movs	r3, #5
 80037e8:	e00a      	b.n	8003800 <HAL_GPIO_Init+0x1f8>
 80037ea:	2306      	movs	r3, #6
 80037ec:	e008      	b.n	8003800 <HAL_GPIO_Init+0x1f8>
 80037ee:	2304      	movs	r3, #4
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x1f8>
 80037f2:	2303      	movs	r3, #3
 80037f4:	e004      	b.n	8003800 <HAL_GPIO_Init+0x1f8>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e002      	b.n	8003800 <HAL_GPIO_Init+0x1f8>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_GPIO_Init+0x1f8>
 80037fe:	2300      	movs	r3, #0
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	2103      	movs	r1, #3
 8003804:	400a      	ands	r2, r1
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	4093      	lsls	r3, r2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003810:	4935      	ldr	r1, [pc, #212]	; (80038e8 <HAL_GPIO_Init+0x2e0>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	43da      	mvns	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	025b      	lsls	r3, r3, #9
 8003836:	4013      	ands	r3, r2
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003842:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	43da      	mvns	r2, r3
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	4013      	ands	r3, r2
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800386c:	4b24      	ldr	r3, [pc, #144]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43da      	mvns	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	035b      	lsls	r3, r3, #13
 800388a:	4013      	ands	r3, r2
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	43da      	mvns	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	039b      	lsls	r3, r3, #14
 80038b4:	4013      	ands	r3, r2
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_GPIO_Init+0x2f8>)
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3301      	adds	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	40da      	lsrs	r2, r3
 80038d4:	1e13      	subs	r3, r2, #0
 80038d6:	d000      	beq.n	80038da <HAL_GPIO_Init+0x2d2>
 80038d8:	e6a2      	b.n	8003620 <HAL_GPIO_Init+0x18>
  }
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b006      	add	sp, #24
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40010000 	.word	0x40010000
 80038ec:	50000400 	.word	0x50000400
 80038f0:	50000800 	.word	0x50000800
 80038f4:	50000c00 	.word	0x50000c00
 80038f8:	50001000 	.word	0x50001000
 80038fc:	50001c00 	.word	0x50001c00
 8003900:	40010400 	.word	0x40010400

08003904 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	0008      	movs	r0, r1
 800390e:	0011      	movs	r1, r2
 8003910:	1cbb      	adds	r3, r7, #2
 8003912:	1c02      	adds	r2, r0, #0
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	1c7b      	adds	r3, r7, #1
 8003918:	1c0a      	adds	r2, r1, #0
 800391a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800391c:	1c7b      	adds	r3, r7, #1
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003924:	1cbb      	adds	r3, r7, #2
 8003926:	881a      	ldrh	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800392c:	e003      	b.n	8003936 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800392e:	1cbb      	adds	r3, r7, #2
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	000a      	movs	r2, r1
 8003948:	1cbb      	adds	r3, r7, #2
 800394a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003952:	1cbb      	adds	r3, r7, #2
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	041a      	lsls	r2, r3, #16
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43db      	mvns	r3, r3
 8003960:	1cb9      	adds	r1, r7, #2
 8003962:	8809      	ldrh	r1, [r1, #0]
 8003964:	400b      	ands	r3, r1
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b004      	add	sp, #16
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e082      	b.n	8003a8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2241      	movs	r2, #65	; 0x41
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f7ff faeb 	bl	8002f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2241      	movs	r2, #65	; 0x41
 80039a6:	2124      	movs	r1, #36	; 0x24
 80039a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2101      	movs	r1, #1
 80039b6:	438a      	bics	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <HAL_I2C_Init+0x120>)
 80039c4:	400a      	ands	r2, r1
 80039c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4931      	ldr	r1, [pc, #196]	; (8003a98 <HAL_I2C_Init+0x124>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d108      	bne.n	80039f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	0209      	lsls	r1, r1, #8
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	e007      	b.n	8003a02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2184      	movs	r1, #132	; 0x84
 80039fc:	0209      	lsls	r1, r1, #8
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d104      	bne.n	8003a14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	491f      	ldr	r1, [pc, #124]	; (8003a9c <HAL_I2C_Init+0x128>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	491a      	ldr	r1, [pc, #104]	; (8003a98 <HAL_I2C_Init+0x124>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	0011      	movs	r1, r2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69d9      	ldr	r1, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1a      	ldr	r2, [r3, #32]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2241      	movs	r2, #65	; 0x41
 8003a78:	2120      	movs	r1, #32
 8003a7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2242      	movs	r2, #66	; 0x42
 8003a86:	2100      	movs	r1, #0
 8003a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	f0ffffff 	.word	0xf0ffffff
 8003a98:	ffff7fff 	.word	0xffff7fff
 8003a9c:	02008000 	.word	0x02008000

08003aa0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	000c      	movs	r4, r1
 8003aaa:	0010      	movs	r0, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	230a      	movs	r3, #10
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	1c22      	adds	r2, r4, #0
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	1c02      	adds	r2, r0, #0
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	1dbb      	adds	r3, r7, #6
 8003ac0:	1c0a      	adds	r2, r1, #0
 8003ac2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2241      	movs	r2, #65	; 0x41
 8003ac8:	5c9b      	ldrb	r3, [r3, r2]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d000      	beq.n	8003ad2 <HAL_I2C_Mem_Write+0x32>
 8003ad0:	e10c      	b.n	8003cec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_I2C_Mem_Write+0x42>
 8003ad8:	232c      	movs	r3, #44	; 0x2c
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0092      	lsls	r2, r2, #2
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0ff      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2240      	movs	r2, #64	; 0x40
 8003af2:	5c9b      	ldrb	r3, [r3, r2]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_I2C_Mem_Write+0x5c>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0f8      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	; 0x40
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b04:	f7ff fc7a 	bl	80033fc <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	0219      	lsls	r1, r3, #8
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2319      	movs	r3, #25
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f000 f975 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e3      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2241      	movs	r2, #65	; 0x41
 8003b2a:	2121      	movs	r1, #33	; 0x21
 8003b2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2242      	movs	r2, #66	; 0x42
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	222c      	movs	r2, #44	; 0x2c
 8003b46:	18ba      	adds	r2, r7, r2
 8003b48:	8812      	ldrh	r2, [r2, #0]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b52:	1dbb      	adds	r3, r7, #6
 8003b54:	881c      	ldrh	r4, [r3, #0]
 8003b56:	2308      	movs	r3, #8
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	881a      	ldrh	r2, [r3, #0]
 8003b5c:	230a      	movs	r3, #10
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	8819      	ldrh	r1, [r3, #0]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	0023      	movs	r3, r4
 8003b6e:	f000 f8c5 	bl	8003cfc <I2C_RequestMemoryWrite>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0b5      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	d911      	bls.n	8003bb0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	045c      	lsls	r4, r3, #17
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	8819      	ldrh	r1, [r3, #0]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0023      	movs	r3, r4
 8003baa:	f000 fa4d 	bl	8004048 <I2C_TransferConfig>
 8003bae:	e012      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	049c      	lsls	r4, r3, #18
 8003bc4:	230a      	movs	r3, #10
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	8819      	ldrh	r1, [r3, #0]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	f000 fa39 	bl	8004048 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f000 f952 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e081      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d03a      	beq.n	8003c9a <HAL_I2C_Mem_Write+0x1fa>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d136      	bne.n	8003c9a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	0013      	movs	r3, r2
 8003c36:	2200      	movs	r2, #0
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	f000 f8e5 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	1e03      	subs	r3, r0, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e053      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2bff      	cmp	r3, #255	; 0xff
 8003c4e:	d911      	bls.n	8003c74 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	22ff      	movs	r2, #255	; 0xff
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	045c      	lsls	r4, r3, #17
 8003c60:	230a      	movs	r3, #10
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	8819      	ldrh	r1, [r3, #0]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	0023      	movs	r3, r4
 8003c6e:	f000 f9eb 	bl	8004048 <I2C_TransferConfig>
 8003c72:	e012      	b.n	8003c9a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	049c      	lsls	r4, r3, #18
 8003c88:	230a      	movs	r3, #10
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	8819      	ldrh	r1, [r3, #0]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	2300      	movs	r3, #0
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	0023      	movs	r3, r4
 8003c96:	f000 f9d7 	bl	8004048 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d198      	bne.n	8003bd6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 f92a 	bl	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e01a      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	490b      	ldr	r1, [pc, #44]	; (8003cf8 <HAL_I2C_Mem_Write+0x258>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2241      	movs	r2, #65	; 0x41
 8003cd4:	2120      	movs	r1, #32
 8003cd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2242      	movs	r2, #66	; 0x42
 8003cdc:	2100      	movs	r1, #0
 8003cde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b007      	add	sp, #28
 8003cf4:	bd90      	pop	{r4, r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	fe00e800 	.word	0xfe00e800

08003cfc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b5b0      	push	{r4, r5, r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	000c      	movs	r4, r1
 8003d06:	0010      	movs	r0, r2
 8003d08:	0019      	movs	r1, r3
 8003d0a:	250a      	movs	r5, #10
 8003d0c:	197b      	adds	r3, r7, r5
 8003d0e:	1c22      	adds	r2, r4, #0
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	2308      	movs	r3, #8
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	1c02      	adds	r2, r0, #0
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	1dbb      	adds	r3, r7, #6
 8003d1c:	1c0a      	adds	r2, r1, #0
 8003d1e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d20:	1dbb      	adds	r3, r7, #6
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	045c      	lsls	r4, r3, #17
 8003d2a:	197b      	adds	r3, r7, r5
 8003d2c:	8819      	ldrh	r1, [r3, #0]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <I2C_RequestMemoryWrite+0xc4>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	0023      	movs	r3, r4
 8003d36:	f000 f987 	bl	8004048 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 f8a0 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e033      	b.n	8003db6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d56:	2308      	movs	r3, #8
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
 8003d64:	e019      	b.n	8003d9a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d66:	2308      	movs	r3, #8
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 f881 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d84:	1e03      	subs	r3, r0, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e014      	b.n	8003db6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	0013      	movs	r3, r2
 8003da4:	2200      	movs	r2, #0
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	f000 f82e 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	80002000 	.word	0x80002000

08003dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d103      	bne.n	8003de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2201      	movs	r2, #1
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]
  }
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e18:	e021      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	d01e      	beq.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7ff faec 	bl	80033fc <HAL_GetTick>
 8003e24:	0002      	movs	r2, r0
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d113      	bne.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2241      	movs	r2, #65	; 0x41
 8003e46:	2120      	movs	r1, #32
 8003e48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2242      	movs	r2, #66	; 0x42
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2240      	movs	r2, #64	; 0x40
 8003e56:	2100      	movs	r1, #0
 8003e58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00f      	b.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	425a      	negs	r2, r3
 8003e6e:	4153      	adcs	r3, r2
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	001a      	movs	r2, r3
 8003e74:	1dfb      	adds	r3, r7, #7
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d0ce      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e92:	e02b      	b.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 f86e 	bl	8003f7c <I2C_IsAcknowledgeFailed>
 8003ea0:	1e03      	subs	r3, r0, #0
 8003ea2:	d001      	beq.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e029      	b.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	d01e      	beq.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7ff faa5 	bl	80033fc <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d113      	bne.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	2220      	movs	r2, #32
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2241      	movs	r2, #65	; 0x41
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2242      	movs	r2, #66	; 0x42
 8003edc:	2100      	movs	r1, #0
 8003ede:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d1cc      	bne.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b004      	add	sp, #16
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f10:	e028      	b.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 f82f 	bl	8003f7c <I2C_IsAcknowledgeFailed>
 8003f1e:	1e03      	subs	r3, r0, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e026      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7ff fa69 	bl	80033fc <HAL_GetTick>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d113      	bne.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	2220      	movs	r2, #32
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2241      	movs	r2, #65	; 0x41
 8003f4c:	2120      	movs	r1, #32
 8003f4e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2242      	movs	r2, #66	; 0x42
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2240      	movs	r2, #64	; 0x40
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e007      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d1cf      	bne.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d151      	bne.n	800403a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f96:	e021      	b.n	8003fdc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	d01e      	beq.n	8003fdc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7ff fa2d 	bl	80033fc <HAL_GetTick>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <I2C_IsAcknowledgeFailed+0x38>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d113      	bne.n	8003fdc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	2220      	movs	r2, #32
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2241      	movs	r2, #65	; 0x41
 8003fc4:	2120      	movs	r1, #32
 8003fc6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2242      	movs	r2, #66	; 0x42
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2240      	movs	r2, #64	; 0x40
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e02f      	b.n	800403c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d1d6      	bne.n	8003f98 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7ff fee1 	bl	8003dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	490d      	ldr	r1, [pc, #52]	; (8004044 <I2C_IsAcknowledgeFailed+0xc8>)
 800400e:	400a      	ands	r2, r1
 8004010:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	2204      	movs	r2, #4
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2241      	movs	r2, #65	; 0x41
 8004022:	2120      	movs	r1, #32
 8004024:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2242      	movs	r2, #66	; 0x42
 800402a:	2100      	movs	r1, #0
 800402c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2240      	movs	r2, #64	; 0x40
 8004032:	2100      	movs	r1, #0
 8004034:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}
 8004044:	fe00e800 	.word	0xfe00e800

08004048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	0008      	movs	r0, r1
 8004052:	0011      	movs	r1, r2
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	240a      	movs	r4, #10
 8004058:	193b      	adds	r3, r7, r4
 800405a:	1c02      	adds	r2, r0, #0
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	2009      	movs	r0, #9
 8004060:	183b      	adds	r3, r7, r0
 8004062:	1c0a      	adds	r2, r1, #0
 8004064:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	0d51      	lsrs	r1, r2, #21
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	400a      	ands	r2, r1
 8004076:	490e      	ldr	r1, [pc, #56]	; (80040b0 <I2C_TransferConfig+0x68>)
 8004078:	430a      	orrs	r2, r1
 800407a:	43d2      	mvns	r2, r2
 800407c:	401a      	ands	r2, r3
 800407e:	0011      	movs	r1, r2
 8004080:	193b      	adds	r3, r7, r4
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	059b      	lsls	r3, r3, #22
 8004086:	0d9a      	lsrs	r2, r3, #22
 8004088:	183b      	adds	r3, r7, r0
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	0418      	lsls	r0, r3, #16
 800408e:	23ff      	movs	r3, #255	; 0xff
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	4003      	ands	r3, r0
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b005      	add	sp, #20
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	03ff63ff 	.word	0x03ff63ff

080040b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2241      	movs	r2, #65	; 0x41
 80040c2:	5c9b      	ldrb	r3, [r3, r2]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d138      	bne.n	800413c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2240      	movs	r2, #64	; 0x40
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e032      	b.n	800413e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	2101      	movs	r1, #1
 80040de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2241      	movs	r2, #65	; 0x41
 80040e4:	2124      	movs	r1, #36	; 0x24
 80040e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4911      	ldr	r1, [pc, #68]	; (8004148 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004104:	400a      	ands	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2101      	movs	r1, #1
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2241      	movs	r2, #65	; 0x41
 800412c:	2120      	movs	r1, #32
 800412e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
  }
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	ffffefff 	.word	0xffffefff

0800414c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2241      	movs	r2, #65	; 0x41
 800415a:	5c9b      	ldrb	r3, [r3, r2]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	d139      	bne.n	80041d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2240      	movs	r2, #64	; 0x40
 8004166:	5c9b      	ldrb	r3, [r3, r2]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800416c:	2302      	movs	r3, #2
 800416e:	e033      	b.n	80041d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	2101      	movs	r1, #1
 8004176:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2241      	movs	r2, #65	; 0x41
 800417c:	2124      	movs	r1, #36	; 0x24
 800417e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2101      	movs	r1, #1
 800418c:	438a      	bics	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2101      	movs	r1, #1
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2241      	movs	r2, #65	; 0x41
 80041c6:	2120      	movs	r1, #32
 80041c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2240      	movs	r2, #64	; 0x40
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
  }
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	b004      	add	sp, #16
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	fffff0ff 	.word	0xfffff0ff

080041e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e6:	b08b      	sub	sp, #44	; 0x2c
 80041e8:	af06      	add	r7, sp, #24
 80041ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e100      	b.n	80043f8 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a81      	ldr	r2, [pc, #516]	; (8004400 <HAL_PCD_Init+0x21c>)
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	23aa      	movs	r3, #170	; 0xaa
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	2100      	movs	r1, #0
 800420a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	0018      	movs	r0, r3
 8004210:	f007 f8ae 	bl	800b370 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a7a      	ldr	r2, [pc, #488]	; (8004400 <HAL_PCD_Init+0x21c>)
 8004218:	2103      	movs	r1, #3
 800421a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	0018      	movs	r0, r3
 8004222:	f003 f977 	bl	8007514 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	230f      	movs	r3, #15
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e058      	b.n	80042e2 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004230:	200f      	movs	r0, #15
 8004232:	183b      	adds	r3, r7, r0
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	0013      	movs	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	189b      	adds	r3, r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	18cb      	adds	r3, r1, r3
 8004244:	3301      	adds	r3, #1
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800424a:	183b      	adds	r3, r7, r0
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	0013      	movs	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	189b      	adds	r3, r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	183a      	adds	r2, r7, r0
 800425c:	7812      	ldrb	r2, [r2, #0]
 800425e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004260:	183b      	adds	r3, r7, r0
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	0004      	movs	r4, r0
 8004266:	183b      	adds	r3, r7, r0
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b298      	uxth	r0, r3
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	0013      	movs	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	189b      	adds	r3, r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	18cb      	adds	r3, r1, r3
 8004278:	3336      	adds	r3, #54	; 0x36
 800427a:	1c02      	adds	r2, r0, #0
 800427c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800427e:	193b      	adds	r3, r7, r4
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	0013      	movs	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	189b      	adds	r3, r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	18cb      	adds	r3, r1, r3
 8004290:	3303      	adds	r3, #3
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004296:	193b      	adds	r3, r7, r4
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	0013      	movs	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	189b      	adds	r3, r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	18cb      	adds	r3, r1, r3
 80042a6:	3338      	adds	r3, #56	; 0x38
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	781a      	ldrb	r2, [r3, #0]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	0013      	movs	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	18cb      	adds	r3, r1, r3
 80042bc:	333c      	adds	r3, #60	; 0x3c
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042c2:	193b      	adds	r3, r7, r4
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	0013      	movs	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	18cb      	adds	r3, r1, r3
 80042d2:	3340      	adds	r3, #64	; 0x40
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	193b      	adds	r3, r7, r4
 80042de:	3201      	adds	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	230f      	movs	r3, #15
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d39f      	bcc.n	8004230 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f0:	230f      	movs	r3, #15
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e056      	b.n	80043a8 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042fa:	240f      	movs	r4, #15
 80042fc:	193b      	adds	r3, r7, r4
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	236a      	movs	r3, #106	; 0x6a
 8004304:	33ff      	adds	r3, #255	; 0xff
 8004306:	0019      	movs	r1, r3
 8004308:	0013      	movs	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	189b      	adds	r3, r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	18c3      	adds	r3, r0, r3
 8004312:	185b      	adds	r3, r3, r1
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004318:	193b      	adds	r3, r7, r4
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	23b4      	movs	r3, #180	; 0xb4
 8004320:	0059      	lsls	r1, r3, #1
 8004322:	0013      	movs	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	189b      	adds	r3, r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	18c3      	adds	r3, r0, r3
 800432c:	185b      	adds	r3, r3, r1
 800432e:	193a      	adds	r2, r7, r4
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004334:	193b      	adds	r3, r7, r4
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	236c      	movs	r3, #108	; 0x6c
 800433c:	33ff      	adds	r3, #255	; 0xff
 800433e:	0019      	movs	r1, r3
 8004340:	0013      	movs	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	189b      	adds	r3, r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	18c3      	adds	r3, r0, r3
 800434a:	185b      	adds	r3, r3, r1
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004350:	193b      	adds	r3, r7, r4
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	23bc      	movs	r3, #188	; 0xbc
 8004358:	0059      	lsls	r1, r3, #1
 800435a:	0013      	movs	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	189b      	adds	r3, r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	18c3      	adds	r3, r0, r3
 8004364:	185b      	adds	r3, r3, r1
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800436a:	193b      	adds	r3, r7, r4
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	23be      	movs	r3, #190	; 0xbe
 8004372:	0059      	lsls	r1, r3, #1
 8004374:	0013      	movs	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	189b      	adds	r3, r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	18c3      	adds	r3, r0, r3
 800437e:	185b      	adds	r3, r3, r1
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004384:	193b      	adds	r3, r7, r4
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	23c0      	movs	r3, #192	; 0xc0
 800438c:	0059      	lsls	r1, r3, #1
 800438e:	0013      	movs	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	189b      	adds	r3, r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	18c3      	adds	r3, r0, r3
 8004398:	185b      	adds	r3, r3, r1
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800439e:	193b      	adds	r3, r7, r4
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	193b      	adds	r3, r7, r4
 80043a4:	3201      	adds	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3a1      	bcc.n	80042fa <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	466a      	mov	r2, sp
 80043be:	0011      	movs	r1, r2
 80043c0:	001a      	movs	r2, r3
 80043c2:	3210      	adds	r2, #16
 80043c4:	ca70      	ldmia	r2!, {r4, r5, r6}
 80043c6:	c170      	stmia	r1!, {r4, r5, r6}
 80043c8:	ca30      	ldmia	r2!, {r4, r5}
 80043ca:	c130      	stmia	r1!, {r4, r5}
 80043cc:	6859      	ldr	r1, [r3, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 f8b9 	bl	8007548 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	; 0x24
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a07      	ldr	r2, [pc, #28]	; (8004400 <HAL_PCD_Init+0x21c>)
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d103      	bne.n	80043f6 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f001 fb63 	bl	8005abc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b005      	add	sp, #20
 80043fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004400:	000002a9 	.word	0x000002a9

08004404 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	23aa      	movs	r3, #170	; 0xaa
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_PCD_Start+0x18>
 8004418:	2302      	movs	r3, #2
 800441a:	e014      	b.n	8004446 <HAL_PCD_Start+0x42>
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	23aa      	movs	r3, #170	; 0xaa
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	2101      	movs	r1, #1
 8004424:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0018      	movs	r0, r3
 800442c:	f003 f85c 	bl	80074e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0018      	movs	r0, r3
 8004436:	f005 f835 	bl	80094a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	23aa      	movs	r3, #170	; 0xaa
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	2100      	movs	r1, #0
 8004442:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0018      	movs	r0, r3
 800445e:	f005 f837 	bl	80094d0 <USB_ReadInterrupts>
 8004462:	0002      	movs	r2, r0
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	401a      	ands	r2, r3
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	429a      	cmp	r2, r3
 8004470:	d103      	bne.n	800447a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 fbbb 	bl	8004bf0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0018      	movs	r0, r3
 8004480:	f005 f826 	bl	80094d0 <USB_ReadInterrupts>
 8004484:	0002      	movs	r2, r0
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	401a      	ands	r2, r3
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	429a      	cmp	r2, r3
 8004492:	d114      	bne.n	80044be <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2244      	movs	r2, #68	; 0x44
 800449a:	5a9b      	ldrh	r3, [r3, r2]
 800449c:	b29a      	uxth	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	49a2      	ldr	r1, [pc, #648]	; (800472c <HAL_PCD_IRQHandler+0x2dc>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	b291      	uxth	r1, r2
 80044a8:	2244      	movs	r2, #68	; 0x44
 80044aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f006 ffe1 	bl	800b476 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2100      	movs	r1, #0
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 f945 	bl	8004748 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f005 f804 	bl	80094d0 <USB_ReadInterrupts>
 80044c8:	0002      	movs	r2, r0
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	01db      	lsls	r3, r3, #7
 80044ce:	401a      	ands	r2, r3
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	01db      	lsls	r3, r3, #7
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d10b      	bne.n	80044f0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2244      	movs	r2, #68	; 0x44
 80044de:	5a9b      	ldrh	r3, [r3, r2]
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4992      	ldr	r1, [pc, #584]	; (8004730 <HAL_PCD_IRQHandler+0x2e0>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	b291      	uxth	r1, r2
 80044ec:	2244      	movs	r2, #68	; 0x44
 80044ee:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f004 ffeb 	bl	80094d0 <USB_ReadInterrupts>
 80044fa:	0002      	movs	r2, r0
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	019b      	lsls	r3, r3, #6
 8004500:	401a      	ands	r2, r3
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	429a      	cmp	r2, r3
 8004508:	d10b      	bne.n	8004522 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2244      	movs	r2, #68	; 0x44
 8004510:	5a9b      	ldrh	r3, [r3, r2]
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4986      	ldr	r1, [pc, #536]	; (8004734 <HAL_PCD_IRQHandler+0x2e4>)
 800451a:	400a      	ands	r2, r1
 800451c:	b291      	uxth	r1, r2
 800451e:	2244      	movs	r2, #68	; 0x44
 8004520:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	f004 ffd2 	bl	80094d0 <USB_ReadInterrupts>
 800452c:	0002      	movs	r2, r0
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	015b      	lsls	r3, r3, #5
 8004532:	401a      	ands	r2, r3
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	015b      	lsls	r3, r3, #5
 8004538:	429a      	cmp	r2, r3
 800453a:	d137      	bne.n	80045ac <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	5a9b      	ldrh	r3, [r3, r2]
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2104      	movs	r1, #4
 800454c:	438a      	bics	r2, r1
 800454e:	b291      	uxth	r1, r2
 8004550:	2240      	movs	r2, #64	; 0x40
 8004552:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2240      	movs	r2, #64	; 0x40
 800455a:	5a9b      	ldrh	r3, [r3, r2]
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2108      	movs	r1, #8
 8004564:	438a      	bics	r2, r1
 8004566:	b291      	uxth	r1, r2
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	23b8      	movs	r3, #184	; 0xb8
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	5cd3      	ldrb	r3, [r2, r3]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d109      	bne.n	800458c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	23b8      	movs	r3, #184	; 0xb8
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	2100      	movs	r1, #0
 8004580:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2100      	movs	r1, #0
 8004586:	0018      	movs	r0, r3
 8004588:	f001 fac2 	bl	8005b10 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	0018      	movs	r0, r3
 8004590:	f006 ffb2 	bl	800b4f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2244      	movs	r2, #68	; 0x44
 800459a:	5a9b      	ldrh	r3, [r3, r2]
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4965      	ldr	r1, [pc, #404]	; (8004738 <HAL_PCD_IRQHandler+0x2e8>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	b291      	uxth	r1, r2
 80045a8:	2244      	movs	r2, #68	; 0x44
 80045aa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f004 ff8d 	bl	80094d0 <USB_ReadInterrupts>
 80045b6:	0002      	movs	r2, r0
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	401a      	ands	r2, r3
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d127      	bne.n	8004616 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	5a9b      	ldrh	r3, [r3, r2]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2108      	movs	r1, #8
 80045d6:	430a      	orrs	r2, r1
 80045d8:	b291      	uxth	r1, r2
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2244      	movs	r2, #68	; 0x44
 80045e4:	5a9b      	ldrh	r3, [r3, r2]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4953      	ldr	r1, [pc, #332]	; (800473c <HAL_PCD_IRQHandler+0x2ec>)
 80045ee:	400a      	ands	r2, r1
 80045f0:	b291      	uxth	r1, r2
 80045f2:	2244      	movs	r2, #68	; 0x44
 80045f4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2240      	movs	r2, #64	; 0x40
 80045fc:	5a9b      	ldrh	r3, [r3, r2]
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2104      	movs	r1, #4
 8004606:	430a      	orrs	r2, r1
 8004608:	b291      	uxth	r1, r2
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0018      	movs	r0, r3
 8004612:	f006 ff55 	bl	800b4c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0018      	movs	r0, r3
 800461c:	f004 ff58 	bl	80094d0 <USB_ReadInterrupts>
 8004620:	0002      	movs	r2, r0
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	4013      	ands	r3, r2
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d145      	bne.n	80046b6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2244      	movs	r2, #68	; 0x44
 8004630:	5a9b      	ldrh	r3, [r3, r2]
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	438a      	bics	r2, r1
 800463c:	b291      	uxth	r1, r2
 800463e:	2244      	movs	r2, #68	; 0x44
 8004640:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	23b8      	movs	r3, #184	; 0xb8
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	5cd3      	ldrb	r3, [r2, r3]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d12f      	bne.n	80046ae <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	5a9b      	ldrh	r3, [r3, r2]
 8004656:	b29a      	uxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2104      	movs	r1, #4
 800465e:	430a      	orrs	r2, r1
 8004660:	b291      	uxth	r1, r2
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	5a9b      	ldrh	r3, [r3, r2]
 800466e:	b29a      	uxth	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2108      	movs	r1, #8
 8004676:	430a      	orrs	r2, r1
 8004678:	b291      	uxth	r1, r2
 800467a:	2240      	movs	r2, #64	; 0x40
 800467c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	23b8      	movs	r3, #184	; 0xb8
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	2101      	movs	r1, #1
 8004686:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2254      	movs	r2, #84	; 0x54
 800468e:	5a9b      	ldrh	r3, [r3, r2]
 8004690:	b29b      	uxth	r3, r3
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	223c      	movs	r2, #60	; 0x3c
 8004696:	4013      	ands	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	23b9      	movs	r3, #185	; 0xb9
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2101      	movs	r1, #1
 80046a6:	0018      	movs	r0, r3
 80046a8:	f001 fa32 	bl	8005b10 <HAL_PCDEx_LPM_Callback>
 80046ac:	e003      	b.n	80046b6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f006 ff05 	bl	800b4c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	0018      	movs	r0, r3
 80046bc:	f004 ff08 	bl	80094d0 <USB_ReadInterrupts>
 80046c0:	0002      	movs	r2, r0
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	401a      	ands	r2, r3
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d10f      	bne.n	80046f0 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2244      	movs	r2, #68	; 0x44
 80046d6:	5a9b      	ldrh	r3, [r3, r2]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4918      	ldr	r1, [pc, #96]	; (8004740 <HAL_PCD_IRQHandler+0x2f0>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	b291      	uxth	r1, r2
 80046e4:	2244      	movs	r2, #68	; 0x44
 80046e6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f006 feb4 	bl	800b458 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	0018      	movs	r0, r3
 80046f6:	f004 feeb 	bl	80094d0 <USB_ReadInterrupts>
 80046fa:	0002      	movs	r2, r0
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	401a      	ands	r2, r3
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	429a      	cmp	r2, r3
 8004708:	d10b      	bne.n	8004722 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2244      	movs	r2, #68	; 0x44
 8004710:	5a9b      	ldrh	r3, [r3, r2]
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	490a      	ldr	r1, [pc, #40]	; (8004744 <HAL_PCD_IRQHandler+0x2f4>)
 800471a:	400a      	ands	r2, r1
 800471c:	b291      	uxth	r1, r2
 800471e:	2244      	movs	r2, #68	; 0x44
 8004720:	5299      	strh	r1, [r3, r2]
  }
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b002      	add	sp, #8
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	fffffbff 	.word	0xfffffbff
 8004730:	ffffbfff 	.word	0xffffbfff
 8004734:	ffffdfff 	.word	0xffffdfff
 8004738:	ffffefff 	.word	0xffffefff
 800473c:	fffff7ff 	.word	0xfffff7ff
 8004740:	fffffdff 	.word	0xfffffdff
 8004744:	fffffeff 	.word	0xfffffeff

08004748 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	000a      	movs	r2, r1
 8004752:	1cfb      	adds	r3, r7, #3
 8004754:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	23aa      	movs	r3, #170	; 0xaa
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_PCD_SetAddress+0x1e>
 8004762:	2302      	movs	r3, #2
 8004764:	e017      	b.n	8004796 <HAL_PCD_SetAddress+0x4e>
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	23aa      	movs	r3, #170	; 0xaa
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	2101      	movs	r1, #1
 800476e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1cfa      	adds	r2, r7, #3
 8004774:	2124      	movs	r1, #36	; 0x24
 8004776:	7812      	ldrb	r2, [r2, #0]
 8004778:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	1cfb      	adds	r3, r7, #3
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	0019      	movs	r1, r3
 8004784:	0010      	movs	r0, r2
 8004786:	f004 fe79 	bl	800947c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	23aa      	movs	r3, #170	; 0xaa
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	2100      	movs	r1, #0
 8004792:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800479e:	b590      	push	{r4, r7, lr}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	000c      	movs	r4, r1
 80047a8:	0010      	movs	r0, r2
 80047aa:	0019      	movs	r1, r3
 80047ac:	1cfb      	adds	r3, r7, #3
 80047ae:	1c22      	adds	r2, r4, #0
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	003b      	movs	r3, r7
 80047b4:	1c02      	adds	r2, r0, #0
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	1cbb      	adds	r3, r7, #2
 80047ba:	1c0a      	adds	r2, r1, #0
 80047bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047be:	230b      	movs	r3, #11
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047c6:	1cfb      	adds	r3, r7, #3
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	da0f      	bge.n	80047f0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d0:	1cfb      	adds	r3, r7, #3
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2207      	movs	r2, #7
 80047d6:	4013      	ands	r3, r2
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	0013      	movs	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	705a      	strb	r2, [r3, #1]
 80047ee:	e00f      	b.n	8004810 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f0:	1cfb      	adds	r3, r7, #3
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2207      	movs	r2, #7
 80047f6:	401a      	ands	r2, r3
 80047f8:	0013      	movs	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	189b      	adds	r3, r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	3369      	adds	r3, #105	; 0x69
 8004802:	33ff      	adds	r3, #255	; 0xff
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004810:	1cfb      	adds	r3, r7, #3
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2207      	movs	r2, #7
 8004816:	4013      	ands	r3, r2
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800481e:	003b      	movs	r3, r7
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1cba      	adds	r2, r7, #2
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004840:	1cbb      	adds	r3, r7, #2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d102      	bne.n	800484e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	23aa      	movs	r3, #170	; 0xaa
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	5cd3      	ldrb	r3, [r2, r3]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_PCD_EP_Open+0xc0>
 800485a:	2302      	movs	r3, #2
 800485c:	e013      	b.n	8004886 <HAL_PCD_EP_Open+0xe8>
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	23aa      	movs	r3, #170	; 0xaa
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	2101      	movs	r1, #1
 8004866:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	0011      	movs	r1, r2
 8004870:	0018      	movs	r0, r3
 8004872:	f002 fe95 	bl	80075a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	23aa      	movs	r3, #170	; 0xaa
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	2100      	movs	r1, #0
 800487e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004880:	230b      	movs	r3, #11
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	781b      	ldrb	r3, [r3, #0]
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b005      	add	sp, #20
 800488c:	bd90      	pop	{r4, r7, pc}

0800488e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	000a      	movs	r2, r1
 8004898:	1cfb      	adds	r3, r7, #3
 800489a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800489c:	1cfb      	adds	r3, r7, #3
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da0f      	bge.n	80048c6 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048a6:	1cfb      	adds	r3, r7, #3
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2207      	movs	r2, #7
 80048ac:	4013      	ands	r3, r2
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	0013      	movs	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	18d3      	adds	r3, r2, r3
 80048bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	705a      	strb	r2, [r3, #1]
 80048c4:	e00f      	b.n	80048e6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048c6:	1cfb      	adds	r3, r7, #3
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2207      	movs	r2, #7
 80048cc:	401a      	ands	r2, r3
 80048ce:	0013      	movs	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	3369      	adds	r3, #105	; 0x69
 80048d8:	33ff      	adds	r3, #255	; 0xff
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	18d3      	adds	r3, r2, r3
 80048de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80048e6:	1cfb      	adds	r3, r7, #3
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2207      	movs	r2, #7
 80048ec:	4013      	ands	r3, r2
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	23aa      	movs	r3, #170	; 0xaa
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	5cd3      	ldrb	r3, [r2, r3]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_PCD_EP_Close+0x76>
 8004900:	2302      	movs	r3, #2
 8004902:	e011      	b.n	8004928 <HAL_PCD_EP_Close+0x9a>
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	23aa      	movs	r3, #170	; 0xaa
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	2101      	movs	r1, #1
 800490c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	0011      	movs	r1, r2
 8004916:	0018      	movs	r0, r3
 8004918:	f003 f998 	bl	8007c4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	23aa      	movs	r3, #170	; 0xaa
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	2100      	movs	r1, #0
 8004924:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	0018      	movs	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	b004      	add	sp, #16
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	200b      	movs	r0, #11
 800493e:	183b      	adds	r3, r7, r0
 8004940:	1c0a      	adds	r2, r1, #0
 8004942:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004944:	0001      	movs	r1, r0
 8004946:	187b      	adds	r3, r7, r1
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2207      	movs	r2, #7
 800494c:	401a      	ands	r2, r3
 800494e:	0013      	movs	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	189b      	adds	r3, r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	3369      	adds	r3, #105	; 0x69
 8004958:	33ff      	adds	r3, #255	; 0xff
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	18d3      	adds	r3, r2, r3
 800495e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004978:	187b      	adds	r3, r7, r1
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2207      	movs	r2, #7
 800497e:	4013      	ands	r3, r2
 8004980:	b2da      	uxtb	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004986:	187b      	adds	r3, r7, r1
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2207      	movs	r2, #7
 800498c:	4013      	ands	r3, r2
 800498e:	d107      	bne.n	80049a0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f003 fb17 	bl	8007fcc <USB_EPStartXfer>
 800499e:	e006      	b.n	80049ae <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	0011      	movs	r1, r2
 80049a8:	0018      	movs	r0, r3
 80049aa:	f003 fb0f 	bl	8007fcc <USB_EPStartXfer>
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b006      	add	sp, #24
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	000a      	movs	r2, r1
 80049c2:	1cfb      	adds	r3, r7, #3
 80049c4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049c6:	1cfb      	adds	r3, r7, #3
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2207      	movs	r2, #7
 80049cc:	401a      	ands	r2, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	23c2      	movs	r3, #194	; 0xc2
 80049d2:	0059      	lsls	r1, r3, #1
 80049d4:	0013      	movs	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	18c3      	adds	r3, r0, r3
 80049de:	185b      	adds	r3, r3, r1
 80049e0:	681b      	ldr	r3, [r3, #0]
}
 80049e2:	0018      	movs	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b002      	add	sp, #8
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	200b      	movs	r0, #11
 80049f8:	183b      	adds	r3, r7, r0
 80049fa:	1c0a      	adds	r2, r1, #0
 80049fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049fe:	183b      	adds	r3, r7, r0
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2207      	movs	r2, #7
 8004a04:	4013      	ands	r3, r2
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	0013      	movs	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	18d3      	adds	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2224      	movs	r2, #36	; 0x24
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2200      	movs	r2, #0
 8004a34:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a3c:	183b      	adds	r3, r7, r0
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2207      	movs	r2, #7
 8004a42:	4013      	ands	r3, r2
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a4a:	183b      	adds	r3, r7, r0
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2207      	movs	r2, #7
 8004a50:	4013      	ands	r3, r2
 8004a52:	d107      	bne.n	8004a64 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	0011      	movs	r1, r2
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f003 fab5 	bl	8007fcc <USB_EPStartXfer>
 8004a62:	e006      	b.n	8004a72 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	0011      	movs	r1, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f003 faad 	bl	8007fcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b006      	add	sp, #24
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	000a      	movs	r2, r1
 8004a86:	1cfb      	adds	r3, r7, #3
 8004a88:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a8a:	1cfb      	adds	r3, r7, #3
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2207      	movs	r2, #7
 8004a90:	401a      	ands	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d901      	bls.n	8004a9e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e046      	b.n	8004b2c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a9e:	1cfb      	adds	r3, r7, #3
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da0f      	bge.n	8004ac8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa8:	1cfb      	adds	r3, r7, #3
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2207      	movs	r2, #7
 8004aae:	4013      	ands	r3, r2
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	0013      	movs	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	705a      	strb	r2, [r3, #1]
 8004ac6:	e00d      	b.n	8004ae4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ac8:	1cfb      	adds	r3, r7, #3
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	0013      	movs	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	3369      	adds	r3, #105	; 0x69
 8004ad6:	33ff      	adds	r3, #255	; 0xff
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	18d3      	adds	r3, r2, r3
 8004adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aea:	1cfb      	adds	r3, r7, #3
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2207      	movs	r2, #7
 8004af0:	4013      	ands	r3, r2
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	23aa      	movs	r3, #170	; 0xaa
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	5cd3      	ldrb	r3, [r2, r3]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_PCD_EP_SetStall+0x8c>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e011      	b.n	8004b2c <HAL_PCD_EP_SetStall+0xb0>
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	23aa      	movs	r3, #170	; 0xaa
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	2101      	movs	r1, #1
 8004b10:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	0011      	movs	r1, r2
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f004 fbac 	bl	8009278 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	23aa      	movs	r3, #170	; 0xaa
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	2100      	movs	r1, #0
 8004b28:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b004      	add	sp, #16
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	000a      	movs	r2, r1
 8004b3e:	1cfb      	adds	r3, r7, #3
 8004b40:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b42:	1cfb      	adds	r3, r7, #3
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	220f      	movs	r2, #15
 8004b48:	401a      	ands	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d901      	bls.n	8004b56 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e048      	b.n	8004be8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b56:	1cfb      	adds	r3, r7, #3
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da0f      	bge.n	8004b80 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b60:	1cfb      	adds	r3, r7, #3
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2207      	movs	r2, #7
 8004b66:	4013      	ands	r3, r2
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	0013      	movs	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	18d3      	adds	r3, r2, r3
 8004b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	705a      	strb	r2, [r3, #1]
 8004b7e:	e00f      	b.n	8004ba0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	1cfb      	adds	r3, r7, #3
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2207      	movs	r2, #7
 8004b86:	401a      	ands	r2, r3
 8004b88:	0013      	movs	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	189b      	adds	r3, r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	3369      	adds	r3, #105	; 0x69
 8004b92:	33ff      	adds	r3, #255	; 0xff
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	18d3      	adds	r3, r2, r3
 8004b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba6:	1cfb      	adds	r3, r7, #3
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2207      	movs	r2, #7
 8004bac:	4013      	ands	r3, r2
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	23aa      	movs	r3, #170	; 0xaa
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	5cd3      	ldrb	r3, [r2, r3]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_PCD_EP_ClrStall+0x90>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e011      	b.n	8004be8 <HAL_PCD_EP_ClrStall+0xb4>
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	23aa      	movs	r3, #170	; 0xaa
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	2101      	movs	r1, #1
 8004bcc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f004 fb9e 	bl	8009318 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	23aa      	movs	r3, #170	; 0xaa
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	2100      	movs	r1, #0
 8004be4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b004      	add	sp, #16
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b08f      	sub	sp, #60	; 0x3c
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004bf8:	e323      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
  {
    wIstr = hpcd->Instance->ISTR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	202e      	movs	r0, #46	; 0x2e
 8004c00:	183b      	adds	r3, r7, r0
 8004c02:	2144      	movs	r1, #68	; 0x44
 8004c04:	5a52      	ldrh	r2, [r2, r1]
 8004c06:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c08:	183b      	adds	r3, r7, r0
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	202d      	movs	r0, #45	; 0x2d
 8004c10:	183b      	adds	r3, r7, r0
 8004c12:	210f      	movs	r1, #15
 8004c14:	400a      	ands	r2, r1
 8004c16:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004c18:	183b      	adds	r3, r7, r0
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d000      	beq.n	8004c22 <PCD_EP_ISR_Handler+0x32>
 8004c20:	e15e      	b.n	8004ee0 <PCD_EP_ISR_Handler+0x2f0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c22:	232e      	movs	r3, #46	; 0x2e
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d152      	bne.n	8004cd4 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	200e      	movs	r0, #14
 8004c38:	183b      	adds	r3, r7, r0
 8004c3a:	49db      	ldr	r1, [pc, #876]	; (8004fa8 <PCD_EP_ISR_Handler+0x3b8>)
 8004c3c:	400a      	ands	r2, r1
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	183a      	adds	r2, r7, r0
 8004c46:	8812      	ldrh	r2, [r2, #0]
 8004c48:	49d8      	ldr	r1, [pc, #864]	; (8004fac <PCD_EP_ISR_Handler+0x3bc>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3328      	adds	r3, #40	; 0x28
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2250      	movs	r2, #80	; 0x50
 8004c5c:	5a9b      	ldrh	r3, [r3, r2]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	001a      	movs	r2, r3
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	18d2      	adds	r2, r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	18d3      	adds	r3, r2, r3
 8004c70:	4acf      	ldr	r2, [pc, #828]	; (8004fb0 <PCD_EP_ISR_Handler+0x3c0>)
 8004c72:	4694      	mov	ip, r2
 8004c74:	4463      	add	r3, ip
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	059b      	lsls	r3, r3, #22
 8004c7a:	0d9a      	lsrs	r2, r3, #22
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	18d2      	adds	r2, r2, r3
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2100      	movs	r1, #0
 8004c92:	0018      	movs	r0, r3
 8004c94:	f006 fbc2 	bl	800b41c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	; 0x24
 8004c9c:	5c9b      	ldrb	r3, [r3, r2]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d100      	bne.n	8004ca6 <PCD_EP_ISR_Handler+0xb6>
 8004ca4:	e2cd      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d000      	beq.n	8004cb0 <PCD_EP_ISR_Handler+0xc0>
 8004cae:	e2c8      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	; 0x24
 8004cb4:	5c9b      	ldrb	r3, [r3, r2]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2280      	movs	r2, #128	; 0x80
 8004cba:	4252      	negs	r2, r2
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	b291      	uxth	r1, r2
 8004cc6:	224c      	movs	r2, #76	; 0x4c
 8004cc8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2224      	movs	r2, #36	; 0x24
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]
 8004cd2:	e2b6      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3369      	adds	r3, #105	; 0x69
 8004cd8:	33ff      	adds	r3, #255	; 0xff
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	212a      	movs	r1, #42	; 0x2a
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	881a      	ldrh	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d037      	beq.n	8004d64 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2250      	movs	r2, #80	; 0x50
 8004cfa:	5a9b      	ldrh	r3, [r3, r2]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	001a      	movs	r2, r3
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	18d2      	adds	r2, r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	4aa9      	ldr	r2, [pc, #676]	; (8004fb4 <PCD_EP_ISR_Handler+0x3c4>)
 8004d10:	4694      	mov	ip, r2
 8004d12:	4463      	add	r3, ip
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	059b      	lsls	r3, r3, #22
 8004d18:	0d9a      	lsrs	r2, r3, #22
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	22ac      	movs	r2, #172	; 0xac
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	1899      	adds	r1, r3, r2
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f004 fc1d 	bl	8009572 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	2010      	movs	r0, #16
 8004d42:	183b      	adds	r3, r7, r0
 8004d44:	499c      	ldr	r1, [pc, #624]	; (8004fb8 <PCD_EP_ISR_Handler+0x3c8>)
 8004d46:	400a      	ands	r2, r1
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	183a      	adds	r2, r7, r0
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	430a      	orrs	r2, r1
 8004d56:	b292      	uxth	r2, r2
 8004d58:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f006 fb27 	bl	800b3b0 <HAL_PCD_SetupStageCallback>
 8004d62:	e26e      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d64:	232a      	movs	r3, #42	; 0x2a
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	2200      	movs	r2, #0
 8004d6a:	5e9b      	ldrsh	r3, [r3, r2]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	db00      	blt.n	8004d72 <PCD_EP_ISR_Handler+0x182>
 8004d70:	e267      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	201c      	movs	r0, #28
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	498e      	ldr	r1, [pc, #568]	; (8004fb8 <PCD_EP_ISR_Handler+0x3c8>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	183a      	adds	r2, r7, r0
 8004d8a:	8812      	ldrh	r2, [r2, #0]
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	b292      	uxth	r2, r2
 8004d92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2250      	movs	r2, #80	; 0x50
 8004d9a:	5a9b      	ldrh	r3, [r3, r2]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	001a      	movs	r2, r3
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	18d2      	adds	r2, r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	18d3      	adds	r3, r2, r3
 8004dae:	4a81      	ldr	r2, [pc, #516]	; (8004fb4 <PCD_EP_ISR_Handler+0x3c4>)
 8004db0:	4694      	mov	ip, r2
 8004db2:	4463      	add	r3, ip
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	059b      	lsls	r3, r3, #22
 8004db8:	0d9a      	lsrs	r2, r3, #22
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01a      	beq.n	8004dfc <PCD_EP_ISR_Handler+0x20c>
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	6959      	ldr	r1, [r3, #20]
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f004 fbc7 	bl	8009572 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	18d2      	adds	r2, r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2100      	movs	r1, #0
 8004df6:	0018      	movs	r0, r3
 8004df8:	f006 faef 	bl	800b3da <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2250      	movs	r2, #80	; 0x50
 8004e08:	5a9b      	ldrh	r3, [r3, r2]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	001a      	movs	r2, r3
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	189b      	adds	r3, r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	4a67      	ldr	r2, [pc, #412]	; (8004fb4 <PCD_EP_ISR_Handler+0x3c4>)
 8004e18:	4694      	mov	ip, r2
 8004e1a:	4463      	add	r3, ip
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d110      	bne.n	8004e48 <PCD_EP_ISR_Handler+0x258>
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4a63      	ldr	r2, [pc, #396]	; (8004fbc <PCD_EP_ISR_Handler+0x3cc>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	801a      	strh	r2, [r3, #0]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	4a5b      	ldr	r2, [pc, #364]	; (8004fac <PCD_EP_ISR_Handler+0x3bc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e02b      	b.n	8004ea0 <PCD_EP_ISR_Handler+0x2b0>
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e4e:	d812      	bhi.n	8004e76 <PCD_EP_ISR_Handler+0x286>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	633b      	str	r3, [r7, #48]	; 0x30
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d002      	beq.n	8004e68 <PCD_EP_ISR_Handler+0x278>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	3301      	adds	r3, #1
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	801a      	strh	r2, [r3, #0]
 8004e74:	e014      	b.n	8004ea0 <PCD_EP_ISR_Handler+0x2b0>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	221f      	movs	r2, #31
 8004e84:	4013      	ands	r3, r2
 8004e86:	d102      	bne.n	8004e8e <PCD_EP_ISR_Handler+0x29e>
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	029b      	lsls	r3, r3, #10
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	4a45      	ldr	r2, [pc, #276]	; (8004fac <PCD_EP_ISR_Handler+0x3bc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	2012      	movs	r0, #18
 8004eaa:	183b      	adds	r3, r7, r0
 8004eac:	4944      	ldr	r1, [pc, #272]	; (8004fc0 <PCD_EP_ISR_Handler+0x3d0>)
 8004eae:	400a      	ands	r2, r1
 8004eb0:	801a      	strh	r2, [r3, #0]
 8004eb2:	183b      	adds	r3, r7, r0
 8004eb4:	183a      	adds	r2, r7, r0
 8004eb6:	8812      	ldrh	r2, [r2, #0]
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0149      	lsls	r1, r1, #5
 8004ebc:	404a      	eors	r2, r1
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	183b      	adds	r3, r7, r0
 8004ec2:	183a      	adds	r2, r7, r0
 8004ec4:	8812      	ldrh	r2, [r2, #0]
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	0189      	lsls	r1, r1, #6
 8004eca:	404a      	eors	r2, r1
 8004ecc:	801a      	strh	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	183a      	adds	r2, r7, r0
 8004ed4:	8812      	ldrh	r2, [r2, #0]
 8004ed6:	493b      	ldr	r1, [pc, #236]	; (8004fc4 <PCD_EP_ISR_Handler+0x3d4>)
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	b292      	uxth	r2, r2
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e1b0      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	232d      	movs	r3, #45	; 0x2d
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	18d2      	adds	r2, r2, r3
 8004ef0:	212a      	movs	r1, #42	; 0x2a
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	8812      	ldrh	r2, [r2, #0]
 8004ef6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	2200      	movs	r2, #0
 8004efc:	5e9b      	ldrsh	r3, [r3, r2]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	db00      	blt.n	8004f04 <PCD_EP_ISR_Handler+0x314>
 8004f02:	e10f      	b.n	8005124 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	001a      	movs	r2, r3
 8004f0a:	202d      	movs	r0, #45	; 0x2d
 8004f0c:	183b      	adds	r3, r7, r0
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	18d3      	adds	r3, r2, r3
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	2428      	movs	r4, #40	; 0x28
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	4926      	ldr	r1, [pc, #152]	; (8004fb8 <PCD_EP_ISR_Handler+0x3c8>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	001a      	movs	r2, r3
 8004f28:	183b      	adds	r3, r7, r0
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	18d3      	adds	r3, r2, r3
 8004f30:	193a      	adds	r2, r7, r4
 8004f32:	8812      	ldrh	r2, [r2, #0]
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	430a      	orrs	r2, r1
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f3c:	183b      	adds	r3, r7, r0
 8004f3e:	781a      	ldrb	r2, [r3, #0]
 8004f40:	0013      	movs	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	3369      	adds	r3, #105	; 0x69
 8004f4a:	33ff      	adds	r3, #255	; 0xff
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	18d3      	adds	r3, r2, r3
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	7b1b      	ldrb	r3, [r3, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d136      	bne.n	8004fc8 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2250      	movs	r2, #80	; 0x50
 8004f60:	5a9b      	ldrh	r3, [r3, r2]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	001a      	movs	r2, r3
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	18d2      	adds	r2, r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <PCD_EP_ISR_Handler+0x3c4>)
 8004f76:	4694      	mov	ip, r2
 8004f78:	4463      	add	r3, ip
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	2136      	movs	r1, #54	; 0x36
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	0592      	lsls	r2, r2, #22
 8004f82:	0d92      	lsrs	r2, r2, #22
 8004f84:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d100      	bne.n	8004f90 <PCD_EP_ISR_Handler+0x3a0>
 8004f8e:	e0a0      	b.n	80050d2 <PCD_EP_ISR_Handler+0x4e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	6959      	ldr	r1, [r3, #20]
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	88da      	ldrh	r2, [r3, #6]
 8004f9c:	2336      	movs	r3, #54	; 0x36
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	f004 fae6 	bl	8009572 <USB_ReadPMA>
 8004fa6:	e094      	b.n	80050d2 <PCD_EP_ISR_Handler+0x4e2>
 8004fa8:	ffff8f0f 	.word	0xffff8f0f
 8004fac:	ffff8000 	.word	0xffff8000
 8004fb0:	00000402 	.word	0x00000402
 8004fb4:	00000406 	.word	0x00000406
 8004fb8:	00000f8f 	.word	0x00000f8f
 8004fbc:	ffff83ff 	.word	0xffff83ff
 8004fc0:	ffffbf8f 	.word	0xffffbf8f
 8004fc4:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	78db      	ldrb	r3, [r3, #3]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d10c      	bne.n	8004fea <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004fd0:	2336      	movs	r3, #54	; 0x36
 8004fd2:	18fc      	adds	r4, r7, r3
 8004fd4:	232a      	movs	r3, #42	; 0x2a
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	881a      	ldrh	r2, [r3, #0]
 8004fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f000 f94a 	bl	8005278 <HAL_PCD_EP_DB_Receive>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	8023      	strh	r3, [r4, #0]
 8004fe8:	e073      	b.n	80050d2 <PCD_EP_ISR_Handler+0x4e2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	001a      	movs	r2, r3
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	18d3      	adds	r3, r2, r3
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	2022      	movs	r0, #34	; 0x22
 8004ffe:	183b      	adds	r3, r7, r0
 8005000:	4997      	ldr	r1, [pc, #604]	; (8005260 <PCD_EP_ISR_Handler+0x670>)
 8005002:	400a      	ands	r2, r1
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	001a      	movs	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	18d3      	adds	r3, r2, r3
 8005014:	183a      	adds	r2, r7, r0
 8005016:	8812      	ldrh	r2, [r2, #0]
 8005018:	4992      	ldr	r1, [pc, #584]	; (8005264 <PCD_EP_ISR_Handler+0x674>)
 800501a:	430a      	orrs	r2, r1
 800501c:	b292      	uxth	r2, r2
 800501e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	001a      	movs	r2, r3
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	18d3      	adds	r3, r2, r3
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	001a      	movs	r2, r3
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	01db      	lsls	r3, r3, #7
 8005038:	4013      	ands	r3, r2
 800503a:	d025      	beq.n	8005088 <PCD_EP_ISR_Handler+0x498>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2250      	movs	r2, #80	; 0x50
 8005042:	5a9b      	ldrh	r3, [r3, r2]
 8005044:	b29b      	uxth	r3, r3
 8005046:	001a      	movs	r2, r3
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	18d2      	adds	r2, r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	18d3      	adds	r3, r2, r3
 8005056:	4a84      	ldr	r2, [pc, #528]	; (8005268 <PCD_EP_ISR_Handler+0x678>)
 8005058:	4694      	mov	ip, r2
 800505a:	4463      	add	r3, ip
 800505c:	881a      	ldrh	r2, [r3, #0]
 800505e:	2136      	movs	r1, #54	; 0x36
 8005060:	187b      	adds	r3, r7, r1
 8005062:	0592      	lsls	r2, r2, #22
 8005064:	0d92      	lsrs	r2, r2, #22
 8005066:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005068:	187b      	adds	r3, r7, r1
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d030      	beq.n	80050d2 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	6959      	ldr	r1, [r3, #20]
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	891a      	ldrh	r2, [r3, #8]
 800507c:	2336      	movs	r3, #54	; 0x36
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	f004 fa76 	bl	8009572 <USB_ReadPMA>
 8005086:	e024      	b.n	80050d2 <PCD_EP_ISR_Handler+0x4e2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2250      	movs	r2, #80	; 0x50
 800508e:	5a9b      	ldrh	r3, [r3, r2]
 8005090:	b29b      	uxth	r3, r3
 8005092:	001a      	movs	r2, r3
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	18d2      	adds	r2, r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	18d3      	adds	r3, r2, r3
 80050a2:	4a72      	ldr	r2, [pc, #456]	; (800526c <PCD_EP_ISR_Handler+0x67c>)
 80050a4:	4694      	mov	ip, r2
 80050a6:	4463      	add	r3, ip
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	2136      	movs	r1, #54	; 0x36
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	0592      	lsls	r2, r2, #22
 80050b0:	0d92      	lsrs	r2, r2, #22
 80050b2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <PCD_EP_ISR_Handler+0x4e2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	6959      	ldr	r1, [r3, #20]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	895a      	ldrh	r2, [r3, #10]
 80050c8:	2336      	movs	r3, #54	; 0x36
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	f004 fa50 	bl	8009572 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	69da      	ldr	r2, [r3, #28]
 80050d6:	2136      	movs	r1, #54	; 0x36
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	18d2      	adds	r2, r2, r3
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	187b      	adds	r3, r7, r1
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	18d2      	adds	r2, r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d006      	beq.n	8005106 <PCD_EP_ISR_Handler+0x516>
 80050f8:	2336      	movs	r3, #54	; 0x36
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d207      	bcs.n	8005116 <PCD_EP_ISR_Handler+0x526>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0011      	movs	r1, r2
 800510e:	0018      	movs	r0, r3
 8005110:	f006 f963 	bl	800b3da <HAL_PCD_DataOutStageCallback>
 8005114:	e006      	b.n	8005124 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	0011      	movs	r1, r2
 800511e:	0018      	movs	r0, r3
 8005120:	f002 ff54 	bl	8007fcc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005124:	232a      	movs	r3, #42	; 0x2a
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	4013      	ands	r3, r2
 800512e:	d100      	bne.n	8005132 <PCD_EP_ISR_Handler+0x542>
 8005130:	e087      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
      {
        ep = &hpcd->IN_ep[epindex];
 8005132:	202d      	movs	r0, #45	; 0x2d
 8005134:	183b      	adds	r3, r7, r0
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	0013      	movs	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	189b      	adds	r3, r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	18d3      	adds	r3, r2, r3
 8005146:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	001a      	movs	r2, r3
 800514e:	183b      	adds	r3, r7, r0
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	18d3      	adds	r3, r2, r3
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29a      	uxth	r2, r3
 800515a:	2420      	movs	r4, #32
 800515c:	193b      	adds	r3, r7, r4
 800515e:	4944      	ldr	r1, [pc, #272]	; (8005270 <PCD_EP_ISR_Handler+0x680>)
 8005160:	400a      	ands	r2, r1
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	001a      	movs	r2, r3
 800516a:	183b      	adds	r3, r7, r0
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	18d3      	adds	r3, r2, r3
 8005172:	193a      	adds	r2, r7, r4
 8005174:	8812      	ldrh	r2, [r2, #0]
 8005176:	493f      	ldr	r1, [pc, #252]	; (8005274 <PCD_EP_ISR_Handler+0x684>)
 8005178:	430a      	orrs	r2, r1
 800517a:	b292      	uxth	r2, r2
 800517c:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	78db      	ldrb	r3, [r3, #3]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d10a      	bne.n	800519c <PCD_EP_ISR_Handler+0x5ac>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800518a:	2b02      	cmp	r3, #2
 800518c:	d151      	bne.n	8005232 <PCD_EP_ISR_Handler+0x642>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800518e:	232a      	movs	r3, #42	; 0x2a
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	881a      	ldrh	r2, [r3, #0]
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4013      	ands	r3, r2
 800519a:	d14a      	bne.n	8005232 <PCD_EP_ISR_Handler+0x642>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2250      	movs	r2, #80	; 0x50
 80051a2:	5a9b      	ldrh	r3, [r3, r2]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	001a      	movs	r2, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	18d2      	adds	r2, r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	18d3      	adds	r3, r2, r3
 80051b6:	4a2c      	ldr	r2, [pc, #176]	; (8005268 <PCD_EP_ISR_Handler+0x678>)
 80051b8:	4694      	mov	ip, r2
 80051ba:	4463      	add	r3, ip
 80051bc:	881a      	ldrh	r2, [r3, #0]
 80051be:	211e      	movs	r1, #30
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	0592      	lsls	r2, r2, #22
 80051c4:	0d92      	lsrs	r2, r2, #22
 80051c6:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d908      	bls.n	80051e6 <PCD_EP_ISR_Handler+0x5f6>
          {
            ep->xfer_len -= TxByteNbre;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	231e      	movs	r3, #30
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	619a      	str	r2, [r3, #24]
 80051e4:	e002      	b.n	80051ec <PCD_EP_ISR_Handler+0x5fc>
          }
          else
          {
            ep->xfer_len = 0U;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <PCD_EP_ISR_Handler+0x614>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0011      	movs	r1, r2
 80051fc:	0018      	movs	r0, r3
 80051fe:	f006 f90d 	bl	800b41c <HAL_PCD_DataInStageCallback>
 8005202:	e01e      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	211e      	movs	r1, #30
 800520a:	187b      	adds	r3, r7, r1
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	18d2      	adds	r2, r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	187b      	adds	r3, r7, r1
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	18d2      	adds	r2, r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	0011      	movs	r1, r2
 800522a:	0018      	movs	r0, r3
 800522c:	f002 fece 	bl	8007fcc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005230:	e007      	b.n	8005242 <PCD_EP_ISR_Handler+0x652>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005232:	232a      	movs	r3, #42	; 0x2a
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	0018      	movs	r0, r3
 800523e:	f000 f93b 	bl	80054b8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2244      	movs	r2, #68	; 0x44
 8005248:	5a9b      	ldrh	r3, [r3, r2]
 800524a:	b29b      	uxth	r3, r3
 800524c:	b21b      	sxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	da00      	bge.n	8005254 <PCD_EP_ISR_Handler+0x664>
 8005252:	e4d2      	b.n	8004bfa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	0018      	movs	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	b00f      	add	sp, #60	; 0x3c
 800525c:	bd90      	pop	{r4, r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	ffff8f8f 	.word	0xffff8f8f
 8005264:	ffff80c0 	.word	0xffff80c0
 8005268:	00000402 	.word	0x00000402
 800526c:	00000406 	.word	0x00000406
 8005270:	ffff8f0f 	.word	0xffff8f0f
 8005274:	ffff8000 	.word	0xffff8000

08005278 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	1dbb      	adds	r3, r7, #6
 8005284:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005286:	1dbb      	adds	r3, r7, #6
 8005288:	881a      	ldrh	r2, [r3, #0]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	01db      	lsls	r3, r3, #7
 800528e:	4013      	ands	r3, r2
 8005290:	d100      	bne.n	8005294 <HAL_PCD_EP_DB_Receive+0x1c>
 8005292:	e07f      	b.n	8005394 <HAL_PCD_EP_DB_Receive+0x11c>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2250      	movs	r2, #80	; 0x50
 800529a:	5a9b      	ldrh	r3, [r3, r2]
 800529c:	b29b      	uxth	r3, r3
 800529e:	001a      	movs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	18d2      	adds	r2, r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	18d3      	adds	r3, r2, r3
 80052ae:	4a7c      	ldr	r2, [pc, #496]	; (80054a0 <HAL_PCD_EP_DB_Receive+0x228>)
 80052b0:	4694      	mov	ip, r2
 80052b2:	4463      	add	r3, ip
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	211a      	movs	r1, #26
 80052b8:	187b      	adds	r3, r7, r1
 80052ba:	0592      	lsls	r2, r2, #22
 80052bc:	0d92      	lsrs	r2, r2, #22
 80052be:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d308      	bcc.n	80052de <HAL_PCD_EP_DB_Receive+0x66>
    {
      ep->xfer_len -= count;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	231a      	movs	r3, #26
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	1ad2      	subs	r2, r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	619a      	str	r2, [r3, #24]
 80052dc:	e002      	b.n	80052e4 <HAL_PCD_EP_DB_Receive+0x6c>
    }
    else
    {
      ep->xfer_len = 0U;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2200      	movs	r2, #0
 80052e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d121      	bne.n	8005330 <HAL_PCD_EP_DB_Receive+0xb8>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	001a      	movs	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	2018      	movs	r0, #24
 8005300:	183b      	adds	r3, r7, r0
 8005302:	4968      	ldr	r1, [pc, #416]	; (80054a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005304:	400a      	ands	r2, r1
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	183b      	adds	r3, r7, r0
 800530a:	183a      	adds	r2, r7, r0
 800530c:	8812      	ldrh	r2, [r2, #0]
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	0189      	lsls	r1, r1, #6
 8005312:	404a      	eors	r2, r1
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	001a      	movs	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	18d3      	adds	r3, r2, r3
 8005324:	183a      	adds	r2, r7, r0
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	495f      	ldr	r1, [pc, #380]	; (80054a8 <HAL_PCD_EP_DB_Receive+0x230>)
 800532a:	430a      	orrs	r2, r1
 800532c:	b292      	uxth	r2, r2
 800532e:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005330:	1dbb      	adds	r3, r7, #6
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	2240      	movs	r2, #64	; 0x40
 8005336:	4013      	ands	r3, r2
 8005338:	d01a      	beq.n	8005370 <HAL_PCD_EP_DB_Receive+0xf8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	001a      	movs	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	18d3      	adds	r3, r2, r3
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29a      	uxth	r2, r3
 800534c:	2016      	movs	r0, #22
 800534e:	183b      	adds	r3, r7, r0
 8005350:	4956      	ldr	r1, [pc, #344]	; (80054ac <HAL_PCD_EP_DB_Receive+0x234>)
 8005352:	400a      	ands	r2, r1
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	001a      	movs	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	18d3      	adds	r3, r2, r3
 8005364:	183a      	adds	r2, r7, r0
 8005366:	8812      	ldrh	r2, [r2, #0]
 8005368:	4951      	ldr	r1, [pc, #324]	; (80054b0 <HAL_PCD_EP_DB_Receive+0x238>)
 800536a:	430a      	orrs	r2, r1
 800536c:	b292      	uxth	r2, r2
 800536e:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005370:	231a      	movs	r3, #26
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d100      	bne.n	800537c <HAL_PCD_EP_DB_Receive+0x104>
 800537a:	e089      	b.n	8005490 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6959      	ldr	r1, [r3, #20]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	891a      	ldrh	r2, [r3, #8]
 8005388:	231a      	movs	r3, #26
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	f004 f8f0 	bl	8009572 <USB_ReadPMA>
 8005392:	e07d      	b.n	8005490 <HAL_PCD_EP_DB_Receive+0x218>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2250      	movs	r2, #80	; 0x50
 800539a:	5a9b      	ldrh	r3, [r3, r2]
 800539c:	b29b      	uxth	r3, r3
 800539e:	001a      	movs	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	18d2      	adds	r2, r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	4a41      	ldr	r2, [pc, #260]	; (80054b4 <HAL_PCD_EP_DB_Receive+0x23c>)
 80053b0:	4694      	mov	ip, r2
 80053b2:	4463      	add	r3, ip
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	211a      	movs	r1, #26
 80053b8:	187b      	adds	r3, r7, r1
 80053ba:	0592      	lsls	r2, r2, #22
 80053bc:	0d92      	lsrs	r2, r2, #22
 80053be:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	187b      	adds	r3, r7, r1
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d308      	bcc.n	80053de <HAL_PCD_EP_DB_Receive+0x166>
    {
      ep->xfer_len -= count;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	231a      	movs	r3, #26
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	619a      	str	r2, [r3, #24]
 80053dc:	e002      	b.n	80053e4 <HAL_PCD_EP_DB_Receive+0x16c>
    }
    else
    {
      ep->xfer_len = 0U;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d121      	bne.n	8005430 <HAL_PCD_EP_DB_Receive+0x1b8>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	001a      	movs	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	18d3      	adds	r3, r2, r3
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	201e      	movs	r0, #30
 8005400:	183b      	adds	r3, r7, r0
 8005402:	4928      	ldr	r1, [pc, #160]	; (80054a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005404:	400a      	ands	r2, r1
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	183b      	adds	r3, r7, r0
 800540a:	183a      	adds	r2, r7, r0
 800540c:	8812      	ldrh	r2, [r2, #0]
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	0189      	lsls	r1, r1, #6
 8005412:	404a      	eors	r2, r1
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	001a      	movs	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	18d3      	adds	r3, r2, r3
 8005424:	183a      	adds	r2, r7, r0
 8005426:	8812      	ldrh	r2, [r2, #0]
 8005428:	491f      	ldr	r1, [pc, #124]	; (80054a8 <HAL_PCD_EP_DB_Receive+0x230>)
 800542a:	430a      	orrs	r2, r1
 800542c:	b292      	uxth	r2, r2
 800542e:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005430:	1dbb      	adds	r3, r7, #6
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	4013      	ands	r3, r2
 8005438:	d11a      	bne.n	8005470 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	001a      	movs	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	18d3      	adds	r3, r2, r3
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29a      	uxth	r2, r3
 800544c:	201c      	movs	r0, #28
 800544e:	183b      	adds	r3, r7, r0
 8005450:	4916      	ldr	r1, [pc, #88]	; (80054ac <HAL_PCD_EP_DB_Receive+0x234>)
 8005452:	400a      	ands	r2, r1
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	001a      	movs	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	18d3      	adds	r3, r2, r3
 8005464:	183a      	adds	r2, r7, r0
 8005466:	8812      	ldrh	r2, [r2, #0]
 8005468:	4911      	ldr	r1, [pc, #68]	; (80054b0 <HAL_PCD_EP_DB_Receive+0x238>)
 800546a:	430a      	orrs	r2, r1
 800546c:	b292      	uxth	r2, r2
 800546e:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005470:	231a      	movs	r3, #26
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_PCD_EP_DB_Receive+0x218>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6959      	ldr	r1, [r3, #20]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	895a      	ldrh	r2, [r3, #10]
 8005486:	231a      	movs	r3, #26
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	f004 f871 	bl	8009572 <USB_ReadPMA>
    }
  }

  return count;
 8005490:	231a      	movs	r3, #26
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	881b      	ldrh	r3, [r3, #0]
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b008      	add	sp, #32
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	00000402 	.word	0x00000402
 80054a4:	ffffbf8f 	.word	0xffffbf8f
 80054a8:	ffff8080 	.word	0xffff8080
 80054ac:	ffff8f8f 	.word	0xffff8f8f
 80054b0:	ffff80c0 	.word	0xffff80c0
 80054b4:	00000406 	.word	0x00000406

080054b8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b092      	sub	sp, #72	; 0x48
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	1dbb      	adds	r3, r7, #6
 80054c4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054c6:	1dbb      	adds	r3, r7, #6
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	4013      	ands	r3, r2
 80054ce:	d100      	bne.n	80054d2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80054d0:	e12f      	b.n	8005732 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2250      	movs	r2, #80	; 0x50
 80054d8:	5a9b      	ldrh	r3, [r3, r2]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	001a      	movs	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	18d2      	adds	r2, r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	18d3      	adds	r3, r2, r3
 80054ec:	4abc      	ldr	r2, [pc, #752]	; (80057e0 <HAL_PCD_EP_DB_Transmit+0x328>)
 80054ee:	4694      	mov	ip, r2
 80054f0:	4463      	add	r3, ip
 80054f2:	881a      	ldrh	r2, [r3, #0]
 80054f4:	212e      	movs	r1, #46	; 0x2e
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	0592      	lsls	r2, r2, #22
 80054fa:	0d92      	lsrs	r2, r2, #22
 80054fc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	187b      	adds	r3, r7, r1
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d908      	bls.n	800551c <HAL_PCD_EP_DB_Transmit+0x64>
    {
      ep->xfer_len -= TxByteNbre;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	232e      	movs	r3, #46	; 0x2e
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	1ad2      	subs	r2, r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	619a      	str	r2, [r3, #24]
 800551a:	e002      	b.n	8005522 <HAL_PCD_EP_DB_Transmit+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2200      	movs	r2, #0
 8005520:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d129      	bne.n	800557e <HAL_PCD_EP_DB_Transmit+0xc6>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	0011      	movs	r1, r2
 8005532:	0018      	movs	r0, r3
 8005534:	f005 ff72 	bl	800b41c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005538:	1dbb      	adds	r3, r7, #6
 800553a:	881a      	ldrh	r2, [r3, #0]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	01db      	lsls	r3, r3, #7
 8005540:	4013      	ands	r3, r2
 8005542:	d100      	bne.n	8005546 <HAL_PCD_EP_DB_Transmit+0x8e>
 8005544:	e231      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	001a      	movs	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	18d3      	adds	r3, r2, r3
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29a      	uxth	r2, r3
 8005558:	2012      	movs	r0, #18
 800555a:	183b      	adds	r3, r7, r0
 800555c:	49a1      	ldr	r1, [pc, #644]	; (80057e4 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800555e:	400a      	ands	r2, r1
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	001a      	movs	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	18d3      	adds	r3, r2, r3
 8005570:	183a      	adds	r2, r7, r0
 8005572:	8812      	ldrh	r2, [r2, #0]
 8005574:	499c      	ldr	r1, [pc, #624]	; (80057e8 <HAL_PCD_EP_DB_Transmit+0x330>)
 8005576:	430a      	orrs	r2, r1
 8005578:	b292      	uxth	r2, r2
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e215      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0x4f2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800557e:	1dbb      	adds	r3, r7, #6
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	01db      	lsls	r3, r3, #7
 8005586:	4013      	ands	r3, r2
 8005588:	d01a      	beq.n	80055c0 <HAL_PCD_EP_DB_Transmit+0x108>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	001a      	movs	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	18d3      	adds	r3, r2, r3
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29a      	uxth	r2, r3
 800559c:	2024      	movs	r0, #36	; 0x24
 800559e:	183b      	adds	r3, r7, r0
 80055a0:	4990      	ldr	r1, [pc, #576]	; (80057e4 <HAL_PCD_EP_DB_Transmit+0x32c>)
 80055a2:	400a      	ands	r2, r1
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	001a      	movs	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	18d3      	adds	r3, r2, r3
 80055b4:	183a      	adds	r2, r7, r0
 80055b6:	8812      	ldrh	r2, [r2, #0]
 80055b8:	498b      	ldr	r1, [pc, #556]	; (80057e8 <HAL_PCD_EP_DB_Transmit+0x330>)
 80055ba:	430a      	orrs	r2, r1
 80055bc:	b292      	uxth	r2, r2
 80055be:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	5c9b      	ldrb	r3, [r3, r2]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d000      	beq.n	80055cc <HAL_PCD_EP_DB_Transmit+0x114>
 80055ca:	e1ee      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	212e      	movs	r1, #46	; 0x2e
 80055d2:	187b      	adds	r3, r7, r1
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	18d2      	adds	r2, r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	187b      	adds	r3, r7, r1
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	18d2      	adds	r2, r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d309      	bcc.n	800560a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6a1a      	ldr	r2, [r3, #32]
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	1ad2      	subs	r2, r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	621a      	str	r2, [r3, #32]
 8005608:	e016      	b.n	8005638 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else if (ep->xfer_len_db == 0U)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d108      	bne.n	8005624 <HAL_PCD_EP_DB_Transmit+0x16c>
        {
          len = TxByteNbre;
 8005612:	232e      	movs	r3, #46	; 0x2e
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2224      	movs	r2, #36	; 0x24
 800561e:	2100      	movs	r1, #0
 8005620:	5499      	strb	r1, [r3, r2]
 8005622:	e009      	b.n	8005638 <HAL_PCD_EP_DB_Transmit+0x180>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d150      	bne.n	80056e2 <HAL_PCD_EP_DB_Transmit+0x22a>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2250      	movs	r2, #80	; 0x50
 800564c:	5a9b      	ldrh	r3, [r3, r2]
 800564e:	b29b      	uxth	r3, r3
 8005650:	001a      	movs	r2, r3
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	189b      	adds	r3, r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	00da      	lsls	r2, r3, #3
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	18d3      	adds	r3, r2, r3
 8005662:	4a5f      	ldr	r2, [pc, #380]	; (80057e0 <HAL_PCD_EP_DB_Transmit+0x328>)
 8005664:	4694      	mov	ip, r2
 8005666:	4463      	add	r3, ip
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d110      	bne.n	8005692 <HAL_PCD_EP_DB_Transmit+0x1da>
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	4a5d      	ldr	r2, [pc, #372]	; (80057ec <HAL_PCD_EP_DB_Transmit+0x334>)
 8005678:	4013      	ands	r3, r2
 800567a:	b29a      	uxth	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	4a5a      	ldr	r2, [pc, #360]	; (80057f0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8005688:	4313      	orrs	r3, r2
 800568a:	b29a      	uxth	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e044      	b.n	800571c <HAL_PCD_EP_DB_Transmit+0x264>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2b3e      	cmp	r3, #62	; 0x3e
 8005696:	d810      	bhi.n	80056ba <HAL_PCD_EP_DB_Transmit+0x202>
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	2201      	movs	r2, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	d002      	beq.n	80056ac <HAL_PCD_EP_DB_Transmit+0x1f4>
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	3301      	adds	r3, #1
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	029b      	lsls	r3, r3, #10
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	801a      	strh	r2, [r3, #0]
 80056b8:	e030      	b.n	800571c <HAL_PCD_EP_DB_Transmit+0x264>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	221f      	movs	r2, #31
 80056c4:	4013      	ands	r3, r2
 80056c6:	d102      	bne.n	80056ce <HAL_PCD_EP_DB_Transmit+0x216>
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	3b01      	subs	r3, #1
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	029b      	lsls	r3, r3, #10
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	4a46      	ldr	r2, [pc, #280]	; (80057f0 <HAL_PCD_EP_DB_Transmit+0x338>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	b29a      	uxth	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e01c      	b.n	800571c <HAL_PCD_EP_DB_Transmit+0x264>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d118      	bne.n	800571c <HAL_PCD_EP_DB_Transmit+0x264>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	623b      	str	r3, [r7, #32]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2250      	movs	r2, #80	; 0x50
 80056f6:	5a9b      	ldrh	r3, [r3, r2]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	001a      	movs	r2, r3
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	00da      	lsls	r2, r3, #3
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	18d3      	adds	r3, r2, r3
 800570c:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <HAL_PCD_EP_DB_Transmit+0x328>)
 800570e:	4694      	mov	ip, r2
 8005710:	4463      	add	r3, ip
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	b29a      	uxth	r2, r3
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6959      	ldr	r1, [r3, #20]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	891a      	ldrh	r2, [r3, #8]
 8005728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572a:	b29b      	uxth	r3, r3
 800572c:	f003 fede 	bl	80094ec <USB_WritePMA>
 8005730:	e13b      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0x4f2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2250      	movs	r2, #80	; 0x50
 8005738:	5a9b      	ldrh	r3, [r3, r2]
 800573a:	b29b      	uxth	r3, r3
 800573c:	001a      	movs	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	18d2      	adds	r2, r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	18d3      	adds	r3, r2, r3
 800574c:	4a29      	ldr	r2, [pc, #164]	; (80057f4 <HAL_PCD_EP_DB_Transmit+0x33c>)
 800574e:	4694      	mov	ip, r2
 8005750:	4463      	add	r3, ip
 8005752:	881a      	ldrh	r2, [r3, #0]
 8005754:	212e      	movs	r1, #46	; 0x2e
 8005756:	187b      	adds	r3, r7, r1
 8005758:	0592      	lsls	r2, r2, #22
 800575a:	0d92      	lsrs	r2, r2, #22
 800575c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	187b      	adds	r3, r7, r1
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d308      	bcc.n	800577c <HAL_PCD_EP_DB_Transmit+0x2c4>
    {
      ep->xfer_len -= TxByteNbre;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	232e      	movs	r3, #46	; 0x2e
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	619a      	str	r2, [r3, #24]
 800577a:	e002      	b.n	8005782 <HAL_PCD_EP_DB_Transmit+0x2ca>
    }
    else
    {
      ep->xfer_len = 0U;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d136      	bne.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x340>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	0011      	movs	r1, r2
 8005792:	0018      	movs	r0, r3
 8005794:	f005 fe42 	bl	800b41c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005798:	1dbb      	adds	r3, r7, #6
 800579a:	881a      	ldrh	r2, [r3, #0]
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	01db      	lsls	r3, r3, #7
 80057a0:	4013      	ands	r3, r2
 80057a2:	d000      	beq.n	80057a6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80057a4:	e101      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	001a      	movs	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	18d3      	adds	r3, r2, r3
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	2026      	movs	r0, #38	; 0x26
 80057ba:	183b      	adds	r3, r7, r0
 80057bc:	4909      	ldr	r1, [pc, #36]	; (80057e4 <HAL_PCD_EP_DB_Transmit+0x32c>)
 80057be:	400a      	ands	r2, r1
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	001a      	movs	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	18d3      	adds	r3, r2, r3
 80057d0:	183a      	adds	r2, r7, r0
 80057d2:	8812      	ldrh	r2, [r2, #0]
 80057d4:	4904      	ldr	r1, [pc, #16]	; (80057e8 <HAL_PCD_EP_DB_Transmit+0x330>)
 80057d6:	430a      	orrs	r2, r1
 80057d8:	b292      	uxth	r2, r2
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e0e5      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0x4f2>
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	00000402 	.word	0x00000402
 80057e4:	ffff8f8f 	.word	0xffff8f8f
 80057e8:	ffffc080 	.word	0xffffc080
 80057ec:	ffff83ff 	.word	0xffff83ff
 80057f0:	ffff8000 	.word	0xffff8000
 80057f4:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057f8:	1dbb      	adds	r3, r7, #6
 80057fa:	881a      	ldrh	r2, [r3, #0]
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	01db      	lsls	r3, r3, #7
 8005800:	4013      	ands	r3, r2
 8005802:	d11a      	bne.n	800583a <HAL_PCD_EP_DB_Transmit+0x382>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	001a      	movs	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	18d3      	adds	r3, r2, r3
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29a      	uxth	r2, r3
 8005816:	202c      	movs	r0, #44	; 0x2c
 8005818:	183b      	adds	r3, r7, r0
 800581a:	497a      	ldr	r1, [pc, #488]	; (8005a04 <HAL_PCD_EP_DB_Transmit+0x54c>)
 800581c:	400a      	ands	r2, r1
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	001a      	movs	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	183a      	adds	r2, r7, r0
 8005830:	8812      	ldrh	r2, [r2, #0]
 8005832:	4975      	ldr	r1, [pc, #468]	; (8005a08 <HAL_PCD_EP_DB_Transmit+0x550>)
 8005834:	430a      	orrs	r2, r1
 8005836:	b292      	uxth	r2, r2
 8005838:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2224      	movs	r2, #36	; 0x24
 800583e:	5c9b      	ldrb	r3, [r3, r2]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d000      	beq.n	8005846 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005844:	e0b1      	b.n	80059aa <HAL_PCD_EP_DB_Transmit+0x4f2>
      {
        ep->xfer_buff += TxByteNbre;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	212e      	movs	r1, #46	; 0x2e
 800584c:	187b      	adds	r3, r7, r1
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	18d2      	adds	r2, r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	69da      	ldr	r2, [r3, #28]
 800585a:	187b      	adds	r3, r7, r1
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	18d2      	adds	r2, r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6a1a      	ldr	r2, [r3, #32]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d309      	bcc.n	8005884 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = ep->maxpacket;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6a1a      	ldr	r2, [r3, #32]
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	1ad2      	subs	r2, r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	621a      	str	r2, [r3, #32]
 8005882:	e016      	b.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else if (ep->xfer_len_db == 0U)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <HAL_PCD_EP_DB_Transmit+0x3e6>
        {
          len = TxByteNbre;
 800588c:	232e      	movs	r3, #46	; 0x2e
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	2100      	movs	r1, #0
 800589a:	5499      	strb	r1, [r3, r2]
 800589c:	e009      	b.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x3fa>
        }
        else
        {
          len = ep->xfer_len_db;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2224      	movs	r2, #36	; 0x24
 80058ae:	2100      	movs	r1, #0
 80058b0:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d150      	bne.n	8005962 <HAL_PCD_EP_DB_Transmit+0x4aa>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	647b      	str	r3, [r7, #68]	; 0x44
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2250      	movs	r2, #80	; 0x50
 80058cc:	5a9b      	ldrh	r3, [r3, r2]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	001a      	movs	r2, r3
 80058d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	647b      	str	r3, [r7, #68]	; 0x44
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	00da      	lsls	r2, r3, #3
 80058de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e0:	18d3      	adds	r3, r2, r3
 80058e2:	4a4a      	ldr	r2, [pc, #296]	; (8005a0c <HAL_PCD_EP_DB_Transmit+0x554>)
 80058e4:	4694      	mov	ip, r2
 80058e6:	4463      	add	r3, ip
 80058e8:	643b      	str	r3, [r7, #64]	; 0x40
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <HAL_PCD_EP_DB_Transmit+0x45a>
 80058f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	4a46      	ldr	r2, [pc, #280]	; (8005a10 <HAL_PCD_EP_DB_Transmit+0x558>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	4a43      	ldr	r2, [pc, #268]	; (8005a14 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	b29a      	uxth	r2, r3
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e041      	b.n	8005996 <HAL_PCD_EP_DB_Transmit+0x4de>
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	2b3e      	cmp	r3, #62	; 0x3e
 8005916:	d810      	bhi.n	800593a <HAL_PCD_EP_DB_Transmit+0x482>
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	d002      	beq.n	800592c <HAL_PCD_EP_DB_Transmit+0x474>
 8005926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005928:	3301      	adds	r3, #1
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	b29b      	uxth	r3, r3
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	b29a      	uxth	r2, r3
 8005934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e02d      	b.n	8005996 <HAL_PCD_EP_DB_Transmit+0x4de>
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	221f      	movs	r2, #31
 8005944:	4013      	ands	r3, r2
 8005946:	d102      	bne.n	800594e <HAL_PCD_EP_DB_Transmit+0x496>
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	3b01      	subs	r3, #1
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	b29b      	uxth	r3, r3
 8005952:	029b      	lsls	r3, r3, #10
 8005954:	b29b      	uxth	r3, r3
 8005956:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <HAL_PCD_EP_DB_Transmit+0x55c>)
 8005958:	4313      	orrs	r3, r2
 800595a:	b29a      	uxth	r2, r3
 800595c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595e:	801a      	strh	r2, [r3, #0]
 8005960:	e019      	b.n	8005996 <HAL_PCD_EP_DB_Transmit+0x4de>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d115      	bne.n	8005996 <HAL_PCD_EP_DB_Transmit+0x4de>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2250      	movs	r2, #80	; 0x50
 8005970:	5a9b      	ldrh	r3, [r3, r2]
 8005972:	b29b      	uxth	r3, r3
 8005974:	001a      	movs	r2, r3
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	189b      	adds	r3, r3, r2
 800597a:	637b      	str	r3, [r7, #52]	; 0x34
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00da      	lsls	r2, r3, #3
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	18d3      	adds	r3, r2, r3
 8005986:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <HAL_PCD_EP_DB_Transmit+0x554>)
 8005988:	4694      	mov	ip, r2
 800598a:	4463      	add	r3, ip
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	b29a      	uxth	r2, r3
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6959      	ldr	r1, [r3, #20]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	895a      	ldrh	r2, [r3, #10]
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f003 fda1 	bl	80094ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	001a      	movs	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	18d3      	adds	r3, r2, r3
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	2010      	movs	r0, #16
 80059be:	183b      	adds	r3, r7, r0
 80059c0:	4915      	ldr	r1, [pc, #84]	; (8005a18 <HAL_PCD_EP_DB_Transmit+0x560>)
 80059c2:	400a      	ands	r2, r1
 80059c4:	801a      	strh	r2, [r3, #0]
 80059c6:	183b      	adds	r3, r7, r0
 80059c8:	183a      	adds	r2, r7, r0
 80059ca:	8812      	ldrh	r2, [r2, #0]
 80059cc:	2110      	movs	r1, #16
 80059ce:	404a      	eors	r2, r1
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	183b      	adds	r3, r7, r0
 80059d4:	183a      	adds	r2, r7, r0
 80059d6:	8812      	ldrh	r2, [r2, #0]
 80059d8:	2120      	movs	r1, #32
 80059da:	404a      	eors	r2, r1
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	001a      	movs	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	18d3      	adds	r3, r2, r3
 80059ec:	183a      	adds	r2, r7, r0
 80059ee:	8812      	ldrh	r2, [r2, #0]
 80059f0:	490a      	ldr	r1, [pc, #40]	; (8005a1c <HAL_PCD_EP_DB_Transmit+0x564>)
 80059f2:	430a      	orrs	r2, r1
 80059f4:	b292      	uxth	r2, r2
 80059f6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b012      	add	sp, #72	; 0x48
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	ffff8f8f 	.word	0xffff8f8f
 8005a08:	ffffc080 	.word	0xffffc080
 8005a0c:	00000406 	.word	0x00000406
 8005a10:	ffff83ff 	.word	0xffff83ff
 8005a14:	ffff8000 	.word	0xffff8000
 8005a18:	ffff8fbf 	.word	0xffff8fbf
 8005a1c:	ffff8080 	.word	0xffff8080

08005a20 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	0008      	movs	r0, r1
 8005a2a:	0011      	movs	r1, r2
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	240a      	movs	r4, #10
 8005a30:	193b      	adds	r3, r7, r4
 8005a32:	1c02      	adds	r2, r0, #0
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	2308      	movs	r3, #8
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	1c0a      	adds	r2, r1, #0
 8005a3c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005a3e:	193b      	adds	r3, r7, r4
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	4013      	ands	r3, r2
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4c:	230a      	movs	r3, #10
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	2207      	movs	r2, #7
 8005a54:	4013      	ands	r3, r2
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	0013      	movs	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	189b      	adds	r3, r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	18d3      	adds	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e00b      	b.n	8005a80 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a68:	230a      	movs	r3, #10
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	881a      	ldrh	r2, [r3, #0]
 8005a6e:	0013      	movs	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	3369      	adds	r3, #105	; 0x69
 8005a78:	33ff      	adds	r3, #255	; 0xff
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	18d3      	adds	r3, r2, r3
 8005a7e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a80:	2308      	movs	r3, #8
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d107      	bne.n	8005a9a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	80da      	strh	r2, [r3, #6]
 8005a98:	e00b      	b.n	8005ab2 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	0c1b      	lsrs	r3, r3, #16
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b007      	add	sp, #28
 8005aba:	bd90      	pop	{r4, r7, pc}

08005abc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	23ba      	movs	r3, #186	; 0xba
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	23b8      	movs	r3, #184	; 0xb8
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	2100      	movs	r1, #0
 8005adc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2254      	movs	r2, #84	; 0x54
 8005ae2:	5a9b      	ldrh	r3, [r3, r2]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	b299      	uxth	r1, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2254      	movs	r2, #84	; 0x54
 8005af0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2254      	movs	r2, #84	; 0x54
 8005af6:	5a9b      	ldrh	r3, [r3, r2]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2202      	movs	r2, #2
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b299      	uxth	r1, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2254      	movs	r2, #84	; 0x54
 8005b04:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	000a      	movs	r2, r1
 8005b1a:	1cfb      	adds	r3, r7, #3
 8005b1c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	46bd      	mov	sp, r7
 8005b22:	b002      	add	sp, #8
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b28:	b5b0      	push	{r4, r5, r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f000 fbbc 	bl	80062b4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b3c:	4bc8      	ldr	r3, [pc, #800]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	220c      	movs	r2, #12
 8005b42:	4013      	ands	r3, r2
 8005b44:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b46:	4bc6      	ldr	r3, [pc, #792]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	025b      	lsls	r3, r3, #9
 8005b4e:	4013      	ands	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2201      	movs	r2, #1
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d100      	bne.n	8005b5e <HAL_RCC_OscConfig+0x36>
 8005b5c:	e07e      	b.n	8005c5c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d007      	beq.n	8005b74 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d112      	bne.n	8005b90 <HAL_RCC_OscConfig+0x68>
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	025b      	lsls	r3, r3, #9
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d10d      	bne.n	8005b90 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b74:	4bba      	ldr	r3, [pc, #744]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d100      	bne.n	8005b82 <HAL_RCC_OscConfig+0x5a>
 8005b80:	e06b      	b.n	8005c5a <HAL_RCC_OscConfig+0x132>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d167      	bne.n	8005c5a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f000 fb92 	bl	80062b4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	025b      	lsls	r3, r3, #9
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_OscConfig+0x84>
 8005b9c:	4bb0      	ldr	r3, [pc, #704]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4baf      	ldr	r3, [pc, #700]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	0249      	lsls	r1, r1, #9
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e027      	b.n	8005bfc <HAL_RCC_OscConfig+0xd4>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	23a0      	movs	r3, #160	; 0xa0
 8005bb2:	02db      	lsls	r3, r3, #11
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d10e      	bne.n	8005bd6 <HAL_RCC_OscConfig+0xae>
 8005bb8:	4ba9      	ldr	r3, [pc, #676]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4ba8      	ldr	r3, [pc, #672]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bbe:	2180      	movs	r1, #128	; 0x80
 8005bc0:	02c9      	lsls	r1, r1, #11
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	4ba6      	ldr	r3, [pc, #664]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4ba5      	ldr	r3, [pc, #660]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	0249      	lsls	r1, r1, #9
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e012      	b.n	8005bfc <HAL_RCC_OscConfig+0xd4>
 8005bd6:	4ba2      	ldr	r3, [pc, #648]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4ba1      	ldr	r3, [pc, #644]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bdc:	49a1      	ldr	r1, [pc, #644]	; (8005e64 <HAL_RCC_OscConfig+0x33c>)
 8005bde:	400a      	ands	r2, r1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	4b9f      	ldr	r3, [pc, #636]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	2380      	movs	r3, #128	; 0x80
 8005be8:	025b      	lsls	r3, r3, #9
 8005bea:	4013      	ands	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4b9b      	ldr	r3, [pc, #620]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4b9a      	ldr	r3, [pc, #616]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005bf6:	499c      	ldr	r1, [pc, #624]	; (8005e68 <HAL_RCC_OscConfig+0x340>)
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d015      	beq.n	8005c30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fd fbfa 	bl	80033fc <HAL_GetTick>
 8005c08:	0003      	movs	r3, r0
 8005c0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c0c:	e009      	b.n	8005c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c0e:	f7fd fbf5 	bl	80033fc <HAL_GetTick>
 8005c12:	0002      	movs	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b64      	cmp	r3, #100	; 0x64
 8005c1a:	d902      	bls.n	8005c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	f000 fb49 	bl	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c22:	4b8f      	ldr	r3, [pc, #572]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	029b      	lsls	r3, r3, #10
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d0ef      	beq.n	8005c0e <HAL_RCC_OscConfig+0xe6>
 8005c2e:	e015      	b.n	8005c5c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fd fbe4 	bl	80033fc <HAL_GetTick>
 8005c34:	0003      	movs	r3, r0
 8005c36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c3a:	f7fd fbdf 	bl	80033fc <HAL_GetTick>
 8005c3e:	0002      	movs	r2, r0
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b64      	cmp	r3, #100	; 0x64
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e333      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c4c:	4b84      	ldr	r3, [pc, #528]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	029b      	lsls	r3, r3, #10
 8005c54:	4013      	ands	r3, r2
 8005c56:	d1f0      	bne.n	8005c3a <HAL_RCC_OscConfig+0x112>
 8005c58:	e000      	b.n	8005c5c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2202      	movs	r2, #2
 8005c62:	4013      	ands	r3, r2
 8005c64:	d100      	bne.n	8005c68 <HAL_RCC_OscConfig+0x140>
 8005c66:	e098      	b.n	8005d9a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2220      	movs	r2, #32
 8005c72:	4013      	ands	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005c76:	4b7a      	ldr	r3, [pc, #488]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b79      	ldr	r3, [pc, #484]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005c7c:	2120      	movs	r1, #32
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	2220      	movs	r2, #32
 8005c86:	4393      	bics	r3, r2
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d13d      	bne.n	8005d12 <HAL_RCC_OscConfig+0x1ea>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d13a      	bne.n	8005d12 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c9c:	4b70      	ldr	r3, [pc, #448]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x188>
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e301      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb0:	4b6b      	ldr	r3, [pc, #428]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a6d      	ldr	r2, [pc, #436]	; (8005e6c <HAL_RCC_OscConfig+0x344>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	0019      	movs	r1, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	021a      	lsls	r2, r3, #8
 8005cc0:	4b67      	ldr	r3, [pc, #412]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005cc6:	4b66      	ldr	r3, [pc, #408]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2209      	movs	r2, #9
 8005ccc:	4393      	bics	r3, r2
 8005cce:	0019      	movs	r1, r3
 8005cd0:	4b63      	ldr	r3, [pc, #396]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cd8:	f000 fc20 	bl	800651c <HAL_RCC_GetSysClockFreq>
 8005cdc:	0001      	movs	r1, r0
 8005cde:	4b60      	ldr	r3, [pc, #384]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	220f      	movs	r2, #15
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	4a61      	ldr	r2, [pc, #388]	; (8005e70 <HAL_RCC_OscConfig+0x348>)
 8005cea:	5cd3      	ldrb	r3, [r2, r3]
 8005cec:	000a      	movs	r2, r1
 8005cee:	40da      	lsrs	r2, r3
 8005cf0:	4b60      	ldr	r3, [pc, #384]	; (8005e74 <HAL_RCC_OscConfig+0x34c>)
 8005cf2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8005cf4:	2513      	movs	r5, #19
 8005cf6:	197c      	adds	r4, r7, r5
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f7fd fb39 	bl	8003370 <HAL_InitTick>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005d02:	197b      	adds	r3, r7, r5
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d047      	beq.n	8005d9a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005d0a:	2313      	movs	r3, #19
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	e2d0      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d027      	beq.n	8005d68 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005d18:	4b51      	ldr	r3, [pc, #324]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2209      	movs	r2, #9
 8005d1e:	4393      	bics	r3, r2
 8005d20:	0019      	movs	r1, r3
 8005d22:	4b4f      	ldr	r3, [pc, #316]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d26:	430a      	orrs	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2a:	f7fd fb67 	bl	80033fc <HAL_GetTick>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d34:	f7fd fb62 	bl	80033fc <HAL_GetTick>
 8005d38:	0002      	movs	r2, r0
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e2b6      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d46:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d0f1      	beq.n	8005d34 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a45      	ldr	r2, [pc, #276]	; (8005e6c <HAL_RCC_OscConfig+0x344>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	0019      	movs	r1, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	021a      	lsls	r2, r3, #8
 8005d60:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	e018      	b.n	8005d9a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d68:	4b3d      	ldr	r3, [pc, #244]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b3c      	ldr	r3, [pc, #240]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d6e:	2101      	movs	r1, #1
 8005d70:	438a      	bics	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d74:	f7fd fb42 	bl	80033fc <HAL_GetTick>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d7e:	f7fd fb3d 	bl	80033fc <HAL_GetTick>
 8005d82:	0002      	movs	r2, r0
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e291      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d90:	4b33      	ldr	r3, [pc, #204]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2204      	movs	r2, #4
 8005d96:	4013      	ands	r3, r2
 8005d98:	d1f1      	bne.n	8005d7e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	4013      	ands	r3, r2
 8005da2:	d100      	bne.n	8005da6 <HAL_RCC_OscConfig+0x27e>
 8005da4:	e09f      	b.n	8005ee6 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d13f      	bne.n	8005e2c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dac:	4b2c      	ldr	r3, [pc, #176]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	2380      	movs	r3, #128	; 0x80
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4013      	ands	r3, r2
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x29c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e277      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dc4:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <HAL_RCC_OscConfig+0x350>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd2:	4b23      	ldr	r3, [pc, #140]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dd8:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	0a19      	lsrs	r1, r3, #8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	061a      	lsls	r2, r3, #24
 8005de6:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	0b5b      	lsrs	r3, r3, #13
 8005df2:	3301      	adds	r3, #1
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	0212      	lsls	r2, r2, #8
 8005df8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005dfa:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	210f      	movs	r1, #15
 8005e02:	400b      	ands	r3, r1
 8005e04:	491a      	ldr	r1, [pc, #104]	; (8005e70 <HAL_RCC_OscConfig+0x348>)
 8005e06:	5ccb      	ldrb	r3, [r1, r3]
 8005e08:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <HAL_RCC_OscConfig+0x34c>)
 8005e0c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005e0e:	2513      	movs	r5, #19
 8005e10:	197c      	adds	r4, r7, r5
 8005e12:	2000      	movs	r0, #0
 8005e14:	f7fd faac 	bl	8003370 <HAL_InitTick>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005e1c:	197b      	adds	r3, r7, r5
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d060      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8005e24:	2313      	movs	r3, #19
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	e243      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d03e      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_RCC_OscConfig+0x338>)
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	0049      	lsls	r1, r1, #1
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e42:	f7fd fadb 	bl	80033fc <HAL_GetTick>
 8005e46:	0003      	movs	r3, r0
 8005e48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e4a:	e017      	b.n	8005e7c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e4c:	f7fd fad6 	bl	80033fc <HAL_GetTick>
 8005e50:	0002      	movs	r2, r0
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d910      	bls.n	8005e7c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e22a      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	40021000 	.word	0x40021000
 8005e64:	fffeffff 	.word	0xfffeffff
 8005e68:	fffbffff 	.word	0xfffbffff
 8005e6c:	ffffe0ff 	.word	0xffffe0ff
 8005e70:	0800f9d0 	.word	0x0800f9d0
 8005e74:	20000008 	.word	0x20000008
 8005e78:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e7c:	4bc6      	ldr	r3, [pc, #792]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4013      	ands	r3, r2
 8005e86:	d0e1      	beq.n	8005e4c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e88:	4bc3      	ldr	r3, [pc, #780]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4ac3      	ldr	r2, [pc, #780]	; (800619c <HAL_RCC_OscConfig+0x674>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	0019      	movs	r1, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e96:	4bc0      	ldr	r3, [pc, #768]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e9c:	4bbe      	ldr	r3, [pc, #760]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	0a19      	lsrs	r1, r3, #8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	061a      	lsls	r2, r3, #24
 8005eaa:	4bbb      	ldr	r3, [pc, #748]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	e019      	b.n	8005ee6 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005eb2:	4bb9      	ldr	r3, [pc, #740]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4bb8      	ldr	r3, [pc, #736]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005eb8:	49b9      	ldr	r1, [pc, #740]	; (80061a0 <HAL_RCC_OscConfig+0x678>)
 8005eba:	400a      	ands	r2, r1
 8005ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebe:	f7fd fa9d 	bl	80033fc <HAL_GetTick>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ec8:	f7fd fa98 	bl	80033fc <HAL_GetTick>
 8005ecc:	0002      	movs	r2, r0
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e1ec      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005eda:	4baf      	ldr	r3, [pc, #700]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	2380      	movs	r3, #128	; 0x80
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2208      	movs	r2, #8
 8005eec:	4013      	ands	r3, r2
 8005eee:	d036      	beq.n	8005f5e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d019      	beq.n	8005f2c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef8:	4ba7      	ldr	r3, [pc, #668]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005efc:	4ba6      	ldr	r3, [pc, #664]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005efe:	2101      	movs	r1, #1
 8005f00:	430a      	orrs	r2, r1
 8005f02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f04:	f7fd fa7a 	bl	80033fc <HAL_GetTick>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f0e:	f7fd fa75 	bl	80033fc <HAL_GetTick>
 8005f12:	0002      	movs	r2, r0
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e1c9      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f20:	4b9d      	ldr	r3, [pc, #628]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f24:	2202      	movs	r2, #2
 8005f26:	4013      	ands	r3, r2
 8005f28:	d0f1      	beq.n	8005f0e <HAL_RCC_OscConfig+0x3e6>
 8005f2a:	e018      	b.n	8005f5e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f2c:	4b9a      	ldr	r3, [pc, #616]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f30:	4b99      	ldr	r3, [pc, #612]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005f32:	2101      	movs	r1, #1
 8005f34:	438a      	bics	r2, r1
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f38:	f7fd fa60 	bl	80033fc <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f42:	f7fd fa5b 	bl	80033fc <HAL_GetTick>
 8005f46:	0002      	movs	r2, r0
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e1af      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f54:	4b90      	ldr	r3, [pc, #576]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f58:	2202      	movs	r2, #2
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d1f1      	bne.n	8005f42 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2204      	movs	r2, #4
 8005f64:	4013      	ands	r3, r2
 8005f66:	d100      	bne.n	8005f6a <HAL_RCC_OscConfig+0x442>
 8005f68:	e0af      	b.n	80060ca <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6a:	2323      	movs	r3, #35	; 0x23
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f72:	4b89      	ldr	r3, [pc, #548]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	055b      	lsls	r3, r3, #21
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	4b86      	ldr	r3, [pc, #536]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f82:	4b85      	ldr	r3, [pc, #532]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	0549      	lsls	r1, r1, #21
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f8c:	2323      	movs	r3, #35	; 0x23
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f94:	4b83      	ldr	r3, [pc, #524]	; (80061a4 <HAL_RCC_OscConfig+0x67c>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d11a      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fa0:	4b80      	ldr	r3, [pc, #512]	; (80061a4 <HAL_RCC_OscConfig+0x67c>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4b7f      	ldr	r3, [pc, #508]	; (80061a4 <HAL_RCC_OscConfig+0x67c>)
 8005fa6:	2180      	movs	r1, #128	; 0x80
 8005fa8:	0049      	lsls	r1, r1, #1
 8005faa:	430a      	orrs	r2, r1
 8005fac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fae:	f7fd fa25 	bl	80033fc <HAL_GetTick>
 8005fb2:	0003      	movs	r3, r0
 8005fb4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb8:	f7fd fa20 	bl	80033fc <HAL_GetTick>
 8005fbc:	0002      	movs	r2, r0
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	; 0x64
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e174      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fca:	4b76      	ldr	r3, [pc, #472]	; (80061a4 <HAL_RCC_OscConfig+0x67c>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	2380      	movs	r3, #128	; 0x80
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x4ca>
 8005fe2:	4b6d      	ldr	r3, [pc, #436]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005fe8:	2180      	movs	r1, #128	; 0x80
 8005fea:	0049      	lsls	r1, r1, #1
 8005fec:	430a      	orrs	r2, r1
 8005fee:	651a      	str	r2, [r3, #80]	; 0x50
 8005ff0:	e031      	b.n	8006056 <HAL_RCC_OscConfig+0x52e>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x4ec>
 8005ffa:	4b67      	ldr	r3, [pc, #412]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8005ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ffe:	4b66      	ldr	r3, [pc, #408]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006000:	4967      	ldr	r1, [pc, #412]	; (80061a0 <HAL_RCC_OscConfig+0x678>)
 8006002:	400a      	ands	r2, r1
 8006004:	651a      	str	r2, [r3, #80]	; 0x50
 8006006:	4b64      	ldr	r3, [pc, #400]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800600a:	4b63      	ldr	r3, [pc, #396]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 800600c:	4966      	ldr	r1, [pc, #408]	; (80061a8 <HAL_RCC_OscConfig+0x680>)
 800600e:	400a      	ands	r2, r1
 8006010:	651a      	str	r2, [r3, #80]	; 0x50
 8006012:	e020      	b.n	8006056 <HAL_RCC_OscConfig+0x52e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	23a0      	movs	r3, #160	; 0xa0
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	429a      	cmp	r2, r3
 800601e:	d10e      	bne.n	800603e <HAL_RCC_OscConfig+0x516>
 8006020:	4b5d      	ldr	r3, [pc, #372]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006024:	4b5c      	ldr	r3, [pc, #368]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006026:	2180      	movs	r1, #128	; 0x80
 8006028:	00c9      	lsls	r1, r1, #3
 800602a:	430a      	orrs	r2, r1
 800602c:	651a      	str	r2, [r3, #80]	; 0x50
 800602e:	4b5a      	ldr	r3, [pc, #360]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006032:	4b59      	ldr	r3, [pc, #356]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006034:	2180      	movs	r1, #128	; 0x80
 8006036:	0049      	lsls	r1, r1, #1
 8006038:	430a      	orrs	r2, r1
 800603a:	651a      	str	r2, [r3, #80]	; 0x50
 800603c:	e00b      	b.n	8006056 <HAL_RCC_OscConfig+0x52e>
 800603e:	4b56      	ldr	r3, [pc, #344]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006042:	4b55      	ldr	r3, [pc, #340]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006044:	4956      	ldr	r1, [pc, #344]	; (80061a0 <HAL_RCC_OscConfig+0x678>)
 8006046:	400a      	ands	r2, r1
 8006048:	651a      	str	r2, [r3, #80]	; 0x50
 800604a:	4b53      	ldr	r3, [pc, #332]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 800604c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800604e:	4b52      	ldr	r3, [pc, #328]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006050:	4955      	ldr	r1, [pc, #340]	; (80061a8 <HAL_RCC_OscConfig+0x680>)
 8006052:	400a      	ands	r2, r1
 8006054:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d015      	beq.n	800608a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800605e:	f7fd f9cd 	bl	80033fc <HAL_GetTick>
 8006062:	0003      	movs	r3, r0
 8006064:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006066:	e009      	b.n	800607c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fd f9c8 	bl	80033fc <HAL_GetTick>
 800606c:	0002      	movs	r2, r0
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	4a4e      	ldr	r2, [pc, #312]	; (80061ac <HAL_RCC_OscConfig+0x684>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e11b      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800607c:	4b46      	ldr	r3, [pc, #280]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 800607e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4013      	ands	r3, r2
 8006086:	d0ef      	beq.n	8006068 <HAL_RCC_OscConfig+0x540>
 8006088:	e014      	b.n	80060b4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608a:	f7fd f9b7 	bl	80033fc <HAL_GetTick>
 800608e:	0003      	movs	r3, r0
 8006090:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006092:	e009      	b.n	80060a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fd f9b2 	bl	80033fc <HAL_GetTick>
 8006098:	0002      	movs	r2, r0
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	4a43      	ldr	r2, [pc, #268]	; (80061ac <HAL_RCC_OscConfig+0x684>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e105      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060a8:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 80060aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4013      	ands	r3, r2
 80060b2:	d1ef      	bne.n	8006094 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060b4:	2323      	movs	r3, #35	; 0x23
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d105      	bne.n	80060ca <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060be:	4b36      	ldr	r3, [pc, #216]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 80060c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c2:	4b35      	ldr	r3, [pc, #212]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 80060c4:	493a      	ldr	r1, [pc, #232]	; (80061b0 <HAL_RCC_OscConfig+0x688>)
 80060c6:	400a      	ands	r2, r1
 80060c8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2220      	movs	r2, #32
 80060d0:	4013      	ands	r3, r2
 80060d2:	d049      	beq.n	8006168 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d026      	beq.n	800612a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80060dc:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 80060e2:	2101      	movs	r1, #1
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 80060ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ec:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 80060ee:	2101      	movs	r1, #1
 80060f0:	430a      	orrs	r2, r1
 80060f2:	635a      	str	r2, [r3, #52]	; 0x34
 80060f4:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <HAL_RCC_OscConfig+0x68c>)
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <HAL_RCC_OscConfig+0x68c>)
 80060fa:	2180      	movs	r1, #128	; 0x80
 80060fc:	0189      	lsls	r1, r1, #6
 80060fe:	430a      	orrs	r2, r1
 8006100:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006102:	f7fd f97b 	bl	80033fc <HAL_GetTick>
 8006106:	0003      	movs	r3, r0
 8006108:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800610c:	f7fd f976 	bl	80033fc <HAL_GetTick>
 8006110:	0002      	movs	r2, r0
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e0ca      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800611e:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2202      	movs	r2, #2
 8006124:	4013      	ands	r3, r2
 8006126:	d0f1      	beq.n	800610c <HAL_RCC_OscConfig+0x5e4>
 8006128:	e01e      	b.n	8006168 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800612a:	4b1b      	ldr	r3, [pc, #108]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006130:	2101      	movs	r1, #1
 8006132:	438a      	bics	r2, r1
 8006134:	609a      	str	r2, [r3, #8]
 8006136:	4b1f      	ldr	r3, [pc, #124]	; (80061b4 <HAL_RCC_OscConfig+0x68c>)
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <HAL_RCC_OscConfig+0x68c>)
 800613c:	491e      	ldr	r1, [pc, #120]	; (80061b8 <HAL_RCC_OscConfig+0x690>)
 800613e:	400a      	ands	r2, r1
 8006140:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006142:	f7fd f95b 	bl	80033fc <HAL_GetTick>
 8006146:	0003      	movs	r3, r0
 8006148:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800614c:	f7fd f956 	bl	80033fc <HAL_GetTick>
 8006150:	0002      	movs	r2, r0
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0aa      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2202      	movs	r2, #2
 8006164:	4013      	ands	r3, r2
 8006166:	d1f1      	bne.n	800614c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	d100      	bne.n	8006172 <HAL_RCC_OscConfig+0x64a>
 8006170:	e09f      	b.n	80062b2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b0c      	cmp	r3, #12
 8006176:	d100      	bne.n	800617a <HAL_RCC_OscConfig+0x652>
 8006178:	e078      	b.n	800626c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	2b02      	cmp	r3, #2
 8006180:	d159      	bne.n	8006236 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006182:	4b05      	ldr	r3, [pc, #20]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b04      	ldr	r3, [pc, #16]	; (8006198 <HAL_RCC_OscConfig+0x670>)
 8006188:	490c      	ldr	r1, [pc, #48]	; (80061bc <HAL_RCC_OscConfig+0x694>)
 800618a:	400a      	ands	r2, r1
 800618c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618e:	f7fd f935 	bl	80033fc <HAL_GetTick>
 8006192:	0003      	movs	r3, r0
 8006194:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006196:	e01c      	b.n	80061d2 <HAL_RCC_OscConfig+0x6aa>
 8006198:	40021000 	.word	0x40021000
 800619c:	ffff1fff 	.word	0xffff1fff
 80061a0:	fffffeff 	.word	0xfffffeff
 80061a4:	40007000 	.word	0x40007000
 80061a8:	fffffbff 	.word	0xfffffbff
 80061ac:	00001388 	.word	0x00001388
 80061b0:	efffffff 	.word	0xefffffff
 80061b4:	40010000 	.word	0x40010000
 80061b8:	ffffdfff 	.word	0xffffdfff
 80061bc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fd f91c 	bl	80033fc <HAL_GetTick>
 80061c4:	0002      	movs	r2, r0
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e070      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80061d2:	4b3a      	ldr	r3, [pc, #232]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	049b      	lsls	r3, r3, #18
 80061da:	4013      	ands	r3, r2
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061de:	4b37      	ldr	r3, [pc, #220]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	4a37      	ldr	r2, [pc, #220]	; (80062c0 <HAL_RCC_OscConfig+0x798>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	0019      	movs	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f6:	431a      	orrs	r2, r3
 80061f8:	4b30      	ldr	r3, [pc, #192]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 80061fa:	430a      	orrs	r2, r1
 80061fc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061fe:	4b2f      	ldr	r3, [pc, #188]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b2e      	ldr	r3, [pc, #184]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 8006204:	2180      	movs	r1, #128	; 0x80
 8006206:	0449      	lsls	r1, r1, #17
 8006208:	430a      	orrs	r2, r1
 800620a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620c:	f7fd f8f6 	bl	80033fc <HAL_GetTick>
 8006210:	0003      	movs	r3, r0
 8006212:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006216:	f7fd f8f1 	bl	80033fc <HAL_GetTick>
 800621a:	0002      	movs	r2, r0
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e045      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006228:	4b24      	ldr	r3, [pc, #144]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	049b      	lsls	r3, r3, #18
 8006230:	4013      	ands	r3, r2
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x6ee>
 8006234:	e03d      	b.n	80062b2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006236:	4b21      	ldr	r3, [pc, #132]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b20      	ldr	r3, [pc, #128]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 800623c:	4921      	ldr	r1, [pc, #132]	; (80062c4 <HAL_RCC_OscConfig+0x79c>)
 800623e:	400a      	ands	r2, r1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006242:	f7fd f8db 	bl	80033fc <HAL_GetTick>
 8006246:	0003      	movs	r3, r0
 8006248:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624c:	f7fd f8d6 	bl	80033fc <HAL_GetTick>
 8006250:	0002      	movs	r2, r0
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e02a      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800625e:	4b17      	ldr	r3, [pc, #92]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	049b      	lsls	r3, r3, #18
 8006266:	4013      	ands	r3, r2
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x724>
 800626a:	e022      	b.n	80062b2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e01d      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <HAL_RCC_OscConfig+0x794>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	2380      	movs	r3, #128	; 0x80
 8006282:	025b      	lsls	r3, r3, #9
 8006284:	401a      	ands	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	429a      	cmp	r2, r3
 800628c:	d10f      	bne.n	80062ae <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	23f0      	movs	r3, #240	; 0xf0
 8006292:	039b      	lsls	r3, r3, #14
 8006294:	401a      	ands	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800629a:	429a      	cmp	r2, r3
 800629c:	d107      	bne.n	80062ae <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	23c0      	movs	r3, #192	; 0xc0
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	401a      	ands	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d001      	beq.n	80062b2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	0018      	movs	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b00a      	add	sp, #40	; 0x28
 80062ba:	bdb0      	pop	{r4, r5, r7, pc}
 80062bc:	40021000 	.word	0x40021000
 80062c0:	ff02ffff 	.word	0xff02ffff
 80062c4:	feffffff 	.word	0xfeffffff

080062c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e10d      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062dc:	4b88      	ldr	r3, [pc, #544]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	4013      	ands	r3, r2
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d911      	bls.n	800630e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ea:	4b85      	ldr	r3, [pc, #532]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	4393      	bics	r3, r2
 80062f2:	0019      	movs	r1, r3
 80062f4:	4b82      	ldr	r3, [pc, #520]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fc:	4b80      	ldr	r3, [pc, #512]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	4013      	ands	r3, r2
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d001      	beq.n	800630e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e0f4      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2202      	movs	r2, #2
 8006314:	4013      	ands	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006318:	4b7a      	ldr	r3, [pc, #488]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	22f0      	movs	r2, #240	; 0xf0
 800631e:	4393      	bics	r3, r2
 8006320:	0019      	movs	r1, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	4b77      	ldr	r3, [pc, #476]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006328:	430a      	orrs	r2, r1
 800632a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	4013      	ands	r3, r2
 8006334:	d100      	bne.n	8006338 <HAL_RCC_ClockConfig+0x70>
 8006336:	e089      	b.n	800644c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d107      	bne.n	8006350 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006340:	4b70      	ldr	r3, [pc, #448]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	029b      	lsls	r3, r3, #10
 8006348:	4013      	ands	r3, r2
 800634a:	d120      	bne.n	800638e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0d3      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b03      	cmp	r3, #3
 8006356:	d107      	bne.n	8006368 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006358:	4b6a      	ldr	r3, [pc, #424]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	049b      	lsls	r3, r3, #18
 8006360:	4013      	ands	r3, r2
 8006362:	d114      	bne.n	800638e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e0c7      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d106      	bne.n	800637e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006370:	4b64      	ldr	r3, [pc, #400]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2204      	movs	r2, #4
 8006376:	4013      	ands	r3, r2
 8006378:	d109      	bne.n	800638e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e0bc      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800637e:	4b61      	ldr	r3, [pc, #388]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4013      	ands	r3, r2
 8006388:	d101      	bne.n	800638e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e0b4      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800638e:	4b5d      	ldr	r3, [pc, #372]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2203      	movs	r2, #3
 8006394:	4393      	bics	r3, r2
 8006396:	0019      	movs	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b59      	ldr	r3, [pc, #356]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 800639e:	430a      	orrs	r2, r1
 80063a0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063a2:	f7fd f82b 	bl	80033fc <HAL_GetTick>
 80063a6:	0003      	movs	r3, r0
 80063a8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d111      	bne.n	80063d6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063b2:	e009      	b.n	80063c8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b4:	f7fd f822 	bl	80033fc <HAL_GetTick>
 80063b8:	0002      	movs	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	4a52      	ldr	r2, [pc, #328]	; (8006508 <HAL_RCC_ClockConfig+0x240>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e097      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80063c8:	4b4e      	ldr	r3, [pc, #312]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	220c      	movs	r2, #12
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d1ef      	bne.n	80063b4 <HAL_RCC_ClockConfig+0xec>
 80063d4:	e03a      	b.n	800644c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d111      	bne.n	8006402 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063de:	e009      	b.n	80063f4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e0:	f7fd f80c 	bl	80033fc <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	4a47      	ldr	r2, [pc, #284]	; (8006508 <HAL_RCC_ClockConfig+0x240>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e081      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063f4:	4b43      	ldr	r3, [pc, #268]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	220c      	movs	r2, #12
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	d1ef      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x118>
 8006400:	e024      	b.n	800644c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d11b      	bne.n	8006442 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800640a:	e009      	b.n	8006420 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800640c:	f7fc fff6 	bl	80033fc <HAL_GetTick>
 8006410:	0002      	movs	r2, r0
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	4a3c      	ldr	r2, [pc, #240]	; (8006508 <HAL_RCC_ClockConfig+0x240>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e06b      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006420:	4b38      	ldr	r3, [pc, #224]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	220c      	movs	r2, #12
 8006426:	4013      	ands	r3, r2
 8006428:	2b04      	cmp	r3, #4
 800642a:	d1ef      	bne.n	800640c <HAL_RCC_ClockConfig+0x144>
 800642c:	e00e      	b.n	800644c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642e:	f7fc ffe5 	bl	80033fc <HAL_GetTick>
 8006432:	0002      	movs	r2, r0
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	4a33      	ldr	r2, [pc, #204]	; (8006508 <HAL_RCC_ClockConfig+0x240>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e05a      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006442:	4b30      	ldr	r3, [pc, #192]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	220c      	movs	r2, #12
 8006448:	4013      	ands	r3, r2
 800644a:	d1f0      	bne.n	800642e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800644c:	4b2c      	ldr	r3, [pc, #176]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2201      	movs	r2, #1
 8006452:	4013      	ands	r3, r2
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d211      	bcs.n	800647e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645a:	4b29      	ldr	r3, [pc, #164]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2201      	movs	r2, #1
 8006460:	4393      	bics	r3, r2
 8006462:	0019      	movs	r1, r3
 8006464:	4b26      	ldr	r3, [pc, #152]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646c:	4b24      	ldr	r3, [pc, #144]	; (8006500 <HAL_RCC_ClockConfig+0x238>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	4013      	ands	r3, r2
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d001      	beq.n	800647e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e03c      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2204      	movs	r2, #4
 8006484:	4013      	ands	r3, r2
 8006486:	d009      	beq.n	800649c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006488:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4a1f      	ldr	r2, [pc, #124]	; (800650c <HAL_RCC_ClockConfig+0x244>)
 800648e:	4013      	ands	r3, r2
 8006490:	0019      	movs	r1, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 8006498:	430a      	orrs	r2, r1
 800649a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2208      	movs	r2, #8
 80064a2:	4013      	ands	r3, r2
 80064a4:	d00a      	beq.n	80064bc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064a6:	4b17      	ldr	r3, [pc, #92]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	4a19      	ldr	r2, [pc, #100]	; (8006510 <HAL_RCC_ClockConfig+0x248>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	0019      	movs	r1, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	00da      	lsls	r2, r3, #3
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 80064b8:	430a      	orrs	r2, r1
 80064ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064bc:	f000 f82e 	bl	800651c <HAL_RCC_GetSysClockFreq>
 80064c0:	0001      	movs	r1, r0
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <HAL_RCC_ClockConfig+0x23c>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	220f      	movs	r2, #15
 80064ca:	4013      	ands	r3, r2
 80064cc:	4a11      	ldr	r2, [pc, #68]	; (8006514 <HAL_RCC_ClockConfig+0x24c>)
 80064ce:	5cd3      	ldrb	r3, [r2, r3]
 80064d0:	000a      	movs	r2, r1
 80064d2:	40da      	lsrs	r2, r3
 80064d4:	4b10      	ldr	r3, [pc, #64]	; (8006518 <HAL_RCC_ClockConfig+0x250>)
 80064d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80064d8:	250b      	movs	r5, #11
 80064da:	197c      	adds	r4, r7, r5
 80064dc:	2000      	movs	r0, #0
 80064de:	f7fc ff47 	bl	8003370 <HAL_InitTick>
 80064e2:	0003      	movs	r3, r0
 80064e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80064e6:	197b      	adds	r3, r7, r5
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80064ee:	230b      	movs	r3, #11
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	e000      	b.n	80064f8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	0018      	movs	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b004      	add	sp, #16
 80064fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006500:	40022000 	.word	0x40022000
 8006504:	40021000 	.word	0x40021000
 8006508:	00001388 	.word	0x00001388
 800650c:	fffff8ff 	.word	0xfffff8ff
 8006510:	ffffc7ff 	.word	0xffffc7ff
 8006514:	0800f9d0 	.word	0x0800f9d0
 8006518:	20000008 	.word	0x20000008

0800651c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006522:	4b3b      	ldr	r3, [pc, #236]	; (8006610 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	220c      	movs	r2, #12
 800652c:	4013      	ands	r3, r2
 800652e:	2b08      	cmp	r3, #8
 8006530:	d00e      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x34>
 8006532:	2b0c      	cmp	r3, #12
 8006534:	d00f      	beq.n	8006556 <HAL_RCC_GetSysClockFreq+0x3a>
 8006536:	2b04      	cmp	r3, #4
 8006538:	d157      	bne.n	80065ea <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800653a:	4b35      	ldr	r3, [pc, #212]	; (8006610 <HAL_RCC_GetSysClockFreq+0xf4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2210      	movs	r2, #16
 8006540:	4013      	ands	r3, r2
 8006542:	d002      	beq.n	800654a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006544:	4b33      	ldr	r3, [pc, #204]	; (8006614 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006546:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006548:	e05d      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800654a:	4b33      	ldr	r3, [pc, #204]	; (8006618 <HAL_RCC_GetSysClockFreq+0xfc>)
 800654c:	613b      	str	r3, [r7, #16]
      break;
 800654e:	e05a      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006550:	4b32      	ldr	r3, [pc, #200]	; (800661c <HAL_RCC_GetSysClockFreq+0x100>)
 8006552:	613b      	str	r3, [r7, #16]
      break;
 8006554:	e057      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	0c9b      	lsrs	r3, r3, #18
 800655a:	220f      	movs	r2, #15
 800655c:	4013      	ands	r3, r2
 800655e:	4a30      	ldr	r2, [pc, #192]	; (8006620 <HAL_RCC_GetSysClockFreq+0x104>)
 8006560:	5cd3      	ldrb	r3, [r2, r3]
 8006562:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	0d9b      	lsrs	r3, r3, #22
 8006568:	2203      	movs	r2, #3
 800656a:	4013      	ands	r3, r2
 800656c:	3301      	adds	r3, #1
 800656e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006570:	4b27      	ldr	r3, [pc, #156]	; (8006610 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	025b      	lsls	r3, r3, #9
 8006578:	4013      	ands	r3, r2
 800657a:	d00f      	beq.n	800659c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	000a      	movs	r2, r1
 8006580:	0152      	lsls	r2, r2, #5
 8006582:	1a52      	subs	r2, r2, r1
 8006584:	0193      	lsls	r3, r2, #6
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	185b      	adds	r3, r3, r1
 800658c:	025b      	lsls	r3, r3, #9
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	0018      	movs	r0, r3
 8006592:	f7f9 fdcb 	bl	800012c <__udivsi3>
 8006596:	0003      	movs	r3, r0
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e023      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800659c:	4b1c      	ldr	r3, [pc, #112]	; (8006610 <HAL_RCC_GetSysClockFreq+0xf4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2210      	movs	r2, #16
 80065a2:	4013      	ands	r3, r2
 80065a4:	d00f      	beq.n	80065c6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	000a      	movs	r2, r1
 80065aa:	0152      	lsls	r2, r2, #5
 80065ac:	1a52      	subs	r2, r2, r1
 80065ae:	0193      	lsls	r3, r2, #6
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	185b      	adds	r3, r3, r1
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7f9 fdb6 	bl	800012c <__udivsi3>
 80065c0:	0003      	movs	r3, r0
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	e00e      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	000a      	movs	r2, r1
 80065ca:	0152      	lsls	r2, r2, #5
 80065cc:	1a52      	subs	r2, r2, r1
 80065ce:	0193      	lsls	r3, r2, #6
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	185b      	adds	r3, r3, r1
 80065d6:	029b      	lsls	r3, r3, #10
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	0018      	movs	r0, r3
 80065dc:	f7f9 fda6 	bl	800012c <__udivsi3>
 80065e0:	0003      	movs	r3, r0
 80065e2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	613b      	str	r3, [r7, #16]
      break;
 80065e8:	e00d      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_RCC_GetSysClockFreq+0xf4>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	0b5b      	lsrs	r3, r3, #13
 80065f0:	2207      	movs	r2, #7
 80065f2:	4013      	ands	r3, r2
 80065f4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	2280      	movs	r2, #128	; 0x80
 80065fc:	0212      	lsls	r2, r2, #8
 80065fe:	409a      	lsls	r2, r3
 8006600:	0013      	movs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
      break;
 8006604:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006606:	693b      	ldr	r3, [r7, #16]
}
 8006608:	0018      	movs	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	b006      	add	sp, #24
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40021000 	.word	0x40021000
 8006614:	003d0900 	.word	0x003d0900
 8006618:	00f42400 	.word	0x00f42400
 800661c:	007a1200 	.word	0x007a1200
 8006620:	0800f9e0 	.word	0x0800f9e0

08006624 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2220      	movs	r2, #32
 8006632:	4013      	ands	r3, r2
 8006634:	d100      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8006636:	e0c7      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8006638:	2317      	movs	r3, #23
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006640:	4b99      	ldr	r3, [pc, #612]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	055b      	lsls	r3, r3, #21
 8006648:	4013      	ands	r3, r2
 800664a:	d10a      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800664c:	4b96      	ldr	r3, [pc, #600]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800664e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006650:	4b95      	ldr	r3, [pc, #596]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	0549      	lsls	r1, r1, #21
 8006656:	430a      	orrs	r2, r1
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800665a:	2317      	movs	r3, #23
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	2201      	movs	r2, #1
 8006660:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006662:	4b92      	ldr	r3, [pc, #584]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	4013      	ands	r3, r2
 800666c:	d11a      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800666e:	4b8f      	ldr	r3, [pc, #572]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b8e      	ldr	r3, [pc, #568]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	0049      	lsls	r1, r1, #1
 8006678:	430a      	orrs	r2, r1
 800667a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667c:	f7fc febe 	bl	80033fc <HAL_GetTick>
 8006680:	0003      	movs	r3, r0
 8006682:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	e008      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006686:	f7fc feb9 	bl	80033fc <HAL_GetTick>
 800668a:	0002      	movs	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b64      	cmp	r3, #100	; 0x64
 8006692:	d901      	bls.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e102      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006698:	4b84      	ldr	r3, [pc, #528]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4013      	ands	r3, r2
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80066a4:	4b80      	ldr	r3, [pc, #512]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	23c0      	movs	r3, #192	; 0xc0
 80066aa:	039b      	lsls	r3, r3, #14
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	23c0      	movs	r3, #192	; 0xc0
 80066b6:	039b      	lsls	r3, r3, #14
 80066b8:	4013      	ands	r3, r2
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d013      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	23c0      	movs	r3, #192	; 0xc0
 80066c6:	029b      	lsls	r3, r3, #10
 80066c8:	401a      	ands	r2, r3
 80066ca:	23c0      	movs	r3, #192	; 0xc0
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d10a      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066d2:	4b75      	ldr	r3, [pc, #468]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	2380      	movs	r3, #128	; 0x80
 80066d8:	029b      	lsls	r3, r3, #10
 80066da:	401a      	ands	r2, r3
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	029b      	lsls	r3, r3, #10
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d101      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0da      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80066e8:	4b6f      	ldr	r3, [pc, #444]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ec:	23c0      	movs	r3, #192	; 0xc0
 80066ee:	029b      	lsls	r3, r3, #10
 80066f0:	4013      	ands	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d03b      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	23c0      	movs	r3, #192	; 0xc0
 8006700:	029b      	lsls	r3, r3, #10
 8006702:	4013      	ands	r3, r2
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	429a      	cmp	r2, r3
 8006708:	d033      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2220      	movs	r2, #32
 8006710:	4013      	ands	r3, r2
 8006712:	d02e      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006714:	4b64      	ldr	r3, [pc, #400]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	4a65      	ldr	r2, [pc, #404]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800671a:	4013      	ands	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800671e:	4b62      	ldr	r3, [pc, #392]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006722:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006724:	2180      	movs	r1, #128	; 0x80
 8006726:	0309      	lsls	r1, r1, #12
 8006728:	430a      	orrs	r2, r1
 800672a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800672c:	4b5e      	ldr	r3, [pc, #376]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800672e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006730:	4b5d      	ldr	r3, [pc, #372]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006732:	4960      	ldr	r1, [pc, #384]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006734:	400a      	ands	r2, r1
 8006736:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006738:	4b5b      	ldr	r3, [pc, #364]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	4013      	ands	r3, r2
 8006746:	d014      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fc fe58 	bl	80033fc <HAL_GetTick>
 800674c:	0003      	movs	r3, r0
 800674e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006750:	e009      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006752:	f7fc fe53 	bl	80033fc <HAL_GetTick>
 8006756:	0002      	movs	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	4a56      	ldr	r2, [pc, #344]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e09b      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006766:	4b50      	ldr	r3, [pc, #320]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800676a:	2380      	movs	r3, #128	; 0x80
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4013      	ands	r3, r2
 8006770:	d0ef      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	23c0      	movs	r3, #192	; 0xc0
 8006778:	029b      	lsls	r3, r3, #10
 800677a:	401a      	ands	r2, r3
 800677c:	23c0      	movs	r3, #192	; 0xc0
 800677e:	029b      	lsls	r3, r3, #10
 8006780:	429a      	cmp	r2, r3
 8006782:	d10c      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006784:	4b48      	ldr	r3, [pc, #288]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a4c      	ldr	r2, [pc, #304]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800678a:	4013      	ands	r3, r2
 800678c:	0019      	movs	r1, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	23c0      	movs	r3, #192	; 0xc0
 8006794:	039b      	lsls	r3, r3, #14
 8006796:	401a      	ands	r2, r3
 8006798:	4b43      	ldr	r3, [pc, #268]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800679a:	430a      	orrs	r2, r1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	23c0      	movs	r3, #192	; 0xc0
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	401a      	ands	r2, r3
 80067ac:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067ae:	430a      	orrs	r2, r1
 80067b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067b2:	2317      	movs	r3, #23
 80067b4:	18fb      	adds	r3, r7, r3
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067bc:	4b3a      	ldr	r3, [pc, #232]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c0:	4b39      	ldr	r3, [pc, #228]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067c2:	493f      	ldr	r1, [pc, #252]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067c4:	400a      	ands	r2, r1
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2201      	movs	r2, #1
 80067ce:	4013      	ands	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067d2:	4b35      	ldr	r3, [pc, #212]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d6:	2203      	movs	r2, #3
 80067d8:	4393      	bics	r3, r2
 80067da:	0019      	movs	r1, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067e2:	430a      	orrs	r2, r1
 80067e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2202      	movs	r2, #2
 80067ec:	4013      	ands	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067f0:	4b2d      	ldr	r3, [pc, #180]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f4:	220c      	movs	r2, #12
 80067f6:	4393      	bics	r3, r2
 80067f8:	0019      	movs	r1, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	4b2a      	ldr	r3, [pc, #168]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006800:	430a      	orrs	r2, r1
 8006802:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2204      	movs	r2, #4
 800680a:	4013      	ands	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	4a2c      	ldr	r2, [pc, #176]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006814:	4013      	ands	r3, r2
 8006816:	0019      	movs	r1, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800681e:	430a      	orrs	r2, r1
 8006820:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2208      	movs	r2, #8
 8006828:	4013      	ands	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800682c:	4b1e      	ldr	r3, [pc, #120]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800682e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006830:	4a25      	ldr	r2, [pc, #148]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006832:	4013      	ands	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800683c:	430a      	orrs	r2, r1
 800683e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4013      	ands	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800684c:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	4a17      	ldr	r2, [pc, #92]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006852:	4013      	ands	r3, r2
 8006854:	0019      	movs	r1, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800685c:	430a      	orrs	r2, r1
 800685e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2240      	movs	r2, #64	; 0x40
 8006866:	4013      	ands	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	4a17      	ldr	r2, [pc, #92]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006870:	4013      	ands	r3, r2
 8006872:	0019      	movs	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800687a:	430a      	orrs	r2, r1
 800687c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2280      	movs	r2, #128	; 0x80
 8006884:	4013      	ands	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006888:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800688a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688c:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800688e:	4013      	ands	r3, r2
 8006890:	0019      	movs	r1, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006898:	430a      	orrs	r2, r1
 800689a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b006      	add	sp, #24
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40007000 	.word	0x40007000
 80068b0:	fffcffff 	.word	0xfffcffff
 80068b4:	fff7ffff 	.word	0xfff7ffff
 80068b8:	00001388 	.word	0x00001388
 80068bc:	ffcfffff 	.word	0xffcfffff
 80068c0:	efffffff 	.word	0xefffffff
 80068c4:	fffff3ff 	.word	0xfffff3ff
 80068c8:	ffffcfff 	.word	0xffffcfff
 80068cc:	fbffffff 	.word	0xfbffffff
 80068d0:	fff3ffff 	.word	0xfff3ffff

080068d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e059      	b.n	800699a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2251      	movs	r2, #81	; 0x51
 80068f0:	5c9b      	ldrb	r3, [r3, r2]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d107      	bne.n	8006908 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2250      	movs	r2, #80	; 0x50
 80068fc:	2100      	movs	r1, #0
 80068fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	0018      	movs	r0, r3
 8006904:	f7fc fb7c 	bl	8003000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2251      	movs	r2, #81	; 0x51
 800690c:	2102      	movs	r1, #2
 800690e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2140      	movs	r1, #64	; 0x40
 800691c:	438a      	bics	r2, r1
 800691e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6999      	ldr	r1, [r3, #24]
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	400b      	ands	r3, r1
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	431a      	orrs	r2, r3
 8006954:	0011      	movs	r1, r2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	2204      	movs	r2, #4
 800696a:	4013      	ands	r3, r2
 800696c:	0019      	movs	r1, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4907      	ldr	r1, [pc, #28]	; (80069a4 <HAL_SPI_Init+0xd0>)
 8006986:	400a      	ands	r2, r1
 8006988:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2251      	movs	r2, #81	; 0x51
 8006994:	2101      	movs	r1, #1
 8006996:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	0018      	movs	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	b002      	add	sp, #8
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	fffff7ff 	.word	0xfffff7ff

080069a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08c      	sub	sp, #48	; 0x30
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	001a      	movs	r2, r3
 80069b6:	1cbb      	adds	r3, r7, #2
 80069b8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069ba:	2301      	movs	r3, #1
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069be:	232b      	movs	r3, #43	; 0x2b
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2250      	movs	r2, #80	; 0x50
 80069ca:	5c9b      	ldrb	r3, [r3, r2]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x2c>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e1a1      	b.n	8006d18 <HAL_SPI_TransmitReceive+0x370>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2250      	movs	r2, #80	; 0x50
 80069d8:	2101      	movs	r1, #1
 80069da:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069dc:	f7fc fd0e 	bl	80033fc <HAL_GetTick>
 80069e0:	0003      	movs	r3, r0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069e4:	2023      	movs	r0, #35	; 0x23
 80069e6:	183b      	adds	r3, r7, r0
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	2151      	movs	r1, #81	; 0x51
 80069ec:	5c52      	ldrb	r2, [r2, r1]
 80069ee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80069f6:	231a      	movs	r3, #26
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	1cba      	adds	r2, r7, #2
 80069fc:	8812      	ldrh	r2, [r2, #0]
 80069fe:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a00:	183b      	adds	r3, r7, r0
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d012      	beq.n	8006a2e <HAL_SPI_TransmitReceive+0x86>
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	2382      	movs	r3, #130	; 0x82
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d108      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x7c>
 8006a1a:	2323      	movs	r3, #35	; 0x23
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d004      	beq.n	8006a2e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8006a24:	232b      	movs	r3, #43	; 0x2b
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	2202      	movs	r2, #2
 8006a2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a2c:	e169      	b.n	8006d02 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x9a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x9a>
 8006a3a:	1cbb      	adds	r3, r7, #2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d104      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8006a42:	232b      	movs	r3, #43	; 0x2b
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a4a:	e15a      	b.n	8006d02 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2251      	movs	r2, #81	; 0x51
 8006a50:	5c9b      	ldrb	r3, [r3, r2]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d003      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2251      	movs	r2, #81	; 0x51
 8006a5c:	2105      	movs	r1, #5
 8006a5e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	1cba      	adds	r2, r7, #2
 8006a70:	8812      	ldrh	r2, [r2, #0]
 8006a72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	1cba      	adds	r2, r7, #2
 8006a78:	8812      	ldrh	r2, [r2, #0]
 8006a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1cba      	adds	r2, r7, #2
 8006a86:	8812      	ldrh	r2, [r2, #0]
 8006a88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1cba      	adds	r2, r7, #2
 8006a8e:	8812      	ldrh	r2, [r2, #0]
 8006a90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2240      	movs	r2, #64	; 0x40
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d007      	beq.n	8006abc <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2140      	movs	r1, #64	; 0x40
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d000      	beq.n	8006aca <HAL_SPI_TransmitReceive+0x122>
 8006ac8:	e07a      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x134>
 8006ad2:	231a      	movs	r3, #26
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d166      	bne.n	8006baa <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	1c9a      	adds	r2, r3, #2
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b00:	e053      	b.n	8006baa <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d11b      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x1a0>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d016      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x1a0>
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d113      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	881a      	ldrh	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b30:	1c9a      	adds	r2, r3, #2
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d119      	bne.n	8006b8a <HAL_SPI_TransmitReceive+0x1e2>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d014      	beq.n	8006b8a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	b292      	uxth	r2, r2
 8006b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	1c9a      	adds	r2, r3, #2
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b86:	2301      	movs	r3, #1
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b8a:	f7fc fc37 	bl	80033fc <HAL_GetTick>
 8006b8e:	0002      	movs	r2, r0
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d807      	bhi.n	8006baa <HAL_SPI_TransmitReceive+0x202>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	d004      	beq.n	8006baa <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8006ba0:	232b      	movs	r3, #43	; 0x2b
 8006ba2:	18fb      	adds	r3, r7, r3
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	701a      	strb	r2, [r3, #0]
        goto error;
 8006ba8:	e0ab      	b.n	8006d02 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1a6      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x15a>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1a1      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x15a>
 8006bbe:	e07f      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_SPI_TransmitReceive+0x22c>
 8006bc8:	231a      	movs	r3, #26
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d000      	beq.n	8006bd4 <HAL_SPI_TransmitReceive+0x22c>
 8006bd2:	e06b      	b.n	8006cac <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	330c      	adds	r3, #12
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bfa:	e057      	b.n	8006cac <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2202      	movs	r2, #2
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d11c      	bne.n	8006c44 <HAL_SPI_TransmitReceive+0x29c>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x29c>
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d114      	bne.n	8006c44 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	7812      	ldrb	r2, [r2, #0]
 8006c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d119      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x2de>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d014      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c82:	2301      	movs	r3, #1
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c86:	f7fc fbb9 	bl	80033fc <HAL_GetTick>
 8006c8a:	0002      	movs	r2, r0
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d802      	bhi.n	8006c9c <HAL_SPI_TransmitReceive+0x2f4>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	3301      	adds	r3, #1
 8006c9a:	d102      	bne.n	8006ca2 <HAL_SPI_TransmitReceive+0x2fa>
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d104      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 8006ca2:	232b      	movs	r3, #43	; 0x2b
 8006ca4:	18fb      	adds	r3, r7, r3
 8006ca6:	2203      	movs	r2, #3
 8006ca8:	701a      	strb	r2, [r3, #0]
        goto error;
 8006caa:	e02a      	b.n	8006d02 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1a2      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x254>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d19d      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f000 f89a 	bl	8006e00 <SPI_EndRxTxTransaction>
 8006ccc:	1e03      	subs	r3, r0, #0
 8006cce:	d007      	beq.n	8006ce0 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8006cd0:	232b      	movs	r3, #43	; 0x2b
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006cde:	e010      	b.n	8006d02 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	e000      	b.n	8006d02 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 8006d00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2251      	movs	r2, #81	; 0x51
 8006d06:	2101      	movs	r1, #1
 8006d08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2250      	movs	r2, #80	; 0x50
 8006d0e:	2100      	movs	r1, #0
 8006d10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006d12:	232b      	movs	r3, #43	; 0x2b
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	781b      	ldrb	r3, [r3, #0]
}
 8006d18:	0018      	movs	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b00c      	add	sp, #48	; 0x30
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	1dfb      	adds	r3, r7, #7
 8006d2e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d30:	e050      	b.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	d04d      	beq.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d38:	f7fc fb60 	bl	80033fc <HAL_GetTick>
 8006d3c:	0002      	movs	r2, r0
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d902      	bls.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d142      	bne.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	21e0      	movs	r1, #224	; 0xe0
 8006d5a:	438a      	bics	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	2382      	movs	r3, #130	; 0x82
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d113      	bne.n	8006d92 <SPI_WaitFlagStateUntilTimeout+0x72>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d005      	beq.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d107      	bne.n	8006d92 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2140      	movs	r1, #64	; 0x40
 8006d8e:	438a      	bics	r2, r1
 8006d90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d96:	2380      	movs	r3, #128	; 0x80
 8006d98:	019b      	lsls	r3, r3, #6
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d110      	bne.n	8006dc0 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4914      	ldr	r1, [pc, #80]	; (8006dfc <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8006daa:	400a      	ands	r2, r1
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2180      	movs	r1, #128	; 0x80
 8006dba:	0189      	lsls	r1, r1, #6
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2251      	movs	r2, #81	; 0x51
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2250      	movs	r2, #80	; 0x50
 8006dcc:	2100      	movs	r1, #0
 8006dce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e00f      	b.n	8006df4 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	425a      	negs	r2, r3
 8006de4:	4153      	adcs	r3, r2
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	001a      	movs	r2, r3
 8006dea:	1dfb      	adds	r3, r7, #7
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d19f      	bne.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b004      	add	sp, #16
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	ffffdfff 	.word	0xffffdfff

08006e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	2382      	movs	r3, #130	; 0x82
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d112      	bne.n	8006e3e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	0013      	movs	r3, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	2180      	movs	r1, #128	; 0x80
 8006e26:	f7ff ff7b 	bl	8006d20 <SPI_WaitFlagStateUntilTimeout>
 8006e2a:	1e03      	subs	r3, r0, #0
 8006e2c:	d020      	beq.n	8006e70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	2220      	movs	r2, #32
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e019      	b.n	8006e72 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2251      	movs	r2, #81	; 0x51
 8006e42:	5c9b      	ldrb	r3, [r3, r2]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d112      	bne.n	8006e70 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	0013      	movs	r3, r2
 8006e54:	2200      	movs	r2, #0
 8006e56:	2101      	movs	r1, #1
 8006e58:	f7ff ff62 	bl	8006d20 <SPI_WaitFlagStateUntilTimeout>
 8006e5c:	1e03      	subs	r3, r0, #0
 8006e5e:	d007      	beq.n	8006e70 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	2220      	movs	r2, #32
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e000      	b.n	8006e72 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	0018      	movs	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b004      	add	sp, #16
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e01e      	b.n	8006eca <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2239      	movs	r2, #57	; 0x39
 8006e90:	5c9b      	ldrb	r3, [r3, r2]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2238      	movs	r2, #56	; 0x38
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7fc f8f0 	bl	8003088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2239      	movs	r2, #57	; 0x39
 8006eac:	2102      	movs	r1, #2
 8006eae:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	0019      	movs	r1, r3
 8006eba:	0010      	movs	r0, r2
 8006ebc:	f000 f9d8 	bl	8007270 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2239      	movs	r2, #57	; 0x39
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d124      	bne.n	8006f32 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d11d      	bne.n	8006f32 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2203      	movs	r2, #3
 8006efc:	4252      	negs	r2, r2
 8006efe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f000 f993 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8006f1a:	e007      	b.n	8006f2c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f000 f986 	bl	8007230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 f992 	bl	8007250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d125      	bne.n	8006f8c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2204      	movs	r2, #4
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d11e      	bne.n	8006f8c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2205      	movs	r2, #5
 8006f54:	4252      	negs	r2, r2
 8006f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	23c0      	movs	r3, #192	; 0xc0
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f000 f966 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8006f74:	e007      	b.n	8006f86 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f959 	bl	8007230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 f965 	bl	8007250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2208      	movs	r2, #8
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d124      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d11d      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2209      	movs	r2, #9
 8006fae:	4252      	negs	r2, r2
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d004      	beq.n	8006fce <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f000 f93a 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e007      	b.n	8006fde <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f000 f92d 	bl	8007230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 f939 	bl	8007250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2210      	movs	r2, #16
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d125      	bne.n	800703e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2210      	movs	r2, #16
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d11e      	bne.n	800703e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2211      	movs	r2, #17
 8007006:	4252      	negs	r2, r2
 8007008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2208      	movs	r2, #8
 800700e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	23c0      	movs	r3, #192	; 0xc0
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4013      	ands	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	0018      	movs	r0, r3
 8007022:	f000 f90d 	bl	8007240 <HAL_TIM_IC_CaptureCallback>
 8007026:	e007      	b.n	8007038 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	0018      	movs	r0, r3
 800702c:	f000 f900 	bl	8007230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	0018      	movs	r0, r3
 8007034:	f000 f90c 	bl	8007250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2201      	movs	r2, #1
 8007046:	4013      	ands	r3, r2
 8007048:	2b01      	cmp	r3, #1
 800704a:	d10f      	bne.n	800706c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	4013      	ands	r3, r2
 8007056:	2b01      	cmp	r3, #1
 8007058:	d108      	bne.n	800706c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2202      	movs	r2, #2
 8007060:	4252      	negs	r2, r2
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0018      	movs	r0, r3
 8007068:	f000 f8da 	bl	8007220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2240      	movs	r2, #64	; 0x40
 8007074:	4013      	ands	r3, r2
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d10f      	bne.n	800709a <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	2240      	movs	r2, #64	; 0x40
 8007082:	4013      	ands	r3, r2
 8007084:	2b40      	cmp	r3, #64	; 0x40
 8007086:	d108      	bne.n	800709a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2241      	movs	r2, #65	; 0x41
 800708e:	4252      	negs	r2, r2
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	0018      	movs	r0, r3
 8007096:	f000 f8e3 	bl	8007260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	46bd      	mov	sp, r7
 800709e:	b002      	add	sp, #8
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2238      	movs	r2, #56	; 0x38
 80070b2:	5c9b      	ldrb	r3, [r3, r2]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_TIM_ConfigClockSource+0x18>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e0ab      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x170>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2238      	movs	r2, #56	; 0x38
 80070c0:	2101      	movs	r1, #1
 80070c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2239      	movs	r2, #57	; 0x39
 80070c8:	2102      	movs	r1, #2
 80070ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2277      	movs	r2, #119	; 0x77
 80070d8:	4393      	bics	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a4f      	ldr	r2, [pc, #316]	; (800721c <HAL_TIM_ConfigClockSource+0x178>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d100      	bne.n	80070f6 <HAL_TIM_ConfigClockSource+0x52>
 80070f4:	e06b      	b.n	80071ce <HAL_TIM_ConfigClockSource+0x12a>
 80070f6:	d80e      	bhi.n	8007116 <HAL_TIM_ConfigClockSource+0x72>
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d100      	bne.n	80070fe <HAL_TIM_ConfigClockSource+0x5a>
 80070fc:	e077      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x14a>
 80070fe:	d803      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x64>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d100      	bne.n	8007106 <HAL_TIM_ConfigClockSource+0x62>
 8007104:	e073      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007106:	e07c      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007108:	2b20      	cmp	r3, #32
 800710a:	d100      	bne.n	800710e <HAL_TIM_ConfigClockSource+0x6a>
 800710c:	e06f      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x14a>
 800710e:	2b30      	cmp	r3, #48	; 0x30
 8007110:	d100      	bne.n	8007114 <HAL_TIM_ConfigClockSource+0x70>
 8007112:	e06c      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007114:	e075      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007116:	2b70      	cmp	r3, #112	; 0x70
 8007118:	d00e      	beq.n	8007138 <HAL_TIM_ConfigClockSource+0x94>
 800711a:	d804      	bhi.n	8007126 <HAL_TIM_ConfigClockSource+0x82>
 800711c:	2b50      	cmp	r3, #80	; 0x50
 800711e:	d036      	beq.n	800718e <HAL_TIM_ConfigClockSource+0xea>
 8007120:	2b60      	cmp	r3, #96	; 0x60
 8007122:	d044      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007124:	e06d      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007126:	2280      	movs	r2, #128	; 0x80
 8007128:	0152      	lsls	r2, r2, #5
 800712a:	4293      	cmp	r3, r2
 800712c:	d068      	beq.n	8007200 <HAL_TIM_ConfigClockSource+0x15c>
 800712e:	2280      	movs	r2, #128	; 0x80
 8007130:	0192      	lsls	r2, r2, #6
 8007132:	4293      	cmp	r3, r2
 8007134:	d017      	beq.n	8007166 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007136:	e064      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	6899      	ldr	r1, [r3, #8]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f000 f96a 	bl	8007420 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2277      	movs	r2, #119	; 0x77
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	609a      	str	r2, [r3, #8]
      break;
 8007164:	e04d      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6899      	ldr	r1, [r3, #8]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f000 f953 	bl	8007420 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2180      	movs	r1, #128	; 0x80
 8007186:	01c9      	lsls	r1, r1, #7
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
      break;
 800718c:	e039      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6859      	ldr	r1, [r3, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	001a      	movs	r2, r3
 800719c:	f000 f8c6 	bl	800732c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2150      	movs	r1, #80	; 0x50
 80071a6:	0018      	movs	r0, r3
 80071a8:	f000 f920 	bl	80073ec <TIM_ITRx_SetConfig>
      break;
 80071ac:	e029      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6859      	ldr	r1, [r3, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	001a      	movs	r2, r3
 80071bc:	f000 f8e4 	bl	8007388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2160      	movs	r1, #96	; 0x60
 80071c6:	0018      	movs	r0, r3
 80071c8:	f000 f910 	bl	80073ec <TIM_ITRx_SetConfig>
      break;
 80071cc:	e019      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6859      	ldr	r1, [r3, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	001a      	movs	r2, r3
 80071dc:	f000 f8a6 	bl	800732c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2140      	movs	r1, #64	; 0x40
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 f900 	bl	80073ec <TIM_ITRx_SetConfig>
      break;
 80071ec:	e009      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	0019      	movs	r1, r3
 80071f8:	0010      	movs	r0, r2
 80071fa:	f000 f8f7 	bl	80073ec <TIM_ITRx_SetConfig>
      break;
 80071fe:	e000      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007200:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2239      	movs	r2, #57	; 0x39
 8007206:	2101      	movs	r1, #1
 8007208:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2238      	movs	r2, #56	; 0x38
 800720e:	2100      	movs	r1, #0
 8007210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	0018      	movs	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	b004      	add	sp, #16
 800721a:	bd80      	pop	{r7, pc}
 800721c:	ffff00ff 	.word	0xffff00ff

08007220 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007228:	46c0      	nop			; (mov r8, r8)
 800722a:	46bd      	mov	sp, r7
 800722c:	b002      	add	sp, #8
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b002      	add	sp, #8
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	b002      	add	sp, #8
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007258:	46c0      	nop			; (mov r8, r8)
 800725a:	46bd      	mov	sp, r7
 800725c:	b002      	add	sp, #8
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007268:	46c0      	nop			; (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	b002      	add	sp, #8
 800726e:	bd80      	pop	{r7, pc}

08007270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	05db      	lsls	r3, r3, #23
 8007286:	429a      	cmp	r2, r3
 8007288:	d00b      	beq.n	80072a2 <TIM_Base_SetConfig+0x32>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a23      	ldr	r2, [pc, #140]	; (800731c <TIM_Base_SetConfig+0xac>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d007      	beq.n	80072a2 <TIM_Base_SetConfig+0x32>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a22      	ldr	r2, [pc, #136]	; (8007320 <TIM_Base_SetConfig+0xb0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_Base_SetConfig+0x32>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a21      	ldr	r2, [pc, #132]	; (8007324 <TIM_Base_SetConfig+0xb4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d108      	bne.n	80072b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2270      	movs	r2, #112	; 0x70
 80072a6:	4393      	bics	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	2380      	movs	r3, #128	; 0x80
 80072b8:	05db      	lsls	r3, r3, #23
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d00b      	beq.n	80072d6 <TIM_Base_SetConfig+0x66>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a16      	ldr	r2, [pc, #88]	; (800731c <TIM_Base_SetConfig+0xac>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d007      	beq.n	80072d6 <TIM_Base_SetConfig+0x66>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a15      	ldr	r2, [pc, #84]	; (8007320 <TIM_Base_SetConfig+0xb0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_Base_SetConfig+0x66>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a14      	ldr	r2, [pc, #80]	; (8007324 <TIM_Base_SetConfig+0xb4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d108      	bne.n	80072e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4a13      	ldr	r2, [pc, #76]	; (8007328 <TIM_Base_SetConfig+0xb8>)
 80072da:	4013      	ands	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2280      	movs	r2, #128	; 0x80
 80072ec:	4393      	bics	r3, r2
 80072ee:	001a      	movs	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	615a      	str	r2, [r3, #20]
}
 8007314:	46c0      	nop			; (mov r8, r8)
 8007316:	46bd      	mov	sp, r7
 8007318:	b004      	add	sp, #16
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40000400 	.word	0x40000400
 8007320:	40010800 	.word	0x40010800
 8007324:	40011400 	.word	0x40011400
 8007328:	fffffcff 	.word	0xfffffcff

0800732c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	2201      	movs	r2, #1
 8007344:	4393      	bics	r3, r2
 8007346:	001a      	movs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	22f0      	movs	r2, #240	; 0xf0
 8007356:	4393      	bics	r3, r2
 8007358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	220a      	movs	r2, #10
 8007368:	4393      	bics	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	621a      	str	r2, [r3, #32]
}
 8007380:	46c0      	nop			; (mov r8, r8)
 8007382:	46bd      	mov	sp, r7
 8007384:	b006      	add	sp, #24
 8007386:	bd80      	pop	{r7, pc}

08007388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	2210      	movs	r2, #16
 800739a:	4393      	bics	r3, r2
 800739c:	001a      	movs	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	4a0d      	ldr	r2, [pc, #52]	; (80073e8 <TIM_TI2_ConfigInputStage+0x60>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	031b      	lsls	r3, r3, #12
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	22a0      	movs	r2, #160	; 0xa0
 80073c4:	4393      	bics	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	621a      	str	r2, [r3, #32]
}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b006      	add	sp, #24
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	ffff0fff 	.word	0xffff0fff

080073ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2270      	movs	r2, #112	; 0x70
 8007400:	4393      	bics	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	2207      	movs	r2, #7
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	609a      	str	r2, [r3, #8]
}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	46bd      	mov	sp, r7
 800741a:	b004      	add	sp, #16
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	4a09      	ldr	r2, [pc, #36]	; (800745c <TIM_ETR_SetConfig+0x3c>)
 8007438:	4013      	ands	r3, r2
 800743a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	021a      	lsls	r2, r3, #8
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	431a      	orrs	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4313      	orrs	r3, r2
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	609a      	str	r2, [r3, #8]
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	b006      	add	sp, #24
 800745a:	bd80      	pop	{r7, pc}
 800745c:	ffff00ff 	.word	0xffff00ff

08007460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2238      	movs	r2, #56	; 0x38
 800746e:	5c9b      	ldrb	r3, [r3, r2]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007474:	2302      	movs	r3, #2
 8007476:	e032      	b.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2238      	movs	r2, #56	; 0x38
 800747c:	2101      	movs	r1, #1
 800747e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2239      	movs	r2, #57	; 0x39
 8007484:	2102      	movs	r1, #2
 8007486:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2270      	movs	r2, #112	; 0x70
 800749c:	4393      	bics	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2280      	movs	r2, #128	; 0x80
 80074ae:	4393      	bics	r3, r2
 80074b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2239      	movs	r2, #57	; 0x39
 80074d0:	2101      	movs	r1, #1
 80074d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2238      	movs	r2, #56	; 0x38
 80074d8:	2100      	movs	r1, #0
 80074da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b004      	add	sp, #16
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2244      	movs	r2, #68	; 0x44
 80074f4:	2100      	movs	r1, #0
 80074f6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <USB_EnableGlobalInt+0x28>)
 80074fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	b299      	uxth	r1, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2240      	movs	r2, #64	; 0x40
 8007504:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b004      	add	sp, #16
 800750e:	bd80      	pop	{r7, pc}
 8007510:	0000bf80 	.word	0x0000bf80

08007514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800751c:	4b09      	ldr	r3, [pc, #36]	; (8007544 <USB_DisableGlobalInt+0x30>)
 800751e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	5a9b      	ldrh	r3, [r3, r2]
 8007526:	b29b      	uxth	r3, r3
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	b292      	uxth	r2, r2
 800752c:	43d2      	mvns	r2, r2
 800752e:	b292      	uxth	r2, r2
 8007530:	4013      	ands	r3, r2
 8007532:	b299      	uxth	r1, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2240      	movs	r2, #64	; 0x40
 8007538:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	0018      	movs	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	b004      	add	sp, #16
 8007542:	bd80      	pop	{r7, pc}
 8007544:	0000bf80 	.word	0x0000bf80

08007548 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007548:	b084      	sub	sp, #16
 800754a:	b590      	push	{r4, r7, lr}
 800754c:	46c6      	mov	lr, r8
 800754e:	b500      	push	{lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	2004      	movs	r0, #4
 8007558:	2410      	movs	r4, #16
 800755a:	46a4      	mov	ip, r4
 800755c:	2408      	movs	r4, #8
 800755e:	46a0      	mov	r8, r4
 8007560:	44b8      	add	r8, r7
 8007562:	44c4      	add	ip, r8
 8007564:	4460      	add	r0, ip
 8007566:	6001      	str	r1, [r0, #0]
 8007568:	6042      	str	r2, [r0, #4]
 800756a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2240      	movs	r2, #64	; 0x40
 8007570:	2101      	movs	r1, #1
 8007572:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	2100      	movs	r1, #0
 800757a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2244      	movs	r2, #68	; 0x44
 8007580:	2100      	movs	r1, #0
 8007582:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2250      	movs	r2, #80	; 0x50
 8007588:	2100      	movs	r1, #0
 800758a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	0018      	movs	r0, r3
 8007590:	46bd      	mov	sp, r7
 8007592:	b002      	add	sp, #8
 8007594:	bc04      	pop	{r2}
 8007596:	4690      	mov	r8, r2
 8007598:	bc90      	pop	{r4, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	b004      	add	sp, #16
 800759e:	4718      	bx	r3

080075a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b09a      	sub	sp, #104	; 0x68
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80075aa:	2367      	movs	r3, #103	; 0x67
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	18d3      	adds	r3, r2, r3
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29a      	uxth	r2, r3
 80075c0:	2364      	movs	r3, #100	; 0x64
 80075c2:	18fb      	adds	r3, r7, r3
 80075c4:	49cf      	ldr	r1, [pc, #828]	; (8007904 <USB_ActivateEndpoint+0x364>)
 80075c6:	400a      	ands	r2, r1
 80075c8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	78db      	ldrb	r3, [r3, #3]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d020      	beq.n	8007614 <USB_ActivateEndpoint+0x74>
 80075d2:	dc02      	bgt.n	80075da <USB_ActivateEndpoint+0x3a>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <USB_ActivateEndpoint+0x44>
 80075d8:	e025      	b.n	8007626 <USB_ActivateEndpoint+0x86>
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d00b      	beq.n	80075f6 <USB_ActivateEndpoint+0x56>
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d00f      	beq.n	8007602 <USB_ActivateEndpoint+0x62>
 80075e2:	e020      	b.n	8007626 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075e4:	2264      	movs	r2, #100	; 0x64
 80075e6:	18bb      	adds	r3, r7, r2
 80075e8:	18ba      	adds	r2, r7, r2
 80075ea:	8812      	ldrh	r2, [r2, #0]
 80075ec:	2180      	movs	r1, #128	; 0x80
 80075ee:	0089      	lsls	r1, r1, #2
 80075f0:	430a      	orrs	r2, r1
 80075f2:	801a      	strh	r2, [r3, #0]
      break;
 80075f4:	e01c      	b.n	8007630 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80075f6:	2264      	movs	r2, #100	; 0x64
 80075f8:	18bb      	adds	r3, r7, r2
 80075fa:	18ba      	adds	r2, r7, r2
 80075fc:	8812      	ldrh	r2, [r2, #0]
 80075fe:	801a      	strh	r2, [r3, #0]
      break;
 8007600:	e016      	b.n	8007630 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007602:	2264      	movs	r2, #100	; 0x64
 8007604:	18bb      	adds	r3, r7, r2
 8007606:	18ba      	adds	r2, r7, r2
 8007608:	8812      	ldrh	r2, [r2, #0]
 800760a:	21c0      	movs	r1, #192	; 0xc0
 800760c:	00c9      	lsls	r1, r1, #3
 800760e:	430a      	orrs	r2, r1
 8007610:	801a      	strh	r2, [r3, #0]
      break;
 8007612:	e00d      	b.n	8007630 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007614:	2264      	movs	r2, #100	; 0x64
 8007616:	18bb      	adds	r3, r7, r2
 8007618:	18ba      	adds	r2, r7, r2
 800761a:	8812      	ldrh	r2, [r2, #0]
 800761c:	2180      	movs	r1, #128	; 0x80
 800761e:	00c9      	lsls	r1, r1, #3
 8007620:	430a      	orrs	r2, r1
 8007622:	801a      	strh	r2, [r3, #0]
      break;
 8007624:	e004      	b.n	8007630 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8007626:	2367      	movs	r3, #103	; 0x67
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	2201      	movs	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
      break;
 800762e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	18d3      	adds	r3, r2, r3
 800763a:	2264      	movs	r2, #100	; 0x64
 800763c:	18ba      	adds	r2, r7, r2
 800763e:	8812      	ldrh	r2, [r2, #0]
 8007640:	49b1      	ldr	r1, [pc, #708]	; (8007908 <USB_ActivateEndpoint+0x368>)
 8007642:	430a      	orrs	r2, r1
 8007644:	b292      	uxth	r2, r2
 8007646:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	18d3      	adds	r3, r2, r3
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	b21b      	sxth	r3, r3
 8007658:	4aac      	ldr	r2, [pc, #688]	; (800790c <USB_ActivateEndpoint+0x36c>)
 800765a:	4013      	ands	r3, r2
 800765c:	b21a      	sxth	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b21b      	sxth	r3, r3
 8007664:	4313      	orrs	r3, r2
 8007666:	b21a      	sxth	r2, r3
 8007668:	215e      	movs	r1, #94	; 0x5e
 800766a:	187b      	adds	r3, r7, r1
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	18d3      	adds	r3, r2, r3
 8007678:	187a      	adds	r2, r7, r1
 800767a:	8812      	ldrh	r2, [r2, #0]
 800767c:	49a2      	ldr	r1, [pc, #648]	; (8007908 <USB_ActivateEndpoint+0x368>)
 800767e:	430a      	orrs	r2, r1
 8007680:	b292      	uxth	r2, r2
 8007682:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	7b1b      	ldrb	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d000      	beq.n	800768e <USB_ActivateEndpoint+0xee>
 800768c:	e150      	b.n	8007930 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d100      	bne.n	8007698 <USB_ActivateEndpoint+0xf8>
 8007696:	e07a      	b.n	800778e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2250      	movs	r2, #80	; 0x50
 80076a0:	5a9b      	ldrh	r3, [r3, r2]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	001a      	movs	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	189b      	adds	r3, r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	00da      	lsls	r2, r3, #3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	18d3      	adds	r3, r2, r3
 80076b6:	2280      	movs	r2, #128	; 0x80
 80076b8:	00d2      	lsls	r2, r2, #3
 80076ba:	4694      	mov	ip, r2
 80076bc:	4463      	add	r3, ip
 80076be:	613b      	str	r3, [r7, #16]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	18db      	adds	r3, r3, r3
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	18d2      	adds	r2, r2, r3
 80076da:	210e      	movs	r1, #14
 80076dc:	187b      	adds	r3, r7, r1
 80076de:	8812      	ldrh	r2, [r2, #0]
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	187b      	adds	r3, r7, r1
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	4013      	ands	r3, r2
 80076ea:	d016      	beq.n	800771a <USB_ActivateEndpoint+0x17a>
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	18d3      	adds	r3, r2, r3
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	200c      	movs	r0, #12
 80076fc:	183b      	adds	r3, r7, r0
 80076fe:	4983      	ldr	r1, [pc, #524]	; (800790c <USB_ActivateEndpoint+0x36c>)
 8007700:	400a      	ands	r2, r1
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	18d3      	adds	r3, r2, r3
 800770e:	183a      	adds	r2, r7, r0
 8007710:	8812      	ldrh	r2, [r2, #0]
 8007712:	497f      	ldr	r1, [pc, #508]	; (8007910 <USB_ActivateEndpoint+0x370>)
 8007714:	430a      	orrs	r2, r1
 8007716:	b292      	uxth	r2, r2
 8007718:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	78db      	ldrb	r3, [r3, #3]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d01d      	beq.n	800775e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	18d3      	adds	r3, r2, r3
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29a      	uxth	r2, r3
 8007730:	2008      	movs	r0, #8
 8007732:	183b      	adds	r3, r7, r0
 8007734:	4977      	ldr	r1, [pc, #476]	; (8007914 <USB_ActivateEndpoint+0x374>)
 8007736:	400a      	ands	r2, r1
 8007738:	801a      	strh	r2, [r3, #0]
 800773a:	183b      	adds	r3, r7, r0
 800773c:	183a      	adds	r2, r7, r0
 800773e:	8812      	ldrh	r2, [r2, #0]
 8007740:	2120      	movs	r1, #32
 8007742:	404a      	eors	r2, r1
 8007744:	801a      	strh	r2, [r3, #0]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	18d3      	adds	r3, r2, r3
 8007750:	183a      	adds	r2, r7, r0
 8007752:	8812      	ldrh	r2, [r2, #0]
 8007754:	496c      	ldr	r1, [pc, #432]	; (8007908 <USB_ActivateEndpoint+0x368>)
 8007756:	430a      	orrs	r2, r1
 8007758:	b292      	uxth	r2, r2
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	e25e      	b.n	8007c1c <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	18d3      	adds	r3, r2, r3
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29a      	uxth	r2, r3
 800776c:	200a      	movs	r0, #10
 800776e:	183b      	adds	r3, r7, r0
 8007770:	4968      	ldr	r1, [pc, #416]	; (8007914 <USB_ActivateEndpoint+0x374>)
 8007772:	400a      	ands	r2, r1
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	18d3      	adds	r3, r2, r3
 8007780:	183a      	adds	r2, r7, r0
 8007782:	8812      	ldrh	r2, [r2, #0]
 8007784:	4960      	ldr	r1, [pc, #384]	; (8007908 <USB_ActivateEndpoint+0x368>)
 8007786:	430a      	orrs	r2, r1
 8007788:	b292      	uxth	r2, r2
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	e246      	b.n	8007c1c <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2250      	movs	r2, #80	; 0x50
 8007796:	5a9b      	ldrh	r3, [r3, r2]
 8007798:	b29b      	uxth	r3, r3
 800779a:	001a      	movs	r2, r3
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	00da      	lsls	r2, r3, #3
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	18d3      	adds	r3, r2, r3
 80077ac:	4a5a      	ldr	r2, [pc, #360]	; (8007918 <USB_ActivateEndpoint+0x378>)
 80077ae:	4694      	mov	ip, r2
 80077b0:	4463      	add	r3, ip
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	88db      	ldrh	r3, [r3, #6]
 80077b8:	085b      	lsrs	r3, r3, #1
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	18db      	adds	r3, r3, r3
 80077be:	b29a      	uxth	r2, r3
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2250      	movs	r2, #80	; 0x50
 80077cc:	5a9b      	ldrh	r3, [r3, r2]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	001a      	movs	r2, r3
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	189b      	adds	r3, r3, r2
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	00da      	lsls	r2, r3, #3
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	18d3      	adds	r3, r2, r3
 80077e2:	4a4e      	ldr	r2, [pc, #312]	; (800791c <USB_ActivateEndpoint+0x37c>)
 80077e4:	4694      	mov	ip, r2
 80077e6:	4463      	add	r3, ip
 80077e8:	623b      	str	r3, [r7, #32]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d110      	bne.n	8007814 <USB_ActivateEndpoint+0x274>
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4a49      	ldr	r2, [pc, #292]	; (8007920 <USB_ActivateEndpoint+0x380>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	801a      	strh	r2, [r3, #0]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	4a46      	ldr	r2, [pc, #280]	; (8007924 <USB_ActivateEndpoint+0x384>)
 800780a:	4313      	orrs	r3, r2
 800780c:	b29a      	uxth	r2, r3
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	e02b      	b.n	800786c <USB_ActivateEndpoint+0x2cc>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b3e      	cmp	r3, #62	; 0x3e
 800781a:	d812      	bhi.n	8007842 <USB_ActivateEndpoint+0x2a2>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	085b      	lsrs	r3, r3, #1
 8007822:	663b      	str	r3, [r7, #96]	; 0x60
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2201      	movs	r2, #1
 800782a:	4013      	ands	r3, r2
 800782c:	d002      	beq.n	8007834 <USB_ActivateEndpoint+0x294>
 800782e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007830:	3301      	adds	r3, #1
 8007832:	663b      	str	r3, [r7, #96]	; 0x60
 8007834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007836:	b29b      	uxth	r3, r3
 8007838:	029b      	lsls	r3, r3, #10
 800783a:	b29a      	uxth	r2, r3
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	e014      	b.n	800786c <USB_ActivateEndpoint+0x2cc>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	663b      	str	r3, [r7, #96]	; 0x60
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	221f      	movs	r2, #31
 8007850:	4013      	ands	r3, r2
 8007852:	d102      	bne.n	800785a <USB_ActivateEndpoint+0x2ba>
 8007854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007856:	3b01      	subs	r3, #1
 8007858:	663b      	str	r3, [r7, #96]	; 0x60
 800785a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800785c:	b29b      	uxth	r3, r3
 800785e:	029b      	lsls	r3, r3, #10
 8007860:	b29b      	uxth	r3, r3
 8007862:	4a30      	ldr	r2, [pc, #192]	; (8007924 <USB_ActivateEndpoint+0x384>)
 8007864:	4313      	orrs	r3, r2
 8007866:	b29a      	uxth	r2, r3
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	18d2      	adds	r2, r2, r3
 8007876:	211e      	movs	r1, #30
 8007878:	187b      	adds	r3, r7, r1
 800787a:	8812      	ldrh	r2, [r2, #0]
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	187b      	adds	r3, r7, r1
 8007880:	881a      	ldrh	r2, [r3, #0]
 8007882:	2380      	movs	r3, #128	; 0x80
 8007884:	01db      	lsls	r3, r3, #7
 8007886:	4013      	ands	r3, r2
 8007888:	d016      	beq.n	80078b8 <USB_ActivateEndpoint+0x318>
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29a      	uxth	r2, r3
 8007898:	201c      	movs	r0, #28
 800789a:	183b      	adds	r3, r7, r0
 800789c:	491b      	ldr	r1, [pc, #108]	; (800790c <USB_ActivateEndpoint+0x36c>)
 800789e:	400a      	ands	r2, r1
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	18d3      	adds	r3, r2, r3
 80078ac:	183a      	adds	r2, r7, r0
 80078ae:	8812      	ldrh	r2, [r2, #0]
 80078b0:	491d      	ldr	r1, [pc, #116]	; (8007928 <USB_ActivateEndpoint+0x388>)
 80078b2:	430a      	orrs	r2, r1
 80078b4:	b292      	uxth	r2, r2
 80078b6:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	18d3      	adds	r3, r2, r3
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	201a      	movs	r0, #26
 80078c8:	183b      	adds	r3, r7, r0
 80078ca:	4918      	ldr	r1, [pc, #96]	; (800792c <USB_ActivateEndpoint+0x38c>)
 80078cc:	400a      	ands	r2, r1
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	183b      	adds	r3, r7, r0
 80078d2:	183a      	adds	r2, r7, r0
 80078d4:	8812      	ldrh	r2, [r2, #0]
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	0149      	lsls	r1, r1, #5
 80078da:	404a      	eors	r2, r1
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	183b      	adds	r3, r7, r0
 80078e0:	183a      	adds	r2, r7, r0
 80078e2:	8812      	ldrh	r2, [r2, #0]
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	0189      	lsls	r1, r1, #6
 80078e8:	404a      	eors	r2, r1
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	18d3      	adds	r3, r2, r3
 80078f6:	183a      	adds	r2, r7, r0
 80078f8:	8812      	ldrh	r2, [r2, #0]
 80078fa:	4903      	ldr	r1, [pc, #12]	; (8007908 <USB_ActivateEndpoint+0x368>)
 80078fc:	430a      	orrs	r2, r1
 80078fe:	b292      	uxth	r2, r2
 8007900:	801a      	strh	r2, [r3, #0]
 8007902:	e18b      	b.n	8007c1c <USB_ActivateEndpoint+0x67c>
 8007904:	ffff898f 	.word	0xffff898f
 8007908:	ffff8080 	.word	0xffff8080
 800790c:	ffff8f8f 	.word	0xffff8f8f
 8007910:	ffff80c0 	.word	0xffff80c0
 8007914:	ffff8fbf 	.word	0xffff8fbf
 8007918:	00000404 	.word	0x00000404
 800791c:	00000406 	.word	0x00000406
 8007920:	ffff83ff 	.word	0xffff83ff
 8007924:	ffff8000 	.word	0xffff8000
 8007928:	ffffc080 	.word	0xffffc080
 800792c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	18d3      	adds	r3, r2, r3
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29a      	uxth	r2, r3
 800793e:	205c      	movs	r0, #92	; 0x5c
 8007940:	183b      	adds	r3, r7, r0
 8007942:	49ba      	ldr	r1, [pc, #744]	; (8007c2c <USB_ActivateEndpoint+0x68c>)
 8007944:	400a      	ands	r2, r1
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	18d3      	adds	r3, r2, r3
 8007952:	183a      	adds	r2, r7, r0
 8007954:	8812      	ldrh	r2, [r2, #0]
 8007956:	49b6      	ldr	r1, [pc, #728]	; (8007c30 <USB_ActivateEndpoint+0x690>)
 8007958:	430a      	orrs	r2, r1
 800795a:	b292      	uxth	r2, r2
 800795c:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	65bb      	str	r3, [r7, #88]	; 0x58
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2250      	movs	r2, #80	; 0x50
 8007966:	5a9b      	ldrh	r3, [r3, r2]
 8007968:	b29b      	uxth	r3, r3
 800796a:	001a      	movs	r2, r3
 800796c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800796e:	189b      	adds	r3, r3, r2
 8007970:	65bb      	str	r3, [r7, #88]	; 0x58
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	00da      	lsls	r2, r3, #3
 8007978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800797a:	18d3      	adds	r3, r2, r3
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	00d2      	lsls	r2, r2, #3
 8007980:	4694      	mov	ip, r2
 8007982:	4463      	add	r3, ip
 8007984:	657b      	str	r3, [r7, #84]	; 0x54
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	891b      	ldrh	r3, [r3, #8]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	18db      	adds	r3, r3, r3
 8007990:	b29a      	uxth	r2, r3
 8007992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	653b      	str	r3, [r7, #80]	; 0x50
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2250      	movs	r2, #80	; 0x50
 800799e:	5a9b      	ldrh	r3, [r3, r2]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	001a      	movs	r2, r3
 80079a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a6:	189b      	adds	r3, r3, r2
 80079a8:	653b      	str	r3, [r7, #80]	; 0x50
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	00da      	lsls	r2, r3, #3
 80079b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b2:	18d3      	adds	r3, r2, r3
 80079b4:	4a9f      	ldr	r2, [pc, #636]	; (8007c34 <USB_ActivateEndpoint+0x694>)
 80079b6:	4694      	mov	ip, r2
 80079b8:	4463      	add	r3, ip
 80079ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	895b      	ldrh	r3, [r3, #10]
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	18db      	adds	r3, r3, r3
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d000      	beq.n	80079d6 <USB_ActivateEndpoint+0x436>
 80079d4:	e087      	b.n	8007ae6 <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	18d2      	adds	r2, r2, r3
 80079e0:	213c      	movs	r1, #60	; 0x3c
 80079e2:	187b      	adds	r3, r7, r1
 80079e4:	8812      	ldrh	r2, [r2, #0]
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	187b      	adds	r3, r7, r1
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	01db      	lsls	r3, r3, #7
 80079f0:	4013      	ands	r3, r2
 80079f2:	d016      	beq.n	8007a22 <USB_ActivateEndpoint+0x482>
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	18d3      	adds	r3, r2, r3
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	203a      	movs	r0, #58	; 0x3a
 8007a04:	183b      	adds	r3, r7, r0
 8007a06:	4989      	ldr	r1, [pc, #548]	; (8007c2c <USB_ActivateEndpoint+0x68c>)
 8007a08:	400a      	ands	r2, r1
 8007a0a:	801a      	strh	r2, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	18d3      	adds	r3, r2, r3
 8007a16:	183a      	adds	r2, r7, r0
 8007a18:	8812      	ldrh	r2, [r2, #0]
 8007a1a:	4987      	ldr	r1, [pc, #540]	; (8007c38 <USB_ActivateEndpoint+0x698>)
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	b292      	uxth	r2, r2
 8007a20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	18d2      	adds	r2, r2, r3
 8007a2c:	2138      	movs	r1, #56	; 0x38
 8007a2e:	187b      	adds	r3, r7, r1
 8007a30:	8812      	ldrh	r2, [r2, #0]
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	187b      	adds	r3, r7, r1
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	2240      	movs	r2, #64	; 0x40
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d016      	beq.n	8007a6c <USB_ActivateEndpoint+0x4cc>
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	18d3      	adds	r3, r2, r3
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	2036      	movs	r0, #54	; 0x36
 8007a4e:	183b      	adds	r3, r7, r0
 8007a50:	4976      	ldr	r1, [pc, #472]	; (8007c2c <USB_ActivateEndpoint+0x68c>)
 8007a52:	400a      	ands	r2, r1
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	18d3      	adds	r3, r2, r3
 8007a60:	183a      	adds	r2, r7, r0
 8007a62:	8812      	ldrh	r2, [r2, #0]
 8007a64:	4975      	ldr	r1, [pc, #468]	; (8007c3c <USB_ActivateEndpoint+0x69c>)
 8007a66:	430a      	orrs	r2, r1
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	18d3      	adds	r3, r2, r3
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	2034      	movs	r0, #52	; 0x34
 8007a7c:	183b      	adds	r3, r7, r0
 8007a7e:	4970      	ldr	r1, [pc, #448]	; (8007c40 <USB_ActivateEndpoint+0x6a0>)
 8007a80:	400a      	ands	r2, r1
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	183b      	adds	r3, r7, r0
 8007a86:	183a      	adds	r2, r7, r0
 8007a88:	8812      	ldrh	r2, [r2, #0]
 8007a8a:	2180      	movs	r1, #128	; 0x80
 8007a8c:	0149      	lsls	r1, r1, #5
 8007a8e:	404a      	eors	r2, r1
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	183b      	adds	r3, r7, r0
 8007a94:	183a      	adds	r2, r7, r0
 8007a96:	8812      	ldrh	r2, [r2, #0]
 8007a98:	2180      	movs	r1, #128	; 0x80
 8007a9a:	0189      	lsls	r1, r1, #6
 8007a9c:	404a      	eors	r2, r1
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	18d3      	adds	r3, r2, r3
 8007aaa:	183a      	adds	r2, r7, r0
 8007aac:	8812      	ldrh	r2, [r2, #0]
 8007aae:	4965      	ldr	r1, [pc, #404]	; (8007c44 <USB_ActivateEndpoint+0x6a4>)
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	b292      	uxth	r2, r2
 8007ab4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	18d3      	adds	r3, r2, r3
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	2032      	movs	r0, #50	; 0x32
 8007ac6:	183b      	adds	r3, r7, r0
 8007ac8:	495f      	ldr	r1, [pc, #380]	; (8007c48 <USB_ActivateEndpoint+0x6a8>)
 8007aca:	400a      	ands	r2, r1
 8007acc:	801a      	strh	r2, [r3, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	18d3      	adds	r3, r2, r3
 8007ad8:	183a      	adds	r2, r7, r0
 8007ada:	8812      	ldrh	r2, [r2, #0]
 8007adc:	4959      	ldr	r1, [pc, #356]	; (8007c44 <USB_ActivateEndpoint+0x6a4>)
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	b292      	uxth	r2, r2
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	e09a      	b.n	8007c1c <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	18d2      	adds	r2, r2, r3
 8007af0:	214a      	movs	r1, #74	; 0x4a
 8007af2:	187b      	adds	r3, r7, r1
 8007af4:	8812      	ldrh	r2, [r2, #0]
 8007af6:	801a      	strh	r2, [r3, #0]
 8007af8:	187b      	adds	r3, r7, r1
 8007afa:	881a      	ldrh	r2, [r3, #0]
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	01db      	lsls	r3, r3, #7
 8007b00:	4013      	ands	r3, r2
 8007b02:	d016      	beq.n	8007b32 <USB_ActivateEndpoint+0x592>
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	18d3      	adds	r3, r2, r3
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	2048      	movs	r0, #72	; 0x48
 8007b14:	183b      	adds	r3, r7, r0
 8007b16:	4945      	ldr	r1, [pc, #276]	; (8007c2c <USB_ActivateEndpoint+0x68c>)
 8007b18:	400a      	ands	r2, r1
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	18d3      	adds	r3, r2, r3
 8007b26:	183a      	adds	r2, r7, r0
 8007b28:	8812      	ldrh	r2, [r2, #0]
 8007b2a:	4943      	ldr	r1, [pc, #268]	; (8007c38 <USB_ActivateEndpoint+0x698>)
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	b292      	uxth	r2, r2
 8007b30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	18d2      	adds	r2, r2, r3
 8007b3c:	2146      	movs	r1, #70	; 0x46
 8007b3e:	187b      	adds	r3, r7, r1
 8007b40:	8812      	ldrh	r2, [r2, #0]
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	187b      	adds	r3, r7, r1
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	2240      	movs	r2, #64	; 0x40
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	d016      	beq.n	8007b7c <USB_ActivateEndpoint+0x5dc>
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	18d3      	adds	r3, r2, r3
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	2044      	movs	r0, #68	; 0x44
 8007b5e:	183b      	adds	r3, r7, r0
 8007b60:	4932      	ldr	r1, [pc, #200]	; (8007c2c <USB_ActivateEndpoint+0x68c>)
 8007b62:	400a      	ands	r2, r1
 8007b64:	801a      	strh	r2, [r3, #0]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	18d3      	adds	r3, r2, r3
 8007b70:	183a      	adds	r2, r7, r0
 8007b72:	8812      	ldrh	r2, [r2, #0]
 8007b74:	4931      	ldr	r1, [pc, #196]	; (8007c3c <USB_ActivateEndpoint+0x69c>)
 8007b76:	430a      	orrs	r2, r1
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	78db      	ldrb	r3, [r3, #3]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d01d      	beq.n	8007bc0 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	18d3      	adds	r3, r2, r3
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	2040      	movs	r0, #64	; 0x40
 8007b94:	183b      	adds	r3, r7, r0
 8007b96:	492c      	ldr	r1, [pc, #176]	; (8007c48 <USB_ActivateEndpoint+0x6a8>)
 8007b98:	400a      	ands	r2, r1
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	183b      	adds	r3, r7, r0
 8007b9e:	183a      	adds	r2, r7, r0
 8007ba0:	8812      	ldrh	r2, [r2, #0]
 8007ba2:	2120      	movs	r1, #32
 8007ba4:	404a      	eors	r2, r1
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	183a      	adds	r2, r7, r0
 8007bb4:	8812      	ldrh	r2, [r2, #0]
 8007bb6:	4923      	ldr	r1, [pc, #140]	; (8007c44 <USB_ActivateEndpoint+0x6a4>)
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	b292      	uxth	r2, r2
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	e016      	b.n	8007bee <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	18d3      	adds	r3, r2, r3
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	2042      	movs	r0, #66	; 0x42
 8007bd0:	183b      	adds	r3, r7, r0
 8007bd2:	491d      	ldr	r1, [pc, #116]	; (8007c48 <USB_ActivateEndpoint+0x6a8>)
 8007bd4:	400a      	ands	r2, r1
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	18d3      	adds	r3, r2, r3
 8007be2:	183a      	adds	r2, r7, r0
 8007be4:	8812      	ldrh	r2, [r2, #0]
 8007be6:	4917      	ldr	r1, [pc, #92]	; (8007c44 <USB_ActivateEndpoint+0x6a4>)
 8007be8:	430a      	orrs	r2, r1
 8007bea:	b292      	uxth	r2, r2
 8007bec:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	18d3      	adds	r3, r2, r3
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	203e      	movs	r0, #62	; 0x3e
 8007bfe:	183b      	adds	r3, r7, r0
 8007c00:	490f      	ldr	r1, [pc, #60]	; (8007c40 <USB_ActivateEndpoint+0x6a0>)
 8007c02:	400a      	ands	r2, r1
 8007c04:	801a      	strh	r2, [r3, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	18d3      	adds	r3, r2, r3
 8007c10:	183a      	adds	r2, r7, r0
 8007c12:	8812      	ldrh	r2, [r2, #0]
 8007c14:	490b      	ldr	r1, [pc, #44]	; (8007c44 <USB_ActivateEndpoint+0x6a4>)
 8007c16:	430a      	orrs	r2, r1
 8007c18:	b292      	uxth	r2, r2
 8007c1a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8007c1c:	2367      	movs	r3, #103	; 0x67
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	781b      	ldrb	r3, [r3, #0]
}
 8007c22:	0018      	movs	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	b01a      	add	sp, #104	; 0x68
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	ffff8f8f 	.word	0xffff8f8f
 8007c30:	ffff8180 	.word	0xffff8180
 8007c34:	00000404 	.word	0x00000404
 8007c38:	ffffc080 	.word	0xffffc080
 8007c3c:	ffff80c0 	.word	0xffff80c0
 8007c40:	ffffbf8f 	.word	0xffffbf8f
 8007c44:	ffff8080 	.word	0xffff8080
 8007c48:	ffff8fbf 	.word	0xffff8fbf

08007c4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08c      	sub	sp, #48	; 0x30
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	7b1b      	ldrb	r3, [r3, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d000      	beq.n	8007c60 <USB_DeactivateEndpoint+0x14>
 8007c5e:	e07e      	b.n	8007d5e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d03c      	beq.n	8007ce2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	18d2      	adds	r2, r2, r3
 8007c72:	210c      	movs	r1, #12
 8007c74:	187b      	adds	r3, r7, r1
 8007c76:	8812      	ldrh	r2, [r2, #0]
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	187b      	adds	r3, r7, r1
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	2240      	movs	r2, #64	; 0x40
 8007c80:	4013      	ands	r3, r2
 8007c82:	d016      	beq.n	8007cb2 <USB_DeactivateEndpoint+0x66>
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	18d3      	adds	r3, r2, r3
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	200a      	movs	r0, #10
 8007c94:	183b      	adds	r3, r7, r0
 8007c96:	49c7      	ldr	r1, [pc, #796]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007c98:	400a      	ands	r2, r1
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	18d3      	adds	r3, r2, r3
 8007ca6:	183a      	adds	r2, r7, r0
 8007ca8:	8812      	ldrh	r2, [r2, #0]
 8007caa:	49c3      	ldr	r1, [pc, #780]	; (8007fb8 <USB_DeactivateEndpoint+0x36c>)
 8007cac:	430a      	orrs	r2, r1
 8007cae:	b292      	uxth	r2, r2
 8007cb0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	18d3      	adds	r3, r2, r3
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	2008      	movs	r0, #8
 8007cc2:	183b      	adds	r3, r7, r0
 8007cc4:	49bd      	ldr	r1, [pc, #756]	; (8007fbc <USB_DeactivateEndpoint+0x370>)
 8007cc6:	400a      	ands	r2, r1
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	18d3      	adds	r3, r2, r3
 8007cd4:	183a      	adds	r2, r7, r0
 8007cd6:	8812      	ldrh	r2, [r2, #0]
 8007cd8:	49b9      	ldr	r1, [pc, #740]	; (8007fc0 <USB_DeactivateEndpoint+0x374>)
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	b292      	uxth	r2, r2
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e163      	b.n	8007faa <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	18d2      	adds	r2, r2, r3
 8007cec:	2112      	movs	r1, #18
 8007cee:	187b      	adds	r3, r7, r1
 8007cf0:	8812      	ldrh	r2, [r2, #0]
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	187b      	adds	r3, r7, r1
 8007cf6:	881a      	ldrh	r2, [r3, #0]
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	01db      	lsls	r3, r3, #7
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d016      	beq.n	8007d2e <USB_DeactivateEndpoint+0xe2>
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	18d3      	adds	r3, r2, r3
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	2010      	movs	r0, #16
 8007d10:	183b      	adds	r3, r7, r0
 8007d12:	49a8      	ldr	r1, [pc, #672]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007d14:	400a      	ands	r2, r1
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	18d3      	adds	r3, r2, r3
 8007d22:	183a      	adds	r2, r7, r0
 8007d24:	8812      	ldrh	r2, [r2, #0]
 8007d26:	49a7      	ldr	r1, [pc, #668]	; (8007fc4 <USB_DeactivateEndpoint+0x378>)
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	b292      	uxth	r2, r2
 8007d2c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	18d3      	adds	r3, r2, r3
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	200e      	movs	r0, #14
 8007d3e:	183b      	adds	r3, r7, r0
 8007d40:	49a1      	ldr	r1, [pc, #644]	; (8007fc8 <USB_DeactivateEndpoint+0x37c>)
 8007d42:	400a      	ands	r2, r1
 8007d44:	801a      	strh	r2, [r3, #0]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	18d3      	adds	r3, r2, r3
 8007d50:	183a      	adds	r2, r7, r0
 8007d52:	8812      	ldrh	r2, [r2, #0]
 8007d54:	499a      	ldr	r1, [pc, #616]	; (8007fc0 <USB_DeactivateEndpoint+0x374>)
 8007d56:	430a      	orrs	r2, r1
 8007d58:	b292      	uxth	r2, r2
 8007d5a:	801a      	strh	r2, [r3, #0]
 8007d5c:	e125      	b.n	8007faa <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d000      	beq.n	8007d68 <USB_DeactivateEndpoint+0x11c>
 8007d66:	e090      	b.n	8007e8a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	18d2      	adds	r2, r2, r3
 8007d72:	2120      	movs	r1, #32
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	8812      	ldrh	r2, [r2, #0]
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	187b      	adds	r3, r7, r1
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	2380      	movs	r3, #128	; 0x80
 8007d80:	01db      	lsls	r3, r3, #7
 8007d82:	4013      	ands	r3, r2
 8007d84:	d016      	beq.n	8007db4 <USB_DeactivateEndpoint+0x168>
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	18d3      	adds	r3, r2, r3
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	201e      	movs	r0, #30
 8007d96:	183b      	adds	r3, r7, r0
 8007d98:	4986      	ldr	r1, [pc, #536]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007d9a:	400a      	ands	r2, r1
 8007d9c:	801a      	strh	r2, [r3, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	18d3      	adds	r3, r2, r3
 8007da8:	183a      	adds	r2, r7, r0
 8007daa:	8812      	ldrh	r2, [r2, #0]
 8007dac:	4985      	ldr	r1, [pc, #532]	; (8007fc4 <USB_DeactivateEndpoint+0x378>)
 8007dae:	430a      	orrs	r2, r1
 8007db0:	b292      	uxth	r2, r2
 8007db2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	18d2      	adds	r2, r2, r3
 8007dbe:	211c      	movs	r1, #28
 8007dc0:	187b      	adds	r3, r7, r1
 8007dc2:	8812      	ldrh	r2, [r2, #0]
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	2240      	movs	r2, #64	; 0x40
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d016      	beq.n	8007dfe <USB_DeactivateEndpoint+0x1b2>
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	18d3      	adds	r3, r2, r3
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	201a      	movs	r0, #26
 8007de0:	183b      	adds	r3, r7, r0
 8007de2:	4974      	ldr	r1, [pc, #464]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007de4:	400a      	ands	r2, r1
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	18d3      	adds	r3, r2, r3
 8007df2:	183a      	adds	r2, r7, r0
 8007df4:	8812      	ldrh	r2, [r2, #0]
 8007df6:	4970      	ldr	r1, [pc, #448]	; (8007fb8 <USB_DeactivateEndpoint+0x36c>)
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	b292      	uxth	r2, r2
 8007dfc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	18d3      	adds	r3, r2, r3
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	2018      	movs	r0, #24
 8007e0e:	183b      	adds	r3, r7, r0
 8007e10:	4968      	ldr	r1, [pc, #416]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007e12:	400a      	ands	r2, r1
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	18d3      	adds	r3, r2, r3
 8007e20:	183a      	adds	r2, r7, r0
 8007e22:	8812      	ldrh	r2, [r2, #0]
 8007e24:	4964      	ldr	r1, [pc, #400]	; (8007fb8 <USB_DeactivateEndpoint+0x36c>)
 8007e26:	430a      	orrs	r2, r1
 8007e28:	b292      	uxth	r2, r2
 8007e2a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	18d3      	adds	r3, r2, r3
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	2016      	movs	r0, #22
 8007e3c:	183b      	adds	r3, r7, r0
 8007e3e:	4962      	ldr	r1, [pc, #392]	; (8007fc8 <USB_DeactivateEndpoint+0x37c>)
 8007e40:	400a      	ands	r2, r1
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	18d3      	adds	r3, r2, r3
 8007e4e:	183a      	adds	r2, r7, r0
 8007e50:	8812      	ldrh	r2, [r2, #0]
 8007e52:	495b      	ldr	r1, [pc, #364]	; (8007fc0 <USB_DeactivateEndpoint+0x374>)
 8007e54:	430a      	orrs	r2, r1
 8007e56:	b292      	uxth	r2, r2
 8007e58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	18d3      	adds	r3, r2, r3
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	2014      	movs	r0, #20
 8007e6a:	183b      	adds	r3, r7, r0
 8007e6c:	4953      	ldr	r1, [pc, #332]	; (8007fbc <USB_DeactivateEndpoint+0x370>)
 8007e6e:	400a      	ands	r2, r1
 8007e70:	801a      	strh	r2, [r3, #0]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	18d3      	adds	r3, r2, r3
 8007e7c:	183a      	adds	r2, r7, r0
 8007e7e:	8812      	ldrh	r2, [r2, #0]
 8007e80:	494f      	ldr	r1, [pc, #316]	; (8007fc0 <USB_DeactivateEndpoint+0x374>)
 8007e82:	430a      	orrs	r2, r1
 8007e84:	b292      	uxth	r2, r2
 8007e86:	801a      	strh	r2, [r3, #0]
 8007e88:	e08f      	b.n	8007faa <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	18d2      	adds	r2, r2, r3
 8007e94:	212e      	movs	r1, #46	; 0x2e
 8007e96:	187b      	adds	r3, r7, r1
 8007e98:	8812      	ldrh	r2, [r2, #0]
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	881a      	ldrh	r2, [r3, #0]
 8007ea0:	2380      	movs	r3, #128	; 0x80
 8007ea2:	01db      	lsls	r3, r3, #7
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	d016      	beq.n	8007ed6 <USB_DeactivateEndpoint+0x28a>
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	18d3      	adds	r3, r2, r3
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	202c      	movs	r0, #44	; 0x2c
 8007eb8:	183b      	adds	r3, r7, r0
 8007eba:	493e      	ldr	r1, [pc, #248]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007ebc:	400a      	ands	r2, r1
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	18d3      	adds	r3, r2, r3
 8007eca:	183a      	adds	r2, r7, r0
 8007ecc:	8812      	ldrh	r2, [r2, #0]
 8007ece:	493d      	ldr	r1, [pc, #244]	; (8007fc4 <USB_DeactivateEndpoint+0x378>)
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	b292      	uxth	r2, r2
 8007ed4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	18d2      	adds	r2, r2, r3
 8007ee0:	212a      	movs	r1, #42	; 0x2a
 8007ee2:	187b      	adds	r3, r7, r1
 8007ee4:	8812      	ldrh	r2, [r2, #0]
 8007ee6:	801a      	strh	r2, [r3, #0]
 8007ee8:	187b      	adds	r3, r7, r1
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	2240      	movs	r2, #64	; 0x40
 8007eee:	4013      	ands	r3, r2
 8007ef0:	d016      	beq.n	8007f20 <USB_DeactivateEndpoint+0x2d4>
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	18d3      	adds	r3, r2, r3
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	2028      	movs	r0, #40	; 0x28
 8007f02:	183b      	adds	r3, r7, r0
 8007f04:	492b      	ldr	r1, [pc, #172]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007f06:	400a      	ands	r2, r1
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	18d3      	adds	r3, r2, r3
 8007f14:	183a      	adds	r2, r7, r0
 8007f16:	8812      	ldrh	r2, [r2, #0]
 8007f18:	4927      	ldr	r1, [pc, #156]	; (8007fb8 <USB_DeactivateEndpoint+0x36c>)
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	b292      	uxth	r2, r2
 8007f1e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	18d3      	adds	r3, r2, r3
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	2026      	movs	r0, #38	; 0x26
 8007f30:	183b      	adds	r3, r7, r0
 8007f32:	4920      	ldr	r1, [pc, #128]	; (8007fb4 <USB_DeactivateEndpoint+0x368>)
 8007f34:	400a      	ands	r2, r1
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	18d3      	adds	r3, r2, r3
 8007f42:	183a      	adds	r2, r7, r0
 8007f44:	8812      	ldrh	r2, [r2, #0]
 8007f46:	491f      	ldr	r1, [pc, #124]	; (8007fc4 <USB_DeactivateEndpoint+0x378>)
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	18d3      	adds	r3, r2, r3
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	2024      	movs	r0, #36	; 0x24
 8007f5e:	183b      	adds	r3, r7, r0
 8007f60:	4916      	ldr	r1, [pc, #88]	; (8007fbc <USB_DeactivateEndpoint+0x370>)
 8007f62:	400a      	ands	r2, r1
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	18d3      	adds	r3, r2, r3
 8007f70:	183a      	adds	r2, r7, r0
 8007f72:	8812      	ldrh	r2, [r2, #0]
 8007f74:	4912      	ldr	r1, [pc, #72]	; (8007fc0 <USB_DeactivateEndpoint+0x374>)
 8007f76:	430a      	orrs	r2, r1
 8007f78:	b292      	uxth	r2, r2
 8007f7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	18d3      	adds	r3, r2, r3
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	2022      	movs	r0, #34	; 0x22
 8007f8c:	183b      	adds	r3, r7, r0
 8007f8e:	490e      	ldr	r1, [pc, #56]	; (8007fc8 <USB_DeactivateEndpoint+0x37c>)
 8007f90:	400a      	ands	r2, r1
 8007f92:	801a      	strh	r2, [r3, #0]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	18d3      	adds	r3, r2, r3
 8007f9e:	183a      	adds	r2, r7, r0
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	4907      	ldr	r1, [pc, #28]	; (8007fc0 <USB_DeactivateEndpoint+0x374>)
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	b292      	uxth	r2, r2
 8007fa8:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	0018      	movs	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b00c      	add	sp, #48	; 0x30
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	ffff8f8f 	.word	0xffff8f8f
 8007fb8:	ffff80c0 	.word	0xffff80c0
 8007fbc:	ffff8fbf 	.word	0xffff8fbf
 8007fc0:	ffff8080 	.word	0xffff8080
 8007fc4:	ffffc080 	.word	0xffffc080
 8007fc8:	ffffbf8f 	.word	0xffffbf8f

08007fcc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fcc:	b5b0      	push	{r4, r5, r7, lr}
 8007fce:	b0c4      	sub	sp, #272	; 0x110
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d001      	beq.n	8007fe2 <USB_EPStartXfer+0x16>
 8007fde:	f000 fd63 	bl	8008aa8 <USB_EPStartXfer+0xadc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d906      	bls.n	8007ffc <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2286      	movs	r2, #134	; 0x86
 8007ff4:	0052      	lsls	r2, r2, #1
 8007ff6:	18ba      	adds	r2, r7, r2
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e005      	b.n	8008008 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2286      	movs	r2, #134	; 0x86
 8008002:	0052      	lsls	r2, r2, #1
 8008004:	18ba      	adds	r2, r7, r2
 8008006:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	7b1b      	ldrb	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d125      	bne.n	800805c <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	6959      	ldr	r1, [r3, #20]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88da      	ldrh	r2, [r3, #6]
 8008018:	2486      	movs	r4, #134	; 0x86
 800801a:	0064      	lsls	r4, r4, #1
 800801c:	193b      	adds	r3, r7, r4
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 fa62 	bl	80094ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2250      	movs	r2, #80	; 0x50
 8008030:	5a9b      	ldrh	r3, [r3, r2]
 8008032:	b29b      	uxth	r3, r3
 8008034:	001a      	movs	r2, r3
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	189b      	adds	r3, r3, r2
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	00da      	lsls	r2, r3, #3
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	18d3      	adds	r3, r2, r3
 8008046:	4ad4      	ldr	r2, [pc, #848]	; (8008398 <USB_EPStartXfer+0x3cc>)
 8008048:	4694      	mov	ip, r2
 800804a:	4463      	add	r3, ip
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	193b      	adds	r3, r7, r4
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	b29a      	uxth	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	f000 fce4 	bl	8008a24 <USB_EPStartXfer+0xa58>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	78db      	ldrb	r3, [r3, #3]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d000      	beq.n	8008066 <USB_EPStartXfer+0x9a>
 8008064:	e358      	b.n	8008718 <USB_EPStartXfer+0x74c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	6a1a      	ldr	r2, [r3, #32]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	429a      	cmp	r2, r3
 8008070:	d800      	bhi.n	8008074 <USB_EPStartXfer+0xa8>
 8008072:	e2fe      	b.n	8008672 <USB_EPStartXfer+0x6a6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	18d3      	adds	r3, r2, r3
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	b29a      	uxth	r2, r3
 8008082:	205a      	movs	r0, #90	; 0x5a
 8008084:	183b      	adds	r3, r7, r0
 8008086:	49c5      	ldr	r1, [pc, #788]	; (800839c <USB_EPStartXfer+0x3d0>)
 8008088:	400a      	ands	r2, r1
 800808a:	801a      	strh	r2, [r3, #0]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	18d3      	adds	r3, r2, r3
 8008096:	183a      	adds	r2, r7, r0
 8008098:	8812      	ldrh	r2, [r2, #0]
 800809a:	49c1      	ldr	r1, [pc, #772]	; (80083a0 <USB_EPStartXfer+0x3d4>)
 800809c:	430a      	orrs	r2, r1
 800809e:	b292      	uxth	r2, r2
 80080a0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	2386      	movs	r3, #134	; 0x86
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	18fb      	adds	r3, r7, r3
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	18d3      	adds	r3, r2, r3
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	001a      	movs	r2, r3
 80080c4:	2340      	movs	r3, #64	; 0x40
 80080c6:	4013      	ands	r3, r2
 80080c8:	d100      	bne.n	80080cc <USB_EPStartXfer+0x100>
 80080ca:	e171      	b.n	80083b0 <USB_EPStartXfer+0x3e4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d16c      	bne.n	80081b2 <USB_EPStartXfer+0x1e6>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2250      	movs	r2, #80	; 0x50
 80080e0:	5a9b      	ldrh	r3, [r3, r2]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	001a      	movs	r2, r3
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	189b      	adds	r3, r3, r2
 80080ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	00da      	lsls	r2, r3, #3
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	18d3      	adds	r3, r2, r3
 80080f6:	4aab      	ldr	r2, [pc, #684]	; (80083a4 <USB_EPStartXfer+0x3d8>)
 80080f8:	4694      	mov	ip, r2
 80080fa:	4463      	add	r3, ip
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080fe:	2386      	movs	r3, #134	; 0x86
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	18fb      	adds	r3, r7, r3
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d110      	bne.n	800812c <USB_EPStartXfer+0x160>
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	4aa5      	ldr	r2, [pc, #660]	; (80083a8 <USB_EPStartXfer+0x3dc>)
 8008112:	4013      	ands	r3, r2
 8008114:	b29a      	uxth	r2, r3
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	801a      	strh	r2, [r3, #0]
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	4aa2      	ldr	r2, [pc, #648]	; (80083ac <USB_EPStartXfer+0x3e0>)
 8008122:	4313      	orrs	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	e05e      	b.n	80081ea <USB_EPStartXfer+0x21e>
 800812c:	2386      	movs	r3, #134	; 0x86
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b3e      	cmp	r3, #62	; 0x3e
 8008136:	d81c      	bhi.n	8008172 <USB_EPStartXfer+0x1a6>
 8008138:	2286      	movs	r2, #134	; 0x86
 800813a:	0052      	lsls	r2, r2, #1
 800813c:	18bb      	adds	r3, r7, r2
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	085b      	lsrs	r3, r3, #1
 8008142:	1d79      	adds	r1, r7, #5
 8008144:	31ff      	adds	r1, #255	; 0xff
 8008146:	600b      	str	r3, [r1, #0]
 8008148:	18bb      	adds	r3, r7, r2
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2201      	movs	r2, #1
 800814e:	4013      	ands	r3, r2
 8008150:	d006      	beq.n	8008160 <USB_EPStartXfer+0x194>
 8008152:	1d7b      	adds	r3, r7, #5
 8008154:	33ff      	adds	r3, #255	; 0xff
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3301      	adds	r3, #1
 800815a:	1d7a      	adds	r2, r7, #5
 800815c:	32ff      	adds	r2, #255	; 0xff
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	1d7b      	adds	r3, r7, #5
 8008162:	33ff      	adds	r3, #255	; 0xff
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	029b      	lsls	r3, r3, #10
 800816a:	b29a      	uxth	r2, r3
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	e03b      	b.n	80081ea <USB_EPStartXfer+0x21e>
 8008172:	2286      	movs	r2, #134	; 0x86
 8008174:	0052      	lsls	r2, r2, #1
 8008176:	18bb      	adds	r3, r7, r2
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	1d79      	adds	r1, r7, #5
 800817e:	31ff      	adds	r1, #255	; 0xff
 8008180:	600b      	str	r3, [r1, #0]
 8008182:	18bb      	adds	r3, r7, r2
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	221f      	movs	r2, #31
 8008188:	4013      	ands	r3, r2
 800818a:	d106      	bne.n	800819a <USB_EPStartXfer+0x1ce>
 800818c:	1d7b      	adds	r3, r7, #5
 800818e:	33ff      	adds	r3, #255	; 0xff
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3b01      	subs	r3, #1
 8008194:	1d7a      	adds	r2, r7, #5
 8008196:	32ff      	adds	r2, #255	; 0xff
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	1d7b      	adds	r3, r7, #5
 800819c:	33ff      	adds	r3, #255	; 0xff
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	029b      	lsls	r3, r3, #10
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4a81      	ldr	r2, [pc, #516]	; (80083ac <USB_EPStartXfer+0x3e0>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	e01b      	b.n	80081ea <USB_EPStartXfer+0x21e>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d117      	bne.n	80081ea <USB_EPStartXfer+0x21e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2250      	movs	r2, #80	; 0x50
 80081be:	5a9b      	ldrh	r3, [r3, r2]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	001a      	movs	r2, r3
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	189b      	adds	r3, r3, r2
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	00da      	lsls	r2, r3, #3
 80081d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d2:	18d3      	adds	r3, r2, r3
 80081d4:	4a73      	ldr	r2, [pc, #460]	; (80083a4 <USB_EPStartXfer+0x3d8>)
 80081d6:	4694      	mov	ip, r2
 80081d8:	4463      	add	r3, ip
 80081da:	633b      	str	r3, [r7, #48]	; 0x30
 80081dc:	2386      	movs	r3, #134	; 0x86
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	18fb      	adds	r3, r7, r3
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081ea:	2085      	movs	r0, #133	; 0x85
 80081ec:	0040      	lsls	r0, r0, #1
 80081ee:	183b      	adds	r3, r7, r0
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	8952      	ldrh	r2, [r2, #10]
 80081f4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	6959      	ldr	r1, [r3, #20]
 80081fa:	2586      	movs	r5, #134	; 0x86
 80081fc:	006d      	lsls	r5, r5, #1
 80081fe:	197b      	adds	r3, r7, r5
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	b29c      	uxth	r4, r3
 8008204:	183b      	adds	r3, r7, r0
 8008206:	881a      	ldrh	r2, [r3, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	0023      	movs	r3, r4
 800820c:	f001 f96e 	bl	80094ec <USB_WritePMA>
            ep->xfer_buff += len;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	695a      	ldr	r2, [r3, #20]
 8008214:	197b      	adds	r3, r7, r5
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	18d2      	adds	r2, r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6a1a      	ldr	r2, [r3, #32]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	429a      	cmp	r2, r3
 8008228:	d909      	bls.n	800823e <USB_EPStartXfer+0x272>
            {
              ep->xfer_len_db -= len;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	2386      	movs	r3, #134	; 0x86
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	18fb      	adds	r3, r7, r3
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	1ad2      	subs	r2, r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	621a      	str	r2, [r3, #32]
 800823c:	e008      	b.n	8008250 <USB_EPStartXfer+0x284>
            }
            else
            {
              len = ep->xfer_len_db;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	2286      	movs	r2, #134	; 0x86
 8008244:	0052      	lsls	r2, r2, #1
 8008246:	18ba      	adds	r2, r7, r2
 8008248:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2200      	movs	r2, #0
 800824e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d16c      	bne.n	8008332 <USB_EPStartXfer+0x366>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2250      	movs	r2, #80	; 0x50
 8008260:	5a9b      	ldrh	r3, [r3, r2]
 8008262:	b29b      	uxth	r3, r3
 8008264:	001a      	movs	r2, r3
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	189b      	adds	r3, r3, r2
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	00da      	lsls	r2, r3, #3
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	18d3      	adds	r3, r2, r3
 8008276:	4a48      	ldr	r2, [pc, #288]	; (8008398 <USB_EPStartXfer+0x3cc>)
 8008278:	4694      	mov	ip, r2
 800827a:	4463      	add	r3, ip
 800827c:	61bb      	str	r3, [r7, #24]
 800827e:	2386      	movs	r3, #134	; 0x86
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	18fb      	adds	r3, r7, r3
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d110      	bne.n	80082ac <USB_EPStartXfer+0x2e0>
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	4a45      	ldr	r2, [pc, #276]	; (80083a8 <USB_EPStartXfer+0x3dc>)
 8008292:	4013      	ands	r3, r2
 8008294:	b29a      	uxth	r2, r3
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4a42      	ldr	r2, [pc, #264]	; (80083ac <USB_EPStartXfer+0x3e0>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	e060      	b.n	800836e <USB_EPStartXfer+0x3a2>
 80082ac:	2386      	movs	r3, #134	; 0x86
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b3e      	cmp	r3, #62	; 0x3e
 80082b6:	d81c      	bhi.n	80082f2 <USB_EPStartXfer+0x326>
 80082b8:	2286      	movs	r2, #134	; 0x86
 80082ba:	0052      	lsls	r2, r2, #1
 80082bc:	18bb      	adds	r3, r7, r2
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	1c79      	adds	r1, r7, #1
 80082c4:	31ff      	adds	r1, #255	; 0xff
 80082c6:	600b      	str	r3, [r1, #0]
 80082c8:	18bb      	adds	r3, r7, r2
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2201      	movs	r2, #1
 80082ce:	4013      	ands	r3, r2
 80082d0:	d006      	beq.n	80082e0 <USB_EPStartXfer+0x314>
 80082d2:	1c7b      	adds	r3, r7, #1
 80082d4:	33ff      	adds	r3, #255	; 0xff
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3301      	adds	r3, #1
 80082da:	1c7a      	adds	r2, r7, #1
 80082dc:	32ff      	adds	r2, #255	; 0xff
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	1c7b      	adds	r3, r7, #1
 80082e2:	33ff      	adds	r3, #255	; 0xff
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	029b      	lsls	r3, r3, #10
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	801a      	strh	r2, [r3, #0]
 80082f0:	e03d      	b.n	800836e <USB_EPStartXfer+0x3a2>
 80082f2:	2286      	movs	r2, #134	; 0x86
 80082f4:	0052      	lsls	r2, r2, #1
 80082f6:	18bb      	adds	r3, r7, r2
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	1c79      	adds	r1, r7, #1
 80082fe:	31ff      	adds	r1, #255	; 0xff
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	18bb      	adds	r3, r7, r2
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	221f      	movs	r2, #31
 8008308:	4013      	ands	r3, r2
 800830a:	d106      	bne.n	800831a <USB_EPStartXfer+0x34e>
 800830c:	1c7b      	adds	r3, r7, #1
 800830e:	33ff      	adds	r3, #255	; 0xff
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3b01      	subs	r3, #1
 8008314:	1c7a      	adds	r2, r7, #1
 8008316:	32ff      	adds	r2, #255	; 0xff
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	1c7b      	adds	r3, r7, #1
 800831c:	33ff      	adds	r3, #255	; 0xff
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	029b      	lsls	r3, r3, #10
 8008324:	b29b      	uxth	r3, r3
 8008326:	4a21      	ldr	r2, [pc, #132]	; (80083ac <USB_EPStartXfer+0x3e0>)
 8008328:	4313      	orrs	r3, r2
 800832a:	b29a      	uxth	r2, r3
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	801a      	strh	r2, [r3, #0]
 8008330:	e01d      	b.n	800836e <USB_EPStartXfer+0x3a2>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d119      	bne.n	800836e <USB_EPStartXfer+0x3a2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2250      	movs	r2, #80	; 0x50
 8008342:	5a9b      	ldrh	r3, [r3, r2]
 8008344:	b29b      	uxth	r3, r3
 8008346:	001a      	movs	r2, r3
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	189b      	adds	r3, r3, r2
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	00da      	lsls	r2, r3, #3
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	18d3      	adds	r3, r2, r3
 8008358:	4a0f      	ldr	r2, [pc, #60]	; (8008398 <USB_EPStartXfer+0x3cc>)
 800835a:	4694      	mov	ip, r2
 800835c:	4463      	add	r3, ip
 800835e:	623b      	str	r3, [r7, #32]
 8008360:	2386      	movs	r3, #134	; 0x86
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	b29a      	uxth	r2, r3
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800836e:	2085      	movs	r0, #133	; 0x85
 8008370:	0040      	lsls	r0, r0, #1
 8008372:	183b      	adds	r3, r7, r0
 8008374:	683a      	ldr	r2, [r7, #0]
 8008376:	8912      	ldrh	r2, [r2, #8]
 8008378:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6959      	ldr	r1, [r3, #20]
 800837e:	2386      	movs	r3, #134	; 0x86
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	b29c      	uxth	r4, r3
 8008388:	183b      	adds	r3, r7, r0
 800838a:	881a      	ldrh	r2, [r3, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	0023      	movs	r3, r4
 8008390:	f001 f8ac 	bl	80094ec <USB_WritePMA>
 8008394:	e346      	b.n	8008a24 <USB_EPStartXfer+0xa58>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	00000402 	.word	0x00000402
 800839c:	ffff8f8f 	.word	0xffff8f8f
 80083a0:	ffff8180 	.word	0xffff8180
 80083a4:	00000406 	.word	0x00000406
 80083a8:	ffff83ff 	.word	0xffff83ff
 80083ac:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d16a      	bne.n	800848e <USB_EPStartXfer+0x4c2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2250      	movs	r2, #80	; 0x50
 80083c0:	5a9b      	ldrh	r3, [r3, r2]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	001a      	movs	r2, r3
 80083c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c8:	189b      	adds	r3, r3, r2
 80083ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	00da      	lsls	r2, r3, #3
 80083d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d4:	18d3      	adds	r3, r2, r3
 80083d6:	4aca      	ldr	r2, [pc, #808]	; (8008700 <USB_EPStartXfer+0x734>)
 80083d8:	4694      	mov	ip, r2
 80083da:	4463      	add	r3, ip
 80083dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80083de:	2386      	movs	r3, #134	; 0x86
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	18fb      	adds	r3, r7, r3
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d110      	bne.n	800840c <USB_EPStartXfer+0x440>
 80083ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4ac4      	ldr	r2, [pc, #784]	; (8008704 <USB_EPStartXfer+0x738>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f8:	801a      	strh	r2, [r3, #0]
 80083fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	4ac1      	ldr	r2, [pc, #772]	; (8008708 <USB_EPStartXfer+0x73c>)
 8008402:	4313      	orrs	r3, r2
 8008404:	b29a      	uxth	r2, r3
 8008406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	e05e      	b.n	80084ca <USB_EPStartXfer+0x4fe>
 800840c:	2386      	movs	r3, #134	; 0x86
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b3e      	cmp	r3, #62	; 0x3e
 8008416:	d81b      	bhi.n	8008450 <USB_EPStartXfer+0x484>
 8008418:	2286      	movs	r2, #134	; 0x86
 800841a:	0052      	lsls	r2, r2, #1
 800841c:	18bb      	adds	r3, r7, r2
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	085b      	lsrs	r3, r3, #1
 8008422:	21fc      	movs	r1, #252	; 0xfc
 8008424:	1879      	adds	r1, r7, r1
 8008426:	600b      	str	r3, [r1, #0]
 8008428:	18bb      	adds	r3, r7, r2
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2201      	movs	r2, #1
 800842e:	4013      	ands	r3, r2
 8008430:	d005      	beq.n	800843e <USB_EPStartXfer+0x472>
 8008432:	22fc      	movs	r2, #252	; 0xfc
 8008434:	18bb      	adds	r3, r7, r2
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	18ba      	adds	r2, r7, r2
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	23fc      	movs	r3, #252	; 0xfc
 8008440:	18fb      	adds	r3, r7, r3
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	b29a      	uxth	r2, r3
 800844a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844c:	801a      	strh	r2, [r3, #0]
 800844e:	e03c      	b.n	80084ca <USB_EPStartXfer+0x4fe>
 8008450:	2286      	movs	r2, #134	; 0x86
 8008452:	0052      	lsls	r2, r2, #1
 8008454:	18bb      	adds	r3, r7, r2
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	21fc      	movs	r1, #252	; 0xfc
 800845c:	1879      	adds	r1, r7, r1
 800845e:	600b      	str	r3, [r1, #0]
 8008460:	18bb      	adds	r3, r7, r2
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	221f      	movs	r2, #31
 8008466:	4013      	ands	r3, r2
 8008468:	d105      	bne.n	8008476 <USB_EPStartXfer+0x4aa>
 800846a:	22fc      	movs	r2, #252	; 0xfc
 800846c:	18bb      	adds	r3, r7, r2
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	18ba      	adds	r2, r7, r2
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	23fc      	movs	r3, #252	; 0xfc
 8008478:	18fb      	adds	r3, r7, r3
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	029b      	lsls	r3, r3, #10
 8008480:	b29b      	uxth	r3, r3
 8008482:	4aa1      	ldr	r2, [pc, #644]	; (8008708 <USB_EPStartXfer+0x73c>)
 8008484:	4313      	orrs	r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800848a:	801a      	strh	r2, [r3, #0]
 800848c:	e01d      	b.n	80084ca <USB_EPStartXfer+0x4fe>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d119      	bne.n	80084ca <USB_EPStartXfer+0x4fe>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	657b      	str	r3, [r7, #84]	; 0x54
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2250      	movs	r2, #80	; 0x50
 800849e:	5a9b      	ldrh	r3, [r3, r2]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	001a      	movs	r2, r3
 80084a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a6:	189b      	adds	r3, r3, r2
 80084a8:	657b      	str	r3, [r7, #84]	; 0x54
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	00da      	lsls	r2, r3, #3
 80084b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084b2:	18d3      	adds	r3, r2, r3
 80084b4:	4a92      	ldr	r2, [pc, #584]	; (8008700 <USB_EPStartXfer+0x734>)
 80084b6:	4694      	mov	ip, r2
 80084b8:	4463      	add	r3, ip
 80084ba:	653b      	str	r3, [r7, #80]	; 0x50
 80084bc:	2386      	movs	r3, #134	; 0x86
 80084be:	005b      	lsls	r3, r3, #1
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084ca:	2085      	movs	r0, #133	; 0x85
 80084cc:	0040      	lsls	r0, r0, #1
 80084ce:	183b      	adds	r3, r7, r0
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	8912      	ldrh	r2, [r2, #8]
 80084d4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	6959      	ldr	r1, [r3, #20]
 80084da:	2586      	movs	r5, #134	; 0x86
 80084dc:	006d      	lsls	r5, r5, #1
 80084de:	197b      	adds	r3, r7, r5
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	b29c      	uxth	r4, r3
 80084e4:	183b      	adds	r3, r7, r0
 80084e6:	881a      	ldrh	r2, [r3, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	0023      	movs	r3, r4
 80084ec:	f000 fffe 	bl	80094ec <USB_WritePMA>
            ep->xfer_buff += len;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	695a      	ldr	r2, [r3, #20]
 80084f4:	197b      	adds	r3, r7, r5
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	18d2      	adds	r2, r2, r3
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6a1a      	ldr	r2, [r3, #32]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	429a      	cmp	r2, r3
 8008508:	d909      	bls.n	800851e <USB_EPStartXfer+0x552>
            {
              ep->xfer_len_db -= len;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6a1a      	ldr	r2, [r3, #32]
 800850e:	2386      	movs	r3, #134	; 0x86
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	1ad2      	subs	r2, r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	621a      	str	r2, [r3, #32]
 800851c:	e008      	b.n	8008530 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	2286      	movs	r2, #134	; 0x86
 8008524:	0052      	lsls	r2, r2, #1
 8008526:	18ba      	adds	r2, r7, r2
 8008528:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2200      	movs	r2, #0
 800852e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	647b      	str	r3, [r7, #68]	; 0x44
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	785b      	ldrb	r3, [r3, #1]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d16a      	bne.n	8008612 <USB_EPStartXfer+0x646>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2250      	movs	r2, #80	; 0x50
 8008544:	5a9b      	ldrh	r3, [r3, r2]
 8008546:	b29b      	uxth	r3, r3
 8008548:	001a      	movs	r2, r3
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	189b      	adds	r3, r3, r2
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	00da      	lsls	r2, r3, #3
 8008556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008558:	18d3      	adds	r3, r2, r3
 800855a:	4a6c      	ldr	r2, [pc, #432]	; (800870c <USB_EPStartXfer+0x740>)
 800855c:	4694      	mov	ip, r2
 800855e:	4463      	add	r3, ip
 8008560:	63bb      	str	r3, [r7, #56]	; 0x38
 8008562:	2386      	movs	r3, #134	; 0x86
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	18fb      	adds	r3, r7, r3
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d110      	bne.n	8008590 <USB_EPStartXfer+0x5c4>
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	4a63      	ldr	r2, [pc, #396]	; (8008704 <USB_EPStartXfer+0x738>)
 8008576:	4013      	ands	r3, r2
 8008578:	b29a      	uxth	r2, r3
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	4a60      	ldr	r2, [pc, #384]	; (8008708 <USB_EPStartXfer+0x73c>)
 8008586:	4313      	orrs	r3, r2
 8008588:	b29a      	uxth	r2, r3
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	801a      	strh	r2, [r3, #0]
 800858e:	e05c      	b.n	800864a <USB_EPStartXfer+0x67e>
 8008590:	2386      	movs	r3, #134	; 0x86
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b3e      	cmp	r3, #62	; 0x3e
 800859a:	d81b      	bhi.n	80085d4 <USB_EPStartXfer+0x608>
 800859c:	2286      	movs	r2, #134	; 0x86
 800859e:	0052      	lsls	r2, r2, #1
 80085a0:	18bb      	adds	r3, r7, r2
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	21f8      	movs	r1, #248	; 0xf8
 80085a8:	1879      	adds	r1, r7, r1
 80085aa:	600b      	str	r3, [r1, #0]
 80085ac:	18bb      	adds	r3, r7, r2
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2201      	movs	r2, #1
 80085b2:	4013      	ands	r3, r2
 80085b4:	d005      	beq.n	80085c2 <USB_EPStartXfer+0x5f6>
 80085b6:	22f8      	movs	r2, #248	; 0xf8
 80085b8:	18bb      	adds	r3, r7, r2
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3301      	adds	r3, #1
 80085be:	18ba      	adds	r2, r7, r2
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	23f8      	movs	r3, #248	; 0xf8
 80085c4:	18fb      	adds	r3, r7, r3
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e03a      	b.n	800864a <USB_EPStartXfer+0x67e>
 80085d4:	2286      	movs	r2, #134	; 0x86
 80085d6:	0052      	lsls	r2, r2, #1
 80085d8:	18bb      	adds	r3, r7, r2
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	21f8      	movs	r1, #248	; 0xf8
 80085e0:	1879      	adds	r1, r7, r1
 80085e2:	600b      	str	r3, [r1, #0]
 80085e4:	18bb      	adds	r3, r7, r2
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	221f      	movs	r2, #31
 80085ea:	4013      	ands	r3, r2
 80085ec:	d105      	bne.n	80085fa <USB_EPStartXfer+0x62e>
 80085ee:	22f8      	movs	r2, #248	; 0xf8
 80085f0:	18bb      	adds	r3, r7, r2
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	18ba      	adds	r2, r7, r2
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	23f8      	movs	r3, #248	; 0xf8
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	b29b      	uxth	r3, r3
 8008606:	4a40      	ldr	r2, [pc, #256]	; (8008708 <USB_EPStartXfer+0x73c>)
 8008608:	4313      	orrs	r3, r2
 800860a:	b29a      	uxth	r2, r3
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e01b      	b.n	800864a <USB_EPStartXfer+0x67e>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d117      	bne.n	800864a <USB_EPStartXfer+0x67e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2250      	movs	r2, #80	; 0x50
 800861e:	5a9b      	ldrh	r3, [r3, r2]
 8008620:	b29b      	uxth	r3, r3
 8008622:	001a      	movs	r2, r3
 8008624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008626:	189b      	adds	r3, r3, r2
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	00da      	lsls	r2, r3, #3
 8008630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008632:	18d3      	adds	r3, r2, r3
 8008634:	4a35      	ldr	r2, [pc, #212]	; (800870c <USB_EPStartXfer+0x740>)
 8008636:	4694      	mov	ip, r2
 8008638:	4463      	add	r3, ip
 800863a:	643b      	str	r3, [r7, #64]	; 0x40
 800863c:	2386      	movs	r3, #134	; 0x86
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	b29a      	uxth	r2, r3
 8008646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800864a:	2085      	movs	r0, #133	; 0x85
 800864c:	0040      	lsls	r0, r0, #1
 800864e:	183b      	adds	r3, r7, r0
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	8952      	ldrh	r2, [r2, #10]
 8008654:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	6959      	ldr	r1, [r3, #20]
 800865a:	2386      	movs	r3, #134	; 0x86
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	18fb      	adds	r3, r7, r3
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	b29c      	uxth	r4, r3
 8008664:	183b      	adds	r3, r7, r0
 8008666:	881a      	ldrh	r2, [r3, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	0023      	movs	r3, r4
 800866c:	f000 ff3e 	bl	80094ec <USB_WritePMA>
 8008670:	e1d8      	b.n	8008a24 <USB_EPStartXfer+0xa58>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	2086      	movs	r0, #134	; 0x86
 8008678:	0040      	lsls	r0, r0, #1
 800867a:	183a      	adds	r2, r7, r0
 800867c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	18d3      	adds	r3, r2, r3
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	b29a      	uxth	r2, r3
 800868c:	2466      	movs	r4, #102	; 0x66
 800868e:	193b      	adds	r3, r7, r4
 8008690:	491f      	ldr	r1, [pc, #124]	; (8008710 <USB_EPStartXfer+0x744>)
 8008692:	400a      	ands	r2, r1
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	18d3      	adds	r3, r2, r3
 80086a0:	193a      	adds	r2, r7, r4
 80086a2:	8812      	ldrh	r2, [r2, #0]
 80086a4:	491b      	ldr	r1, [pc, #108]	; (8008714 <USB_EPStartXfer+0x748>)
 80086a6:	430a      	orrs	r2, r1
 80086a8:	b292      	uxth	r2, r2
 80086aa:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	663b      	str	r3, [r7, #96]	; 0x60
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2250      	movs	r2, #80	; 0x50
 80086b4:	5a9b      	ldrh	r3, [r3, r2]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	001a      	movs	r2, r3
 80086ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086bc:	189b      	adds	r3, r3, r2
 80086be:	663b      	str	r3, [r7, #96]	; 0x60
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	00da      	lsls	r2, r3, #3
 80086c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086c8:	18d3      	adds	r3, r2, r3
 80086ca:	4a0d      	ldr	r2, [pc, #52]	; (8008700 <USB_EPStartXfer+0x734>)
 80086cc:	4694      	mov	ip, r2
 80086ce:	4463      	add	r3, ip
 80086d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086d2:	183b      	adds	r3, r7, r0
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80086dc:	2585      	movs	r5, #133	; 0x85
 80086de:	006d      	lsls	r5, r5, #1
 80086e0:	197b      	adds	r3, r7, r5
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	8912      	ldrh	r2, [r2, #8]
 80086e6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6959      	ldr	r1, [r3, #20]
 80086ec:	183b      	adds	r3, r7, r0
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	b29c      	uxth	r4, r3
 80086f2:	197b      	adds	r3, r7, r5
 80086f4:	881a      	ldrh	r2, [r3, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	0023      	movs	r3, r4
 80086fa:	f000 fef7 	bl	80094ec <USB_WritePMA>
 80086fe:	e191      	b.n	8008a24 <USB_EPStartXfer+0xa58>
 8008700:	00000402 	.word	0x00000402
 8008704:	ffff83ff 	.word	0xffff83ff
 8008708:	ffff8000 	.word	0xffff8000
 800870c:	00000406 	.word	0x00000406
 8008710:	ffff8e8f 	.word	0xffff8e8f
 8008714:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	18d3      	adds	r3, r2, r3
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	001a      	movs	r2, r3
 8008728:	2340      	movs	r3, #64	; 0x40
 800872a:	4013      	ands	r3, r2
 800872c:	d100      	bne.n	8008730 <USB_EPStartXfer+0x764>
 800872e:	e093      	b.n	8008858 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	67bb      	str	r3, [r7, #120]	; 0x78
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d16a      	bne.n	8008812 <USB_EPStartXfer+0x846>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	673b      	str	r3, [r7, #112]	; 0x70
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2250      	movs	r2, #80	; 0x50
 8008744:	5a9b      	ldrh	r3, [r3, r2]
 8008746:	b29b      	uxth	r3, r3
 8008748:	001a      	movs	r2, r3
 800874a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800874c:	189b      	adds	r3, r3, r2
 800874e:	673b      	str	r3, [r7, #112]	; 0x70
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	00da      	lsls	r2, r3, #3
 8008756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008758:	18d3      	adds	r3, r2, r3
 800875a:	4ae0      	ldr	r2, [pc, #896]	; (8008adc <USB_EPStartXfer+0xb10>)
 800875c:	4694      	mov	ip, r2
 800875e:	4463      	add	r3, ip
 8008760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008762:	2386      	movs	r3, #134	; 0x86
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	18fb      	adds	r3, r7, r3
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d110      	bne.n	8008790 <USB_EPStartXfer+0x7c4>
 800876e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	4ada      	ldr	r2, [pc, #872]	; (8008ae0 <USB_EPStartXfer+0xb14>)
 8008776:	4013      	ands	r3, r2
 8008778:	b29a      	uxth	r2, r3
 800877a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	4ad7      	ldr	r2, [pc, #860]	; (8008ae4 <USB_EPStartXfer+0xb18>)
 8008786:	4313      	orrs	r3, r2
 8008788:	b29a      	uxth	r2, r3
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	801a      	strh	r2, [r3, #0]
 800878e:	e05c      	b.n	800884a <USB_EPStartXfer+0x87e>
 8008790:	2386      	movs	r3, #134	; 0x86
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	18fb      	adds	r3, r7, r3
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b3e      	cmp	r3, #62	; 0x3e
 800879a:	d81b      	bhi.n	80087d4 <USB_EPStartXfer+0x808>
 800879c:	2286      	movs	r2, #134	; 0x86
 800879e:	0052      	lsls	r2, r2, #1
 80087a0:	18bb      	adds	r3, r7, r2
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	085b      	lsrs	r3, r3, #1
 80087a6:	21f4      	movs	r1, #244	; 0xf4
 80087a8:	1879      	adds	r1, r7, r1
 80087aa:	600b      	str	r3, [r1, #0]
 80087ac:	18bb      	adds	r3, r7, r2
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2201      	movs	r2, #1
 80087b2:	4013      	ands	r3, r2
 80087b4:	d005      	beq.n	80087c2 <USB_EPStartXfer+0x7f6>
 80087b6:	22f4      	movs	r2, #244	; 0xf4
 80087b8:	18bb      	adds	r3, r7, r2
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3301      	adds	r3, #1
 80087be:	18ba      	adds	r2, r7, r2
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	23f4      	movs	r3, #244	; 0xf4
 80087c4:	18fb      	adds	r3, r7, r3
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	029b      	lsls	r3, r3, #10
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	e03a      	b.n	800884a <USB_EPStartXfer+0x87e>
 80087d4:	2286      	movs	r2, #134	; 0x86
 80087d6:	0052      	lsls	r2, r2, #1
 80087d8:	18bb      	adds	r3, r7, r2
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	21f4      	movs	r1, #244	; 0xf4
 80087e0:	1879      	adds	r1, r7, r1
 80087e2:	600b      	str	r3, [r1, #0]
 80087e4:	18bb      	adds	r3, r7, r2
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	221f      	movs	r2, #31
 80087ea:	4013      	ands	r3, r2
 80087ec:	d105      	bne.n	80087fa <USB_EPStartXfer+0x82e>
 80087ee:	22f4      	movs	r2, #244	; 0xf4
 80087f0:	18bb      	adds	r3, r7, r2
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	18ba      	adds	r2, r7, r2
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	23f4      	movs	r3, #244	; 0xf4
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	029b      	lsls	r3, r3, #10
 8008804:	b29b      	uxth	r3, r3
 8008806:	4ab7      	ldr	r2, [pc, #732]	; (8008ae4 <USB_EPStartXfer+0xb18>)
 8008808:	4313      	orrs	r3, r2
 800880a:	b29a      	uxth	r2, r3
 800880c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e01b      	b.n	800884a <USB_EPStartXfer+0x87e>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d117      	bne.n	800884a <USB_EPStartXfer+0x87e>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2250      	movs	r2, #80	; 0x50
 800881e:	5a9b      	ldrh	r3, [r3, r2]
 8008820:	b29b      	uxth	r3, r3
 8008822:	001a      	movs	r2, r3
 8008824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008826:	189b      	adds	r3, r3, r2
 8008828:	67bb      	str	r3, [r7, #120]	; 0x78
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	00da      	lsls	r2, r3, #3
 8008830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008832:	18d3      	adds	r3, r2, r3
 8008834:	4aa9      	ldr	r2, [pc, #676]	; (8008adc <USB_EPStartXfer+0xb10>)
 8008836:	4694      	mov	ip, r2
 8008838:	4463      	add	r3, ip
 800883a:	677b      	str	r3, [r7, #116]	; 0x74
 800883c:	2386      	movs	r3, #134	; 0x86
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	18fb      	adds	r3, r7, r3
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	b29a      	uxth	r2, r3
 8008846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008848:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800884a:	2385      	movs	r3, #133	; 0x85
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	18fb      	adds	r3, r7, r3
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	8952      	ldrh	r2, [r2, #10]
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	e09f      	b.n	8008998 <USB_EPStartXfer+0x9cc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d16f      	bne.n	8008940 <USB_EPStartXfer+0x974>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2180      	movs	r1, #128	; 0x80
 8008864:	187a      	adds	r2, r7, r1
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2250      	movs	r2, #80	; 0x50
 800886c:	5a9b      	ldrh	r3, [r3, r2]
 800886e:	b29b      	uxth	r3, r3
 8008870:	001a      	movs	r2, r3
 8008872:	187b      	adds	r3, r7, r1
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	189b      	adds	r3, r3, r2
 8008878:	187a      	adds	r2, r7, r1
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	00da      	lsls	r2, r3, #3
 8008882:	187b      	adds	r3, r7, r1
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	18d3      	adds	r3, r2, r3
 8008888:	4a97      	ldr	r2, [pc, #604]	; (8008ae8 <USB_EPStartXfer+0xb1c>)
 800888a:	4694      	mov	ip, r2
 800888c:	4463      	add	r3, ip
 800888e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008890:	2386      	movs	r3, #134	; 0x86
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d110      	bne.n	80088be <USB_EPStartXfer+0x8f2>
 800889c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	4a8f      	ldr	r2, [pc, #572]	; (8008ae0 <USB_EPStartXfer+0xb14>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088aa:	801a      	strh	r2, [r3, #0]
 80088ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	4a8c      	ldr	r2, [pc, #560]	; (8008ae4 <USB_EPStartXfer+0xb18>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088ba:	801a      	strh	r2, [r3, #0]
 80088bc:	e066      	b.n	800898c <USB_EPStartXfer+0x9c0>
 80088be:	2386      	movs	r3, #134	; 0x86
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	18fb      	adds	r3, r7, r3
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b3e      	cmp	r3, #62	; 0x3e
 80088c8:	d81b      	bhi.n	8008902 <USB_EPStartXfer+0x936>
 80088ca:	2286      	movs	r2, #134	; 0x86
 80088cc:	0052      	lsls	r2, r2, #1
 80088ce:	18bb      	adds	r3, r7, r2
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	085b      	lsrs	r3, r3, #1
 80088d4:	21f0      	movs	r1, #240	; 0xf0
 80088d6:	1879      	adds	r1, r7, r1
 80088d8:	600b      	str	r3, [r1, #0]
 80088da:	18bb      	adds	r3, r7, r2
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2201      	movs	r2, #1
 80088e0:	4013      	ands	r3, r2
 80088e2:	d005      	beq.n	80088f0 <USB_EPStartXfer+0x924>
 80088e4:	22f0      	movs	r2, #240	; 0xf0
 80088e6:	18bb      	adds	r3, r7, r2
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	18ba      	adds	r2, r7, r2
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	23f0      	movs	r3, #240	; 0xf0
 80088f2:	18fb      	adds	r3, r7, r3
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	029b      	lsls	r3, r3, #10
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	e044      	b.n	800898c <USB_EPStartXfer+0x9c0>
 8008902:	2286      	movs	r2, #134	; 0x86
 8008904:	0052      	lsls	r2, r2, #1
 8008906:	18bb      	adds	r3, r7, r2
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	21f0      	movs	r1, #240	; 0xf0
 800890e:	1879      	adds	r1, r7, r1
 8008910:	600b      	str	r3, [r1, #0]
 8008912:	18bb      	adds	r3, r7, r2
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	221f      	movs	r2, #31
 8008918:	4013      	ands	r3, r2
 800891a:	d105      	bne.n	8008928 <USB_EPStartXfer+0x95c>
 800891c:	22f0      	movs	r2, #240	; 0xf0
 800891e:	18bb      	adds	r3, r7, r2
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3b01      	subs	r3, #1
 8008924:	18ba      	adds	r2, r7, r2
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	23f0      	movs	r3, #240	; 0xf0
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	029b      	lsls	r3, r3, #10
 8008932:	b29b      	uxth	r3, r3
 8008934:	4a6b      	ldr	r2, [pc, #428]	; (8008ae4 <USB_EPStartXfer+0xb18>)
 8008936:	4313      	orrs	r3, r2
 8008938:	b29a      	uxth	r2, r3
 800893a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	e025      	b.n	800898c <USB_EPStartXfer+0x9c0>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d121      	bne.n	800898c <USB_EPStartXfer+0x9c0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2188      	movs	r1, #136	; 0x88
 800894c:	187a      	adds	r2, r7, r1
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2250      	movs	r2, #80	; 0x50
 8008954:	5a9b      	ldrh	r3, [r3, r2]
 8008956:	b29b      	uxth	r3, r3
 8008958:	001a      	movs	r2, r3
 800895a:	187b      	adds	r3, r7, r1
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	189b      	adds	r3, r3, r2
 8008960:	187a      	adds	r2, r7, r1
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	00da      	lsls	r2, r3, #3
 800896a:	187b      	adds	r3, r7, r1
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	18d3      	adds	r3, r2, r3
 8008970:	4a5d      	ldr	r2, [pc, #372]	; (8008ae8 <USB_EPStartXfer+0xb1c>)
 8008972:	4694      	mov	ip, r2
 8008974:	4463      	add	r3, ip
 8008976:	2184      	movs	r1, #132	; 0x84
 8008978:	187a      	adds	r2, r7, r1
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	2386      	movs	r3, #134	; 0x86
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	18fb      	adds	r3, r7, r3
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	b29a      	uxth	r2, r3
 8008986:	187b      	adds	r3, r7, r1
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800898c:	2385      	movs	r3, #133	; 0x85
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	18fb      	adds	r3, r7, r3
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	8912      	ldrh	r2, [r2, #8]
 8008996:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	6959      	ldr	r1, [r3, #20]
 800899c:	2386      	movs	r3, #134	; 0x86
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	b29c      	uxth	r4, r3
 80089a6:	2385      	movs	r3, #133	; 0x85
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	881a      	ldrh	r2, [r3, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	0023      	movs	r3, r4
 80089b2:	f000 fd9b 	bl	80094ec <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d117      	bne.n	80089ee <USB_EPStartXfer+0xa22>
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	18d3      	adds	r3, r2, r3
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	2068      	movs	r0, #104	; 0x68
 80089ce:	183b      	adds	r3, r7, r0
 80089d0:	4946      	ldr	r1, [pc, #280]	; (8008aec <USB_EPStartXfer+0xb20>)
 80089d2:	400a      	ands	r2, r1
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	18d3      	adds	r3, r2, r3
 80089e0:	183a      	adds	r2, r7, r0
 80089e2:	8812      	ldrh	r2, [r2, #0]
 80089e4:	4942      	ldr	r1, [pc, #264]	; (8008af0 <USB_EPStartXfer+0xb24>)
 80089e6:	430a      	orrs	r2, r1
 80089e8:	b292      	uxth	r2, r2
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	e01a      	b.n	8008a24 <USB_EPStartXfer+0xa58>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d116      	bne.n	8008a24 <USB_EPStartXfer+0xa58>
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	18d3      	adds	r3, r2, r3
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	206a      	movs	r0, #106	; 0x6a
 8008a06:	183b      	adds	r3, r7, r0
 8008a08:	4938      	ldr	r1, [pc, #224]	; (8008aec <USB_EPStartXfer+0xb20>)
 8008a0a:	400a      	ands	r2, r1
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	18d3      	adds	r3, r2, r3
 8008a18:	183a      	adds	r2, r7, r0
 8008a1a:	8812      	ldrh	r2, [r2, #0]
 8008a1c:	4935      	ldr	r1, [pc, #212]	; (8008af4 <USB_EPStartXfer+0xb28>)
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	b292      	uxth	r2, r2
 8008a22:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	18d3      	adds	r3, r2, r3
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	4b31      	ldr	r3, [pc, #196]	; (8008af8 <USB_EPStartXfer+0xb2c>)
 8008a34:	2188      	movs	r1, #136	; 0x88
 8008a36:	0049      	lsls	r1, r1, #1
 8008a38:	468c      	mov	ip, r1
 8008a3a:	44bc      	add	ip, r7
 8008a3c:	4463      	add	r3, ip
 8008a3e:	492f      	ldr	r1, [pc, #188]	; (8008afc <USB_EPStartXfer+0xb30>)
 8008a40:	400a      	ands	r2, r1
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <USB_EPStartXfer+0xb2c>)
 8008a46:	2288      	movs	r2, #136	; 0x88
 8008a48:	0052      	lsls	r2, r2, #1
 8008a4a:	4694      	mov	ip, r2
 8008a4c:	44bc      	add	ip, r7
 8008a4e:	4463      	add	r3, ip
 8008a50:	4a29      	ldr	r2, [pc, #164]	; (8008af8 <USB_EPStartXfer+0xb2c>)
 8008a52:	2188      	movs	r1, #136	; 0x88
 8008a54:	0049      	lsls	r1, r1, #1
 8008a56:	468c      	mov	ip, r1
 8008a58:	44bc      	add	ip, r7
 8008a5a:	4462      	add	r2, ip
 8008a5c:	8812      	ldrh	r2, [r2, #0]
 8008a5e:	2110      	movs	r1, #16
 8008a60:	404a      	eors	r2, r1
 8008a62:	801a      	strh	r2, [r3, #0]
 8008a64:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <USB_EPStartXfer+0xb2c>)
 8008a66:	2288      	movs	r2, #136	; 0x88
 8008a68:	0052      	lsls	r2, r2, #1
 8008a6a:	4694      	mov	ip, r2
 8008a6c:	44bc      	add	ip, r7
 8008a6e:	4463      	add	r3, ip
 8008a70:	4a21      	ldr	r2, [pc, #132]	; (8008af8 <USB_EPStartXfer+0xb2c>)
 8008a72:	2188      	movs	r1, #136	; 0x88
 8008a74:	0049      	lsls	r1, r1, #1
 8008a76:	468c      	mov	ip, r1
 8008a78:	44bc      	add	ip, r7
 8008a7a:	4462      	add	r2, ip
 8008a7c:	8812      	ldrh	r2, [r2, #0]
 8008a7e:	2120      	movs	r1, #32
 8008a80:	404a      	eors	r2, r1
 8008a82:	801a      	strh	r2, [r3, #0]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	18d3      	adds	r3, r2, r3
 8008a8e:	4a1a      	ldr	r2, [pc, #104]	; (8008af8 <USB_EPStartXfer+0xb2c>)
 8008a90:	2188      	movs	r1, #136	; 0x88
 8008a92:	0049      	lsls	r1, r1, #1
 8008a94:	468c      	mov	ip, r1
 8008a96:	44bc      	add	ip, r7
 8008a98:	4462      	add	r2, ip
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	4918      	ldr	r1, [pc, #96]	; (8008b00 <USB_EPStartXfer+0xb34>)
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	b292      	uxth	r2, r2
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	f000 fbdd 	bl	8009262 <USB_EPStartXfer+0x1296>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	7b1b      	ldrb	r3, [r3, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d000      	beq.n	8008ab2 <USB_EPStartXfer+0xae6>
 8008ab0:	e0ac      	b.n	8008c0c <USB_EPStartXfer+0xc40>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d922      	bls.n	8008b04 <USB_EPStartXfer+0xb38>
      {
        len = ep->maxpacket;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2186      	movs	r1, #134	; 0x86
 8008ac4:	0049      	lsls	r1, r1, #1
 8008ac6:	187a      	adds	r2, r7, r1
 8008ac8:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	187b      	adds	r3, r7, r1
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	619a      	str	r2, [r3, #24]
 8008ad8:	e01d      	b.n	8008b16 <USB_EPStartXfer+0xb4a>
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	00000406 	.word	0x00000406
 8008ae0:	ffff83ff 	.word	0xffff83ff
 8008ae4:	ffff8000 	.word	0xffff8000
 8008ae8:	00000402 	.word	0x00000402
 8008aec:	ffff8f8f 	.word	0xffff8f8f
 8008af0:	ffff80c0 	.word	0xffff80c0
 8008af4:	ffffc080 	.word	0xffffc080
 8008af8:	fffffefe 	.word	0xfffffefe
 8008afc:	ffff8fbf 	.word	0xffff8fbf
 8008b00:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	2286      	movs	r2, #134	; 0x86
 8008b0a:	0052      	lsls	r2, r2, #1
 8008b0c:	18ba      	adds	r2, r7, r2
 8008b0e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2200      	movs	r2, #0
 8008b14:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2194      	movs	r1, #148	; 0x94
 8008b1a:	187a      	adds	r2, r7, r1
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2250      	movs	r2, #80	; 0x50
 8008b22:	5a9b      	ldrh	r3, [r3, r2]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	001a      	movs	r2, r3
 8008b28:	187b      	adds	r3, r7, r1
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	189b      	adds	r3, r3, r2
 8008b2e:	187a      	adds	r2, r7, r1
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	00da      	lsls	r2, r3, #3
 8008b38:	187b      	adds	r3, r7, r1
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	18d3      	adds	r3, r2, r3
 8008b3e:	4ac2      	ldr	r2, [pc, #776]	; (8008e48 <USB_EPStartXfer+0xe7c>)
 8008b40:	4694      	mov	ip, r2
 8008b42:	4463      	add	r3, ip
 8008b44:	2290      	movs	r2, #144	; 0x90
 8008b46:	18ba      	adds	r2, r7, r2
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	2386      	movs	r3, #134	; 0x86
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	18fb      	adds	r3, r7, r3
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d115      	bne.n	8008b82 <USB_EPStartXfer+0xbb6>
 8008b56:	2190      	movs	r1, #144	; 0x90
 8008b58:	187b      	adds	r3, r7, r1
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4aba      	ldr	r2, [pc, #744]	; (8008e4c <USB_EPStartXfer+0xe80>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	187b      	adds	r3, r7, r1
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	187b      	adds	r3, r7, r1
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	4ab6      	ldr	r2, [pc, #728]	; (8008e50 <USB_EPStartXfer+0xe84>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	187b      	adds	r3, r7, r1
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e34a      	b.n	8009218 <USB_EPStartXfer+0x124c>
 8008b82:	2386      	movs	r3, #134	; 0x86
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	18fb      	adds	r3, r7, r3
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b8c:	d81d      	bhi.n	8008bca <USB_EPStartXfer+0xbfe>
 8008b8e:	2286      	movs	r2, #134	; 0x86
 8008b90:	0052      	lsls	r2, r2, #1
 8008b92:	18bb      	adds	r3, r7, r2
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	21ec      	movs	r1, #236	; 0xec
 8008b9a:	1879      	adds	r1, r7, r1
 8008b9c:	600b      	str	r3, [r1, #0]
 8008b9e:	18bb      	adds	r3, r7, r2
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	d005      	beq.n	8008bb4 <USB_EPStartXfer+0xbe8>
 8008ba8:	22ec      	movs	r2, #236	; 0xec
 8008baa:	18bb      	adds	r3, r7, r2
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	18ba      	adds	r2, r7, r2
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	23ec      	movs	r3, #236	; 0xec
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	029b      	lsls	r3, r3, #10
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	2390      	movs	r3, #144	; 0x90
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	e326      	b.n	8009218 <USB_EPStartXfer+0x124c>
 8008bca:	2286      	movs	r2, #134	; 0x86
 8008bcc:	0052      	lsls	r2, r2, #1
 8008bce:	18bb      	adds	r3, r7, r2
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	21ec      	movs	r1, #236	; 0xec
 8008bd6:	1879      	adds	r1, r7, r1
 8008bd8:	600b      	str	r3, [r1, #0]
 8008bda:	18bb      	adds	r3, r7, r2
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	221f      	movs	r2, #31
 8008be0:	4013      	ands	r3, r2
 8008be2:	d105      	bne.n	8008bf0 <USB_EPStartXfer+0xc24>
 8008be4:	22ec      	movs	r2, #236	; 0xec
 8008be6:	18bb      	adds	r3, r7, r2
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	18ba      	adds	r2, r7, r2
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	23ec      	movs	r3, #236	; 0xec
 8008bf2:	18fb      	adds	r3, r7, r3
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	029b      	lsls	r3, r3, #10
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	4a94      	ldr	r2, [pc, #592]	; (8008e50 <USB_EPStartXfer+0xe84>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	2390      	movs	r3, #144	; 0x90
 8008c04:	18fb      	adds	r3, r7, r3
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	801a      	strh	r2, [r3, #0]
 8008c0a:	e305      	b.n	8009218 <USB_EPStartXfer+0x124c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	78db      	ldrb	r3, [r3, #3]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d000      	beq.n	8008c16 <USB_EPStartXfer+0xc4a>
 8008c14:	e182      	b.n	8008f1c <USB_EPStartXfer+0xf50>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d000      	beq.n	8008c20 <USB_EPStartXfer+0xc54>
 8008c1e:	e072      	b.n	8008d06 <USB_EPStartXfer+0xd3a>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	21b0      	movs	r1, #176	; 0xb0
 8008c24:	187a      	adds	r2, r7, r1
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2250      	movs	r2, #80	; 0x50
 8008c2c:	5a9b      	ldrh	r3, [r3, r2]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	001a      	movs	r2, r3
 8008c32:	187b      	adds	r3, r7, r1
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	189b      	adds	r3, r3, r2
 8008c38:	187a      	adds	r2, r7, r1
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	00da      	lsls	r2, r3, #3
 8008c42:	187b      	adds	r3, r7, r1
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	4a82      	ldr	r2, [pc, #520]	; (8008e54 <USB_EPStartXfer+0xe88>)
 8008c4a:	4694      	mov	ip, r2
 8008c4c:	4463      	add	r3, ip
 8008c4e:	22ac      	movs	r2, #172	; 0xac
 8008c50:	18ba      	adds	r2, r7, r2
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d115      	bne.n	8008c88 <USB_EPStartXfer+0xcbc>
 8008c5c:	21ac      	movs	r1, #172	; 0xac
 8008c5e:	187b      	adds	r3, r7, r1
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	4a79      	ldr	r2, [pc, #484]	; (8008e4c <USB_EPStartXfer+0xe80>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	187b      	adds	r3, r7, r1
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	801a      	strh	r2, [r3, #0]
 8008c72:	187b      	adds	r3, r7, r1
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	4a75      	ldr	r2, [pc, #468]	; (8008e50 <USB_EPStartXfer+0xe84>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	e062      	b.n	8008d4e <USB_EPStartXfer+0xd82>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b3e      	cmp	r3, #62	; 0x3e
 8008c8e:	d81b      	bhi.n	8008cc8 <USB_EPStartXfer+0xcfc>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	085b      	lsrs	r3, r3, #1
 8008c96:	22e8      	movs	r2, #232	; 0xe8
 8008c98:	18ba      	adds	r2, r7, r2
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	d005      	beq.n	8008cb2 <USB_EPStartXfer+0xce6>
 8008ca6:	22e8      	movs	r2, #232	; 0xe8
 8008ca8:	18bb      	adds	r3, r7, r2
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	18ba      	adds	r2, r7, r2
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	23e8      	movs	r3, #232	; 0xe8
 8008cb4:	18fb      	adds	r3, r7, r3
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	029b      	lsls	r3, r3, #10
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	23ac      	movs	r3, #172	; 0xac
 8008cc0:	18fb      	adds	r3, r7, r3
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	801a      	strh	r2, [r3, #0]
 8008cc6:	e042      	b.n	8008d4e <USB_EPStartXfer+0xd82>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	22e8      	movs	r2, #232	; 0xe8
 8008cd0:	18ba      	adds	r2, r7, r2
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	221f      	movs	r2, #31
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d105      	bne.n	8008cea <USB_EPStartXfer+0xd1e>
 8008cde:	22e8      	movs	r2, #232	; 0xe8
 8008ce0:	18bb      	adds	r3, r7, r2
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	18ba      	adds	r2, r7, r2
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	23e8      	movs	r3, #232	; 0xe8
 8008cec:	18fb      	adds	r3, r7, r3
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	029b      	lsls	r3, r3, #10
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	4a56      	ldr	r2, [pc, #344]	; (8008e50 <USB_EPStartXfer+0xe84>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	23ac      	movs	r3, #172	; 0xac
 8008cfe:	18fb      	adds	r3, r7, r3
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	801a      	strh	r2, [r3, #0]
 8008d04:	e023      	b.n	8008d4e <USB_EPStartXfer+0xd82>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d11f      	bne.n	8008d4e <USB_EPStartXfer+0xd82>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	21b8      	movs	r1, #184	; 0xb8
 8008d12:	187a      	adds	r2, r7, r1
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2250      	movs	r2, #80	; 0x50
 8008d1a:	5a9b      	ldrh	r3, [r3, r2]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	001a      	movs	r2, r3
 8008d20:	187b      	adds	r3, r7, r1
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	189b      	adds	r3, r3, r2
 8008d26:	187a      	adds	r2, r7, r1
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	00da      	lsls	r2, r3, #3
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	18d3      	adds	r3, r2, r3
 8008d36:	4a47      	ldr	r2, [pc, #284]	; (8008e54 <USB_EPStartXfer+0xe88>)
 8008d38:	4694      	mov	ip, r2
 8008d3a:	4463      	add	r3, ip
 8008d3c:	21b4      	movs	r1, #180	; 0xb4
 8008d3e:	187a      	adds	r2, r7, r1
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	187b      	adds	r3, r7, r1
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	801a      	strh	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	22a8      	movs	r2, #168	; 0xa8
 8008d52:	18ba      	adds	r2, r7, r2
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d000      	beq.n	8008d60 <USB_EPStartXfer+0xd94>
 8008d5e:	e07b      	b.n	8008e58 <USB_EPStartXfer+0xe8c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	21a0      	movs	r1, #160	; 0xa0
 8008d64:	187a      	adds	r2, r7, r1
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2250      	movs	r2, #80	; 0x50
 8008d6c:	5a9b      	ldrh	r3, [r3, r2]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	001a      	movs	r2, r3
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	189b      	adds	r3, r3, r2
 8008d78:	187a      	adds	r2, r7, r1
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	00da      	lsls	r2, r3, #3
 8008d82:	187b      	adds	r3, r7, r1
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	18d3      	adds	r3, r2, r3
 8008d88:	4a2f      	ldr	r2, [pc, #188]	; (8008e48 <USB_EPStartXfer+0xe7c>)
 8008d8a:	4694      	mov	ip, r2
 8008d8c:	4463      	add	r3, ip
 8008d8e:	229c      	movs	r2, #156	; 0x9c
 8008d90:	18ba      	adds	r2, r7, r2
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d115      	bne.n	8008dc8 <USB_EPStartXfer+0xdfc>
 8008d9c:	219c      	movs	r1, #156	; 0x9c
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4a29      	ldr	r2, [pc, #164]	; (8008e4c <USB_EPStartXfer+0xe80>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	187b      	adds	r3, r7, r1
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	801a      	strh	r2, [r3, #0]
 8008db2:	187b      	adds	r3, r7, r1
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	4a25      	ldr	r2, [pc, #148]	; (8008e50 <USB_EPStartXfer+0xe84>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	187b      	adds	r3, r7, r1
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	801a      	strh	r2, [r3, #0]
 8008dc6:	e068      	b.n	8008e9a <USB_EPStartXfer+0xece>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8008dce:	d81b      	bhi.n	8008e08 <USB_EPStartXfer+0xe3c>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	22e4      	movs	r2, #228	; 0xe4
 8008dd8:	18ba      	adds	r2, r7, r2
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2201      	movs	r2, #1
 8008de2:	4013      	ands	r3, r2
 8008de4:	d005      	beq.n	8008df2 <USB_EPStartXfer+0xe26>
 8008de6:	22e4      	movs	r2, #228	; 0xe4
 8008de8:	18bb      	adds	r3, r7, r2
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	18ba      	adds	r2, r7, r2
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	23e4      	movs	r3, #228	; 0xe4
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	029b      	lsls	r3, r3, #10
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	239c      	movs	r3, #156	; 0x9c
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	e048      	b.n	8008e9a <USB_EPStartXfer+0xece>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	095b      	lsrs	r3, r3, #5
 8008e0e:	22e4      	movs	r2, #228	; 0xe4
 8008e10:	18ba      	adds	r2, r7, r2
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	221f      	movs	r2, #31
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	d105      	bne.n	8008e2a <USB_EPStartXfer+0xe5e>
 8008e1e:	22e4      	movs	r2, #228	; 0xe4
 8008e20:	18bb      	adds	r3, r7, r2
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	18ba      	adds	r2, r7, r2
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	23e4      	movs	r3, #228	; 0xe4
 8008e2c:	18fb      	adds	r3, r7, r3
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	029b      	lsls	r3, r3, #10
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	4a06      	ldr	r2, [pc, #24]	; (8008e50 <USB_EPStartXfer+0xe84>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	239c      	movs	r3, #156	; 0x9c
 8008e3e:	18fb      	adds	r3, r7, r3
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	e029      	b.n	8008e9a <USB_EPStartXfer+0xece>
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	00000406 	.word	0x00000406
 8008e4c:	ffff83ff 	.word	0xffff83ff
 8008e50:	ffff8000 	.word	0xffff8000
 8008e54:	00000402 	.word	0x00000402
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	785b      	ldrb	r3, [r3, #1]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d11c      	bne.n	8008e9a <USB_EPStartXfer+0xece>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2250      	movs	r2, #80	; 0x50
 8008e64:	5a9b      	ldrh	r3, [r3, r2]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	001a      	movs	r2, r3
 8008e6a:	21a8      	movs	r1, #168	; 0xa8
 8008e6c:	187b      	adds	r3, r7, r1
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	189b      	adds	r3, r3, r2
 8008e72:	187a      	adds	r2, r7, r1
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	00da      	lsls	r2, r3, #3
 8008e7c:	187b      	adds	r3, r7, r1
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	18d3      	adds	r3, r2, r3
 8008e82:	4acc      	ldr	r2, [pc, #816]	; (80091b4 <USB_EPStartXfer+0x11e8>)
 8008e84:	4694      	mov	ip, r2
 8008e86:	4463      	add	r3, ip
 8008e88:	21a4      	movs	r1, #164	; 0xa4
 8008e8a:	187a      	adds	r2, r7, r1
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	187b      	adds	r3, r7, r1
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d100      	bne.n	8008ea4 <USB_EPStartXfer+0xed8>
 8008ea2:	e1b9      	b.n	8009218 <USB_EPStartXfer+0x124c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	18d2      	adds	r2, r2, r3
 8008eae:	219a      	movs	r1, #154	; 0x9a
 8008eb0:	187b      	adds	r3, r7, r1
 8008eb2:	8812      	ldrh	r2, [r2, #0]
 8008eb4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008eb6:	187b      	adds	r3, r7, r1
 8008eb8:	881a      	ldrh	r2, [r3, #0]
 8008eba:	2380      	movs	r3, #128	; 0x80
 8008ebc:	01db      	lsls	r3, r3, #7
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	d005      	beq.n	8008ece <USB_EPStartXfer+0xf02>
 8008ec2:	239a      	movs	r3, #154	; 0x9a
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	2240      	movs	r2, #64	; 0x40
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d10e      	bne.n	8008eec <USB_EPStartXfer+0xf20>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ece:	239a      	movs	r3, #154	; 0x9a
 8008ed0:	18fb      	adds	r3, r7, r3
 8008ed2:	881a      	ldrh	r2, [r3, #0]
 8008ed4:	2380      	movs	r3, #128	; 0x80
 8008ed6:	01db      	lsls	r3, r3, #7
 8008ed8:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008eda:	d000      	beq.n	8008ede <USB_EPStartXfer+0xf12>
 8008edc:	e19c      	b.n	8009218 <USB_EPStartXfer+0x124c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ede:	239a      	movs	r3, #154	; 0x9a
 8008ee0:	18fb      	adds	r3, r7, r3
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	2240      	movs	r2, #64	; 0x40
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	d000      	beq.n	8008eec <USB_EPStartXfer+0xf20>
 8008eea:	e195      	b.n	8009218 <USB_EPStartXfer+0x124c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	18d3      	adds	r3, r2, r3
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	2098      	movs	r0, #152	; 0x98
 8008efc:	183b      	adds	r3, r7, r0
 8008efe:	49ae      	ldr	r1, [pc, #696]	; (80091b8 <USB_EPStartXfer+0x11ec>)
 8008f00:	400a      	ands	r2, r1
 8008f02:	801a      	strh	r2, [r3, #0]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	18d3      	adds	r3, r2, r3
 8008f0e:	183a      	adds	r2, r7, r0
 8008f10:	8812      	ldrh	r2, [r2, #0]
 8008f12:	49aa      	ldr	r1, [pc, #680]	; (80091bc <USB_EPStartXfer+0x11f0>)
 8008f14:	430a      	orrs	r2, r1
 8008f16:	b292      	uxth	r2, r2
 8008f18:	801a      	strh	r2, [r3, #0]
 8008f1a:	e17d      	b.n	8009218 <USB_EPStartXfer+0x124c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	78db      	ldrb	r3, [r3, #3]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d000      	beq.n	8008f26 <USB_EPStartXfer+0xf5a>
 8008f24:	e176      	b.n	8009214 <USB_EPStartXfer+0x1248>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d90d      	bls.n	8008f4e <USB_EPStartXfer+0xf82>
        {
          len = ep->maxpacket;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2186      	movs	r1, #134	; 0x86
 8008f38:	0049      	lsls	r1, r1, #1
 8008f3a:	187a      	adds	r2, r7, r1
 8008f3c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	187b      	adds	r3, r7, r1
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	619a      	str	r2, [r3, #24]
 8008f4c:	e008      	b.n	8008f60 <USB_EPStartXfer+0xf94>
        }
        else
        {
          len = ep->xfer_len;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	2286      	movs	r2, #134	; 0x86
 8008f54:	0052      	lsls	r2, r2, #1
 8008f56:	18ba      	adds	r2, r7, r2
 8008f58:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	785b      	ldrb	r3, [r3, #1]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d000      	beq.n	8008f6a <USB_EPStartXfer+0xf9e>
 8008f68:	e07a      	b.n	8009060 <USB_EPStartXfer+0x1094>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	21d0      	movs	r1, #208	; 0xd0
 8008f6e:	187a      	adds	r2, r7, r1
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2250      	movs	r2, #80	; 0x50
 8008f76:	5a9b      	ldrh	r3, [r3, r2]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	001a      	movs	r2, r3
 8008f7c:	187b      	adds	r3, r7, r1
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	189b      	adds	r3, r3, r2
 8008f82:	187a      	adds	r2, r7, r1
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	00da      	lsls	r2, r3, #3
 8008f8c:	187b      	adds	r3, r7, r1
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	18d3      	adds	r3, r2, r3
 8008f92:	4a8b      	ldr	r2, [pc, #556]	; (80091c0 <USB_EPStartXfer+0x11f4>)
 8008f94:	4694      	mov	ip, r2
 8008f96:	4463      	add	r3, ip
 8008f98:	22cc      	movs	r2, #204	; 0xcc
 8008f9a:	18ba      	adds	r2, r7, r2
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	2386      	movs	r3, #134	; 0x86
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d115      	bne.n	8008fd6 <USB_EPStartXfer+0x100a>
 8008faa:	21cc      	movs	r1, #204	; 0xcc
 8008fac:	187b      	adds	r3, r7, r1
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	4a83      	ldr	r2, [pc, #524]	; (80091c4 <USB_EPStartXfer+0x11f8>)
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	187b      	adds	r3, r7, r1
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	187b      	adds	r3, r7, r1
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4a7f      	ldr	r2, [pc, #508]	; (80091c8 <USB_EPStartXfer+0x11fc>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	187b      	adds	r3, r7, r1
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	e06a      	b.n	80090ac <USB_EPStartXfer+0x10e0>
 8008fd6:	2386      	movs	r3, #134	; 0x86
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	18fb      	adds	r3, r7, r3
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b3e      	cmp	r3, #62	; 0x3e
 8008fe0:	d81d      	bhi.n	800901e <USB_EPStartXfer+0x1052>
 8008fe2:	2286      	movs	r2, #134	; 0x86
 8008fe4:	0052      	lsls	r2, r2, #1
 8008fe6:	18bb      	adds	r3, r7, r2
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	21e0      	movs	r1, #224	; 0xe0
 8008fee:	1879      	adds	r1, r7, r1
 8008ff0:	600b      	str	r3, [r1, #0]
 8008ff2:	18bb      	adds	r3, r7, r2
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	d005      	beq.n	8009008 <USB_EPStartXfer+0x103c>
 8008ffc:	22e0      	movs	r2, #224	; 0xe0
 8008ffe:	18bb      	adds	r3, r7, r2
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	18ba      	adds	r2, r7, r2
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	23e0      	movs	r3, #224	; 0xe0
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	b29a      	uxth	r2, r3
 8009014:	23cc      	movs	r3, #204	; 0xcc
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	801a      	strh	r2, [r3, #0]
 800901c:	e046      	b.n	80090ac <USB_EPStartXfer+0x10e0>
 800901e:	2286      	movs	r2, #134	; 0x86
 8009020:	0052      	lsls	r2, r2, #1
 8009022:	18bb      	adds	r3, r7, r2
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	095b      	lsrs	r3, r3, #5
 8009028:	21e0      	movs	r1, #224	; 0xe0
 800902a:	1879      	adds	r1, r7, r1
 800902c:	600b      	str	r3, [r1, #0]
 800902e:	18bb      	adds	r3, r7, r2
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	221f      	movs	r2, #31
 8009034:	4013      	ands	r3, r2
 8009036:	d105      	bne.n	8009044 <USB_EPStartXfer+0x1078>
 8009038:	22e0      	movs	r2, #224	; 0xe0
 800903a:	18bb      	adds	r3, r7, r2
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3b01      	subs	r3, #1
 8009040:	18ba      	adds	r2, r7, r2
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	23e0      	movs	r3, #224	; 0xe0
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	029b      	lsls	r3, r3, #10
 800904e:	b29b      	uxth	r3, r3
 8009050:	4a5d      	ldr	r2, [pc, #372]	; (80091c8 <USB_EPStartXfer+0x11fc>)
 8009052:	4313      	orrs	r3, r2
 8009054:	b29a      	uxth	r2, r3
 8009056:	23cc      	movs	r3, #204	; 0xcc
 8009058:	18fb      	adds	r3, r7, r3
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	801a      	strh	r2, [r3, #0]
 800905e:	e025      	b.n	80090ac <USB_EPStartXfer+0x10e0>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d121      	bne.n	80090ac <USB_EPStartXfer+0x10e0>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	21d8      	movs	r1, #216	; 0xd8
 800906c:	187a      	adds	r2, r7, r1
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2250      	movs	r2, #80	; 0x50
 8009074:	5a9b      	ldrh	r3, [r3, r2]
 8009076:	b29b      	uxth	r3, r3
 8009078:	001a      	movs	r2, r3
 800907a:	187b      	adds	r3, r7, r1
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	189b      	adds	r3, r3, r2
 8009080:	187a      	adds	r2, r7, r1
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	00da      	lsls	r2, r3, #3
 800908a:	187b      	adds	r3, r7, r1
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	18d3      	adds	r3, r2, r3
 8009090:	4a4b      	ldr	r2, [pc, #300]	; (80091c0 <USB_EPStartXfer+0x11f4>)
 8009092:	4694      	mov	ip, r2
 8009094:	4463      	add	r3, ip
 8009096:	21d4      	movs	r1, #212	; 0xd4
 8009098:	187a      	adds	r2, r7, r1
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	2386      	movs	r3, #134	; 0x86
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	18fb      	adds	r3, r7, r3
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	187b      	adds	r3, r7, r1
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	801a      	strh	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	22c8      	movs	r2, #200	; 0xc8
 80090b0:	18ba      	adds	r2, r7, r2
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	785b      	ldrb	r3, [r3, #1]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d000      	beq.n	80090be <USB_EPStartXfer+0x10f2>
 80090bc:	e086      	b.n	80091cc <USB_EPStartXfer+0x1200>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	21c0      	movs	r1, #192	; 0xc0
 80090c2:	187a      	adds	r2, r7, r1
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2250      	movs	r2, #80	; 0x50
 80090ca:	5a9b      	ldrh	r3, [r3, r2]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	001a      	movs	r2, r3
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	189b      	adds	r3, r3, r2
 80090d6:	187a      	adds	r2, r7, r1
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	00da      	lsls	r2, r3, #3
 80090e0:	187b      	adds	r3, r7, r1
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	18d3      	adds	r3, r2, r3
 80090e6:	4a33      	ldr	r2, [pc, #204]	; (80091b4 <USB_EPStartXfer+0x11e8>)
 80090e8:	4694      	mov	ip, r2
 80090ea:	4463      	add	r3, ip
 80090ec:	22bc      	movs	r2, #188	; 0xbc
 80090ee:	18ba      	adds	r2, r7, r2
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	2386      	movs	r3, #134	; 0x86
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	18fb      	adds	r3, r7, r3
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d115      	bne.n	800912a <USB_EPStartXfer+0x115e>
 80090fe:	21bc      	movs	r1, #188	; 0xbc
 8009100:	187b      	adds	r3, r7, r1
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	4a2e      	ldr	r2, [pc, #184]	; (80091c4 <USB_EPStartXfer+0x11f8>)
 800910a:	4013      	ands	r3, r2
 800910c:	b29a      	uxth	r2, r3
 800910e:	187b      	adds	r3, r7, r1
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	801a      	strh	r2, [r3, #0]
 8009114:	187b      	adds	r3, r7, r1
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	4a2a      	ldr	r2, [pc, #168]	; (80091c8 <USB_EPStartXfer+0x11fc>)
 800911e:	4313      	orrs	r3, r2
 8009120:	b29a      	uxth	r2, r3
 8009122:	187b      	adds	r3, r7, r1
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	801a      	strh	r2, [r3, #0]
 8009128:	e076      	b.n	8009218 <USB_EPStartXfer+0x124c>
 800912a:	2386      	movs	r3, #134	; 0x86
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	18fb      	adds	r3, r7, r3
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b3e      	cmp	r3, #62	; 0x3e
 8009134:	d81d      	bhi.n	8009172 <USB_EPStartXfer+0x11a6>
 8009136:	2286      	movs	r2, #134	; 0x86
 8009138:	0052      	lsls	r2, r2, #1
 800913a:	18bb      	adds	r3, r7, r2
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	085b      	lsrs	r3, r3, #1
 8009140:	21dc      	movs	r1, #220	; 0xdc
 8009142:	1879      	adds	r1, r7, r1
 8009144:	600b      	str	r3, [r1, #0]
 8009146:	18bb      	adds	r3, r7, r2
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2201      	movs	r2, #1
 800914c:	4013      	ands	r3, r2
 800914e:	d005      	beq.n	800915c <USB_EPStartXfer+0x1190>
 8009150:	22dc      	movs	r2, #220	; 0xdc
 8009152:	18bb      	adds	r3, r7, r2
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	18ba      	adds	r2, r7, r2
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	23dc      	movs	r3, #220	; 0xdc
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	029b      	lsls	r3, r3, #10
 8009166:	b29a      	uxth	r2, r3
 8009168:	23bc      	movs	r3, #188	; 0xbc
 800916a:	18fb      	adds	r3, r7, r3
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	e052      	b.n	8009218 <USB_EPStartXfer+0x124c>
 8009172:	2286      	movs	r2, #134	; 0x86
 8009174:	0052      	lsls	r2, r2, #1
 8009176:	18bb      	adds	r3, r7, r2
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	095b      	lsrs	r3, r3, #5
 800917c:	21dc      	movs	r1, #220	; 0xdc
 800917e:	1879      	adds	r1, r7, r1
 8009180:	600b      	str	r3, [r1, #0]
 8009182:	18bb      	adds	r3, r7, r2
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	221f      	movs	r2, #31
 8009188:	4013      	ands	r3, r2
 800918a:	d105      	bne.n	8009198 <USB_EPStartXfer+0x11cc>
 800918c:	22dc      	movs	r2, #220	; 0xdc
 800918e:	18bb      	adds	r3, r7, r2
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3b01      	subs	r3, #1
 8009194:	18ba      	adds	r2, r7, r2
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	23dc      	movs	r3, #220	; 0xdc
 800919a:	18fb      	adds	r3, r7, r3
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	029b      	lsls	r3, r3, #10
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	4a08      	ldr	r2, [pc, #32]	; (80091c8 <USB_EPStartXfer+0x11fc>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	23bc      	movs	r3, #188	; 0xbc
 80091ac:	18fb      	adds	r3, r7, r3
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	801a      	strh	r2, [r3, #0]
 80091b2:	e031      	b.n	8009218 <USB_EPStartXfer+0x124c>
 80091b4:	00000406 	.word	0x00000406
 80091b8:	ffff8f8f 	.word	0xffff8f8f
 80091bc:	ffff80c0 	.word	0xffff80c0
 80091c0:	00000402 	.word	0x00000402
 80091c4:	ffff83ff 	.word	0xffff83ff
 80091c8:	ffff8000 	.word	0xffff8000
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d121      	bne.n	8009218 <USB_EPStartXfer+0x124c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2250      	movs	r2, #80	; 0x50
 80091d8:	5a9b      	ldrh	r3, [r3, r2]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	001a      	movs	r2, r3
 80091de:	21c8      	movs	r1, #200	; 0xc8
 80091e0:	187b      	adds	r3, r7, r1
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	189b      	adds	r3, r3, r2
 80091e6:	187a      	adds	r2, r7, r1
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	00da      	lsls	r2, r3, #3
 80091f0:	187b      	adds	r3, r7, r1
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	18d3      	adds	r3, r2, r3
 80091f6:	4a1d      	ldr	r2, [pc, #116]	; (800926c <USB_EPStartXfer+0x12a0>)
 80091f8:	4694      	mov	ip, r2
 80091fa:	4463      	add	r3, ip
 80091fc:	21c4      	movs	r1, #196	; 0xc4
 80091fe:	187a      	adds	r2, r7, r1
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	2386      	movs	r3, #134	; 0x86
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	18fb      	adds	r3, r7, r3
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	b29a      	uxth	r2, r3
 800920c:	187b      	adds	r3, r7, r1
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	801a      	strh	r2, [r3, #0]
 8009212:	e001      	b.n	8009218 <USB_EPStartXfer+0x124c>
      }
      else
      {
        return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e025      	b.n	8009264 <USB_EPStartXfer+0x1298>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	18d3      	adds	r3, r2, r3
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29a      	uxth	r2, r3
 8009226:	208e      	movs	r0, #142	; 0x8e
 8009228:	183b      	adds	r3, r7, r0
 800922a:	4911      	ldr	r1, [pc, #68]	; (8009270 <USB_EPStartXfer+0x12a4>)
 800922c:	400a      	ands	r2, r1
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	183b      	adds	r3, r7, r0
 8009232:	183a      	adds	r2, r7, r0
 8009234:	8812      	ldrh	r2, [r2, #0]
 8009236:	2180      	movs	r1, #128	; 0x80
 8009238:	0149      	lsls	r1, r1, #5
 800923a:	404a      	eors	r2, r1
 800923c:	801a      	strh	r2, [r3, #0]
 800923e:	183b      	adds	r3, r7, r0
 8009240:	183a      	adds	r2, r7, r0
 8009242:	8812      	ldrh	r2, [r2, #0]
 8009244:	2180      	movs	r1, #128	; 0x80
 8009246:	0189      	lsls	r1, r1, #6
 8009248:	404a      	eors	r2, r1
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	18d3      	adds	r3, r2, r3
 8009256:	183a      	adds	r2, r7, r0
 8009258:	8812      	ldrh	r2, [r2, #0]
 800925a:	4906      	ldr	r1, [pc, #24]	; (8009274 <USB_EPStartXfer+0x12a8>)
 800925c:	430a      	orrs	r2, r1
 800925e:	b292      	uxth	r2, r2
 8009260:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	0018      	movs	r0, r3
 8009266:	46bd      	mov	sp, r7
 8009268:	b044      	add	sp, #272	; 0x110
 800926a:	bdb0      	pop	{r4, r5, r7, pc}
 800926c:	00000406 	.word	0x00000406
 8009270:	ffffbf8f 	.word	0xffffbf8f
 8009274:	ffff8080 	.word	0xffff8080

08009278 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d01d      	beq.n	80092c6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	18d3      	adds	r3, r2, r3
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29a      	uxth	r2, r3
 8009298:	200c      	movs	r0, #12
 800929a:	183b      	adds	r3, r7, r0
 800929c:	491b      	ldr	r1, [pc, #108]	; (800930c <USB_EPSetStall+0x94>)
 800929e:	400a      	ands	r2, r1
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	183b      	adds	r3, r7, r0
 80092a4:	183a      	adds	r2, r7, r0
 80092a6:	8812      	ldrh	r2, [r2, #0]
 80092a8:	2110      	movs	r1, #16
 80092aa:	404a      	eors	r2, r1
 80092ac:	801a      	strh	r2, [r3, #0]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	18d3      	adds	r3, r2, r3
 80092b8:	183a      	adds	r2, r7, r0
 80092ba:	8812      	ldrh	r2, [r2, #0]
 80092bc:	4914      	ldr	r1, [pc, #80]	; (8009310 <USB_EPSetStall+0x98>)
 80092be:	430a      	orrs	r2, r1
 80092c0:	b292      	uxth	r2, r2
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	e01d      	b.n	8009302 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	18d3      	adds	r3, r2, r3
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	200e      	movs	r0, #14
 80092d6:	183b      	adds	r3, r7, r0
 80092d8:	490e      	ldr	r1, [pc, #56]	; (8009314 <USB_EPSetStall+0x9c>)
 80092da:	400a      	ands	r2, r1
 80092dc:	801a      	strh	r2, [r3, #0]
 80092de:	183b      	adds	r3, r7, r0
 80092e0:	183a      	adds	r2, r7, r0
 80092e2:	8812      	ldrh	r2, [r2, #0]
 80092e4:	2180      	movs	r1, #128	; 0x80
 80092e6:	0149      	lsls	r1, r1, #5
 80092e8:	404a      	eors	r2, r1
 80092ea:	801a      	strh	r2, [r3, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	18d3      	adds	r3, r2, r3
 80092f6:	183a      	adds	r2, r7, r0
 80092f8:	8812      	ldrh	r2, [r2, #0]
 80092fa:	4905      	ldr	r1, [pc, #20]	; (8009310 <USB_EPSetStall+0x98>)
 80092fc:	430a      	orrs	r2, r1
 80092fe:	b292      	uxth	r2, r2
 8009300:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	0018      	movs	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	b004      	add	sp, #16
 800930a:	bd80      	pop	{r7, pc}
 800930c:	ffff8fbf 	.word	0xffff8fbf
 8009310:	ffff8080 	.word	0xffff8080
 8009314:	ffffbf8f 	.word	0xffffbf8f

08009318 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	7b1b      	ldrb	r3, [r3, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d000      	beq.n	800932c <USB_EPClearStall+0x14>
 800932a:	e095      	b.n	8009458 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	785b      	ldrb	r3, [r3, #1]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d046      	beq.n	80093c2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	18d2      	adds	r2, r2, r3
 800933e:	2110      	movs	r1, #16
 8009340:	187b      	adds	r3, r7, r1
 8009342:	8812      	ldrh	r2, [r2, #0]
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	187b      	adds	r3, r7, r1
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	2240      	movs	r2, #64	; 0x40
 800934c:	4013      	ands	r3, r2
 800934e:	d016      	beq.n	800937e <USB_EPClearStall+0x66>
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	18d3      	adds	r3, r2, r3
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	b29a      	uxth	r2, r3
 800935e:	200e      	movs	r0, #14
 8009360:	183b      	adds	r3, r7, r0
 8009362:	4940      	ldr	r1, [pc, #256]	; (8009464 <USB_EPClearStall+0x14c>)
 8009364:	400a      	ands	r2, r1
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	18d3      	adds	r3, r2, r3
 8009372:	183a      	adds	r2, r7, r0
 8009374:	8812      	ldrh	r2, [r2, #0]
 8009376:	493c      	ldr	r1, [pc, #240]	; (8009468 <USB_EPClearStall+0x150>)
 8009378:	430a      	orrs	r2, r1
 800937a:	b292      	uxth	r2, r2
 800937c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	78db      	ldrb	r3, [r3, #3]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d068      	beq.n	8009458 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	18d3      	adds	r3, r2, r3
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29a      	uxth	r2, r3
 8009394:	200c      	movs	r0, #12
 8009396:	183b      	adds	r3, r7, r0
 8009398:	4934      	ldr	r1, [pc, #208]	; (800946c <USB_EPClearStall+0x154>)
 800939a:	400a      	ands	r2, r1
 800939c:	801a      	strh	r2, [r3, #0]
 800939e:	183b      	adds	r3, r7, r0
 80093a0:	183a      	adds	r2, r7, r0
 80093a2:	8812      	ldrh	r2, [r2, #0]
 80093a4:	2120      	movs	r1, #32
 80093a6:	404a      	eors	r2, r1
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	18d3      	adds	r3, r2, r3
 80093b4:	183a      	adds	r2, r7, r0
 80093b6:	8812      	ldrh	r2, [r2, #0]
 80093b8:	492d      	ldr	r1, [pc, #180]	; (8009470 <USB_EPClearStall+0x158>)
 80093ba:	430a      	orrs	r2, r1
 80093bc:	b292      	uxth	r2, r2
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	e04a      	b.n	8009458 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	18d2      	adds	r2, r2, r3
 80093cc:	2116      	movs	r1, #22
 80093ce:	187b      	adds	r3, r7, r1
 80093d0:	8812      	ldrh	r2, [r2, #0]
 80093d2:	801a      	strh	r2, [r3, #0]
 80093d4:	187b      	adds	r3, r7, r1
 80093d6:	881a      	ldrh	r2, [r3, #0]
 80093d8:	2380      	movs	r3, #128	; 0x80
 80093da:	01db      	lsls	r3, r3, #7
 80093dc:	4013      	ands	r3, r2
 80093de:	d016      	beq.n	800940e <USB_EPClearStall+0xf6>
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	18d3      	adds	r3, r2, r3
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	2014      	movs	r0, #20
 80093f0:	183b      	adds	r3, r7, r0
 80093f2:	491c      	ldr	r1, [pc, #112]	; (8009464 <USB_EPClearStall+0x14c>)
 80093f4:	400a      	ands	r2, r1
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	18d3      	adds	r3, r2, r3
 8009402:	183a      	adds	r2, r7, r0
 8009404:	8812      	ldrh	r2, [r2, #0]
 8009406:	491b      	ldr	r1, [pc, #108]	; (8009474 <USB_EPClearStall+0x15c>)
 8009408:	430a      	orrs	r2, r1
 800940a:	b292      	uxth	r2, r2
 800940c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	18d3      	adds	r3, r2, r3
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	b29a      	uxth	r2, r3
 800941c:	2012      	movs	r0, #18
 800941e:	183b      	adds	r3, r7, r0
 8009420:	4915      	ldr	r1, [pc, #84]	; (8009478 <USB_EPClearStall+0x160>)
 8009422:	400a      	ands	r2, r1
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	183b      	adds	r3, r7, r0
 8009428:	183a      	adds	r2, r7, r0
 800942a:	8812      	ldrh	r2, [r2, #0]
 800942c:	2180      	movs	r1, #128	; 0x80
 800942e:	0149      	lsls	r1, r1, #5
 8009430:	404a      	eors	r2, r1
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	183b      	adds	r3, r7, r0
 8009436:	183a      	adds	r2, r7, r0
 8009438:	8812      	ldrh	r2, [r2, #0]
 800943a:	2180      	movs	r1, #128	; 0x80
 800943c:	0189      	lsls	r1, r1, #6
 800943e:	404a      	eors	r2, r1
 8009440:	801a      	strh	r2, [r3, #0]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	18d3      	adds	r3, r2, r3
 800944c:	183a      	adds	r2, r7, r0
 800944e:	8812      	ldrh	r2, [r2, #0]
 8009450:	4907      	ldr	r1, [pc, #28]	; (8009470 <USB_EPClearStall+0x158>)
 8009452:	430a      	orrs	r2, r1
 8009454:	b292      	uxth	r2, r2
 8009456:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	0018      	movs	r0, r3
 800945c:	46bd      	mov	sp, r7
 800945e:	b006      	add	sp, #24
 8009460:	bd80      	pop	{r7, pc}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	ffff8f8f 	.word	0xffff8f8f
 8009468:	ffff80c0 	.word	0xffff80c0
 800946c:	ffff8fbf 	.word	0xffff8fbf
 8009470:	ffff8080 	.word	0xffff8080
 8009474:	ffffc080 	.word	0xffffc080
 8009478:	ffffbf8f 	.word	0xffffbf8f

0800947c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	000a      	movs	r2, r1
 8009486:	1cfb      	adds	r3, r7, #3
 8009488:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800948a:	1cfb      	adds	r3, r7, #3
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d103      	bne.n	800949a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	224c      	movs	r2, #76	; 0x4c
 8009496:	2180      	movs	r1, #128	; 0x80
 8009498:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	0018      	movs	r0, r3
 800949e:	46bd      	mov	sp, r7
 80094a0:	b002      	add	sp, #8
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2258      	movs	r2, #88	; 0x58
 80094b0:	5a9b      	ldrh	r3, [r3, r2]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	4a05      	ldr	r2, [pc, #20]	; (80094cc <USB_DevConnect+0x28>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	b299      	uxth	r1, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2258      	movs	r2, #88	; 0x58
 80094be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	0018      	movs	r0, r3
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b002      	add	sp, #8
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	ffff8000 	.word	0xffff8000

080094d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2244      	movs	r2, #68	; 0x44
 80094dc:	5a9b      	ldrh	r3, [r3, r2]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80094e2:	68fb      	ldr	r3, [r7, #12]
}
 80094e4:	0018      	movs	r0, r3
 80094e6:	46bd      	mov	sp, r7
 80094e8:	b004      	add	sp, #16
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08c      	sub	sp, #48	; 0x30
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	0019      	movs	r1, r3
 80094f8:	1dbb      	adds	r3, r7, #6
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	1d3b      	adds	r3, r7, #4
 80094fe:	1c0a      	adds	r2, r1, #0
 8009500:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	3301      	adds	r3, #1
 8009508:	085b      	lsrs	r3, r3, #1
 800950a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009514:	1dbb      	adds	r3, r7, #6
 8009516:	881a      	ldrh	r2, [r3, #0]
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	18d3      	adds	r3, r2, r3
 800951c:	2280      	movs	r2, #128	; 0x80
 800951e:	00d2      	lsls	r2, r2, #3
 8009520:	4694      	mov	ip, r2
 8009522:	4463      	add	r3, ip
 8009524:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800952a:	e01b      	b.n	8009564 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	3301      	adds	r3, #1
 8009536:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b29b      	uxth	r3, r3
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	b29b      	uxth	r3, r3
 8009542:	001a      	movs	r2, r3
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	4313      	orrs	r3, r2
 8009548:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	b29a      	uxth	r2, r3
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	3302      	adds	r3, #2
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	3301      	adds	r3, #1
 800955c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009560:	3b01      	subs	r3, #1
 8009562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e0      	bne.n	800952c <USB_WritePMA+0x40>
  }
}
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	46bd      	mov	sp, r7
 800956e:	b00c      	add	sp, #48	; 0x30
 8009570:	bd80      	pop	{r7, pc}

08009572 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b08a      	sub	sp, #40	; 0x28
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	0019      	movs	r1, r3
 800957e:	1dbb      	adds	r3, r7, #6
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	1d3b      	adds	r3, r7, #4
 8009584:	1c0a      	adds	r2, r1, #0
 8009586:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009588:	1d3b      	adds	r3, r7, #4
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	085b      	lsrs	r3, r3, #1
 800958e:	b29b      	uxth	r3, r3
 8009590:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800959a:	1dbb      	adds	r3, r7, #6
 800959c:	881a      	ldrh	r2, [r3, #0]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	18d3      	adds	r3, r2, r3
 80095a2:	2280      	movs	r2, #128	; 0x80
 80095a4:	00d2      	lsls	r2, r2, #3
 80095a6:	4694      	mov	ip, r2
 80095a8:	4463      	add	r3, ip
 80095aa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
 80095b0:	e018      	b.n	80095e4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80095ba:	6a3b      	ldr	r3, [r7, #32]
 80095bc:	3302      	adds	r3, #2
 80095be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	3301      	adds	r3, #1
 80095cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	0a1b      	lsrs	r3, r3, #8
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	3301      	adds	r3, #1
 80095dc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	3b01      	subs	r3, #1
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e3      	bne.n	80095b2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80095ea:	1d3b      	adds	r3, r7, #4
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	2201      	movs	r2, #1
 80095f0:	4013      	ands	r3, r2
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	b2da      	uxtb	r2, r3
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	701a      	strb	r2, [r3, #0]
  }
}
 8009608:	46c0      	nop			; (mov r8, r8)
 800960a:	46bd      	mov	sp, r7
 800960c:	b00a      	add	sp, #40	; 0x28
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	000a      	movs	r2, r1
 800961a:	1cfb      	adds	r3, r7, #3
 800961c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800961e:	230f      	movs	r3, #15
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	2200      	movs	r2, #0
 8009624:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7c1b      	ldrb	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d116      	bne.n	800965c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800962e:	2380      	movs	r3, #128	; 0x80
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	2202      	movs	r2, #2
 8009636:	2181      	movs	r1, #129	; 0x81
 8009638:	f002 f806 	bl	800b648 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009642:	2380      	movs	r3, #128	; 0x80
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	2202      	movs	r2, #2
 800964a:	2101      	movs	r1, #1
 800964c:	f001 fffc 	bl	800b648 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	23ac      	movs	r3, #172	; 0xac
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	2101      	movs	r1, #1
 8009658:	50d1      	str	r1, [r2, r3]
 800965a:	e013      	b.n	8009684 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	2340      	movs	r3, #64	; 0x40
 8009660:	2202      	movs	r2, #2
 8009662:	2181      	movs	r1, #129	; 0x81
 8009664:	f001 fff0 	bl	800b648 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	2202      	movs	r2, #2
 8009674:	2101      	movs	r1, #1
 8009676:	f001 ffe7 	bl	800b648 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	23ac      	movs	r3, #172	; 0xac
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	2101      	movs	r1, #1
 8009682:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	2308      	movs	r3, #8
 8009688:	2203      	movs	r2, #3
 800968a:	2182      	movs	r1, #130	; 0x82
 800968c:	f001 ffdc 	bl	800b648 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009696:	2387      	movs	r3, #135	; 0x87
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	0018      	movs	r0, r3
 800969c:	f002 f972 	bl	800b984 <USBD_static_malloc>
 80096a0:	0001      	movs	r1, r0
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	23a4      	movs	r3, #164	; 0xa4
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	23a4      	movs	r3, #164	; 0xa4
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	58d3      	ldr	r3, [r2, r3]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80096b6:	230f      	movs	r3, #15
 80096b8:	18fb      	adds	r3, r7, r3
 80096ba:	2201      	movs	r2, #1
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e02c      	b.n	800971a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	23a4      	movs	r3, #164	; 0xa4
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	58d3      	ldr	r3, [r2, r3]
 80096c8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	23a5      	movs	r3, #165	; 0xa5
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	58d3      	ldr	r3, [r2, r3]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	2385      	movs	r3, #133	; 0x85
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	2100      	movs	r1, #0
 80096de:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	2386      	movs	r3, #134	; 0x86
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	2100      	movs	r1, #0
 80096e8:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7c1b      	ldrb	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	2381      	movs	r3, #129	; 0x81
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	58d2      	ldr	r2, [r2, r3]
 80096fa:	2380      	movs	r3, #128	; 0x80
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	2101      	movs	r1, #1
 8009702:	f002 f8f1 	bl	800b8e8 <USBD_LL_PrepareReceive>
 8009706:	e008      	b.n	800971a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	2381      	movs	r3, #129	; 0x81
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	58d2      	ldr	r2, [r2, r3]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	2340      	movs	r3, #64	; 0x40
 8009714:	2101      	movs	r1, #1
 8009716:	f002 f8e7 	bl	800b8e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800971a:	230f      	movs	r3, #15
 800971c:	18fb      	adds	r3, r7, r3
 800971e:	781b      	ldrb	r3, [r3, #0]
}
 8009720:	0018      	movs	r0, r3
 8009722:	46bd      	mov	sp, r7
 8009724:	b004      	add	sp, #16
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	000a      	movs	r2, r1
 8009732:	1cfb      	adds	r3, r7, #3
 8009734:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009736:	230f      	movs	r3, #15
 8009738:	18fb      	adds	r3, r7, r3
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2181      	movs	r1, #129	; 0x81
 8009742:	0018      	movs	r0, r3
 8009744:	f001 ffb7 	bl	800b6b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2101      	movs	r1, #1
 8009752:	0018      	movs	r0, r3
 8009754:	f001 ffaf 	bl	800b6b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	23ac      	movs	r3, #172	; 0xac
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	2100      	movs	r1, #0
 8009760:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2182      	movs	r1, #130	; 0x82
 8009766:	0018      	movs	r0, r3
 8009768:	f001 ffa5 	bl	800b6b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	23a4      	movs	r3, #164	; 0xa4
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	58d3      	ldr	r3, [r2, r3]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d011      	beq.n	80097a2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	23a5      	movs	r3, #165	; 0xa5
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	58d3      	ldr	r3, [r2, r3]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	23a4      	movs	r3, #164	; 0xa4
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	58d3      	ldr	r3, [r2, r3]
 8009792:	0018      	movs	r0, r3
 8009794:	f002 f902 	bl	800b99c <USBD_static_free>
    pdev->pClassData = NULL;
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	23a4      	movs	r3, #164	; 0xa4
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	2100      	movs	r1, #0
 80097a0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80097a2:	230f      	movs	r3, #15
 80097a4:	18fb      	adds	r3, r7, r3
 80097a6:	781b      	ldrb	r3, [r3, #0]
}
 80097a8:	0018      	movs	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	b004      	add	sp, #16
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	23a4      	movs	r3, #164	; 0xa4
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	58d3      	ldr	r3, [r2, r3]
 80097c2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80097c4:	230f      	movs	r3, #15
 80097c6:	18fb      	adds	r3, r7, r3
 80097c8:	2200      	movs	r2, #0
 80097ca:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80097cc:	230c      	movs	r3, #12
 80097ce:	18fb      	adds	r3, r7, r3
 80097d0:	2200      	movs	r2, #0
 80097d2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80097d4:	2317      	movs	r3, #23
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	001a      	movs	r2, r3
 80097e2:	2360      	movs	r3, #96	; 0x60
 80097e4:	4013      	ands	r3, r2
 80097e6:	d03d      	beq.n	8009864 <USBD_CDC_Setup+0xb4>
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d000      	beq.n	80097ee <USBD_CDC_Setup+0x3e>
 80097ec:	e092      	b.n	8009914 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	88db      	ldrh	r3, [r3, #6]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d02b      	beq.n	800984e <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	b25b      	sxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da12      	bge.n	8009826 <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	23a5      	movs	r3, #165	; 0xa5
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	58d3      	ldr	r3, [r2, r3]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800980e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	88d2      	ldrh	r2, [r2, #6]
 8009814:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009816:	6939      	ldr	r1, [r7, #16]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	88da      	ldrh	r2, [r3, #6]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	0018      	movs	r0, r3
 8009820:	f001 fb14 	bl	800ae4c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009824:	e081      	b.n	800992a <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	7859      	ldrb	r1, [r3, #1]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	2380      	movs	r3, #128	; 0x80
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	88db      	ldrh	r3, [r3, #6]
 8009836:	b2d9      	uxtb	r1, r3
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	4a3f      	ldr	r2, [pc, #252]	; (8009938 <USBD_CDC_Setup+0x188>)
 800983c:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800983e:	6939      	ldr	r1, [r7, #16]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	88da      	ldrh	r2, [r3, #6]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	0018      	movs	r0, r3
 8009848:	f001 fb33 	bl	800aeb2 <USBD_CtlPrepareRx>
    break;
 800984c:	e06d      	b.n	800992a <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	23a5      	movs	r3, #165	; 0xa5
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	58d3      	ldr	r3, [r2, r3]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	7850      	ldrb	r0, [r2, #1]
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	2200      	movs	r2, #0
 8009860:	4798      	blx	r3
    break;
 8009862:	e062      	b.n	800992a <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	2b0a      	cmp	r3, #10
 800986a:	d01c      	beq.n	80098a6 <USBD_CDC_Setup+0xf6>
 800986c:	2b0b      	cmp	r3, #11
 800986e:	d033      	beq.n	80098d8 <USBD_CDC_Setup+0x128>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d142      	bne.n	80098fa <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	239d      	movs	r3, #157	; 0x9d
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	5cd3      	ldrb	r3, [r2, r3]
 800987c:	2b03      	cmp	r3, #3
 800987e:	d107      	bne.n	8009890 <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009880:	230c      	movs	r3, #12
 8009882:	18f9      	adds	r1, r7, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	0018      	movs	r0, r3
 800988a:	f001 fadf 	bl	800ae4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800988e:	e040      	b.n	8009912 <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	0011      	movs	r1, r2
 8009896:	0018      	movs	r0, r3
 8009898:	f001 fa59 	bl	800ad4e <USBD_CtlError>
			  ret = USBD_FAIL;
 800989c:	2317      	movs	r3, #23
 800989e:	18fb      	adds	r3, r7, r3
 80098a0:	2202      	movs	r2, #2
 80098a2:	701a      	strb	r2, [r3, #0]
      break;
 80098a4:	e035      	b.n	8009912 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	239d      	movs	r3, #157	; 0x9d
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	5cd3      	ldrb	r3, [r2, r3]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d107      	bne.n	80098c2 <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80098b2:	230f      	movs	r3, #15
 80098b4:	18f9      	adds	r1, r7, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	0018      	movs	r0, r3
 80098bc:	f001 fac6 	bl	800ae4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80098c0:	e027      	b.n	8009912 <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	0011      	movs	r1, r2
 80098c8:	0018      	movs	r0, r3
 80098ca:	f001 fa40 	bl	800ad4e <USBD_CtlError>
			  ret = USBD_FAIL;
 80098ce:	2317      	movs	r3, #23
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]
      break;
 80098d6:	e01c      	b.n	8009912 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	239d      	movs	r3, #157	; 0x9d
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	5cd3      	ldrb	r3, [r2, r3]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d015      	beq.n	8009910 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	0011      	movs	r1, r2
 80098ea:	0018      	movs	r0, r3
 80098ec:	f001 fa2f 	bl	800ad4e <USBD_CtlError>
			  ret = USBD_FAIL;
 80098f0:	2317      	movs	r3, #23
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	2202      	movs	r2, #2
 80098f6:	701a      	strb	r2, [r3, #0]
      }
      break;
 80098f8:	e00a      	b.n	8009910 <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	0011      	movs	r1, r2
 8009900:	0018      	movs	r0, r3
 8009902:	f001 fa24 	bl	800ad4e <USBD_CtlError>
      ret = USBD_FAIL;
 8009906:	2317      	movs	r3, #23
 8009908:	18fb      	adds	r3, r7, r3
 800990a:	2202      	movs	r2, #2
 800990c:	701a      	strb	r2, [r3, #0]
      break;
 800990e:	e000      	b.n	8009912 <USBD_CDC_Setup+0x162>
      break;
 8009910:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8009912:	e00a      	b.n	800992a <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	0011      	movs	r1, r2
 800991a:	0018      	movs	r0, r3
 800991c:	f001 fa17 	bl	800ad4e <USBD_CtlError>
    ret = USBD_FAIL;
 8009920:	2317      	movs	r3, #23
 8009922:	18fb      	adds	r3, r7, r3
 8009924:	2202      	movs	r2, #2
 8009926:	701a      	strb	r2, [r3, #0]
    break;
 8009928:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800992a:	2317      	movs	r3, #23
 800992c:	18fb      	adds	r3, r7, r3
 800992e:	781b      	ldrb	r3, [r3, #0]
}
 8009930:	0018      	movs	r0, r3
 8009932:	46bd      	mov	sp, r7
 8009934:	b006      	add	sp, #24
 8009936:	bd80      	pop	{r7, pc}
 8009938:	00000201 	.word	0x00000201

0800993c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	000a      	movs	r2, r1
 8009946:	1cfb      	adds	r3, r7, #3
 8009948:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	23a4      	movs	r3, #164	; 0xa4
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	58d3      	ldr	r3, [r2, r3]
 8009952:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	23a6      	movs	r3, #166	; 0xa6
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	58d3      	ldr	r3, [r2, r3]
 800995c:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	23a4      	movs	r3, #164	; 0xa4
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	58d3      	ldr	r3, [r2, r3]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d03e      	beq.n	80099e8 <USBD_CDC_DataIn+0xac>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800996a:	1cfb      	adds	r3, r7, #3
 800996c:	781a      	ldrb	r2, [r3, #0]
 800996e:	6879      	ldr	r1, [r7, #4]
 8009970:	0013      	movs	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	189b      	adds	r3, r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	18cb      	adds	r3, r1, r3
 800997a:	331c      	adds	r3, #28
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d02b      	beq.n	80099da <USBD_CDC_DataIn+0x9e>
 8009982:	1cfb      	adds	r3, r7, #3
 8009984:	781a      	ldrb	r2, [r3, #0]
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	0013      	movs	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	189b      	adds	r3, r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	18cb      	adds	r3, r1, r3
 8009992:	331c      	adds	r3, #28
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	1cfb      	adds	r3, r7, #3
 8009998:	781a      	ldrb	r2, [r3, #0]
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	0013      	movs	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	189b      	adds	r3, r3, r2
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	18cb      	adds	r3, r1, r3
 80099a6:	3338      	adds	r3, #56	; 0x38
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	0019      	movs	r1, r3
 80099ac:	f7f6 fc44 	bl	8000238 <__aeabi_uidivmod>
 80099b0:	1e0b      	subs	r3, r1, #0
 80099b2:	d112      	bne.n	80099da <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80099b4:	1cfb      	adds	r3, r7, #3
 80099b6:	781a      	ldrb	r2, [r3, #0]
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	0013      	movs	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	189b      	adds	r3, r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	18cb      	adds	r3, r1, r3
 80099c4:	331c      	adds	r3, #28
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80099ca:	1cfb      	adds	r3, r7, #3
 80099cc:	7819      	ldrb	r1, [r3, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	2300      	movs	r3, #0
 80099d2:	2200      	movs	r2, #0
 80099d4:	f001 ff50 	bl	800b878 <USBD_LL_Transmit>
 80099d8:	e004      	b.n	80099e4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	2385      	movs	r3, #133	; 0x85
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	2100      	movs	r1, #0
 80099e2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e000      	b.n	80099ea <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	0018      	movs	r0, r3
 80099ec:	46bd      	mov	sp, r7
 80099ee:	b004      	add	sp, #16
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	000a      	movs	r2, r1
 80099fc:	1cfb      	adds	r3, r7, #3
 80099fe:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	23a4      	movs	r3, #164	; 0xa4
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	58d3      	ldr	r3, [r2, r3]
 8009a08:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009a0a:	1cfb      	adds	r3, r7, #3
 8009a0c:	781a      	ldrb	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	0011      	movs	r1, r2
 8009a12:	0018      	movs	r0, r3
 8009a14:	f001 ffa0 	bl	800b958 <USBD_LL_GetRxDataSize>
 8009a18:	0001      	movs	r1, r0
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	2383      	movs	r3, #131	; 0x83
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	23a4      	movs	r3, #164	; 0xa4
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	58d3      	ldr	r3, [r2, r3]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d011      	beq.n	8009a52 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	23a5      	movs	r3, #165	; 0xa5
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	58d3      	ldr	r3, [r2, r3]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	68f9      	ldr	r1, [r7, #12]
 8009a3a:	2281      	movs	r2, #129	; 0x81
 8009a3c:	0092      	lsls	r2, r2, #2
 8009a3e:	5888      	ldr	r0, [r1, r2]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	2183      	movs	r1, #131	; 0x83
 8009a44:	0089      	lsls	r1, r1, #2
 8009a46:	468c      	mov	ip, r1
 8009a48:	4462      	add	r2, ip
 8009a4a:	0011      	movs	r1, r2
 8009a4c:	4798      	blx	r3

    return USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e000      	b.n	8009a54 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8009a52:	2302      	movs	r3, #2
  }
}
 8009a54:	0018      	movs	r0, r3
 8009a56:	46bd      	mov	sp, r7
 8009a58:	b004      	add	sp, #16
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009a5c:	b590      	push	{r4, r7, lr}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	23a4      	movs	r3, #164	; 0xa4
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	58d3      	ldr	r3, [r2, r3]
 8009a6c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	23a5      	movs	r3, #165	; 0xa5
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	58d3      	ldr	r3, [r2, r3]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01a      	beq.n	8009ab0 <USBD_CDC_EP0_RxReady+0x54>
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	5cd3      	ldrb	r3, [r2, r3]
 8009a82:	2bff      	cmp	r3, #255	; 0xff
 8009a84:	d014      	beq.n	8009ab0 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	23a5      	movs	r3, #165	; 0xa5
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	58d3      	ldr	r3, [r2, r3]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	68f9      	ldr	r1, [r7, #12]
 8009a92:	2280      	movs	r2, #128	; 0x80
 8009a94:	0092      	lsls	r2, r2, #2
 8009a96:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009a98:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4907      	ldr	r1, [pc, #28]	; (8009abc <USBD_CDC_EP0_RxReady+0x60>)
 8009a9e:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009aa0:	b292      	uxth	r2, r2
 8009aa2:	0021      	movs	r1, r4
 8009aa4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	2380      	movs	r3, #128	; 0x80
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	21ff      	movs	r1, #255	; 0xff
 8009aae:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	0018      	movs	r0, r3
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	b005      	add	sp, #20
 8009ab8:	bd90      	pop	{r4, r7, pc}
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	00000201 	.word	0x00000201

08009ac0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2243      	movs	r2, #67	; 0x43
 8009acc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009ace:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	b002      	add	sp, #8
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	2000009c 	.word	0x2000009c

08009adc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2243      	movs	r2, #67	; 0x43
 8009ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009aea:	4b02      	ldr	r3, [pc, #8]	; (8009af4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009aec:	0018      	movs	r0, r3
 8009aee:	46bd      	mov	sp, r7
 8009af0:	b002      	add	sp, #8
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20000058 	.word	0x20000058

08009af8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2243      	movs	r2, #67	; 0x43
 8009b04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009b06:	4b02      	ldr	r3, [pc, #8]	; (8009b10 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009b08:	0018      	movs	r0, r3
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	b002      	add	sp, #8
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	200000e0 	.word	0x200000e0

08009b14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	220a      	movs	r2, #10
 8009b20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009b22:	4b02      	ldr	r3, [pc, #8]	; (8009b2c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8009b24:	0018      	movs	r0, r3
 8009b26:	46bd      	mov	sp, r7
 8009b28:	b002      	add	sp, #8
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20000014 	.word	0x20000014

08009b30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009b3a:	230f      	movs	r3, #15
 8009b3c:	18fb      	adds	r3, r7, r3
 8009b3e:	2202      	movs	r2, #2
 8009b40:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d008      	beq.n	8009b5a <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	23a5      	movs	r3, #165	; 0xa5
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8009b52:	230f      	movs	r3, #15
 8009b54:	18fb      	adds	r3, r7, r3
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009b5a:	230f      	movs	r3, #15
 8009b5c:	18fb      	adds	r3, r7, r3
 8009b5e:	781b      	ldrb	r3, [r3, #0]
}
 8009b60:	0018      	movs	r0, r3
 8009b62:	46bd      	mov	sp, r7
 8009b64:	b004      	add	sp, #16
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	1dbb      	adds	r3, r7, #6
 8009b74:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	23a4      	movs	r3, #164	; 0xa4
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	58d3      	ldr	r3, [r2, r3]
 8009b7e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	2382      	movs	r3, #130	; 0x82
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009b8a:	1dbb      	adds	r3, r7, #6
 8009b8c:	8819      	ldrh	r1, [r3, #0]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	2384      	movs	r3, #132	; 0x84
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	0018      	movs	r0, r3
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	b006      	add	sp, #24
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	23a4      	movs	r3, #164	; 0xa4
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	58d3      	ldr	r3, [r2, r3]
 8009bb2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	2381      	movs	r3, #129	; 0x81
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b004      	add	sp, #16
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	23a4      	movs	r3, #164	; 0xa4
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	58d3      	ldr	r3, [r2, r3]
 8009bd8:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	23a4      	movs	r3, #164	; 0xa4
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	58d3      	ldr	r3, [r2, r3]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d022      	beq.n	8009c2c <USBD_CDC_TransmitPacket+0x64>
  {
    if(hcdc->TxState == 0U)
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	2385      	movs	r3, #133	; 0x85
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	58d3      	ldr	r3, [r2, r3]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d11a      	bne.n	8009c28 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	2385      	movs	r3, #133	; 0x85
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	2384      	movs	r3, #132	; 0x84
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	58d2      	ldr	r2, [r2, r3]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	2382      	movs	r3, #130	; 0x82
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	2384      	movs	r3, #132	; 0x84
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	000a      	movs	r2, r1
 8009c1e:	2181      	movs	r1, #129	; 0x81
 8009c20:	f001 fe2a 	bl	800b878 <USBD_LL_Transmit>

      return USBD_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e002      	b.n	8009c2e <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009c2c:	2302      	movs	r3, #2
  }
}
 8009c2e:	0018      	movs	r0, r3
 8009c30:	46bd      	mov	sp, r7
 8009c32:	b004      	add	sp, #16
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	23a4      	movs	r3, #164	; 0xa4
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	58d3      	ldr	r3, [r2, r3]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	23a4      	movs	r3, #164	; 0xa4
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	58d3      	ldr	r3, [r2, r3]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d019      	beq.n	8009c88 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7c1b      	ldrb	r3, [r3, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	2381      	movs	r3, #129	; 0x81
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	58d2      	ldr	r2, [r2, r3]
 8009c64:	2380      	movs	r3, #128	; 0x80
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	f001 fe3c 	bl	800b8e8 <USBD_LL_PrepareReceive>
 8009c70:	e008      	b.n	8009c84 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	2381      	movs	r3, #129	; 0x81
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	58d2      	ldr	r2, [r2, r3]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	2101      	movs	r1, #1
 8009c80:	f001 fe32 	bl	800b8e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	e000      	b.n	8009c8a <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8009c88:	2302      	movs	r3, #2
  }
}
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	b004      	add	sp, #16
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	1dfb      	adds	r3, r7, #7
 8009c9e:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e020      	b.n	8009cec <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	23a3      	movs	r3, #163	; 0xa3
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	58d3      	ldr	r3, [r2, r3]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d004      	beq.n	8009cc0 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	23a3      	movs	r3, #163	; 0xa3
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	23a2      	movs	r3, #162	; 0xa2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	239d      	movs	r3, #157	; 0x9d
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1dfa      	adds	r2, r7, #7
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	f001 fc25 	bl	800b534 <USBD_LL_Init>

  return USBD_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	0018      	movs	r0, r3
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	b004      	add	sp, #16
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009cfe:	230f      	movs	r3, #15
 8009d00:	18fb      	adds	r3, r7, r3
 8009d02:	2200      	movs	r2, #0
 8009d04:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d009      	beq.n	8009d20 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	23a3      	movs	r3, #163	; 0xa3
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009d16:	230f      	movs	r3, #15
 8009d18:	18fb      	adds	r3, r7, r3
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]
 8009d1e:	e003      	b.n	8009d28 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d20:	230f      	movs	r3, #15
 8009d22:	18fb      	adds	r3, r7, r3
 8009d24:	2202      	movs	r2, #2
 8009d26:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009d28:	230f      	movs	r3, #15
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	781b      	ldrb	r3, [r3, #0]
}
 8009d2e:	0018      	movs	r0, r3
 8009d30:	46bd      	mov	sp, r7
 8009d32:	b004      	add	sp, #16
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	0018      	movs	r0, r3
 8009d42:	f001 fc5b 	bl	800b5fc <USBD_LL_Start>

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	0018      	movs	r0, r3
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	b002      	add	sp, #8
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	b002      	add	sp, #8
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	000a      	movs	r2, r1
 8009d6c:	1cfb      	adds	r3, r7, #3
 8009d6e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009d70:	230f      	movs	r3, #15
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	2202      	movs	r2, #2
 8009d76:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	23a3      	movs	r3, #163	; 0xa3
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	58d3      	ldr	r3, [r2, r3]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00f      	beq.n	8009da4 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	23a3      	movs	r3, #163	; 0xa3
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	58d3      	ldr	r3, [r2, r3]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	1cfa      	adds	r2, r7, #3
 8009d90:	7811      	ldrb	r1, [r2, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	0010      	movs	r0, r2
 8009d96:	4798      	blx	r3
 8009d98:	1e03      	subs	r3, r0, #0
 8009d9a:	d103      	bne.n	8009da4 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8009d9c:	230f      	movs	r3, #15
 8009d9e:	18fb      	adds	r3, r7, r3
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009da4:	230f      	movs	r3, #15
 8009da6:	18fb      	adds	r3, r7, r3
 8009da8:	781b      	ldrb	r3, [r3, #0]
}
 8009daa:	0018      	movs	r0, r3
 8009dac:	46bd      	mov	sp, r7
 8009dae:	b004      	add	sp, #16
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	000a      	movs	r2, r1
 8009dbc:	1cfb      	adds	r3, r7, #3
 8009dbe:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	23a3      	movs	r3, #163	; 0xa3
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	58d3      	ldr	r3, [r2, r3]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	1cfa      	adds	r2, r7, #3
 8009dcc:	7811      	ldrb	r1, [r2, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	0010      	movs	r0, r2
 8009dd2:	4798      	blx	r3
  return USBD_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	b002      	add	sp, #8
 8009ddc:	bd80      	pop	{r7, pc}
	...

08009de0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	22a0      	movs	r2, #160	; 0xa0
 8009dee:	0092      	lsls	r2, r2, #2
 8009df0:	4694      	mov	ip, r2
 8009df2:	4463      	add	r3, ip
 8009df4:	683a      	ldr	r2, [r7, #0]
 8009df6:	0011      	movs	r1, r2
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f000 ff6d 	bl	800acd8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	239b      	movs	r3, #155	; 0x9b
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	2101      	movs	r1, #1
 8009e06:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a22      	ldr	r2, [pc, #136]	; (8009e94 <USBD_LL_SetupStage+0xb4>)
 8009e0c:	5a9b      	ldrh	r3, [r3, r2]
 8009e0e:	0019      	movs	r1, r3
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	239c      	movs	r3, #156	; 0x9c
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	23a0      	movs	r3, #160	; 0xa0
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	5cd3      	ldrb	r3, [r2, r3]
 8009e20:	001a      	movs	r2, r3
 8009e22:	231f      	movs	r3, #31
 8009e24:	4013      	ands	r3, r2
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d00d      	beq.n	8009e46 <USBD_LL_SetupStage+0x66>
 8009e2a:	d302      	bcc.n	8009e32 <USBD_LL_SetupStage+0x52>
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d014      	beq.n	8009e5a <USBD_LL_SetupStage+0x7a>
 8009e30:	e01d      	b.n	8009e6e <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	22a0      	movs	r2, #160	; 0xa0
 8009e36:	0092      	lsls	r2, r2, #2
 8009e38:	189a      	adds	r2, r3, r2
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	0011      	movs	r1, r2
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f000 fa0a 	bl	800a258 <USBD_StdDevReq>
    break;
 8009e44:	e020      	b.n	8009e88 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	22a0      	movs	r2, #160	; 0xa0
 8009e4a:	0092      	lsls	r2, r2, #2
 8009e4c:	189a      	adds	r2, r3, r2
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	0011      	movs	r1, r2
 8009e52:	0018      	movs	r0, r3
 8009e54:	f000 fa72 	bl	800a33c <USBD_StdItfReq>
    break;
 8009e58:	e016      	b.n	8009e88 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	22a0      	movs	r2, #160	; 0xa0
 8009e5e:	0092      	lsls	r2, r2, #2
 8009e60:	189a      	adds	r2, r3, r2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	0011      	movs	r1, r2
 8009e66:	0018      	movs	r0, r3
 8009e68:	f000 fabf 	bl	800a3ea <USBD_StdEPReq>
    break;
 8009e6c:	e00c      	b.n	8009e88 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	23a0      	movs	r3, #160	; 0xa0
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	5cd3      	ldrb	r3, [r2, r3]
 8009e76:	227f      	movs	r2, #127	; 0x7f
 8009e78:	4393      	bics	r3, r2
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	0011      	movs	r1, r2
 8009e80:	0018      	movs	r0, r3
 8009e82:	f001 fc44 	bl	800b70e <USBD_LL_StallEP>
    break;
 8009e86:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b002      	add	sp, #8
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	00000286 	.word	0x00000286

08009e98 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	200b      	movs	r0, #11
 8009ea4:	183b      	adds	r3, r7, r0
 8009ea6:	1c0a      	adds	r2, r1, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009eaa:	183b      	adds	r3, r7, r0
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d154      	bne.n	8009f5c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3341      	adds	r3, #65	; 0x41
 8009eb6:	33ff      	adds	r3, #255	; 0xff
 8009eb8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	239b      	movs	r3, #155	; 0x9b
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	58d3      	ldr	r3, [r2, r3]
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d139      	bne.n	8009f3a <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d919      	bls.n	8009f06 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	1ad2      	subs	r2, r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d203      	bcs.n	8009ef4 <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	e002      	b.n	8009efa <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	001a      	movs	r2, r3
 8009f00:	f000 fffb 	bl	800aefa <USBD_CtlContinueRx>
 8009f04:	e045      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	23a3      	movs	r3, #163	; 0xa3
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	58d3      	ldr	r3, [r2, r3]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00d      	beq.n	8009f30 <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	239d      	movs	r3, #157	; 0x9d
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d107      	bne.n	8009f30 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	23a3      	movs	r3, #163	; 0xa3
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	58d3      	ldr	r3, [r2, r3]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	0010      	movs	r0, r2
 8009f2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	0018      	movs	r0, r3
 8009f34:	f000 fff4 	bl	800af20 <USBD_CtlSendStatus>
 8009f38:	e02b      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	239b      	movs	r3, #155	; 0x9b
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	58d3      	ldr	r3, [r2, r3]
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d125      	bne.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	239b      	movs	r3, #155	; 0x9b
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2100      	movs	r1, #0
 8009f54:	0018      	movs	r0, r3
 8009f56:	f001 fbda 	bl	800b70e <USBD_LL_StallEP>
 8009f5a:	e01a      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	23a3      	movs	r3, #163	; 0xa3
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	58d3      	ldr	r3, [r2, r3]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d011      	beq.n	8009f8e <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	239d      	movs	r3, #157	; 0x9d
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	d10b      	bne.n	8009f8e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	23a3      	movs	r3, #163	; 0xa3
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	58d3      	ldr	r3, [r2, r3]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	220b      	movs	r2, #11
 8009f82:	18ba      	adds	r2, r7, r2
 8009f84:	7811      	ldrb	r1, [r2, #0]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	0010      	movs	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	e001      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e000      	b.n	8009f94 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	0018      	movs	r0, r3
 8009f96:	46bd      	mov	sp, r7
 8009f98:	b006      	add	sp, #24
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	200b      	movs	r0, #11
 8009fa8:	183b      	adds	r3, r7, r0
 8009faa:	1c0a      	adds	r2, r1, #0
 8009fac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009fae:	183b      	adds	r3, r7, r0
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d000      	beq.n	8009fb8 <USBD_LL_DataInStage+0x1c>
 8009fb6:	e08e      	b.n	800a0d6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3314      	adds	r3, #20
 8009fbc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	239b      	movs	r3, #155	; 0x9b
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	58d3      	ldr	r3, [r2, r3]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d164      	bne.n	800a094 <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d915      	bls.n	800a002 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f000 ff4c 	bl	800ae8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	f001 fc74 	bl	800b8e8 <USBD_LL_PrepareReceive>
 800a000:	e059      	b.n	800a0b6 <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	0019      	movs	r1, r3
 800a00c:	0010      	movs	r0, r2
 800a00e:	f7f6 f913 	bl	8000238 <__aeabi_uidivmod>
 800a012:	1e0b      	subs	r3, r1, #0
 800a014:	d11f      	bne.n	800a056 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	689a      	ldr	r2, [r3, #8]
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a01e:	429a      	cmp	r2, r3
 800a020:	d319      	bcc.n	800a056 <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	239c      	movs	r3, #156	; 0x9c
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 800a02e:	429a      	cmp	r2, r3
 800a030:	d211      	bcs.n	800a056 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	2100      	movs	r1, #0
 800a038:	0018      	movs	r0, r3
 800a03a:	f000 ff27 	bl	800ae8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	239c      	movs	r3, #156	; 0x9c
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	2100      	movs	r1, #0
 800a046:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	2300      	movs	r3, #0
 800a04c:	2200      	movs	r2, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	f001 fc4a 	bl	800b8e8 <USBD_LL_PrepareReceive>
 800a054:	e02f      	b.n	800a0b6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	23a3      	movs	r3, #163	; 0xa3
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	58d3      	ldr	r3, [r2, r3]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00d      	beq.n	800a080 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	239d      	movs	r3, #157	; 0x9d
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d107      	bne.n	800a080 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	23a3      	movs	r3, #163	; 0xa3
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	58d3      	ldr	r3, [r2, r3]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	0010      	movs	r0, r2
 800a07e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2180      	movs	r1, #128	; 0x80
 800a084:	0018      	movs	r0, r3
 800a086:	f001 fb42 	bl	800b70e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	0018      	movs	r0, r3
 800a08e:	f000 ff5b 	bl	800af48 <USBD_CtlReceiveStatus>
 800a092:	e010      	b.n	800a0b6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	239b      	movs	r3, #155	; 0x9b
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	58d3      	ldr	r3, [r2, r3]
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d005      	beq.n	800a0ac <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	239b      	movs	r3, #155	; 0x9b
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d104      	bne.n	800a0b6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2180      	movs	r1, #128	; 0x80
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f001 fb2c 	bl	800b70e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	239e      	movs	r3, #158	; 0x9e
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	5cd3      	ldrb	r3, [r2, r3]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d124      	bne.n	800a10c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f7ff fe43 	bl	8009d50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	239e      	movs	r3, #158	; 0x9e
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	54d1      	strb	r1, [r2, r3]
 800a0d4:	e01a      	b.n	800a10c <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	23a3      	movs	r3, #163	; 0xa3
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	58d3      	ldr	r3, [r2, r3]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d011      	beq.n	800a108 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	239d      	movs	r3, #157	; 0x9d
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d10b      	bne.n	800a108 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	23a3      	movs	r3, #163	; 0xa3
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	58d3      	ldr	r3, [r2, r3]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	220b      	movs	r2, #11
 800a0fc:	18ba      	adds	r2, r7, r2
 800a0fe:	7811      	ldrb	r1, [r2, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	0010      	movs	r0, r2
 800a104:	4798      	blx	r3
 800a106:	e001      	b.n	800a10c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a108:	2302      	movs	r3, #2
 800a10a:	e000      	b.n	800a10e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	0018      	movs	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	b006      	add	sp, #24
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	2200      	movs	r2, #0
 800a124:	2100      	movs	r1, #0
 800a126:	f001 fa8f 	bl	800b648 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	23a2      	movs	r3, #162	; 0xa2
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	2101      	movs	r1, #1
 800a132:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	23a8      	movs	r3, #168	; 0xa8
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	2140      	movs	r1, #64	; 0x40
 800a13c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	2200      	movs	r2, #0
 800a144:	2180      	movs	r1, #128	; 0x80
 800a146:	f001 fa7f 	bl	800b648 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2240      	movs	r2, #64	; 0x40
 800a154:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	239d      	movs	r3, #157	; 0x9d
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	2101      	movs	r1, #1
 800a15e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	239b      	movs	r3, #155	; 0x9b
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	2100      	movs	r1, #0
 800a168:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	239f      	movs	r3, #159	; 0x9f
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	2100      	movs	r1, #0
 800a178:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	23a4      	movs	r3, #164	; 0xa4
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	58d3      	ldr	r3, [r2, r3]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	23a3      	movs	r3, #163	; 0xa3
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	58d3      	ldr	r3, [r2, r3]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	b2d9      	uxtb	r1, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	0018      	movs	r0, r3
 800a19a:	4790      	blx	r2
  }

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	0018      	movs	r0, r3
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	b002      	add	sp, #8
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	000a      	movs	r2, r1
 800a1b0:	1cfb      	adds	r3, r7, #3
 800a1b2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	1cfa      	adds	r2, r7, #3
 800a1b8:	7812      	ldrb	r2, [r2, #0]
 800a1ba:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	0018      	movs	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	b002      	add	sp, #8
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	239d      	movs	r3, #157	; 0x9d
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	5cd1      	ldrb	r1, [r2, r3]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a06      	ldr	r2, [pc, #24]	; (800a1f4 <USBD_LL_Suspend+0x2c>)
 800a1dc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	239d      	movs	r3, #157	; 0x9d
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b002      	add	sp, #8
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	00000275 	.word	0x00000275

0800a1f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a05      	ldr	r2, [pc, #20]	; (800a218 <USBD_LL_Resume+0x20>)
 800a204:	5c99      	ldrb	r1, [r3, r2]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	239d      	movs	r3, #157	; 0x9d
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	0018      	movs	r0, r3
 800a212:	46bd      	mov	sp, r7
 800a214:	b002      	add	sp, #8
 800a216:	bd80      	pop	{r7, pc}
 800a218:	00000275 	.word	0x00000275

0800a21c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	239d      	movs	r3, #157	; 0x9d
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	5cd3      	ldrb	r3, [r2, r3]
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d10e      	bne.n	800a24e <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	23a3      	movs	r3, #163	; 0xa3
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	58d3      	ldr	r3, [r2, r3]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	23a3      	movs	r3, #163	; 0xa3
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	58d3      	ldr	r3, [r2, r3]
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	0010      	movs	r0, r2
 800a24c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	0018      	movs	r0, r3
 800a252:	46bd      	mov	sp, r7
 800a254:	b002      	add	sp, #8
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a262:	230f      	movs	r3, #15
 800a264:	18fb      	adds	r3, r7, r3
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	001a      	movs	r2, r3
 800a270:	2360      	movs	r3, #96	; 0x60
 800a272:	4013      	ands	r3, r2
 800a274:	2b20      	cmp	r3, #32
 800a276:	d004      	beq.n	800a282 <USBD_StdDevReq+0x2a>
 800a278:	2b40      	cmp	r3, #64	; 0x40
 800a27a:	d002      	beq.n	800a282 <USBD_StdDevReq+0x2a>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00a      	beq.n	800a296 <USBD_StdDevReq+0x3e>
 800a280:	e04b      	b.n	800a31a <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	23a3      	movs	r3, #163	; 0xa3
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	58d3      	ldr	r3, [r2, r3]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	0010      	movs	r0, r2
 800a292:	4798      	blx	r3
    break;
 800a294:	e048      	b.n	800a328 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	2b09      	cmp	r3, #9
 800a29c:	d835      	bhi.n	800a30a <USBD_StdDevReq+0xb2>
 800a29e:	009a      	lsls	r2, r3, #2
 800a2a0:	4b25      	ldr	r3, [pc, #148]	; (800a338 <USBD_StdDevReq+0xe0>)
 800a2a2:	18d3      	adds	r3, r2, r3
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	0011      	movs	r1, r2
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	f000 fa58 	bl	800a764 <USBD_GetDescriptor>
      break;
 800a2b4:	e030      	b.n	800a318 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	0011      	movs	r1, r2
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f000 fb63 	bl	800a988 <USBD_SetAddress>
      break;
 800a2c2:	e029      	b.n	800a318 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	0011      	movs	r1, r2
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f000 fbb0 	bl	800aa30 <USBD_SetConfig>
      break;
 800a2d0:	e022      	b.n	800a318 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	0011      	movs	r1, r2
 800a2d8:	0018      	movs	r0, r3
 800a2da:	f000 fc4d 	bl	800ab78 <USBD_GetConfig>
      break;
 800a2de:	e01b      	b.n	800a318 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	0011      	movs	r1, r2
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f000 fc80 	bl	800abec <USBD_GetStatus>
      break;
 800a2ec:	e014      	b.n	800a318 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	0011      	movs	r1, r2
 800a2f4:	0018      	movs	r0, r3
 800a2f6:	f000 fcb3 	bl	800ac60 <USBD_SetFeature>
      break;
 800a2fa:	e00d      	b.n	800a318 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	0011      	movs	r1, r2
 800a302:	0018      	movs	r0, r3
 800a304:	f000 fcc2 	bl	800ac8c <USBD_ClrFeature>
      break;
 800a308:	e006      	b.n	800a318 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	0011      	movs	r1, r2
 800a310:	0018      	movs	r0, r3
 800a312:	f000 fd1c 	bl	800ad4e <USBD_CtlError>
      break;
 800a316:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800a318:	e006      	b.n	800a328 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	0011      	movs	r1, r2
 800a320:	0018      	movs	r0, r3
 800a322:	f000 fd14 	bl	800ad4e <USBD_CtlError>
    break;
 800a326:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a328:	230f      	movs	r3, #15
 800a32a:	18fb      	adds	r3, r7, r3
 800a32c:	781b      	ldrb	r3, [r3, #0]
}
 800a32e:	0018      	movs	r0, r3
 800a330:	46bd      	mov	sp, r7
 800a332:	b004      	add	sp, #16
 800a334:	bd80      	pop	{r7, pc}
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	0800f9ec 	.word	0x0800f9ec

0800a33c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a33c:	b590      	push	{r4, r7, lr}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a346:	230f      	movs	r3, #15
 800a348:	18fb      	adds	r3, r7, r3
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	001a      	movs	r2, r3
 800a354:	2360      	movs	r3, #96	; 0x60
 800a356:	4013      	ands	r3, r2
 800a358:	2b20      	cmp	r3, #32
 800a35a:	d003      	beq.n	800a364 <USBD_StdItfReq+0x28>
 800a35c:	2b40      	cmp	r3, #64	; 0x40
 800a35e:	d001      	beq.n	800a364 <USBD_StdItfReq+0x28>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d136      	bne.n	800a3d2 <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	239d      	movs	r3, #157	; 0x9d
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	5cd3      	ldrb	r3, [r2, r3]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d826      	bhi.n	800a3c0 <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	889b      	ldrh	r3, [r3, #4]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d81a      	bhi.n	800a3b2 <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	23a3      	movs	r3, #163	; 0xa3
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	58d3      	ldr	r3, [r2, r3]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	220f      	movs	r2, #15
 800a388:	18bc      	adds	r4, r7, r2
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	0010      	movs	r0, r2
 800a390:	4798      	blx	r3
 800a392:	0003      	movs	r3, r0
 800a394:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d117      	bne.n	800a3ce <USBD_StdItfReq+0x92>
 800a39e:	230f      	movs	r3, #15
 800a3a0:	18fb      	adds	r3, r7, r3
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d112      	bne.n	800a3ce <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	f000 fdb8 	bl	800af20 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a3b0:	e00d      	b.n	800a3ce <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	0011      	movs	r1, r2
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	f000 fcc8 	bl	800ad4e <USBD_CtlError>
      break;
 800a3be:	e006      	b.n	800a3ce <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	0011      	movs	r1, r2
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f000 fcc1 	bl	800ad4e <USBD_CtlError>
      break;
 800a3cc:	e000      	b.n	800a3d0 <USBD_StdItfReq+0x94>
      break;
 800a3ce:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800a3d0:	e006      	b.n	800a3e0 <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	0011      	movs	r1, r2
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f000 fcb8 	bl	800ad4e <USBD_CtlError>
    break;
 800a3de:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	b005      	add	sp, #20
 800a3e8:	bd90      	pop	{r4, r7, pc}

0800a3ea <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a3ea:	b5b0      	push	{r4, r5, r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f4:	230f      	movs	r3, #15
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	889a      	ldrh	r2, [r3, #4]
 800a400:	230e      	movs	r3, #14
 800a402:	18fb      	adds	r3, r7, r3
 800a404:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	001a      	movs	r2, r3
 800a40c:	2360      	movs	r3, #96	; 0x60
 800a40e:	4013      	ands	r3, r2
 800a410:	2b20      	cmp	r3, #32
 800a412:	d004      	beq.n	800a41e <USBD_StdEPReq+0x34>
 800a414:	2b40      	cmp	r3, #64	; 0x40
 800a416:	d002      	beq.n	800a41e <USBD_StdEPReq+0x34>
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <USBD_StdEPReq+0x48>
 800a41c:	e193      	b.n	800a746 <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	23a3      	movs	r3, #163	; 0xa3
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	58d3      	ldr	r3, [r2, r3]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	0010      	movs	r0, r2
 800a42e:	4798      	blx	r3
    break;
 800a430:	e190      	b.n	800a754 <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	001a      	movs	r2, r3
 800a438:	2360      	movs	r3, #96	; 0x60
 800a43a:	4013      	ands	r3, r2
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	d10f      	bne.n	800a460 <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	23a3      	movs	r3, #163	; 0xa3
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	58d3      	ldr	r3, [r2, r3]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	250f      	movs	r5, #15
 800a44c:	197c      	adds	r4, r7, r5
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	0010      	movs	r0, r2
 800a454:	4798      	blx	r3
 800a456:	0003      	movs	r3, r0
 800a458:	7023      	strb	r3, [r4, #0]

      return ret;
 800a45a:	197b      	adds	r3, r7, r5
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	e17c      	b.n	800a75a <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d054      	beq.n	800a512 <USBD_StdEPReq+0x128>
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d003      	beq.n	800a474 <USBD_StdEPReq+0x8a>
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d100      	bne.n	800a472 <USBD_StdEPReq+0x88>
 800a470:	e097      	b.n	800a5a2 <USBD_StdEPReq+0x1b8>
 800a472:	e160      	b.n	800a736 <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	239d      	movs	r3, #157	; 0x9d
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	5cd3      	ldrb	r3, [r2, r3]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d002      	beq.n	800a486 <USBD_StdEPReq+0x9c>
 800a480:	2b03      	cmp	r3, #3
 800a482:	d01f      	beq.n	800a4c4 <USBD_StdEPReq+0xda>
 800a484:	e03d      	b.n	800a502 <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a486:	230e      	movs	r3, #14
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d012      	beq.n	800a4b6 <USBD_StdEPReq+0xcc>
 800a490:	230e      	movs	r3, #14
 800a492:	18fb      	adds	r3, r7, r3
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b80      	cmp	r3, #128	; 0x80
 800a498:	d00d      	beq.n	800a4b6 <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a49a:	230e      	movs	r3, #14
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	781a      	ldrb	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	0011      	movs	r1, r2
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f001 f932 	bl	800b70e <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2180      	movs	r1, #128	; 0x80
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	f001 f92d 	bl	800b70e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a4b4:	e02c      	b.n	800a510 <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	0011      	movs	r1, r2
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f000 fc46 	bl	800ad4e <USBD_CtlError>
        break;
 800a4c2:	e025      	b.n	800a510 <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	885b      	ldrh	r3, [r3, #2]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d115      	bne.n	800a4f8 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4cc:	230e      	movs	r3, #14
 800a4ce:	18fb      	adds	r3, r7, r3
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d010      	beq.n	800a4f8 <USBD_StdEPReq+0x10e>
 800a4d6:	230e      	movs	r3, #14
 800a4d8:	18fb      	adds	r3, r7, r3
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b80      	cmp	r3, #128	; 0x80
 800a4de:	d00b      	beq.n	800a4f8 <USBD_StdEPReq+0x10e>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	88db      	ldrh	r3, [r3, #6]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d107      	bne.n	800a4f8 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a4e8:	230e      	movs	r3, #14
 800a4ea:	18fb      	adds	r3, r7, r3
 800a4ec:	781a      	ldrb	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	0011      	movs	r1, r2
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f001 f90b 	bl	800b70e <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	0018      	movs	r0, r3
 800a4fc:	f000 fd10 	bl	800af20 <USBD_CtlSendStatus>

        break;
 800a500:	e006      	b.n	800a510 <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	0011      	movs	r1, r2
 800a508:	0018      	movs	r0, r3
 800a50a:	f000 fc20 	bl	800ad4e <USBD_CtlError>
        break;
 800a50e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a510:	e118      	b.n	800a744 <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	239d      	movs	r3, #157	; 0x9d
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	5cd3      	ldrb	r3, [r2, r3]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d002      	beq.n	800a524 <USBD_StdEPReq+0x13a>
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d01f      	beq.n	800a562 <USBD_StdEPReq+0x178>
 800a522:	e035      	b.n	800a590 <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a524:	230e      	movs	r3, #14
 800a526:	18fb      	adds	r3, r7, r3
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d012      	beq.n	800a554 <USBD_StdEPReq+0x16a>
 800a52e:	230e      	movs	r3, #14
 800a530:	18fb      	adds	r3, r7, r3
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b80      	cmp	r3, #128	; 0x80
 800a536:	d00d      	beq.n	800a554 <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a538:	230e      	movs	r3, #14
 800a53a:	18fb      	adds	r3, r7, r3
 800a53c:	781a      	ldrb	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	0011      	movs	r1, r2
 800a542:	0018      	movs	r0, r3
 800a544:	f001 f8e3 	bl	800b70e <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2180      	movs	r1, #128	; 0x80
 800a54c:	0018      	movs	r0, r3
 800a54e:	f001 f8de 	bl	800b70e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a552:	e025      	b.n	800a5a0 <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	0011      	movs	r1, r2
 800a55a:	0018      	movs	r0, r3
 800a55c:	f000 fbf7 	bl	800ad4e <USBD_CtlError>
        break;
 800a560:	e01e      	b.n	800a5a0 <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	885b      	ldrh	r3, [r3, #2]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d119      	bne.n	800a59e <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a56a:	230e      	movs	r3, #14
 800a56c:	18fb      	adds	r3, r7, r3
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	227f      	movs	r2, #127	; 0x7f
 800a572:	4013      	ands	r3, r2
 800a574:	d007      	beq.n	800a586 <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a576:	230e      	movs	r3, #14
 800a578:	18fb      	adds	r3, r7, r3
 800a57a:	781a      	ldrb	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	0011      	movs	r1, r2
 800a580:	0018      	movs	r0, r3
 800a582:	f001 f8f0 	bl	800b766 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	0018      	movs	r0, r3
 800a58a:	f000 fcc9 	bl	800af20 <USBD_CtlSendStatus>
        }
        break;
 800a58e:	e006      	b.n	800a59e <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	0011      	movs	r1, r2
 800a596:	0018      	movs	r0, r3
 800a598:	f000 fbd9 	bl	800ad4e <USBD_CtlError>
        break;
 800a59c:	e000      	b.n	800a5a0 <USBD_StdEPReq+0x1b6>
        break;
 800a59e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a5a0:	e0d0      	b.n	800a744 <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	239d      	movs	r3, #157	; 0x9d
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	5cd3      	ldrb	r3, [r2, r3]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d002      	beq.n	800a5b4 <USBD_StdEPReq+0x1ca>
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d03d      	beq.n	800a62e <USBD_StdEPReq+0x244>
 800a5b2:	e0b8      	b.n	800a726 <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5b4:	230e      	movs	r3, #14
 800a5b6:	18fb      	adds	r3, r7, r3
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00b      	beq.n	800a5d6 <USBD_StdEPReq+0x1ec>
 800a5be:	230e      	movs	r3, #14
 800a5c0:	18fb      	adds	r3, r7, r3
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b80      	cmp	r3, #128	; 0x80
 800a5c6:	d006      	beq.n	800a5d6 <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	0011      	movs	r1, r2
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f000 fbbd 	bl	800ad4e <USBD_CtlError>
          break;
 800a5d4:	e0ae      	b.n	800a734 <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a5d6:	230e      	movs	r3, #14
 800a5d8:	18fb      	adds	r3, r7, r3
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b25b      	sxtb	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da0d      	bge.n	800a5fe <USBD_StdEPReq+0x214>
 800a5e2:	230e      	movs	r3, #14
 800a5e4:	18fb      	adds	r3, r7, r3
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	227f      	movs	r2, #127	; 0x7f
 800a5ea:	401a      	ands	r2, r3
 800a5ec:	0013      	movs	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	189b      	adds	r3, r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	3310      	adds	r3, #16
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	18d3      	adds	r3, r2, r3
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	e00c      	b.n	800a618 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a5fe:	230e      	movs	r3, #14
 800a600:	18fb      	adds	r3, r7, r3
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	227f      	movs	r2, #127	; 0x7f
 800a606:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a608:	0013      	movs	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	189b      	adds	r3, r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	3341      	adds	r3, #65	; 0x41
 800a612:	33ff      	adds	r3, #255	; 0xff
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	18d3      	adds	r3, r2, r3
 800a618:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a620:	68b9      	ldr	r1, [r7, #8]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2202      	movs	r2, #2
 800a626:	0018      	movs	r0, r3
 800a628:	f000 fc10 	bl	800ae4c <USBD_CtlSendData>
          break;
 800a62c:	e082      	b.n	800a734 <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800a62e:	230e      	movs	r3, #14
 800a630:	18fb      	adds	r3, r7, r3
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	b25b      	sxtb	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	da15      	bge.n	800a666 <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a63a:	230e      	movs	r3, #14
 800a63c:	18fb      	adds	r3, r7, r3
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	220f      	movs	r2, #15
 800a642:	401a      	ands	r2, r3
 800a644:	6879      	ldr	r1, [r7, #4]
 800a646:	0013      	movs	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	189b      	adds	r3, r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	18cb      	adds	r3, r1, r3
 800a650:	3318      	adds	r3, #24
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d11e      	bne.n	800a696 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	0011      	movs	r1, r2
 800a65e:	0018      	movs	r0, r3
 800a660:	f000 fb75 	bl	800ad4e <USBD_CtlError>
            break;
 800a664:	e066      	b.n	800a734 <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a666:	230e      	movs	r3, #14
 800a668:	18fb      	adds	r3, r7, r3
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	220f      	movs	r2, #15
 800a66e:	401a      	ands	r2, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	23a2      	movs	r3, #162	; 0xa2
 800a674:	0059      	lsls	r1, r3, #1
 800a676:	0013      	movs	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	189b      	adds	r3, r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	18c3      	adds	r3, r0, r3
 800a680:	185b      	adds	r3, r3, r1
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d106      	bne.n	800a696 <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	0011      	movs	r1, r2
 800a68e:	0018      	movs	r0, r3
 800a690:	f000 fb5d 	bl	800ad4e <USBD_CtlError>
            break;
 800a694:	e04e      	b.n	800a734 <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a696:	230e      	movs	r3, #14
 800a698:	18fb      	adds	r3, r7, r3
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da0d      	bge.n	800a6be <USBD_StdEPReq+0x2d4>
 800a6a2:	230e      	movs	r3, #14
 800a6a4:	18fb      	adds	r3, r7, r3
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	227f      	movs	r2, #127	; 0x7f
 800a6aa:	401a      	ands	r2, r3
 800a6ac:	0013      	movs	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	189b      	adds	r3, r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	3310      	adds	r3, #16
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	18d3      	adds	r3, r2, r3
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	e00c      	b.n	800a6d8 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 800a6be:	230e      	movs	r3, #14
 800a6c0:	18fb      	adds	r3, r7, r3
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	227f      	movs	r2, #127	; 0x7f
 800a6c6:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a6c8:	0013      	movs	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	189b      	adds	r3, r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	3341      	adds	r3, #65	; 0x41
 800a6d2:	33ff      	adds	r3, #255	; 0xff
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	18d3      	adds	r3, r2, r3
 800a6d8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6da:	230e      	movs	r3, #14
 800a6dc:	18fb      	adds	r3, r7, r3
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d004      	beq.n	800a6ee <USBD_StdEPReq+0x304>
 800a6e4:	230e      	movs	r3, #14
 800a6e6:	18fb      	adds	r3, r7, r3
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b80      	cmp	r3, #128	; 0x80
 800a6ec:	d103      	bne.n	800a6f6 <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e010      	b.n	800a718 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a6f6:	230e      	movs	r3, #14
 800a6f8:	18fb      	adds	r3, r7, r3
 800a6fa:	781a      	ldrb	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	0011      	movs	r1, r2
 800a700:	0018      	movs	r0, r3
 800a702:	f001 f85c 	bl	800b7be <USBD_LL_IsStallEP>
 800a706:	1e03      	subs	r3, r0, #0
 800a708:	d003      	beq.n	800a712 <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2201      	movs	r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e002      	b.n	800a718 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2200      	movs	r2, #0
 800a716:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2202      	movs	r2, #2
 800a71e:	0018      	movs	r0, r3
 800a720:	f000 fb94 	bl	800ae4c <USBD_CtlSendData>
          break;
 800a724:	e006      	b.n	800a734 <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	0011      	movs	r1, r2
 800a72c:	0018      	movs	r0, r3
 800a72e:	f000 fb0e 	bl	800ad4e <USBD_CtlError>
        break;
 800a732:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a734:	e006      	b.n	800a744 <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	0011      	movs	r1, r2
 800a73c:	0018      	movs	r0, r3
 800a73e:	f000 fb06 	bl	800ad4e <USBD_CtlError>
      break;
 800a742:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800a744:	e006      	b.n	800a754 <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	0011      	movs	r1, r2
 800a74c:	0018      	movs	r0, r3
 800a74e:	f000 fafe 	bl	800ad4e <USBD_CtlError>
    break;
 800a752:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a754:	230f      	movs	r3, #15
 800a756:	18fb      	adds	r3, r7, r3
 800a758:	781b      	ldrb	r3, [r3, #0]
}
 800a75a:	0018      	movs	r0, r3
 800a75c:	46bd      	mov	sp, r7
 800a75e:	b004      	add	sp, #16
 800a760:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a764 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	885b      	ldrh	r3, [r3, #2]
 800a772:	0a1b      	lsrs	r3, r3, #8
 800a774:	b29b      	uxth	r3, r3
 800a776:	2b07      	cmp	r3, #7
 800a778:	d900      	bls.n	800a77c <USBD_GetDescriptor+0x18>
 800a77a:	e0ce      	b.n	800a91a <USBD_GetDescriptor+0x1b6>
 800a77c:	009a      	lsls	r2, r3, #2
 800a77e:	4b80      	ldr	r3, [pc, #512]	; (800a980 <USBD_GetDescriptor+0x21c>)
 800a780:	18d3      	adds	r3, r2, r3
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	23a2      	movs	r3, #162	; 0xa2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	58d3      	ldr	r3, [r2, r3]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7c12      	ldrb	r2, [r2, #16]
 800a794:	210a      	movs	r1, #10
 800a796:	1879      	adds	r1, r7, r1
 800a798:	0010      	movs	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	0003      	movs	r3, r0
 800a79e:	60fb      	str	r3, [r7, #12]
    break;
 800a7a0:	e0c2      	b.n	800a928 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	7c1b      	ldrb	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10f      	bne.n	800a7ca <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	23a3      	movs	r3, #163	; 0xa3
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	58d3      	ldr	r3, [r2, r3]
 800a7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b4:	220a      	movs	r2, #10
 800a7b6:	18ba      	adds	r2, r7, r2
 800a7b8:	0010      	movs	r0, r2
 800a7ba:	4798      	blx	r3
 800a7bc:	0003      	movs	r3, r0
 800a7be:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a7c8:	e0ae      	b.n	800a928 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	23a3      	movs	r3, #163	; 0xa3
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	58d3      	ldr	r3, [r2, r3]
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	18ba      	adds	r2, r7, r2
 800a7d8:	0010      	movs	r0, r2
 800a7da:	4798      	blx	r3
 800a7dc:	0003      	movs	r3, r0
 800a7de:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	2202      	movs	r2, #2
 800a7e6:	701a      	strb	r2, [r3, #0]
    break;
 800a7e8:	e09e      	b.n	800a928 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	885b      	ldrh	r3, [r3, #2]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b05      	cmp	r3, #5
 800a7f2:	d858      	bhi.n	800a8a6 <USBD_GetDescriptor+0x142>
 800a7f4:	009a      	lsls	r2, r3, #2
 800a7f6:	4b63      	ldr	r3, [pc, #396]	; (800a984 <USBD_GetDescriptor+0x220>)
 800a7f8:	18d3      	adds	r3, r2, r3
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	23a2      	movs	r3, #162	; 0xa2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	58d3      	ldr	r3, [r2, r3]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	7c12      	ldrb	r2, [r2, #16]
 800a80c:	210a      	movs	r1, #10
 800a80e:	1879      	adds	r1, r7, r1
 800a810:	0010      	movs	r0, r2
 800a812:	4798      	blx	r3
 800a814:	0003      	movs	r3, r0
 800a816:	60fb      	str	r3, [r7, #12]
      break;
 800a818:	e04c      	b.n	800a8b4 <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	23a2      	movs	r3, #162	; 0xa2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	58d3      	ldr	r3, [r2, r3]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	7c12      	ldrb	r2, [r2, #16]
 800a828:	210a      	movs	r1, #10
 800a82a:	1879      	adds	r1, r7, r1
 800a82c:	0010      	movs	r0, r2
 800a82e:	4798      	blx	r3
 800a830:	0003      	movs	r3, r0
 800a832:	60fb      	str	r3, [r7, #12]
      break;
 800a834:	e03e      	b.n	800a8b4 <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	23a2      	movs	r3, #162	; 0xa2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	58d3      	ldr	r3, [r2, r3]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	7c12      	ldrb	r2, [r2, #16]
 800a844:	210a      	movs	r1, #10
 800a846:	1879      	adds	r1, r7, r1
 800a848:	0010      	movs	r0, r2
 800a84a:	4798      	blx	r3
 800a84c:	0003      	movs	r3, r0
 800a84e:	60fb      	str	r3, [r7, #12]
      break;
 800a850:	e030      	b.n	800a8b4 <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	23a2      	movs	r3, #162	; 0xa2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	58d3      	ldr	r3, [r2, r3]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	7c12      	ldrb	r2, [r2, #16]
 800a860:	210a      	movs	r1, #10
 800a862:	1879      	adds	r1, r7, r1
 800a864:	0010      	movs	r0, r2
 800a866:	4798      	blx	r3
 800a868:	0003      	movs	r3, r0
 800a86a:	60fb      	str	r3, [r7, #12]
      break;
 800a86c:	e022      	b.n	800a8b4 <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	23a2      	movs	r3, #162	; 0xa2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	58d3      	ldr	r3, [r2, r3]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	7c12      	ldrb	r2, [r2, #16]
 800a87c:	210a      	movs	r1, #10
 800a87e:	1879      	adds	r1, r7, r1
 800a880:	0010      	movs	r0, r2
 800a882:	4798      	blx	r3
 800a884:	0003      	movs	r3, r0
 800a886:	60fb      	str	r3, [r7, #12]
      break;
 800a888:	e014      	b.n	800a8b4 <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	23a2      	movs	r3, #162	; 0xa2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	58d3      	ldr	r3, [r2, r3]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	7c12      	ldrb	r2, [r2, #16]
 800a898:	210a      	movs	r1, #10
 800a89a:	1879      	adds	r1, r7, r1
 800a89c:	0010      	movs	r0, r2
 800a89e:	4798      	blx	r3
 800a8a0:	0003      	movs	r3, r0
 800a8a2:	60fb      	str	r3, [r7, #12]
      break;
 800a8a4:	e006      	b.n	800a8b4 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	f000 fa4e 	bl	800ad4e <USBD_CtlError>
      return;
 800a8b2:	e061      	b.n	800a978 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 800a8b4:	e038      	b.n	800a928 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	7c1b      	ldrb	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10b      	bne.n	800a8d6 <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	23a3      	movs	r3, #163	; 0xa3
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	58d3      	ldr	r3, [r2, r3]
 800a8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c8:	220a      	movs	r2, #10
 800a8ca:	18ba      	adds	r2, r7, r2
 800a8cc:	0010      	movs	r0, r2
 800a8ce:	4798      	blx	r3
 800a8d0:	0003      	movs	r3, r0
 800a8d2:	60fb      	str	r3, [r7, #12]
      break;
 800a8d4:	e028      	b.n	800a928 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	0011      	movs	r1, r2
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f000 fa36 	bl	800ad4e <USBD_CtlError>
      return;
 800a8e2:	e049      	b.n	800a978 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7c1b      	ldrb	r3, [r3, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10f      	bne.n	800a90c <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	23a3      	movs	r3, #163	; 0xa3
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	58d3      	ldr	r3, [r2, r3]
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f6:	220a      	movs	r2, #10
 800a8f8:	18ba      	adds	r2, r7, r2
 800a8fa:	0010      	movs	r0, r2
 800a8fc:	4798      	blx	r3
 800a8fe:	0003      	movs	r3, r0
 800a900:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3301      	adds	r3, #1
 800a906:	2207      	movs	r2, #7
 800a908:	701a      	strb	r2, [r3, #0]
      break;
 800a90a:	e00d      	b.n	800a928 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	0011      	movs	r1, r2
 800a912:	0018      	movs	r0, r3
 800a914:	f000 fa1b 	bl	800ad4e <USBD_CtlError>
      return;
 800a918:	e02e      	b.n	800a978 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	0011      	movs	r1, r2
 800a920:	0018      	movs	r0, r3
 800a922:	f000 fa14 	bl	800ad4e <USBD_CtlError>
    return;
 800a926:	e027      	b.n	800a978 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 800a928:	230a      	movs	r3, #10
 800a92a:	18fb      	adds	r3, r7, r3
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d01a      	beq.n	800a968 <USBD_GetDescriptor+0x204>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	88db      	ldrh	r3, [r3, #6]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d016      	beq.n	800a968 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	88da      	ldrh	r2, [r3, #6]
 800a93e:	230a      	movs	r3, #10
 800a940:	18fb      	adds	r3, r7, r3
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	1c18      	adds	r0, r3, #0
 800a946:	1c11      	adds	r1, r2, #0
 800a948:	b28a      	uxth	r2, r1
 800a94a:	b283      	uxth	r3, r0
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d900      	bls.n	800a952 <USBD_GetDescriptor+0x1ee>
 800a950:	1c01      	adds	r1, r0, #0
 800a952:	b28a      	uxth	r2, r1
 800a954:	210a      	movs	r1, #10
 800a956:	187b      	adds	r3, r7, r1
 800a958:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 800a95a:	187b      	adds	r3, r7, r1
 800a95c:	881a      	ldrh	r2, [r3, #0]
 800a95e:	68f9      	ldr	r1, [r7, #12]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	0018      	movs	r0, r3
 800a964:	f000 fa72 	bl	800ae4c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	88db      	ldrh	r3, [r3, #6]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d103      	bne.n	800a978 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	0018      	movs	r0, r3
 800a974:	f000 fad4 	bl	800af20 <USBD_CtlSendStatus>
  }
}
 800a978:	46bd      	mov	sp, r7
 800a97a:	b004      	add	sp, #16
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	46c0      	nop			; (mov r8, r8)
 800a980:	0800fa14 	.word	0x0800fa14
 800a984:	0800fa34 	.word	0x0800fa34

0800a988 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a988:	b590      	push	{r4, r7, lr}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	889b      	ldrh	r3, [r3, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d13d      	bne.n	800aa16 <USBD_SetAddress+0x8e>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	88db      	ldrh	r3, [r3, #6]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d139      	bne.n	800aa16 <USBD_SetAddress+0x8e>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	885b      	ldrh	r3, [r3, #2]
 800a9a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a9a8:	d835      	bhi.n	800aa16 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	885b      	ldrh	r3, [r3, #2]
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	230f      	movs	r3, #15
 800a9b2:	18fb      	adds	r3, r7, r3
 800a9b4:	217f      	movs	r1, #127	; 0x7f
 800a9b6:	400a      	ands	r2, r1
 800a9b8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	239d      	movs	r3, #157	; 0x9d
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	5cd3      	ldrb	r3, [r2, r3]
 800a9c2:	2b03      	cmp	r3, #3
 800a9c4:	d106      	bne.n	800a9d4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	0011      	movs	r1, r2
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f000 f9be 	bl	800ad4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d2:	e026      	b.n	800aa22 <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	240f      	movs	r4, #15
 800a9d8:	193a      	adds	r2, r7, r4
 800a9da:	4914      	ldr	r1, [pc, #80]	; (800aa2c <USBD_SetAddress+0xa4>)
 800a9dc:	7812      	ldrb	r2, [r2, #0]
 800a9de:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9e0:	193b      	adds	r3, r7, r4
 800a9e2:	781a      	ldrb	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	0011      	movs	r1, r2
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f000 ff19 	bl	800b820 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	f000 fa95 	bl	800af20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9f6:	193b      	adds	r3, r7, r4
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d005      	beq.n	800aa0a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	239d      	movs	r3, #157	; 0x9d
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	2102      	movs	r1, #2
 800aa06:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa08:	e00b      	b.n	800aa22 <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	239d      	movs	r3, #157	; 0x9d
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	2101      	movs	r1, #1
 800aa12:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa14:	e005      	b.n	800aa22 <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	0011      	movs	r1, r2
 800aa1c:	0018      	movs	r0, r3
 800aa1e:	f000 f996 	bl	800ad4e <USBD_CtlError>
  }
}
 800aa22:	46c0      	nop			; (mov r8, r8)
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b005      	add	sp, #20
 800aa28:	bd90      	pop	{r4, r7, pc}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	00000276 	.word	0x00000276

0800aa30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	885b      	ldrh	r3, [r3, #2]
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	4b4c      	ldr	r3, [pc, #304]	; (800ab74 <USBD_SetConfig+0x144>)
 800aa42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa44:	4b4b      	ldr	r3, [pc, #300]	; (800ab74 <USBD_SetConfig+0x144>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d906      	bls.n	800aa5a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	0011      	movs	r1, r2
 800aa52:	0018      	movs	r0, r3
 800aa54:	f000 f97b 	bl	800ad4e <USBD_CtlError>
 800aa58:	e088      	b.n	800ab6c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	239d      	movs	r3, #157	; 0x9d
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	5cd3      	ldrb	r3, [r2, r3]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d002      	beq.n	800aa6c <USBD_SetConfig+0x3c>
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d029      	beq.n	800aabe <USBD_SetConfig+0x8e>
 800aa6a:	e071      	b.n	800ab50 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800aa6c:	4b41      	ldr	r3, [pc, #260]	; (800ab74 <USBD_SetConfig+0x144>)
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01f      	beq.n	800aab4 <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 800aa74:	4b3f      	ldr	r3, [pc, #252]	; (800ab74 <USBD_SetConfig+0x144>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	001a      	movs	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	239d      	movs	r3, #157	; 0x9d
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	2103      	movs	r1, #3
 800aa86:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa88:	4b3a      	ldr	r3, [pc, #232]	; (800ab74 <USBD_SetConfig+0x144>)
 800aa8a:	781a      	ldrb	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	0011      	movs	r1, r2
 800aa90:	0018      	movs	r0, r3
 800aa92:	f7ff f966 	bl	8009d62 <USBD_SetClassConfig>
 800aa96:	0003      	movs	r3, r0
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d106      	bne.n	800aaaa <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	0011      	movs	r1, r2
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	f000 f953 	bl	800ad4e <USBD_CtlError>
          return;
 800aaa8:	e060      	b.n	800ab6c <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	0018      	movs	r0, r3
 800aaae:	f000 fa37 	bl	800af20 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800aab2:	e05b      	b.n	800ab6c <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	0018      	movs	r0, r3
 800aab8:	f000 fa32 	bl	800af20 <USBD_CtlSendStatus>
      break;
 800aabc:	e056      	b.n	800ab6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aabe:	4b2d      	ldr	r3, [pc, #180]	; (800ab74 <USBD_SetConfig+0x144>)
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d115      	bne.n	800aaf2 <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	239d      	movs	r3, #157	; 0x9d
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	2102      	movs	r1, #2
 800aace:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <USBD_SetConfig+0x144>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	001a      	movs	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800aada:	4b26      	ldr	r3, [pc, #152]	; (800ab74 <USBD_SetConfig+0x144>)
 800aadc:	781a      	ldrb	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	0011      	movs	r1, r2
 800aae2:	0018      	movs	r0, r3
 800aae4:	f7ff f965 	bl	8009db2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	0018      	movs	r0, r3
 800aaec:	f000 fa18 	bl	800af20 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800aaf0:	e03c      	b.n	800ab6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aaf2:	4b20      	ldr	r3, [pc, #128]	; (800ab74 <USBD_SetConfig+0x144>)
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	001a      	movs	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d022      	beq.n	800ab46 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	0011      	movs	r1, r2
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f7ff f951 	bl	8009db2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab10:	4b18      	ldr	r3, [pc, #96]	; (800ab74 <USBD_SetConfig+0x144>)
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	001a      	movs	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab1a:	4b16      	ldr	r3, [pc, #88]	; (800ab74 <USBD_SetConfig+0x144>)
 800ab1c:	781a      	ldrb	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	0011      	movs	r1, r2
 800ab22:	0018      	movs	r0, r3
 800ab24:	f7ff f91d 	bl	8009d62 <USBD_SetClassConfig>
 800ab28:	0003      	movs	r3, r0
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d106      	bne.n	800ab3c <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	0011      	movs	r1, r2
 800ab34:	0018      	movs	r0, r3
 800ab36:	f000 f90a 	bl	800ad4e <USBD_CtlError>
          return;
 800ab3a:	e017      	b.n	800ab6c <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	0018      	movs	r0, r3
 800ab40:	f000 f9ee 	bl	800af20 <USBD_CtlSendStatus>
      break;
 800ab44:	e012      	b.n	800ab6c <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f000 f9e9 	bl	800af20 <USBD_CtlSendStatus>
      break;
 800ab4e:	e00d      	b.n	800ab6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	0011      	movs	r1, r2
 800ab56:	0018      	movs	r0, r3
 800ab58:	f000 f8f9 	bl	800ad4e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ab5c:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <USBD_SetConfig+0x144>)
 800ab5e:	781a      	ldrb	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	0011      	movs	r1, r2
 800ab64:	0018      	movs	r0, r3
 800ab66:	f7ff f924 	bl	8009db2 <USBD_ClrClassConfig>
      break;
 800ab6a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	b002      	add	sp, #8
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	2000078c 	.word	0x2000078c

0800ab78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	88db      	ldrh	r3, [r3, #6]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d006      	beq.n	800ab98 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	0011      	movs	r1, r2
 800ab90:	0018      	movs	r0, r3
 800ab92:	f000 f8dc 	bl	800ad4e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ab96:	e025      	b.n	800abe4 <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	239d      	movs	r3, #157	; 0x9d
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	5cd3      	ldrb	r3, [r2, r3]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	db18      	blt.n	800abd6 <USBD_GetConfig+0x5e>
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	dd02      	ble.n	800abae <USBD_GetConfig+0x36>
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d00c      	beq.n	800abc6 <USBD_GetConfig+0x4e>
 800abac:	e013      	b.n	800abd6 <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	3308      	adds	r3, #8
 800abb8:	0019      	movs	r1, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	0018      	movs	r0, r3
 800abc0:	f000 f944 	bl	800ae4c <USBD_CtlSendData>
      break;
 800abc4:	e00e      	b.n	800abe4 <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	1d19      	adds	r1, r3, #4
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	0018      	movs	r0, r3
 800abd0:	f000 f93c 	bl	800ae4c <USBD_CtlSendData>
      break;
 800abd4:	e006      	b.n	800abe4 <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	0011      	movs	r1, r2
 800abdc:	0018      	movs	r0, r3
 800abde:	f000 f8b6 	bl	800ad4e <USBD_CtlError>
      break;
 800abe2:	46c0      	nop			; (mov r8, r8)
}
 800abe4:	46c0      	nop			; (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	b002      	add	sp, #8
 800abea:	bd80      	pop	{r7, pc}

0800abec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	239d      	movs	r3, #157	; 0x9d
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	5cd3      	ldrb	r3, [r2, r3]
 800abfe:	3b01      	subs	r3, #1
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d822      	bhi.n	800ac4a <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	88db      	ldrh	r3, [r3, #6]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d006      	beq.n	800ac1a <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	0011      	movs	r1, r2
 800ac12:	0018      	movs	r0, r3
 800ac14:	f000 f89b 	bl	800ad4e <USBD_CtlError>
      break;
 800ac18:	e01e      	b.n	800ac58 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	239f      	movs	r3, #159	; 0x9f
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	58d3      	ldr	r3, [r2, r3]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	2202      	movs	r2, #2
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	330c      	adds	r3, #12
 800ac3c:	0019      	movs	r1, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2202      	movs	r2, #2
 800ac42:	0018      	movs	r0, r3
 800ac44:	f000 f902 	bl	800ae4c <USBD_CtlSendData>
    break;
 800ac48:	e006      	b.n	800ac58 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	0011      	movs	r1, r2
 800ac50:	0018      	movs	r0, r3
 800ac52:	f000 f87c 	bl	800ad4e <USBD_CtlError>
    break;
 800ac56:	46c0      	nop			; (mov r8, r8)
  }
}
 800ac58:	46c0      	nop			; (mov r8, r8)
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	b002      	add	sp, #8
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	885b      	ldrh	r3, [r3, #2]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d108      	bne.n	800ac84 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	239f      	movs	r3, #159	; 0x9f
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	2101      	movs	r1, #1
 800ac7a:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	0018      	movs	r0, r3
 800ac80:	f000 f94e 	bl	800af20 <USBD_CtlSendStatus>
  }

}
 800ac84:	46c0      	nop			; (mov r8, r8)
 800ac86:	46bd      	mov	sp, r7
 800ac88:	b002      	add	sp, #8
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	239d      	movs	r3, #157	; 0x9d
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	5cd3      	ldrb	r3, [r2, r3]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d80d      	bhi.n	800acc0 <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	885b      	ldrh	r3, [r3, #2]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d110      	bne.n	800acce <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	239f      	movs	r3, #159	; 0x9f
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	2100      	movs	r1, #0
 800acb4:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	0018      	movs	r0, r3
 800acba:	f000 f931 	bl	800af20 <USBD_CtlSendStatus>
    }
    break;
 800acbe:	e006      	b.n	800acce <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	0011      	movs	r1, r2
 800acc6:	0018      	movs	r0, r3
 800acc8:	f000 f841 	bl	800ad4e <USBD_CtlError>
    break;
 800accc:	e000      	b.n	800acd0 <USBD_ClrFeature+0x44>
    break;
 800acce:	46c0      	nop			; (mov r8, r8)
  }
}
 800acd0:	46c0      	nop			; (mov r8, r8)
 800acd2:	46bd      	mov	sp, r7
 800acd4:	b002      	add	sp, #8
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	781a      	ldrb	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	785a      	ldrb	r2, [r3, #1]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	3302      	adds	r3, #2
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	3303      	adds	r3, #3
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	021b      	lsls	r3, r3, #8
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	18d3      	adds	r3, r2, r3
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	3304      	adds	r3, #4
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	3305      	adds	r3, #5
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	021b      	lsls	r3, r3, #8
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	18d3      	adds	r3, r2, r3
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	3306      	adds	r3, #6
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	3307      	adds	r3, #7
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	18d3      	adds	r3, r2, r3
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	80da      	strh	r2, [r3, #6]

}
 800ad46:	46c0      	nop			; (mov r8, r8)
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	b002      	add	sp, #8
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2180      	movs	r1, #128	; 0x80
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f000 fcd6 	bl	800b70e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2100      	movs	r1, #0
 800ad66:	0018      	movs	r0, r3
 800ad68:	f000 fcd1 	bl	800b70e <USBD_LL_StallEP>
}
 800ad6c:	46c0      	nop			; (mov r8, r8)
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	b002      	add	sp, #8
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad74:	b590      	push	{r4, r7, lr}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad80:	2317      	movs	r3, #23
 800ad82:	18fb      	adds	r3, r7, r3
 800ad84:	2200      	movs	r2, #0
 800ad86:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d03d      	beq.n	800ae0a <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	0018      	movs	r0, r3
 800ad92:	f000 f83e 	bl	800ae12 <USBD_GetLen>
 800ad96:	0003      	movs	r3, r0
 800ad98:	3301      	adds	r3, #1
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	18db      	adds	r3, r3, r3
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ada4:	2017      	movs	r0, #23
 800ada6:	183b      	adds	r3, r7, r0
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	183a      	adds	r2, r7, r0
 800adac:	1c59      	adds	r1, r3, #1
 800adae:	7011      	strb	r1, [r2, #0]
 800adb0:	001a      	movs	r2, r3
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	189b      	adds	r3, r3, r2
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	7812      	ldrb	r2, [r2, #0]
 800adba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800adbc:	183b      	adds	r3, r7, r0
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	183a      	adds	r2, r7, r0
 800adc2:	1c59      	adds	r1, r3, #1
 800adc4:	7011      	strb	r1, [r2, #0]
 800adc6:	001a      	movs	r2, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	189b      	adds	r3, r3, r2
 800adcc:	2203      	movs	r2, #3
 800adce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800add0:	e017      	b.n	800ae02 <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	60fa      	str	r2, [r7, #12]
 800add8:	2417      	movs	r4, #23
 800adda:	193a      	adds	r2, r7, r4
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	1939      	adds	r1, r7, r4
 800ade0:	1c50      	adds	r0, r2, #1
 800ade2:	7008      	strb	r0, [r1, #0]
 800ade4:	0011      	movs	r1, r2
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	1852      	adds	r2, r2, r1
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800adee:	193b      	adds	r3, r7, r4
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	193a      	adds	r2, r7, r4
 800adf4:	1c59      	adds	r1, r3, #1
 800adf6:	7011      	strb	r1, [r2, #0]
 800adf8:	001a      	movs	r2, r3
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	189b      	adds	r3, r3, r2
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e3      	bne.n	800add2 <USBD_GetString+0x5e>
    }
  }
}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b007      	add	sp, #28
 800ae10:	bd90      	pop	{r4, r7, pc}

0800ae12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800ae1a:	230f      	movs	r3, #15
 800ae1c:	18fb      	adds	r3, r7, r3
 800ae1e:	2200      	movs	r2, #0
 800ae20:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 800ae22:	e008      	b.n	800ae36 <USBD_GetLen+0x24>
    {
        len++;
 800ae24:	210f      	movs	r1, #15
 800ae26:	187b      	adds	r3, r7, r1
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	187b      	adds	r3, r7, r1
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	701a      	strb	r2, [r3, #0]
        buf++;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3301      	adds	r3, #1
 800ae34:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1f2      	bne.n	800ae24 <USBD_GetLen+0x12>
    }

    return len;
 800ae3e:	230f      	movs	r3, #15
 800ae40:	18fb      	adds	r3, r7, r3
 800ae42:	781b      	ldrb	r3, [r3, #0]
}
 800ae44:	0018      	movs	r0, r3
 800ae46:	46bd      	mov	sp, r7
 800ae48:	b004      	add	sp, #16
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	1dbb      	adds	r3, r7, #6
 800ae58:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	239b      	movs	r3, #155	; 0x9b
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	2102      	movs	r1, #2
 800ae62:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ae64:	1dbb      	adds	r3, r7, #6
 800ae66:	881a      	ldrh	r2, [r3, #0]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ae6c:	1dbb      	adds	r3, r7, #6
 800ae6e:	881a      	ldrh	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ae74:	1dbb      	adds	r3, r7, #6
 800ae76:	881b      	ldrh	r3, [r3, #0]
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	f000 fcfb 	bl	800b878 <USBD_LL_Transmit>

  return USBD_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	0018      	movs	r0, r3
 800ae86:	46bd      	mov	sp, r7
 800ae88:	b004      	add	sp, #16
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	1dbb      	adds	r3, r7, #6
 800ae98:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ae9a:	1dbb      	adds	r3, r7, #6
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	2100      	movs	r1, #0
 800aea4:	f000 fce8 	bl	800b878 <USBD_LL_Transmit>

  return USBD_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	0018      	movs	r0, r3
 800aeac:	46bd      	mov	sp, r7
 800aeae:	b004      	add	sp, #16
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	1dbb      	adds	r3, r7, #6
 800aebe:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	239b      	movs	r3, #155	; 0x9b
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	2103      	movs	r1, #3
 800aec8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800aeca:	1dbb      	adds	r3, r7, #6
 800aecc:	8819      	ldrh	r1, [r3, #0]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	23a4      	movs	r3, #164	; 0xa4
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800aed6:	1dbb      	adds	r3, r7, #6
 800aed8:	8819      	ldrh	r1, [r3, #0]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	23a6      	movs	r3, #166	; 0xa6
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800aee2:	1dbb      	adds	r3, r7, #6
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	2100      	movs	r1, #0
 800aeec:	f000 fcfc 	bl	800b8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	0018      	movs	r0, r3
 800aef4:	46bd      	mov	sp, r7
 800aef6:	b004      	add	sp, #16
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	1dbb      	adds	r3, r7, #6
 800af06:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af08:	1dbb      	adds	r3, r7, #6
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	2100      	movs	r1, #0
 800af12:	f000 fce9 	bl	800b8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	0018      	movs	r0, r3
 800af1a:	46bd      	mov	sp, r7
 800af1c:	b004      	add	sp, #16
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	239b      	movs	r3, #155	; 0x9b
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	2104      	movs	r1, #4
 800af30:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	2300      	movs	r3, #0
 800af36:	2200      	movs	r2, #0
 800af38:	2100      	movs	r1, #0
 800af3a:	f000 fc9d 	bl	800b878 <USBD_LL_Transmit>

  return USBD_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	0018      	movs	r0, r3
 800af42:	46bd      	mov	sp, r7
 800af44:	b002      	add	sp, #8
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	239b      	movs	r3, #155	; 0x9b
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	2105      	movs	r1, #5
 800af58:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	2300      	movs	r3, #0
 800af5e:	2200      	movs	r2, #0
 800af60:	2100      	movs	r1, #0
 800af62:	f000 fcc1 	bl	800b8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	0018      	movs	r0, r3
 800af6a:	46bd      	mov	sp, r7
 800af6c:	b002      	add	sp, #8
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af74:	4914      	ldr	r1, [pc, #80]	; (800afc8 <MX_USB_DEVICE_Init+0x58>)
 800af76:	4b15      	ldr	r3, [pc, #84]	; (800afcc <MX_USB_DEVICE_Init+0x5c>)
 800af78:	2200      	movs	r2, #0
 800af7a:	0018      	movs	r0, r3
 800af7c:	f7fe fe89 	bl	8009c92 <USBD_Init>
 800af80:	1e03      	subs	r3, r0, #0
 800af82:	d001      	beq.n	800af88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af84:	f7f7 fef8 	bl	8002d78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af88:	4a11      	ldr	r2, [pc, #68]	; (800afd0 <MX_USB_DEVICE_Init+0x60>)
 800af8a:	4b10      	ldr	r3, [pc, #64]	; (800afcc <MX_USB_DEVICE_Init+0x5c>)
 800af8c:	0011      	movs	r1, r2
 800af8e:	0018      	movs	r0, r3
 800af90:	f7fe feb0 	bl	8009cf4 <USBD_RegisterClass>
 800af94:	1e03      	subs	r3, r0, #0
 800af96:	d001      	beq.n	800af9c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800af98:	f7f7 feee 	bl	8002d78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af9c:	4a0d      	ldr	r2, [pc, #52]	; (800afd4 <MX_USB_DEVICE_Init+0x64>)
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <MX_USB_DEVICE_Init+0x5c>)
 800afa0:	0011      	movs	r1, r2
 800afa2:	0018      	movs	r0, r3
 800afa4:	f7fe fdc4 	bl	8009b30 <USBD_CDC_RegisterInterface>
 800afa8:	1e03      	subs	r3, r0, #0
 800afaa:	d001      	beq.n	800afb0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800afac:	f7f7 fee4 	bl	8002d78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afb0:	4b06      	ldr	r3, [pc, #24]	; (800afcc <MX_USB_DEVICE_Init+0x5c>)
 800afb2:	0018      	movs	r0, r3
 800afb4:	f7fe febf 	bl	8009d36 <USBD_Start>
 800afb8:	1e03      	subs	r3, r0, #0
 800afba:	d001      	beq.n	800afc0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800afbc:	f7f7 fedc 	bl	8002d78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afc0:	46c0      	nop			; (mov r8, r8)
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	46c0      	nop			; (mov r8, r8)
 800afc8:	20000134 	.word	0x20000134
 800afcc:	20000ab0 	.word	0x20000ab0
 800afd0:	20000020 	.word	0x20000020
 800afd4:	20000124 	.word	0x20000124

0800afd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afdc:	4907      	ldr	r1, [pc, #28]	; (800affc <CDC_Init_FS+0x24>)
 800afde:	4b08      	ldr	r3, [pc, #32]	; (800b000 <CDC_Init_FS+0x28>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	0018      	movs	r0, r3
 800afe4:	f7fe fdc0 	bl	8009b68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afe8:	4a06      	ldr	r2, [pc, #24]	; (800b004 <CDC_Init_FS+0x2c>)
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <CDC_Init_FS+0x28>)
 800afec:	0011      	movs	r1, r2
 800afee:	0018      	movs	r0, r3
 800aff0:	f7fe fdd6 	bl	8009ba0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aff4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aff6:	0018      	movs	r0, r3
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20001134 	.word	0x20001134
 800b000:	20000ab0 	.word	0x20000ab0
 800b004:	20000d4c 	.word	0x20000d4c

0800b008 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b00c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b00e:	0018      	movs	r0, r3
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6039      	str	r1, [r7, #0]
 800b01c:	0011      	movs	r1, r2
 800b01e:	1dfb      	adds	r3, r7, #7
 800b020:	1c02      	adds	r2, r0, #0
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	1d3b      	adds	r3, r7, #4
 800b026:	1c0a      	adds	r2, r1, #0
 800b028:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b02a:	1dfb      	adds	r3, r7, #7
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b23      	cmp	r3, #35	; 0x23
 800b030:	d804      	bhi.n	800b03c <CDC_Control_FS+0x28>
 800b032:	009a      	lsls	r2, r3, #2
 800b034:	4b04      	ldr	r3, [pc, #16]	; (800b048 <CDC_Control_FS+0x34>)
 800b036:	18d3      	adds	r3, r2, r3
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b03c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800b03e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b040:	0018      	movs	r0, r3
 800b042:	46bd      	mov	sp, r7
 800b044:	b002      	add	sp, #8
 800b046:	bd80      	pop	{r7, pc}
 800b048:	0800fa4c 	.word	0x0800fa4c

0800b04c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <CDC_Receive_FS+0x64>)
 800b05a:	0011      	movs	r1, r2
 800b05c:	0018      	movs	r0, r3
 800b05e:	f7fe fd9f 	bl	8009ba0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b062:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <CDC_Receive_FS+0x64>)
 800b064:	0018      	movs	r0, r3
 800b066:	f7fe fde6 	bl	8009c36 <USBD_CDC_ReceivePacket>
  if (Buf[0]=='1') {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2b31      	cmp	r3, #49	; 0x31
 800b070:	d105      	bne.n	800b07e <CDC_Receive_FS+0x32>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800b072:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <CDC_Receive_FS+0x68>)
 800b074:	2201      	movs	r2, #1
 800b076:	2108      	movs	r1, #8
 800b078:	0018      	movs	r0, r3
 800b07a:	f7f8 fc43 	bl	8003904 <HAL_GPIO_WritePin>
  }
  if (Buf[0]=='0') {
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b30      	cmp	r3, #48	; 0x30
 800b084:	d105      	bne.n	800b092 <CDC_Receive_FS+0x46>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800b086:	4b0b      	ldr	r3, [pc, #44]	; (800b0b4 <CDC_Receive_FS+0x68>)
 800b088:	2200      	movs	r2, #0
 800b08a:	2108      	movs	r1, #8
 800b08c:	0018      	movs	r0, r3
 800b08e:	f7f8 fc39 	bl	8003904 <HAL_GPIO_WritePin>
  }
  if (Buf[0]=='T') {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b54      	cmp	r3, #84	; 0x54
 800b098:	d104      	bne.n	800b0a4 <CDC_Receive_FS+0x58>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800b09a:	4b06      	ldr	r3, [pc, #24]	; (800b0b4 <CDC_Receive_FS+0x68>)
 800b09c:	2108      	movs	r1, #8
 800b09e:	0018      	movs	r0, r3
 800b0a0:	f7f8 fc4d 	bl	800393e <HAL_GPIO_TogglePin>
  }

  return (USBD_OK);
 800b0a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	b002      	add	sp, #8
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	46c0      	nop			; (mov r8, r8)
 800b0b0:	20000ab0 	.word	0x20000ab0
 800b0b4:	50000400 	.word	0x50000400

0800b0b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b0b8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	000a      	movs	r2, r1
 800b0c2:	1cbb      	adds	r3, r7, #2
 800b0c4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b0c6:	230f      	movs	r3, #15
 800b0c8:	18fb      	adds	r3, r7, r3
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b0ce:	4a11      	ldr	r2, [pc, #68]	; (800b114 <CDC_Transmit_FS+0x5c>)
 800b0d0:	23a4      	movs	r3, #164	; 0xa4
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	58d3      	ldr	r3, [r2, r3]
 800b0d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	2385      	movs	r3, #133	; 0x85
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	58d3      	ldr	r3, [r2, r3]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e010      	b.n	800b10a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b0e8:	1cbb      	adds	r3, r7, #2
 800b0ea:	881a      	ldrh	r2, [r3, #0]
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4b09      	ldr	r3, [pc, #36]	; (800b114 <CDC_Transmit_FS+0x5c>)
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	f7fe fd39 	bl	8009b68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b0f6:	250f      	movs	r5, #15
 800b0f8:	197c      	adds	r4, r7, r5
 800b0fa:	4b06      	ldr	r3, [pc, #24]	; (800b114 <CDC_Transmit_FS+0x5c>)
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f7fe fd63 	bl	8009bc8 <USBD_CDC_TransmitPacket>
 800b102:	0003      	movs	r3, r0
 800b104:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b106:	197b      	adds	r3, r7, r5
 800b108:	781b      	ldrb	r3, [r3, #0]
}
 800b10a:	0018      	movs	r0, r3
 800b10c:	46bd      	mov	sp, r7
 800b10e:	b004      	add	sp, #16
 800b110:	bdb0      	pop	{r4, r5, r7, pc}
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	20000ab0 	.word	0x20000ab0

0800b118 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	0002      	movs	r2, r0
 800b120:	6039      	str	r1, [r7, #0]
 800b122:	1dfb      	adds	r3, r7, #7
 800b124:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2212      	movs	r2, #18
 800b12a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b12e:	0018      	movs	r0, r3
 800b130:	46bd      	mov	sp, r7
 800b132:	b002      	add	sp, #8
 800b134:	bd80      	pop	{r7, pc}
 800b136:	46c0      	nop			; (mov r8, r8)
 800b138:	20000150 	.word	0x20000150

0800b13c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	0002      	movs	r2, r0
 800b144:	6039      	str	r1, [r7, #0]
 800b146:	1dfb      	adds	r3, r7, #7
 800b148:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2204      	movs	r2, #4
 800b14e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b150:	4b02      	ldr	r3, [pc, #8]	; (800b15c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b152:	0018      	movs	r0, r3
 800b154:	46bd      	mov	sp, r7
 800b156:	b002      	add	sp, #8
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	20000164 	.word	0x20000164

0800b160 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	0002      	movs	r2, r0
 800b168:	6039      	str	r1, [r7, #0]
 800b16a:	1dfb      	adds	r3, r7, #7
 800b16c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b16e:	1dfb      	adds	r3, r7, #7
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	4908      	ldr	r1, [pc, #32]	; (800b19c <USBD_FS_ProductStrDescriptor+0x3c>)
 800b17a:	4b09      	ldr	r3, [pc, #36]	; (800b1a0 <USBD_FS_ProductStrDescriptor+0x40>)
 800b17c:	0018      	movs	r0, r3
 800b17e:	f7ff fdf9 	bl	800ad74 <USBD_GetString>
 800b182:	e005      	b.n	800b190 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	4905      	ldr	r1, [pc, #20]	; (800b19c <USBD_FS_ProductStrDescriptor+0x3c>)
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <USBD_FS_ProductStrDescriptor+0x40>)
 800b18a:	0018      	movs	r0, r3
 800b18c:	f7ff fdf2 	bl	800ad74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b190:	4b02      	ldr	r3, [pc, #8]	; (800b19c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b192:	0018      	movs	r0, r3
 800b194:	46bd      	mov	sp, r7
 800b196:	b002      	add	sp, #8
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	2000151c 	.word	0x2000151c
 800b1a0:	0800e5bc 	.word	0x0800e5bc

0800b1a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	0002      	movs	r2, r0
 800b1ac:	6039      	str	r1, [r7, #0]
 800b1ae:	1dfb      	adds	r3, r7, #7
 800b1b0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	4904      	ldr	r1, [pc, #16]	; (800b1c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f7ff fddb 	bl	800ad74 <USBD_GetString>
  return USBD_StrDesc;
 800b1be:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	b002      	add	sp, #8
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	2000151c 	.word	0x2000151c
 800b1cc:	0800e5d4 	.word	0x0800e5d4

0800b1d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	0002      	movs	r2, r0
 800b1d8:	6039      	str	r1, [r7, #0]
 800b1da:	1dfb      	adds	r3, r7, #7
 800b1dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	221a      	movs	r2, #26
 800b1e2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1e4:	f000 f84c 	bl	800b280 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1e8:	4b02      	ldr	r3, [pc, #8]	; (800b1f4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	b002      	add	sp, #8
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	46c0      	nop			; (mov r8, r8)
 800b1f4:	20000168 	.word	0x20000168

0800b1f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	0002      	movs	r2, r0
 800b200:	6039      	str	r1, [r7, #0]
 800b202:	1dfb      	adds	r3, r7, #7
 800b204:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b206:	1dfb      	adds	r3, r7, #7
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d106      	bne.n	800b21c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	4908      	ldr	r1, [pc, #32]	; (800b234 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b212:	4b09      	ldr	r3, [pc, #36]	; (800b238 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b214:	0018      	movs	r0, r3
 800b216:	f7ff fdad 	bl	800ad74 <USBD_GetString>
 800b21a:	e005      	b.n	800b228 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	4905      	ldr	r1, [pc, #20]	; (800b234 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b220:	4b05      	ldr	r3, [pc, #20]	; (800b238 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b222:	0018      	movs	r0, r3
 800b224:	f7ff fda6 	bl	800ad74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b228:	4b02      	ldr	r3, [pc, #8]	; (800b234 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b22a:	0018      	movs	r0, r3
 800b22c:	46bd      	mov	sp, r7
 800b22e:	b002      	add	sp, #8
 800b230:	bd80      	pop	{r7, pc}
 800b232:	46c0      	nop			; (mov r8, r8)
 800b234:	2000151c 	.word	0x2000151c
 800b238:	0800e5e8 	.word	0x0800e5e8

0800b23c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	0002      	movs	r2, r0
 800b244:	6039      	str	r1, [r7, #0]
 800b246:	1dfb      	adds	r3, r7, #7
 800b248:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b24a:	1dfb      	adds	r3, r7, #7
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d106      	bne.n	800b260 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	4908      	ldr	r1, [pc, #32]	; (800b278 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b256:	4b09      	ldr	r3, [pc, #36]	; (800b27c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b258:	0018      	movs	r0, r3
 800b25a:	f7ff fd8b 	bl	800ad74 <USBD_GetString>
 800b25e:	e005      	b.n	800b26c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	4905      	ldr	r1, [pc, #20]	; (800b278 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b264:	4b05      	ldr	r3, [pc, #20]	; (800b27c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b266:	0018      	movs	r0, r3
 800b268:	f7ff fd84 	bl	800ad74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b26e:	0018      	movs	r0, r3
 800b270:	46bd      	mov	sp, r7
 800b272:	b002      	add	sp, #8
 800b274:	bd80      	pop	{r7, pc}
 800b276:	46c0      	nop			; (mov r8, r8)
 800b278:	2000151c 	.word	0x2000151c
 800b27c:	0800e5f4 	.word	0x0800e5f4

0800b280 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b286:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <Get_SerialNum+0x48>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <Get_SerialNum+0x4c>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b292:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <Get_SerialNum+0x50>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	18d3      	adds	r3, r2, r3
 800b29e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00b      	beq.n	800b2be <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2a6:	490b      	ldr	r1, [pc, #44]	; (800b2d4 <Get_SerialNum+0x54>)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	f000 f815 	bl	800b2dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2b2:	4909      	ldr	r1, [pc, #36]	; (800b2d8 <Get_SerialNum+0x58>)
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2204      	movs	r2, #4
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	f000 f80f 	bl	800b2dc <IntToUnicode>
  }
}
 800b2be:	46c0      	nop			; (mov r8, r8)
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	b004      	add	sp, #16
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	1ff80050 	.word	0x1ff80050
 800b2cc:	1ff80054 	.word	0x1ff80054
 800b2d0:	1ff80058 	.word	0x1ff80058
 800b2d4:	2000016a 	.word	0x2000016a
 800b2d8:	2000017a 	.word	0x2000017a

0800b2dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	1dfb      	adds	r3, r7, #7
 800b2e8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b2ea:	2117      	movs	r1, #23
 800b2ec:	187b      	adds	r3, r7, r1
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b2f2:	187b      	adds	r3, r7, r1
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	e02f      	b.n	800b35a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	0f1b      	lsrs	r3, r3, #28
 800b2fe:	2b09      	cmp	r3, #9
 800b300:	d80d      	bhi.n	800b31e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	0f1b      	lsrs	r3, r3, #28
 800b306:	b2da      	uxtb	r2, r3
 800b308:	2317      	movs	r3, #23
 800b30a:	18fb      	adds	r3, r7, r3
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	0019      	movs	r1, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	185b      	adds	r3, r3, r1
 800b316:	3230      	adds	r2, #48	; 0x30
 800b318:	b2d2      	uxtb	r2, r2
 800b31a:	701a      	strb	r2, [r3, #0]
 800b31c:	e00c      	b.n	800b338 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	0f1b      	lsrs	r3, r3, #28
 800b322:	b2da      	uxtb	r2, r3
 800b324:	2317      	movs	r3, #23
 800b326:	18fb      	adds	r3, r7, r3
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	0019      	movs	r1, r3
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	185b      	adds	r3, r3, r1
 800b332:	3237      	adds	r2, #55	; 0x37
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b33e:	2117      	movs	r1, #23
 800b340:	187b      	adds	r3, r7, r1
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	3301      	adds	r3, #1
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	18d3      	adds	r3, r2, r3
 800b34c:	2200      	movs	r2, #0
 800b34e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b350:	187b      	adds	r3, r7, r1
 800b352:	781a      	ldrb	r2, [r3, #0]
 800b354:	187b      	adds	r3, r7, r1
 800b356:	3201      	adds	r2, #1
 800b358:	701a      	strb	r2, [r3, #0]
 800b35a:	2317      	movs	r3, #23
 800b35c:	18fa      	adds	r2, r7, r3
 800b35e:	1dfb      	adds	r3, r7, #7
 800b360:	7812      	ldrb	r2, [r2, #0]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d3c8      	bcc.n	800b2fa <IntToUnicode+0x1e>
  }
}
 800b368:	46c0      	nop			; (mov r8, r8)
 800b36a:	46bd      	mov	sp, r7
 800b36c:	b006      	add	sp, #24
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a0a      	ldr	r2, [pc, #40]	; (800b3a8 <HAL_PCD_MspInit+0x38>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d10e      	bne.n	800b3a0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b382:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <HAL_PCD_MspInit+0x3c>)
 800b384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b386:	4b09      	ldr	r3, [pc, #36]	; (800b3ac <HAL_PCD_MspInit+0x3c>)
 800b388:	2180      	movs	r1, #128	; 0x80
 800b38a:	0409      	lsls	r1, r1, #16
 800b38c:	430a      	orrs	r2, r1
 800b38e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b390:	2200      	movs	r2, #0
 800b392:	2100      	movs	r1, #0
 800b394:	201f      	movs	r0, #31
 800b396:	f7f8 f905 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b39a:	201f      	movs	r0, #31
 800b39c:	f7f8 f917 	bl	80035ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b3a0:	46c0      	nop			; (mov r8, r8)
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	b002      	add	sp, #8
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	40005c00 	.word	0x40005c00
 800b3ac:	40021000 	.word	0x40021000

0800b3b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	23bc      	movs	r3, #188	; 0xbc
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	58d2      	ldr	r2, [r2, r3]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	21ac      	movs	r1, #172	; 0xac
 800b3c4:	0089      	lsls	r1, r1, #2
 800b3c6:	468c      	mov	ip, r1
 800b3c8:	4463      	add	r3, ip
 800b3ca:	0019      	movs	r1, r3
 800b3cc:	0010      	movs	r0, r2
 800b3ce:	f7fe fd07 	bl	8009de0 <USBD_LL_SetupStage>
}
 800b3d2:	46c0      	nop			; (mov r8, r8)
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	b002      	add	sp, #8
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3da:	b590      	push	{r4, r7, lr}
 800b3dc:	b083      	sub	sp, #12
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	000a      	movs	r2, r1
 800b3e4:	1cfb      	adds	r3, r7, #3
 800b3e6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	23bc      	movs	r3, #188	; 0xbc
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	58d4      	ldr	r4, [r2, r3]
 800b3f0:	1cfb      	adds	r3, r7, #3
 800b3f2:	781a      	ldrb	r2, [r3, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	23be      	movs	r3, #190	; 0xbe
 800b3f8:	0059      	lsls	r1, r3, #1
 800b3fa:	0013      	movs	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	189b      	adds	r3, r3, r2
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	18c3      	adds	r3, r0, r3
 800b404:	185b      	adds	r3, r3, r1
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	1cfb      	adds	r3, r7, #3
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	0019      	movs	r1, r3
 800b40e:	0020      	movs	r0, r4
 800b410:	f7fe fd42 	bl	8009e98 <USBD_LL_DataOutStage>
}
 800b414:	46c0      	nop			; (mov r8, r8)
 800b416:	46bd      	mov	sp, r7
 800b418:	b003      	add	sp, #12
 800b41a:	bd90      	pop	{r4, r7, pc}

0800b41c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	000a      	movs	r2, r1
 800b426:	1cfb      	adds	r3, r7, #3
 800b428:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	23bc      	movs	r3, #188	; 0xbc
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	58d0      	ldr	r0, [r2, r3]
 800b432:	1cfb      	adds	r3, r7, #3
 800b434:	781a      	ldrb	r2, [r3, #0]
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	0013      	movs	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	189b      	adds	r3, r3, r2
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	18cb      	adds	r3, r1, r3
 800b442:	333c      	adds	r3, #60	; 0x3c
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	1cfb      	adds	r3, r7, #3
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	0019      	movs	r1, r3
 800b44c:	f7fe fda6 	bl	8009f9c <USBD_LL_DataInStage>
}
 800b450:	46c0      	nop			; (mov r8, r8)
 800b452:	46bd      	mov	sp, r7
 800b454:	b002      	add	sp, #8
 800b456:	bd80      	pop	{r7, pc}

0800b458 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	23bc      	movs	r3, #188	; 0xbc
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	58d3      	ldr	r3, [r2, r3]
 800b468:	0018      	movs	r0, r3
 800b46a:	f7fe fed7 	bl	800a21c <USBD_LL_SOF>
}
 800b46e:	46c0      	nop			; (mov r8, r8)
 800b470:	46bd      	mov	sp, r7
 800b472:	b002      	add	sp, #8
 800b474:	bd80      	pop	{r7, pc}

0800b476 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b47e:	230f      	movs	r3, #15
 800b480:	18fb      	adds	r3, r7, r3
 800b482:	2201      	movs	r2, #1
 800b484:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d001      	beq.n	800b492 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b48e:	f7f7 fc73 	bl	8002d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	23bc      	movs	r3, #188	; 0xbc
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	58d2      	ldr	r2, [r2, r3]
 800b49a:	230f      	movs	r3, #15
 800b49c:	18fb      	adds	r3, r7, r3
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	0019      	movs	r1, r3
 800b4a2:	0010      	movs	r0, r2
 800b4a4:	f7fe fe7f 	bl	800a1a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	23bc      	movs	r3, #188	; 0xbc
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	58d3      	ldr	r3, [r2, r3]
 800b4b0:	0018      	movs	r0, r3
 800b4b2:	f7fe fe30 	bl	800a116 <USBD_LL_Reset>
}
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	b004      	add	sp, #16
 800b4bc:	bd80      	pop	{r7, pc}
	...

0800b4c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	23bc      	movs	r3, #188	; 0xbc
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	58d3      	ldr	r3, [r2, r3]
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f7fe fe79 	bl	800a1c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d005      	beq.n	800b4ea <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <HAL_PCD_SuspendCallback+0x34>)
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	4b04      	ldr	r3, [pc, #16]	; (800b4f4 <HAL_PCD_SuspendCallback+0x34>)
 800b4e4:	2106      	movs	r1, #6
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b4ea:	46c0      	nop			; (mov r8, r8)
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	b002      	add	sp, #8
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	46c0      	nop			; (mov r8, r8)
 800b4f4:	e000ed00 	.word	0xe000ed00

0800b4f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d007      	beq.n	800b518 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b508:	4b09      	ldr	r3, [pc, #36]	; (800b530 <HAL_PCD_ResumeCallback+0x38>)
 800b50a:	691a      	ldr	r2, [r3, #16]
 800b50c:	4b08      	ldr	r3, [pc, #32]	; (800b530 <HAL_PCD_ResumeCallback+0x38>)
 800b50e:	2106      	movs	r1, #6
 800b510:	438a      	bics	r2, r1
 800b512:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b514:	f000 fa4a 	bl	800b9ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	23bc      	movs	r3, #188	; 0xbc
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	58d3      	ldr	r3, [r2, r3]
 800b520:	0018      	movs	r0, r3
 800b522:	f7fe fe69 	bl	800a1f8 <USBD_LL_Resume>
}
 800b526:	46c0      	nop			; (mov r8, r8)
 800b528:	46bd      	mov	sp, r7
 800b52a:	b002      	add	sp, #8
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	46c0      	nop			; (mov r8, r8)
 800b530:	e000ed00 	.word	0xe000ed00

0800b534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b53c:	4a2d      	ldr	r2, [pc, #180]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b53e:	23bc      	movs	r3, #188	; 0xbc
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	23a6      	movs	r3, #166	; 0xa6
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4929      	ldr	r1, [pc, #164]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b54e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b550:	4b28      	ldr	r3, [pc, #160]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b552:	4a29      	ldr	r2, [pc, #164]	; (800b5f8 <USBD_LL_Init+0xc4>)
 800b554:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b556:	4b27      	ldr	r3, [pc, #156]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b558:	2208      	movs	r2, #8
 800b55a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b55c:	4b25      	ldr	r3, [pc, #148]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b55e:	2202      	movs	r2, #2
 800b560:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b562:	4b24      	ldr	r3, [pc, #144]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b564:	2202      	movs	r2, #2
 800b566:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b568:	4b22      	ldr	r3, [pc, #136]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b56e:	4b21      	ldr	r3, [pc, #132]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b570:	2200      	movs	r2, #0
 800b572:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b574:	4b1f      	ldr	r3, [pc, #124]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b576:	2200      	movs	r2, #0
 800b578:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b57a:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <USBD_LL_Init+0xc0>)
 800b57c:	0018      	movs	r0, r3
 800b57e:	f7f8 fe31 	bl	80041e4 <HAL_PCD_Init>
 800b582:	1e03      	subs	r3, r0, #0
 800b584:	d001      	beq.n	800b58a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b586:	f7f7 fbf7 	bl	8002d78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	23a6      	movs	r3, #166	; 0xa6
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	58d0      	ldr	r0, [r2, r3]
 800b592:	2318      	movs	r3, #24
 800b594:	2200      	movs	r2, #0
 800b596:	2100      	movs	r1, #0
 800b598:	f7fa fa42 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	23a6      	movs	r3, #166	; 0xa6
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	58d0      	ldr	r0, [r2, r3]
 800b5a4:	2358      	movs	r3, #88	; 0x58
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2180      	movs	r1, #128	; 0x80
 800b5aa:	f7fa fa39 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	23a6      	movs	r3, #166	; 0xa6
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	58d0      	ldr	r0, [r2, r3]
 800b5b6:	23c0      	movs	r3, #192	; 0xc0
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	2181      	movs	r1, #129	; 0x81
 800b5bc:	f7fa fa30 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	23a6      	movs	r3, #166	; 0xa6
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	58d0      	ldr	r0, [r2, r3]
 800b5c8:	2388      	movs	r3, #136	; 0x88
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	f7fa fa26 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	23a6      	movs	r3, #166	; 0xa6
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	58d0      	ldr	r0, [r2, r3]
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2182      	movs	r1, #130	; 0x82
 800b5e4:	f7fa fa1c 	bl	8005a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	0018      	movs	r0, r3
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	b002      	add	sp, #8
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	46c0      	nop			; (mov r8, r8)
 800b5f4:	2000171c 	.word	0x2000171c
 800b5f8:	40005c00 	.word	0x40005c00

0800b5fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b604:	210f      	movs	r1, #15
 800b606:	187b      	adds	r3, r7, r1
 800b608:	2200      	movs	r2, #0
 800b60a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b60c:	260e      	movs	r6, #14
 800b60e:	19bb      	adds	r3, r7, r6
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	23a6      	movs	r3, #166	; 0xa6
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	58d3      	ldr	r3, [r2, r3]
 800b61c:	000d      	movs	r5, r1
 800b61e:	187c      	adds	r4, r7, r1
 800b620:	0018      	movs	r0, r3
 800b622:	f7f8 feef 	bl	8004404 <HAL_PCD_Start>
 800b626:	0003      	movs	r3, r0
 800b628:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b62a:	19bc      	adds	r4, r7, r6
 800b62c:	0029      	movs	r1, r5
 800b62e:	187b      	adds	r3, r7, r1
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	0018      	movs	r0, r3
 800b634:	f000 f9c1 	bl	800b9ba <USBD_Get_USB_Status>
 800b638:	0003      	movs	r3, r0
 800b63a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b63c:	19bb      	adds	r3, r7, r6
 800b63e:	781b      	ldrb	r3, [r3, #0]
}
 800b640:	0018      	movs	r0, r3
 800b642:	46bd      	mov	sp, r7
 800b644:	b005      	add	sp, #20
 800b646:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b648 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	000c      	movs	r4, r1
 800b652:	0010      	movs	r0, r2
 800b654:	0019      	movs	r1, r3
 800b656:	1cfb      	adds	r3, r7, #3
 800b658:	1c22      	adds	r2, r4, #0
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	1cbb      	adds	r3, r7, #2
 800b65e:	1c02      	adds	r2, r0, #0
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	003b      	movs	r3, r7
 800b664:	1c0a      	adds	r2, r1, #0
 800b666:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b668:	260f      	movs	r6, #15
 800b66a:	19bb      	adds	r3, r7, r6
 800b66c:	2200      	movs	r2, #0
 800b66e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b670:	250e      	movs	r5, #14
 800b672:	197b      	adds	r3, r7, r5
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	23a6      	movs	r3, #166	; 0xa6
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	58d0      	ldr	r0, [r2, r3]
 800b680:	19bc      	adds	r4, r7, r6
 800b682:	1cbb      	adds	r3, r7, #2
 800b684:	781d      	ldrb	r5, [r3, #0]
 800b686:	003b      	movs	r3, r7
 800b688:	881a      	ldrh	r2, [r3, #0]
 800b68a:	1cfb      	adds	r3, r7, #3
 800b68c:	7819      	ldrb	r1, [r3, #0]
 800b68e:	002b      	movs	r3, r5
 800b690:	f7f9 f885 	bl	800479e <HAL_PCD_EP_Open>
 800b694:	0003      	movs	r3, r0
 800b696:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b698:	250e      	movs	r5, #14
 800b69a:	197c      	adds	r4, r7, r5
 800b69c:	19bb      	adds	r3, r7, r6
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	0018      	movs	r0, r3
 800b6a2:	f000 f98a 	bl	800b9ba <USBD_Get_USB_Status>
 800b6a6:	0003      	movs	r3, r0
 800b6a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b6aa:	197b      	adds	r3, r7, r5
 800b6ac:	781b      	ldrb	r3, [r3, #0]
}
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b005      	add	sp, #20
 800b6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	000a      	movs	r2, r1
 800b6c0:	1cfb      	adds	r3, r7, #3
 800b6c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c4:	210f      	movs	r1, #15
 800b6c6:	187b      	adds	r3, r7, r1
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6cc:	260e      	movs	r6, #14
 800b6ce:	19bb      	adds	r3, r7, r6
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	23a6      	movs	r3, #166	; 0xa6
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	58d2      	ldr	r2, [r2, r3]
 800b6dc:	000d      	movs	r5, r1
 800b6de:	187c      	adds	r4, r7, r1
 800b6e0:	1cfb      	adds	r3, r7, #3
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	0019      	movs	r1, r3
 800b6e6:	0010      	movs	r0, r2
 800b6e8:	f7f9 f8d1 	bl	800488e <HAL_PCD_EP_Close>
 800b6ec:	0003      	movs	r3, r0
 800b6ee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6f0:	19bc      	adds	r4, r7, r6
 800b6f2:	0029      	movs	r1, r5
 800b6f4:	187b      	adds	r3, r7, r1
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	0018      	movs	r0, r3
 800b6fa:	f000 f95e 	bl	800b9ba <USBD_Get_USB_Status>
 800b6fe:	0003      	movs	r3, r0
 800b700:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b702:	19bb      	adds	r3, r7, r6
 800b704:	781b      	ldrb	r3, [r3, #0]
}
 800b706:	0018      	movs	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	b005      	add	sp, #20
 800b70c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b70e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b70e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	000a      	movs	r2, r1
 800b718:	1cfb      	adds	r3, r7, #3
 800b71a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b71c:	210f      	movs	r1, #15
 800b71e:	187b      	adds	r3, r7, r1
 800b720:	2200      	movs	r2, #0
 800b722:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b724:	260e      	movs	r6, #14
 800b726:	19bb      	adds	r3, r7, r6
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	23a6      	movs	r3, #166	; 0xa6
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	58d2      	ldr	r2, [r2, r3]
 800b734:	000d      	movs	r5, r1
 800b736:	187c      	adds	r4, r7, r1
 800b738:	1cfb      	adds	r3, r7, #3
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	0019      	movs	r1, r3
 800b73e:	0010      	movs	r0, r2
 800b740:	f7f9 f99c 	bl	8004a7c <HAL_PCD_EP_SetStall>
 800b744:	0003      	movs	r3, r0
 800b746:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b748:	19bc      	adds	r4, r7, r6
 800b74a:	0029      	movs	r1, r5
 800b74c:	187b      	adds	r3, r7, r1
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	0018      	movs	r0, r3
 800b752:	f000 f932 	bl	800b9ba <USBD_Get_USB_Status>
 800b756:	0003      	movs	r3, r0
 800b758:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b75a:	19bb      	adds	r3, r7, r6
 800b75c:	781b      	ldrb	r3, [r3, #0]
}
 800b75e:	0018      	movs	r0, r3
 800b760:	46bd      	mov	sp, r7
 800b762:	b005      	add	sp, #20
 800b764:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b766 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b766:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	000a      	movs	r2, r1
 800b770:	1cfb      	adds	r3, r7, #3
 800b772:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b774:	210f      	movs	r1, #15
 800b776:	187b      	adds	r3, r7, r1
 800b778:	2200      	movs	r2, #0
 800b77a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b77c:	260e      	movs	r6, #14
 800b77e:	19bb      	adds	r3, r7, r6
 800b780:	2200      	movs	r2, #0
 800b782:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	23a6      	movs	r3, #166	; 0xa6
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	58d2      	ldr	r2, [r2, r3]
 800b78c:	000d      	movs	r5, r1
 800b78e:	187c      	adds	r4, r7, r1
 800b790:	1cfb      	adds	r3, r7, #3
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	0019      	movs	r1, r3
 800b796:	0010      	movs	r0, r2
 800b798:	f7f9 f9cc 	bl	8004b34 <HAL_PCD_EP_ClrStall>
 800b79c:	0003      	movs	r3, r0
 800b79e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a0:	19bc      	adds	r4, r7, r6
 800b7a2:	0029      	movs	r1, r5
 800b7a4:	187b      	adds	r3, r7, r1
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f000 f906 	bl	800b9ba <USBD_Get_USB_Status>
 800b7ae:	0003      	movs	r3, r0
 800b7b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b7b2:	19bb      	adds	r3, r7, r6
 800b7b4:	781b      	ldrb	r3, [r3, #0]
}
 800b7b6:	0018      	movs	r0, r3
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	b005      	add	sp, #20
 800b7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7be <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	000a      	movs	r2, r1
 800b7c8:	1cfb      	adds	r3, r7, #3
 800b7ca:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	23a6      	movs	r3, #166	; 0xa6
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	58d3      	ldr	r3, [r2, r3]
 800b7d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7d6:	1cfb      	adds	r3, r7, #3
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	b25b      	sxtb	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	da0d      	bge.n	800b7fc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b7e0:	1cfb      	adds	r3, r7, #3
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	227f      	movs	r2, #127	; 0x7f
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	0013      	movs	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	189b      	adds	r3, r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	18cb      	adds	r3, r1, r3
 800b7f6:	3302      	adds	r3, #2
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	e00d      	b.n	800b818 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b7fc:	1cfb      	adds	r3, r7, #3
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	227f      	movs	r2, #127	; 0x7f
 800b802:	401a      	ands	r2, r3
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	23b5      	movs	r3, #181	; 0xb5
 800b808:	0059      	lsls	r1, r3, #1
 800b80a:	0013      	movs	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	189b      	adds	r3, r3, r2
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	18c3      	adds	r3, r0, r3
 800b814:	185b      	adds	r3, r3, r1
 800b816:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b818:	0018      	movs	r0, r3
 800b81a:	46bd      	mov	sp, r7
 800b81c:	b004      	add	sp, #16
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	000a      	movs	r2, r1
 800b82a:	1cfb      	adds	r3, r7, #3
 800b82c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82e:	210f      	movs	r1, #15
 800b830:	187b      	adds	r3, r7, r1
 800b832:	2200      	movs	r2, #0
 800b834:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b836:	260e      	movs	r6, #14
 800b838:	19bb      	adds	r3, r7, r6
 800b83a:	2200      	movs	r2, #0
 800b83c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	23a6      	movs	r3, #166	; 0xa6
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	58d2      	ldr	r2, [r2, r3]
 800b846:	000d      	movs	r5, r1
 800b848:	187c      	adds	r4, r7, r1
 800b84a:	1cfb      	adds	r3, r7, #3
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	0019      	movs	r1, r3
 800b850:	0010      	movs	r0, r2
 800b852:	f7f8 ff79 	bl	8004748 <HAL_PCD_SetAddress>
 800b856:	0003      	movs	r3, r0
 800b858:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b85a:	19bc      	adds	r4, r7, r6
 800b85c:	0029      	movs	r1, r5
 800b85e:	187b      	adds	r3, r7, r1
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	0018      	movs	r0, r3
 800b864:	f000 f8a9 	bl	800b9ba <USBD_Get_USB_Status>
 800b868:	0003      	movs	r3, r0
 800b86a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b86c:	19bb      	adds	r3, r7, r6
 800b86e:	781b      	ldrb	r3, [r3, #0]
}
 800b870:	0018      	movs	r0, r3
 800b872:	46bd      	mov	sp, r7
 800b874:	b005      	add	sp, #20
 800b876:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b878 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b87a:	b087      	sub	sp, #28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	0008      	movs	r0, r1
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	0019      	movs	r1, r3
 800b886:	230b      	movs	r3, #11
 800b888:	18fb      	adds	r3, r7, r3
 800b88a:	1c02      	adds	r2, r0, #0
 800b88c:	701a      	strb	r2, [r3, #0]
 800b88e:	2408      	movs	r4, #8
 800b890:	193b      	adds	r3, r7, r4
 800b892:	1c0a      	adds	r2, r1, #0
 800b894:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b896:	2117      	movs	r1, #23
 800b898:	187b      	adds	r3, r7, r1
 800b89a:	2200      	movs	r2, #0
 800b89c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89e:	2516      	movs	r5, #22
 800b8a0:	197b      	adds	r3, r7, r5
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	23a6      	movs	r3, #166	; 0xa6
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	58d0      	ldr	r0, [r2, r3]
 800b8ae:	193b      	adds	r3, r7, r4
 800b8b0:	881d      	ldrh	r5, [r3, #0]
 800b8b2:	000e      	movs	r6, r1
 800b8b4:	187c      	adds	r4, r7, r1
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	230b      	movs	r3, #11
 800b8ba:	18fb      	adds	r3, r7, r3
 800b8bc:	7819      	ldrb	r1, [r3, #0]
 800b8be:	002b      	movs	r3, r5
 800b8c0:	f7f9 f893 	bl	80049ea <HAL_PCD_EP_Transmit>
 800b8c4:	0003      	movs	r3, r0
 800b8c6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c8:	2516      	movs	r5, #22
 800b8ca:	197c      	adds	r4, r7, r5
 800b8cc:	0031      	movs	r1, r6
 800b8ce:	187b      	adds	r3, r7, r1
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	f000 f871 	bl	800b9ba <USBD_Get_USB_Status>
 800b8d8:	0003      	movs	r3, r0
 800b8da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b8dc:	197b      	adds	r3, r7, r5
 800b8de:	781b      	ldrb	r3, [r3, #0]
}
 800b8e0:	0018      	movs	r0, r3
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	b007      	add	sp, #28
 800b8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	0008      	movs	r0, r1
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	0019      	movs	r1, r3
 800b8f6:	230b      	movs	r3, #11
 800b8f8:	18fb      	adds	r3, r7, r3
 800b8fa:	1c02      	adds	r2, r0, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
 800b8fe:	2408      	movs	r4, #8
 800b900:	193b      	adds	r3, r7, r4
 800b902:	1c0a      	adds	r2, r1, #0
 800b904:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b906:	2117      	movs	r1, #23
 800b908:	187b      	adds	r3, r7, r1
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b90e:	2516      	movs	r5, #22
 800b910:	197b      	adds	r3, r7, r5
 800b912:	2200      	movs	r2, #0
 800b914:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	23a6      	movs	r3, #166	; 0xa6
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	58d0      	ldr	r0, [r2, r3]
 800b91e:	193b      	adds	r3, r7, r4
 800b920:	881d      	ldrh	r5, [r3, #0]
 800b922:	000e      	movs	r6, r1
 800b924:	187c      	adds	r4, r7, r1
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	230b      	movs	r3, #11
 800b92a:	18fb      	adds	r3, r7, r3
 800b92c:	7819      	ldrb	r1, [r3, #0]
 800b92e:	002b      	movs	r3, r5
 800b930:	f7f8 fffe 	bl	8004930 <HAL_PCD_EP_Receive>
 800b934:	0003      	movs	r3, r0
 800b936:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b938:	2516      	movs	r5, #22
 800b93a:	197c      	adds	r4, r7, r5
 800b93c:	0031      	movs	r1, r6
 800b93e:	187b      	adds	r3, r7, r1
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	0018      	movs	r0, r3
 800b944:	f000 f839 	bl	800b9ba <USBD_Get_USB_Status>
 800b948:	0003      	movs	r3, r0
 800b94a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b94c:	197b      	adds	r3, r7, r5
 800b94e:	781b      	ldrb	r3, [r3, #0]
}
 800b950:	0018      	movs	r0, r3
 800b952:	46bd      	mov	sp, r7
 800b954:	b007      	add	sp, #28
 800b956:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b958 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	000a      	movs	r2, r1
 800b962:	1cfb      	adds	r3, r7, #3
 800b964:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	23a6      	movs	r3, #166	; 0xa6
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	58d2      	ldr	r2, [r2, r3]
 800b96e:	1cfb      	adds	r3, r7, #3
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	0019      	movs	r1, r3
 800b974:	0010      	movs	r0, r2
 800b976:	f7f9 f81f 	bl	80049b8 <HAL_PCD_EP_GetRxCount>
 800b97a:	0003      	movs	r3, r0
}
 800b97c:	0018      	movs	r0, r3
 800b97e:	46bd      	mov	sp, r7
 800b980:	b002      	add	sp, #8
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b98c:	4b02      	ldr	r3, [pc, #8]	; (800b998 <USBD_static_malloc+0x14>)
}
 800b98e:	0018      	movs	r0, r3
 800b990:	46bd      	mov	sp, r7
 800b992:	b002      	add	sp, #8
 800b994:	bd80      	pop	{r7, pc}
 800b996:	46c0      	nop			; (mov r8, r8)
 800b998:	20000790 	.word	0x20000790

0800b99c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]

}
 800b9a4:	46c0      	nop			; (mov r8, r8)
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b002      	add	sp, #8
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b9b0:	f7f7 f836 	bl	8002a20 <SystemClock_Config>
}
 800b9b4:	46c0      	nop			; (mov r8, r8)
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	0002      	movs	r2, r0
 800b9c2:	1dfb      	adds	r3, r7, #7
 800b9c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c6:	230f      	movs	r3, #15
 800b9c8:	18fb      	adds	r3, r7, r3
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b9ce:	1dfb      	adds	r3, r7, #7
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d00d      	beq.n	800b9f2 <USBD_Get_USB_Status+0x38>
 800b9d6:	dc02      	bgt.n	800b9de <USBD_Get_USB_Status+0x24>
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <USBD_Get_USB_Status+0x2e>
 800b9dc:	e018      	b.n	800ba10 <USBD_Get_USB_Status+0x56>
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d00c      	beq.n	800b9fc <USBD_Get_USB_Status+0x42>
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d00f      	beq.n	800ba06 <USBD_Get_USB_Status+0x4c>
 800b9e6:	e013      	b.n	800ba10 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9e8:	230f      	movs	r3, #15
 800b9ea:	18fb      	adds	r3, r7, r3
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
    break;
 800b9f0:	e013      	b.n	800ba1a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9f2:	230f      	movs	r3, #15
 800b9f4:	18fb      	adds	r3, r7, r3
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	701a      	strb	r2, [r3, #0]
    break;
 800b9fa:	e00e      	b.n	800ba1a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9fc:	230f      	movs	r3, #15
 800b9fe:	18fb      	adds	r3, r7, r3
 800ba00:	2201      	movs	r2, #1
 800ba02:	701a      	strb	r2, [r3, #0]
    break;
 800ba04:	e009      	b.n	800ba1a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba06:	230f      	movs	r3, #15
 800ba08:	18fb      	adds	r3, r7, r3
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	701a      	strb	r2, [r3, #0]
    break;
 800ba0e:	e004      	b.n	800ba1a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800ba10:	230f      	movs	r3, #15
 800ba12:	18fb      	adds	r3, r7, r3
 800ba14:	2202      	movs	r2, #2
 800ba16:	701a      	strb	r2, [r3, #0]
    break;
 800ba18:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800ba1a:	230f      	movs	r3, #15
 800ba1c:	18fb      	adds	r3, r7, r3
 800ba1e:	781b      	ldrb	r3, [r3, #0]
}
 800ba20:	0018      	movs	r0, r3
 800ba22:	46bd      	mov	sp, r7
 800ba24:	b004      	add	sp, #16
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <__errno>:
 800ba28:	4b01      	ldr	r3, [pc, #4]	; (800ba30 <__errno+0x8>)
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	4770      	bx	lr
 800ba2e:	46c0      	nop			; (mov r8, r8)
 800ba30:	20000184 	.word	0x20000184

0800ba34 <__libc_init_array>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	2600      	movs	r6, #0
 800ba38:	4d0c      	ldr	r5, [pc, #48]	; (800ba6c <__libc_init_array+0x38>)
 800ba3a:	4c0d      	ldr	r4, [pc, #52]	; (800ba70 <__libc_init_array+0x3c>)
 800ba3c:	1b64      	subs	r4, r4, r5
 800ba3e:	10a4      	asrs	r4, r4, #2
 800ba40:	42a6      	cmp	r6, r4
 800ba42:	d109      	bne.n	800ba58 <__libc_init_array+0x24>
 800ba44:	2600      	movs	r6, #0
 800ba46:	f002 fd79 	bl	800e53c <_init>
 800ba4a:	4d0a      	ldr	r5, [pc, #40]	; (800ba74 <__libc_init_array+0x40>)
 800ba4c:	4c0a      	ldr	r4, [pc, #40]	; (800ba78 <__libc_init_array+0x44>)
 800ba4e:	1b64      	subs	r4, r4, r5
 800ba50:	10a4      	asrs	r4, r4, #2
 800ba52:	42a6      	cmp	r6, r4
 800ba54:	d105      	bne.n	800ba62 <__libc_init_array+0x2e>
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	00b3      	lsls	r3, r6, #2
 800ba5a:	58eb      	ldr	r3, [r5, r3]
 800ba5c:	4798      	blx	r3
 800ba5e:	3601      	adds	r6, #1
 800ba60:	e7ee      	b.n	800ba40 <__libc_init_array+0xc>
 800ba62:	00b3      	lsls	r3, r6, #2
 800ba64:	58eb      	ldr	r3, [r5, r3]
 800ba66:	4798      	blx	r3
 800ba68:	3601      	adds	r6, #1
 800ba6a:	e7f2      	b.n	800ba52 <__libc_init_array+0x1e>
 800ba6c:	0800fda0 	.word	0x0800fda0
 800ba70:	0800fda0 	.word	0x0800fda0
 800ba74:	0800fda0 	.word	0x0800fda0
 800ba78:	0800fda4 	.word	0x0800fda4

0800ba7c <memmove>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	4288      	cmp	r0, r1
 800ba80:	d902      	bls.n	800ba88 <memmove+0xc>
 800ba82:	188b      	adds	r3, r1, r2
 800ba84:	4298      	cmp	r0, r3
 800ba86:	d303      	bcc.n	800ba90 <memmove+0x14>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e007      	b.n	800ba9c <memmove+0x20>
 800ba8c:	5c8b      	ldrb	r3, [r1, r2]
 800ba8e:	5483      	strb	r3, [r0, r2]
 800ba90:	3a01      	subs	r2, #1
 800ba92:	d2fb      	bcs.n	800ba8c <memmove+0x10>
 800ba94:	bd10      	pop	{r4, pc}
 800ba96:	5ccc      	ldrb	r4, [r1, r3]
 800ba98:	54c4      	strb	r4, [r0, r3]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d1fa      	bne.n	800ba96 <memmove+0x1a>
 800baa0:	e7f8      	b.n	800ba94 <memmove+0x18>

0800baa2 <memset>:
 800baa2:	0003      	movs	r3, r0
 800baa4:	1812      	adds	r2, r2, r0
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d100      	bne.n	800baac <memset+0xa>
 800baaa:	4770      	bx	lr
 800baac:	7019      	strb	r1, [r3, #0]
 800baae:	3301      	adds	r3, #1
 800bab0:	e7f9      	b.n	800baa6 <memset+0x4>

0800bab2 <__cvt>:
 800bab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab4:	b08b      	sub	sp, #44	; 0x2c
 800bab6:	0014      	movs	r4, r2
 800bab8:	1e1d      	subs	r5, r3, #0
 800baba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800babc:	da53      	bge.n	800bb66 <__cvt+0xb4>
 800babe:	2480      	movs	r4, #128	; 0x80
 800bac0:	0624      	lsls	r4, r4, #24
 800bac2:	191b      	adds	r3, r3, r4
 800bac4:	001d      	movs	r5, r3
 800bac6:	0014      	movs	r4, r2
 800bac8:	232d      	movs	r3, #45	; 0x2d
 800baca:	700b      	strb	r3, [r1, #0]
 800bacc:	2320      	movs	r3, #32
 800bace:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800bad0:	2203      	movs	r2, #3
 800bad2:	439e      	bics	r6, r3
 800bad4:	2e46      	cmp	r6, #70	; 0x46
 800bad6:	d007      	beq.n	800bae8 <__cvt+0x36>
 800bad8:	0033      	movs	r3, r6
 800bada:	3b45      	subs	r3, #69	; 0x45
 800badc:	4259      	negs	r1, r3
 800bade:	414b      	adcs	r3, r1
 800bae0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bae2:	3a01      	subs	r2, #1
 800bae4:	18cb      	adds	r3, r1, r3
 800bae6:	9310      	str	r3, [sp, #64]	; 0x40
 800bae8:	ab09      	add	r3, sp, #36	; 0x24
 800baea:	9304      	str	r3, [sp, #16]
 800baec:	ab08      	add	r3, sp, #32
 800baee:	9303      	str	r3, [sp, #12]
 800baf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800baf2:	9200      	str	r2, [sp, #0]
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baf8:	0022      	movs	r2, r4
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	002b      	movs	r3, r5
 800bafe:	f000 fcf7 	bl	800c4f0 <_dtoa_r>
 800bb02:	0007      	movs	r7, r0
 800bb04:	2e47      	cmp	r6, #71	; 0x47
 800bb06:	d102      	bne.n	800bb0e <__cvt+0x5c>
 800bb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb0a:	07db      	lsls	r3, r3, #31
 800bb0c:	d524      	bpl.n	800bb58 <__cvt+0xa6>
 800bb0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb10:	18fb      	adds	r3, r7, r3
 800bb12:	9307      	str	r3, [sp, #28]
 800bb14:	2e46      	cmp	r6, #70	; 0x46
 800bb16:	d114      	bne.n	800bb42 <__cvt+0x90>
 800bb18:	783b      	ldrb	r3, [r7, #0]
 800bb1a:	2b30      	cmp	r3, #48	; 0x30
 800bb1c:	d10c      	bne.n	800bb38 <__cvt+0x86>
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2300      	movs	r3, #0
 800bb22:	0020      	movs	r0, r4
 800bb24:	0029      	movs	r1, r5
 800bb26:	f7f4 fc87 	bl	8000438 <__aeabi_dcmpeq>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d104      	bne.n	800bb38 <__cvt+0x86>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb3a:	9a07      	ldr	r2, [sp, #28]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	18d3      	adds	r3, r2, r3
 800bb40:	9307      	str	r3, [sp, #28]
 800bb42:	2200      	movs	r2, #0
 800bb44:	2300      	movs	r3, #0
 800bb46:	0020      	movs	r0, r4
 800bb48:	0029      	movs	r1, r5
 800bb4a:	f7f4 fc75 	bl	8000438 <__aeabi_dcmpeq>
 800bb4e:	2230      	movs	r2, #48	; 0x30
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d00d      	beq.n	800bb70 <__cvt+0xbe>
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	9309      	str	r3, [sp, #36]	; 0x24
 800bb58:	0038      	movs	r0, r7
 800bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb5e:	1bdb      	subs	r3, r3, r7
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	b00b      	add	sp, #44	; 0x2c
 800bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb66:	2300      	movs	r3, #0
 800bb68:	e7af      	b.n	800baca <__cvt+0x18>
 800bb6a:	1c59      	adds	r1, r3, #1
 800bb6c:	9109      	str	r1, [sp, #36]	; 0x24
 800bb6e:	701a      	strb	r2, [r3, #0]
 800bb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb72:	9907      	ldr	r1, [sp, #28]
 800bb74:	428b      	cmp	r3, r1
 800bb76:	d3f8      	bcc.n	800bb6a <__cvt+0xb8>
 800bb78:	e7ee      	b.n	800bb58 <__cvt+0xa6>

0800bb7a <__exponent>:
 800bb7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7c:	1c83      	adds	r3, r0, #2
 800bb7e:	b085      	sub	sp, #20
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	0006      	movs	r6, r0
 800bb84:	000c      	movs	r4, r1
 800bb86:	7002      	strb	r2, [r0, #0]
 800bb88:	232b      	movs	r3, #43	; 0x2b
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	da01      	bge.n	800bb92 <__exponent+0x18>
 800bb8e:	232d      	movs	r3, #45	; 0x2d
 800bb90:	424c      	negs	r4, r1
 800bb92:	7073      	strb	r3, [r6, #1]
 800bb94:	2c09      	cmp	r4, #9
 800bb96:	dd22      	ble.n	800bbde <__exponent+0x64>
 800bb98:	ab02      	add	r3, sp, #8
 800bb9a:	1ddd      	adds	r5, r3, #7
 800bb9c:	0020      	movs	r0, r4
 800bb9e:	210a      	movs	r1, #10
 800bba0:	f7f4 fc34 	bl	800040c <__aeabi_idivmod>
 800bba4:	1e6f      	subs	r7, r5, #1
 800bba6:	3130      	adds	r1, #48	; 0x30
 800bba8:	7039      	strb	r1, [r7, #0]
 800bbaa:	0020      	movs	r0, r4
 800bbac:	210a      	movs	r1, #10
 800bbae:	f7f4 fb47 	bl	8000240 <__divsi3>
 800bbb2:	0004      	movs	r4, r0
 800bbb4:	2809      	cmp	r0, #9
 800bbb6:	dc0b      	bgt.n	800bbd0 <__exponent+0x56>
 800bbb8:	3d02      	subs	r5, #2
 800bbba:	3430      	adds	r4, #48	; 0x30
 800bbbc:	9b01      	ldr	r3, [sp, #4]
 800bbbe:	702c      	strb	r4, [r5, #0]
 800bbc0:	aa02      	add	r2, sp, #8
 800bbc2:	3207      	adds	r2, #7
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	42aa      	cmp	r2, r5
 800bbc8:	d804      	bhi.n	800bbd4 <__exponent+0x5a>
 800bbca:	1b80      	subs	r0, r0, r6
 800bbcc:	b005      	add	sp, #20
 800bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd0:	003d      	movs	r5, r7
 800bbd2:	e7e3      	b.n	800bb9c <__exponent+0x22>
 800bbd4:	782a      	ldrb	r2, [r5, #0]
 800bbd6:	3501      	adds	r5, #1
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	e7f0      	b.n	800bbc0 <__exponent+0x46>
 800bbde:	2330      	movs	r3, #48	; 0x30
 800bbe0:	18e4      	adds	r4, r4, r3
 800bbe2:	70b3      	strb	r3, [r6, #2]
 800bbe4:	1d30      	adds	r0, r6, #4
 800bbe6:	70f4      	strb	r4, [r6, #3]
 800bbe8:	e7ef      	b.n	800bbca <__exponent+0x50>
	...

0800bbec <_printf_float>:
 800bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbee:	b095      	sub	sp, #84	; 0x54
 800bbf0:	000c      	movs	r4, r1
 800bbf2:	920a      	str	r2, [sp, #40]	; 0x28
 800bbf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbf6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800bbf8:	9009      	str	r0, [sp, #36]	; 0x24
 800bbfa:	f001 fb2f 	bl	800d25c <_localeconv_r>
 800bbfe:	6803      	ldr	r3, [r0, #0]
 800bc00:	0018      	movs	r0, r3
 800bc02:	930c      	str	r3, [sp, #48]	; 0x30
 800bc04:	f7f4 fa80 	bl	8000108 <strlen>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	900e      	str	r0, [sp, #56]	; 0x38
 800bc10:	930d      	str	r3, [sp, #52]	; 0x34
 800bc12:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bc14:	7e27      	ldrb	r7, [r4, #24]
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	2207      	movs	r2, #7
 800bc1a:	05c9      	lsls	r1, r1, #23
 800bc1c:	d545      	bpl.n	800bcaa <_printf_float+0xbe>
 800bc1e:	189b      	adds	r3, r3, r2
 800bc20:	4393      	bics	r3, r2
 800bc22:	001a      	movs	r2, r3
 800bc24:	3208      	adds	r2, #8
 800bc26:	602a      	str	r2, [r5, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	64a2      	str	r2, [r4, #72]	; 0x48
 800bc2e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bc30:	2201      	movs	r2, #1
 800bc32:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800bc34:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800bc36:	006b      	lsls	r3, r5, #1
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc3c:	4252      	negs	r2, r2
 800bc3e:	4bac      	ldr	r3, [pc, #688]	; (800bef0 <_printf_float+0x304>)
 800bc40:	0030      	movs	r0, r6
 800bc42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc44:	f7f6 fa06 	bl	8002054 <__aeabi_dcmpun>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d130      	bne.n	800bcae <_printf_float+0xc2>
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	4ba8      	ldr	r3, [pc, #672]	; (800bef0 <_printf_float+0x304>)
 800bc50:	4252      	negs	r2, r2
 800bc52:	0030      	movs	r0, r6
 800bc54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc56:	f7f4 fbff 	bl	8000458 <__aeabi_dcmple>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d127      	bne.n	800bcae <_printf_float+0xc2>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2300      	movs	r3, #0
 800bc62:	0030      	movs	r0, r6
 800bc64:	0029      	movs	r1, r5
 800bc66:	f7f4 fbed 	bl	8000444 <__aeabi_dcmplt>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d003      	beq.n	800bc76 <_printf_float+0x8a>
 800bc6e:	0023      	movs	r3, r4
 800bc70:	222d      	movs	r2, #45	; 0x2d
 800bc72:	3343      	adds	r3, #67	; 0x43
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	4d9f      	ldr	r5, [pc, #636]	; (800bef4 <_printf_float+0x308>)
 800bc78:	2f47      	cmp	r7, #71	; 0x47
 800bc7a:	d800      	bhi.n	800bc7e <_printf_float+0x92>
 800bc7c:	4d9e      	ldr	r5, [pc, #632]	; (800bef8 <_printf_float+0x30c>)
 800bc7e:	2303      	movs	r3, #3
 800bc80:	2600      	movs	r6, #0
 800bc82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc84:	6123      	str	r3, [r4, #16]
 800bc86:	3301      	adds	r3, #1
 800bc88:	439a      	bics	r2, r3
 800bc8a:	6022      	str	r2, [r4, #0]
 800bc8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc8e:	aa13      	add	r2, sp, #76	; 0x4c
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	0021      	movs	r1, r4
 800bc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc98:	f000 f9f4 	bl	800c084 <_printf_common>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d000      	beq.n	800bca2 <_printf_float+0xb6>
 800bca0:	e093      	b.n	800bdca <_printf_float+0x1de>
 800bca2:	2001      	movs	r0, #1
 800bca4:	4240      	negs	r0, r0
 800bca6:	b015      	add	sp, #84	; 0x54
 800bca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcaa:	3307      	adds	r3, #7
 800bcac:	e7b8      	b.n	800bc20 <_printf_float+0x34>
 800bcae:	0032      	movs	r2, r6
 800bcb0:	002b      	movs	r3, r5
 800bcb2:	0030      	movs	r0, r6
 800bcb4:	0029      	movs	r1, r5
 800bcb6:	f7f6 f9cd 	bl	8002054 <__aeabi_dcmpun>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d004      	beq.n	800bcc8 <_printf_float+0xdc>
 800bcbe:	4d8f      	ldr	r5, [pc, #572]	; (800befc <_printf_float+0x310>)
 800bcc0:	2f47      	cmp	r7, #71	; 0x47
 800bcc2:	d8dc      	bhi.n	800bc7e <_printf_float+0x92>
 800bcc4:	4d8e      	ldr	r5, [pc, #568]	; (800bf00 <_printf_float+0x314>)
 800bcc6:	e7da      	b.n	800bc7e <_printf_float+0x92>
 800bcc8:	2380      	movs	r3, #128	; 0x80
 800bcca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bccc:	6862      	ldr	r2, [r4, #4]
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	1c51      	adds	r1, r2, #1
 800bcd4:	d143      	bne.n	800bd5e <_printf_float+0x172>
 800bcd6:	3207      	adds	r2, #7
 800bcd8:	6062      	str	r2, [r4, #4]
 800bcda:	aa12      	add	r2, sp, #72	; 0x48
 800bcdc:	2100      	movs	r1, #0
 800bcde:	9205      	str	r2, [sp, #20]
 800bce0:	aa11      	add	r2, sp, #68	; 0x44
 800bce2:	9203      	str	r2, [sp, #12]
 800bce4:	2223      	movs	r2, #35	; 0x23
 800bce6:	6023      	str	r3, [r4, #0]
 800bce8:	9106      	str	r1, [sp, #24]
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	a908      	add	r1, sp, #32
 800bcee:	6863      	ldr	r3, [r4, #4]
 800bcf0:	1852      	adds	r2, r2, r1
 800bcf2:	9202      	str	r2, [sp, #8]
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	0032      	movs	r2, r6
 800bcf8:	002b      	movs	r3, r5
 800bcfa:	9704      	str	r7, [sp, #16]
 800bcfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcfe:	f7ff fed8 	bl	800bab2 <__cvt>
 800bd02:	2320      	movs	r3, #32
 800bd04:	003a      	movs	r2, r7
 800bd06:	0005      	movs	r5, r0
 800bd08:	439a      	bics	r2, r3
 800bd0a:	2a47      	cmp	r2, #71	; 0x47
 800bd0c:	d107      	bne.n	800bd1e <_printf_float+0x132>
 800bd0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd10:	1cda      	adds	r2, r3, #3
 800bd12:	db02      	blt.n	800bd1a <_printf_float+0x12e>
 800bd14:	6862      	ldr	r2, [r4, #4]
 800bd16:	4293      	cmp	r3, r2
 800bd18:	dd45      	ble.n	800bda6 <_printf_float+0x1ba>
 800bd1a:	3f02      	subs	r7, #2
 800bd1c:	b2ff      	uxtb	r7, r7
 800bd1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd20:	2f65      	cmp	r7, #101	; 0x65
 800bd22:	d825      	bhi.n	800bd70 <_printf_float+0x184>
 800bd24:	0020      	movs	r0, r4
 800bd26:	3901      	subs	r1, #1
 800bd28:	003a      	movs	r2, r7
 800bd2a:	3050      	adds	r0, #80	; 0x50
 800bd2c:	9111      	str	r1, [sp, #68]	; 0x44
 800bd2e:	f7ff ff24 	bl	800bb7a <__exponent>
 800bd32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd34:	0006      	movs	r6, r0
 800bd36:	1813      	adds	r3, r2, r0
 800bd38:	6123      	str	r3, [r4, #16]
 800bd3a:	2a01      	cmp	r2, #1
 800bd3c:	dc02      	bgt.n	800bd44 <_printf_float+0x158>
 800bd3e:	6822      	ldr	r2, [r4, #0]
 800bd40:	07d2      	lsls	r2, r2, #31
 800bd42:	d501      	bpl.n	800bd48 <_printf_float+0x15c>
 800bd44:	3301      	adds	r3, #1
 800bd46:	6123      	str	r3, [r4, #16]
 800bd48:	2323      	movs	r3, #35	; 0x23
 800bd4a:	aa08      	add	r2, sp, #32
 800bd4c:	189b      	adds	r3, r3, r2
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d09b      	beq.n	800bc8c <_printf_float+0xa0>
 800bd54:	0023      	movs	r3, r4
 800bd56:	222d      	movs	r2, #45	; 0x2d
 800bd58:	3343      	adds	r3, #67	; 0x43
 800bd5a:	701a      	strb	r2, [r3, #0]
 800bd5c:	e796      	b.n	800bc8c <_printf_float+0xa0>
 800bd5e:	2f67      	cmp	r7, #103	; 0x67
 800bd60:	d100      	bne.n	800bd64 <_printf_float+0x178>
 800bd62:	e176      	b.n	800c052 <_printf_float+0x466>
 800bd64:	2f47      	cmp	r7, #71	; 0x47
 800bd66:	d1b8      	bne.n	800bcda <_printf_float+0xee>
 800bd68:	2a00      	cmp	r2, #0
 800bd6a:	d1b6      	bne.n	800bcda <_printf_float+0xee>
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	e7b3      	b.n	800bcd8 <_printf_float+0xec>
 800bd70:	2f66      	cmp	r7, #102	; 0x66
 800bd72:	d119      	bne.n	800bda8 <_printf_float+0x1bc>
 800bd74:	6863      	ldr	r3, [r4, #4]
 800bd76:	2900      	cmp	r1, #0
 800bd78:	dd0c      	ble.n	800bd94 <_printf_float+0x1a8>
 800bd7a:	6121      	str	r1, [r4, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <_printf_float+0x19a>
 800bd80:	6822      	ldr	r2, [r4, #0]
 800bd82:	07d2      	lsls	r2, r2, #31
 800bd84:	d502      	bpl.n	800bd8c <_printf_float+0x1a0>
 800bd86:	3301      	adds	r3, #1
 800bd88:	185b      	adds	r3, r3, r1
 800bd8a:	6123      	str	r3, [r4, #16]
 800bd8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd8e:	2600      	movs	r6, #0
 800bd90:	65a3      	str	r3, [r4, #88]	; 0x58
 800bd92:	e7d9      	b.n	800bd48 <_printf_float+0x15c>
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d103      	bne.n	800bda0 <_printf_float+0x1b4>
 800bd98:	2201      	movs	r2, #1
 800bd9a:	6821      	ldr	r1, [r4, #0]
 800bd9c:	4211      	tst	r1, r2
 800bd9e:	d000      	beq.n	800bda2 <_printf_float+0x1b6>
 800bda0:	1c9a      	adds	r2, r3, #2
 800bda2:	6122      	str	r2, [r4, #16]
 800bda4:	e7f2      	b.n	800bd8c <_printf_float+0x1a0>
 800bda6:	2767      	movs	r7, #103	; 0x67
 800bda8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdac:	4293      	cmp	r3, r2
 800bdae:	db05      	blt.n	800bdbc <_printf_float+0x1d0>
 800bdb0:	6822      	ldr	r2, [r4, #0]
 800bdb2:	6123      	str	r3, [r4, #16]
 800bdb4:	07d2      	lsls	r2, r2, #31
 800bdb6:	d5e9      	bpl.n	800bd8c <_printf_float+0x1a0>
 800bdb8:	3301      	adds	r3, #1
 800bdba:	e7e6      	b.n	800bd8a <_printf_float+0x19e>
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	dc01      	bgt.n	800bdc6 <_printf_float+0x1da>
 800bdc2:	1849      	adds	r1, r1, r1
 800bdc4:	1ac9      	subs	r1, r1, r3
 800bdc6:	1852      	adds	r2, r2, r1
 800bdc8:	e7eb      	b.n	800bda2 <_printf_float+0x1b6>
 800bdca:	6822      	ldr	r2, [r4, #0]
 800bdcc:	0553      	lsls	r3, r2, #21
 800bdce:	d408      	bmi.n	800bde2 <_printf_float+0x1f6>
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	002a      	movs	r2, r5
 800bdd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bdd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bdda:	47a8      	blx	r5
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d129      	bne.n	800be34 <_printf_float+0x248>
 800bde0:	e75f      	b.n	800bca2 <_printf_float+0xb6>
 800bde2:	2f65      	cmp	r7, #101	; 0x65
 800bde4:	d800      	bhi.n	800bde8 <_printf_float+0x1fc>
 800bde6:	e0e0      	b.n	800bfaa <_printf_float+0x3be>
 800bde8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bdea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bdec:	2200      	movs	r2, #0
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f7f4 fb22 	bl	8000438 <__aeabi_dcmpeq>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d034      	beq.n	800be62 <_printf_float+0x276>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	4a42      	ldr	r2, [pc, #264]	; (800bf04 <_printf_float+0x318>)
 800bdfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bdfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800be02:	47a8      	blx	r5
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	d100      	bne.n	800be0a <_printf_float+0x21e>
 800be08:	e74b      	b.n	800bca2 <_printf_float+0xb6>
 800be0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be0e:	4293      	cmp	r3, r2
 800be10:	db02      	blt.n	800be18 <_printf_float+0x22c>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	07db      	lsls	r3, r3, #31
 800be16:	d50d      	bpl.n	800be34 <_printf_float+0x248>
 800be18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800be1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be22:	47a8      	blx	r5
 800be24:	2500      	movs	r5, #0
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d100      	bne.n	800be2c <_printf_float+0x240>
 800be2a:	e73a      	b.n	800bca2 <_printf_float+0xb6>
 800be2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be2e:	3b01      	subs	r3, #1
 800be30:	42ab      	cmp	r3, r5
 800be32:	dc0a      	bgt.n	800be4a <_printf_float+0x25e>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	079b      	lsls	r3, r3, #30
 800be38:	d500      	bpl.n	800be3c <_printf_float+0x250>
 800be3a:	e108      	b.n	800c04e <_printf_float+0x462>
 800be3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be3e:	68e0      	ldr	r0, [r4, #12]
 800be40:	4298      	cmp	r0, r3
 800be42:	db00      	blt.n	800be46 <_printf_float+0x25a>
 800be44:	e72f      	b.n	800bca6 <_printf_float+0xba>
 800be46:	0018      	movs	r0, r3
 800be48:	e72d      	b.n	800bca6 <_printf_float+0xba>
 800be4a:	0022      	movs	r2, r4
 800be4c:	2301      	movs	r3, #1
 800be4e:	321a      	adds	r2, #26
 800be50:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800be56:	47b0      	blx	r6
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d100      	bne.n	800be5e <_printf_float+0x272>
 800be5c:	e721      	b.n	800bca2 <_printf_float+0xb6>
 800be5e:	3501      	adds	r5, #1
 800be60:	e7e4      	b.n	800be2c <_printf_float+0x240>
 800be62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be64:	2b00      	cmp	r3, #0
 800be66:	dc2d      	bgt.n	800bec4 <_printf_float+0x2d8>
 800be68:	2301      	movs	r3, #1
 800be6a:	4a26      	ldr	r2, [pc, #152]	; (800bf04 <_printf_float+0x318>)
 800be6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800be72:	47b0      	blx	r6
 800be74:	1c43      	adds	r3, r0, #1
 800be76:	d100      	bne.n	800be7a <_printf_float+0x28e>
 800be78:	e713      	b.n	800bca2 <_printf_float+0xb6>
 800be7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d105      	bne.n	800be8c <_printf_float+0x2a0>
 800be80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be82:	2b00      	cmp	r3, #0
 800be84:	d102      	bne.n	800be8c <_printf_float+0x2a0>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	07db      	lsls	r3, r3, #31
 800be8a:	d5d3      	bpl.n	800be34 <_printf_float+0x248>
 800be8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800be8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be92:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be96:	47b0      	blx	r6
 800be98:	2600      	movs	r6, #0
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d100      	bne.n	800bea0 <_printf_float+0x2b4>
 800be9e:	e700      	b.n	800bca2 <_printf_float+0xb6>
 800bea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bea2:	425b      	negs	r3, r3
 800bea4:	42b3      	cmp	r3, r6
 800bea6:	dc01      	bgt.n	800beac <_printf_float+0x2c0>
 800bea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800beaa:	e792      	b.n	800bdd2 <_printf_float+0x1e6>
 800beac:	0022      	movs	r2, r4
 800beae:	2301      	movs	r3, #1
 800beb0:	321a      	adds	r2, #26
 800beb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800beb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beb6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800beb8:	47b8      	blx	r7
 800beba:	1c43      	adds	r3, r0, #1
 800bebc:	d100      	bne.n	800bec0 <_printf_float+0x2d4>
 800bebe:	e6f0      	b.n	800bca2 <_printf_float+0xb6>
 800bec0:	3601      	adds	r6, #1
 800bec2:	e7ed      	b.n	800bea0 <_printf_float+0x2b4>
 800bec4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bec6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800bec8:	429f      	cmp	r7, r3
 800beca:	dd00      	ble.n	800bece <_printf_float+0x2e2>
 800becc:	001f      	movs	r7, r3
 800bece:	2f00      	cmp	r7, #0
 800bed0:	dd08      	ble.n	800bee4 <_printf_float+0x2f8>
 800bed2:	003b      	movs	r3, r7
 800bed4:	002a      	movs	r2, r5
 800bed6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beda:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bedc:	47b0      	blx	r6
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	d100      	bne.n	800bee4 <_printf_float+0x2f8>
 800bee2:	e6de      	b.n	800bca2 <_printf_float+0xb6>
 800bee4:	2300      	movs	r3, #0
 800bee6:	930d      	str	r3, [sp, #52]	; 0x34
 800bee8:	43fb      	mvns	r3, r7
 800beea:	17db      	asrs	r3, r3, #31
 800beec:	930f      	str	r3, [sp, #60]	; 0x3c
 800beee:	e018      	b.n	800bf22 <_printf_float+0x336>
 800bef0:	7fefffff 	.word	0x7fefffff
 800bef4:	0800fae4 	.word	0x0800fae4
 800bef8:	0800fae0 	.word	0x0800fae0
 800befc:	0800faec 	.word	0x0800faec
 800bf00:	0800fae8 	.word	0x0800fae8
 800bf04:	0800faf0 	.word	0x0800faf0
 800bf08:	0022      	movs	r2, r4
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	321a      	adds	r2, #26
 800bf0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bf14:	47b0      	blx	r6
 800bf16:	1c43      	adds	r3, r0, #1
 800bf18:	d100      	bne.n	800bf1c <_printf_float+0x330>
 800bf1a:	e6c2      	b.n	800bca2 <_printf_float+0xb6>
 800bf1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf1e:	3301      	adds	r3, #1
 800bf20:	930d      	str	r3, [sp, #52]	; 0x34
 800bf22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf24:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800bf26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf28:	403b      	ands	r3, r7
 800bf2a:	1af3      	subs	r3, r6, r3
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	dceb      	bgt.n	800bf08 <_printf_float+0x31c>
 800bf30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf34:	19ad      	adds	r5, r5, r6
 800bf36:	4293      	cmp	r3, r2
 800bf38:	db10      	blt.n	800bf5c <_printf_float+0x370>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	07db      	lsls	r3, r3, #31
 800bf3e:	d40d      	bmi.n	800bf5c <_printf_float+0x370>
 800bf40:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800bf42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf44:	1bbe      	subs	r6, r7, r6
 800bf46:	1aff      	subs	r7, r7, r3
 800bf48:	42b7      	cmp	r7, r6
 800bf4a:	dd00      	ble.n	800bf4e <_printf_float+0x362>
 800bf4c:	0037      	movs	r7, r6
 800bf4e:	2f00      	cmp	r7, #0
 800bf50:	dc0d      	bgt.n	800bf6e <_printf_float+0x382>
 800bf52:	43fe      	mvns	r6, r7
 800bf54:	17f3      	asrs	r3, r6, #31
 800bf56:	2500      	movs	r5, #0
 800bf58:	930c      	str	r3, [sp, #48]	; 0x30
 800bf5a:	e01c      	b.n	800bf96 <_printf_float+0x3aa>
 800bf5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf60:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800bf66:	47b8      	blx	r7
 800bf68:	1c43      	adds	r3, r0, #1
 800bf6a:	d1e9      	bne.n	800bf40 <_printf_float+0x354>
 800bf6c:	e699      	b.n	800bca2 <_printf_float+0xb6>
 800bf6e:	003b      	movs	r3, r7
 800bf70:	002a      	movs	r2, r5
 800bf72:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bf78:	47a8      	blx	r5
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	d1e9      	bne.n	800bf52 <_printf_float+0x366>
 800bf7e:	e690      	b.n	800bca2 <_printf_float+0xb6>
 800bf80:	0022      	movs	r2, r4
 800bf82:	2301      	movs	r3, #1
 800bf84:	321a      	adds	r2, #26
 800bf86:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf8a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bf8c:	47b0      	blx	r6
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	d100      	bne.n	800bf94 <_printf_float+0x3a8>
 800bf92:	e686      	b.n	800bca2 <_printf_float+0xb6>
 800bf94:	3501      	adds	r5, #1
 800bf96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bf98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf9c:	1a9b      	subs	r3, r3, r2
 800bf9e:	003a      	movs	r2, r7
 800bfa0:	400a      	ands	r2, r1
 800bfa2:	1a9b      	subs	r3, r3, r2
 800bfa4:	42ab      	cmp	r3, r5
 800bfa6:	dceb      	bgt.n	800bf80 <_printf_float+0x394>
 800bfa8:	e744      	b.n	800be34 <_printf_float+0x248>
 800bfaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	dc02      	bgt.n	800bfb6 <_printf_float+0x3ca>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	421a      	tst	r2, r3
 800bfb4:	d032      	beq.n	800c01c <_printf_float+0x430>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	002a      	movs	r2, r5
 800bfba:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfbe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800bfc0:	47b8      	blx	r7
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	d100      	bne.n	800bfc8 <_printf_float+0x3dc>
 800bfc6:	e66c      	b.n	800bca2 <_printf_float+0xb6>
 800bfc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfd0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800bfd2:	3501      	adds	r5, #1
 800bfd4:	47b8      	blx	r7
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	d100      	bne.n	800bfdc <_printf_float+0x3f0>
 800bfda:	e662      	b.n	800bca2 <_printf_float+0xb6>
 800bfdc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bfde:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bfe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	1e5f      	subs	r7, r3, #1
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f7f4 fa26 	bl	8000438 <__aeabi_dcmpeq>
 800bfec:	003b      	movs	r3, r7
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d014      	beq.n	800c01c <_printf_float+0x430>
 800bff2:	2500      	movs	r5, #0
 800bff4:	e00a      	b.n	800c00c <_printf_float+0x420>
 800bff6:	0022      	movs	r2, r4
 800bff8:	2301      	movs	r3, #1
 800bffa:	321a      	adds	r2, #26
 800bffc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c000:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c002:	47b8      	blx	r7
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d100      	bne.n	800c00a <_printf_float+0x41e>
 800c008:	e64b      	b.n	800bca2 <_printf_float+0xb6>
 800c00a:	3501      	adds	r5, #1
 800c00c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c00e:	3b01      	subs	r3, #1
 800c010:	42ab      	cmp	r3, r5
 800c012:	dcf0      	bgt.n	800bff6 <_printf_float+0x40a>
 800c014:	0022      	movs	r2, r4
 800c016:	0033      	movs	r3, r6
 800c018:	3250      	adds	r2, #80	; 0x50
 800c01a:	e6db      	b.n	800bdd4 <_printf_float+0x1e8>
 800c01c:	002a      	movs	r2, r5
 800c01e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c020:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c022:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c024:	47a8      	blx	r5
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	d1f4      	bne.n	800c014 <_printf_float+0x428>
 800c02a:	e63a      	b.n	800bca2 <_printf_float+0xb6>
 800c02c:	0022      	movs	r2, r4
 800c02e:	2301      	movs	r3, #1
 800c030:	3219      	adds	r2, #25
 800c032:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c034:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c036:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c038:	47b0      	blx	r6
 800c03a:	1c43      	adds	r3, r0, #1
 800c03c:	d100      	bne.n	800c040 <_printf_float+0x454>
 800c03e:	e630      	b.n	800bca2 <_printf_float+0xb6>
 800c040:	3501      	adds	r5, #1
 800c042:	68e3      	ldr	r3, [r4, #12]
 800c044:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c046:	1a9b      	subs	r3, r3, r2
 800c048:	42ab      	cmp	r3, r5
 800c04a:	dcef      	bgt.n	800c02c <_printf_float+0x440>
 800c04c:	e6f6      	b.n	800be3c <_printf_float+0x250>
 800c04e:	2500      	movs	r5, #0
 800c050:	e7f7      	b.n	800c042 <_printf_float+0x456>
 800c052:	2a00      	cmp	r2, #0
 800c054:	d100      	bne.n	800c058 <_printf_float+0x46c>
 800c056:	e689      	b.n	800bd6c <_printf_float+0x180>
 800c058:	2100      	movs	r1, #0
 800c05a:	9106      	str	r1, [sp, #24]
 800c05c:	a912      	add	r1, sp, #72	; 0x48
 800c05e:	9105      	str	r1, [sp, #20]
 800c060:	a911      	add	r1, sp, #68	; 0x44
 800c062:	9103      	str	r1, [sp, #12]
 800c064:	2123      	movs	r1, #35	; 0x23
 800c066:	a808      	add	r0, sp, #32
 800c068:	1809      	adds	r1, r1, r0
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	9200      	str	r2, [sp, #0]
 800c070:	002b      	movs	r3, r5
 800c072:	9704      	str	r7, [sp, #16]
 800c074:	9102      	str	r1, [sp, #8]
 800c076:	0032      	movs	r2, r6
 800c078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c07a:	f7ff fd1a 	bl	800bab2 <__cvt>
 800c07e:	0005      	movs	r5, r0
 800c080:	e645      	b.n	800bd0e <_printf_float+0x122>
 800c082:	46c0      	nop			; (mov r8, r8)

0800c084 <_printf_common>:
 800c084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c086:	0015      	movs	r5, r2
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	688a      	ldr	r2, [r1, #8]
 800c08c:	690b      	ldr	r3, [r1, #16]
 800c08e:	9000      	str	r0, [sp, #0]
 800c090:	000c      	movs	r4, r1
 800c092:	4293      	cmp	r3, r2
 800c094:	da00      	bge.n	800c098 <_printf_common+0x14>
 800c096:	0013      	movs	r3, r2
 800c098:	0022      	movs	r2, r4
 800c09a:	602b      	str	r3, [r5, #0]
 800c09c:	3243      	adds	r2, #67	; 0x43
 800c09e:	7812      	ldrb	r2, [r2, #0]
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	d001      	beq.n	800c0a8 <_printf_common+0x24>
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	602b      	str	r3, [r5, #0]
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	069b      	lsls	r3, r3, #26
 800c0ac:	d502      	bpl.n	800c0b4 <_printf_common+0x30>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	3302      	adds	r3, #2
 800c0b2:	602b      	str	r3, [r5, #0]
 800c0b4:	2706      	movs	r7, #6
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	401f      	ands	r7, r3
 800c0ba:	d027      	beq.n	800c10c <_printf_common+0x88>
 800c0bc:	0023      	movs	r3, r4
 800c0be:	3343      	adds	r3, #67	; 0x43
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	1e5a      	subs	r2, r3, #1
 800c0c4:	4193      	sbcs	r3, r2
 800c0c6:	6822      	ldr	r2, [r4, #0]
 800c0c8:	0692      	lsls	r2, r2, #26
 800c0ca:	d430      	bmi.n	800c12e <_printf_common+0xaa>
 800c0cc:	0022      	movs	r2, r4
 800c0ce:	9901      	ldr	r1, [sp, #4]
 800c0d0:	3243      	adds	r2, #67	; 0x43
 800c0d2:	9800      	ldr	r0, [sp, #0]
 800c0d4:	9e08      	ldr	r6, [sp, #32]
 800c0d6:	47b0      	blx	r6
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d025      	beq.n	800c128 <_printf_common+0xa4>
 800c0dc:	2306      	movs	r3, #6
 800c0de:	6820      	ldr	r0, [r4, #0]
 800c0e0:	682a      	ldr	r2, [r5, #0]
 800c0e2:	68e1      	ldr	r1, [r4, #12]
 800c0e4:	4003      	ands	r3, r0
 800c0e6:	2500      	movs	r5, #0
 800c0e8:	2b04      	cmp	r3, #4
 800c0ea:	d103      	bne.n	800c0f4 <_printf_common+0x70>
 800c0ec:	1a8d      	subs	r5, r1, r2
 800c0ee:	43eb      	mvns	r3, r5
 800c0f0:	17db      	asrs	r3, r3, #31
 800c0f2:	401d      	ands	r5, r3
 800c0f4:	68a3      	ldr	r3, [r4, #8]
 800c0f6:	6922      	ldr	r2, [r4, #16]
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	dd01      	ble.n	800c100 <_printf_common+0x7c>
 800c0fc:	1a9b      	subs	r3, r3, r2
 800c0fe:	18ed      	adds	r5, r5, r3
 800c100:	2700      	movs	r7, #0
 800c102:	42bd      	cmp	r5, r7
 800c104:	d120      	bne.n	800c148 <_printf_common+0xc4>
 800c106:	2000      	movs	r0, #0
 800c108:	e010      	b.n	800c12c <_printf_common+0xa8>
 800c10a:	3701      	adds	r7, #1
 800c10c:	68e3      	ldr	r3, [r4, #12]
 800c10e:	682a      	ldr	r2, [r5, #0]
 800c110:	1a9b      	subs	r3, r3, r2
 800c112:	42bb      	cmp	r3, r7
 800c114:	ddd2      	ble.n	800c0bc <_printf_common+0x38>
 800c116:	0022      	movs	r2, r4
 800c118:	2301      	movs	r3, #1
 800c11a:	3219      	adds	r2, #25
 800c11c:	9901      	ldr	r1, [sp, #4]
 800c11e:	9800      	ldr	r0, [sp, #0]
 800c120:	9e08      	ldr	r6, [sp, #32]
 800c122:	47b0      	blx	r6
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	d1f0      	bne.n	800c10a <_printf_common+0x86>
 800c128:	2001      	movs	r0, #1
 800c12a:	4240      	negs	r0, r0
 800c12c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c12e:	2030      	movs	r0, #48	; 0x30
 800c130:	18e1      	adds	r1, r4, r3
 800c132:	3143      	adds	r1, #67	; 0x43
 800c134:	7008      	strb	r0, [r1, #0]
 800c136:	0021      	movs	r1, r4
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	3145      	adds	r1, #69	; 0x45
 800c13c:	7809      	ldrb	r1, [r1, #0]
 800c13e:	18a2      	adds	r2, r4, r2
 800c140:	3243      	adds	r2, #67	; 0x43
 800c142:	3302      	adds	r3, #2
 800c144:	7011      	strb	r1, [r2, #0]
 800c146:	e7c1      	b.n	800c0cc <_printf_common+0x48>
 800c148:	0022      	movs	r2, r4
 800c14a:	2301      	movs	r3, #1
 800c14c:	321a      	adds	r2, #26
 800c14e:	9901      	ldr	r1, [sp, #4]
 800c150:	9800      	ldr	r0, [sp, #0]
 800c152:	9e08      	ldr	r6, [sp, #32]
 800c154:	47b0      	blx	r6
 800c156:	1c43      	adds	r3, r0, #1
 800c158:	d0e6      	beq.n	800c128 <_printf_common+0xa4>
 800c15a:	3701      	adds	r7, #1
 800c15c:	e7d1      	b.n	800c102 <_printf_common+0x7e>
	...

0800c160 <_printf_i>:
 800c160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c162:	b089      	sub	sp, #36	; 0x24
 800c164:	9204      	str	r2, [sp, #16]
 800c166:	000a      	movs	r2, r1
 800c168:	3243      	adds	r2, #67	; 0x43
 800c16a:	9305      	str	r3, [sp, #20]
 800c16c:	9003      	str	r0, [sp, #12]
 800c16e:	9202      	str	r2, [sp, #8]
 800c170:	7e0a      	ldrb	r2, [r1, #24]
 800c172:	000c      	movs	r4, r1
 800c174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c176:	2a6e      	cmp	r2, #110	; 0x6e
 800c178:	d100      	bne.n	800c17c <_printf_i+0x1c>
 800c17a:	e086      	b.n	800c28a <_printf_i+0x12a>
 800c17c:	d81f      	bhi.n	800c1be <_printf_i+0x5e>
 800c17e:	2a63      	cmp	r2, #99	; 0x63
 800c180:	d033      	beq.n	800c1ea <_printf_i+0x8a>
 800c182:	d808      	bhi.n	800c196 <_printf_i+0x36>
 800c184:	2a00      	cmp	r2, #0
 800c186:	d100      	bne.n	800c18a <_printf_i+0x2a>
 800c188:	e08c      	b.n	800c2a4 <_printf_i+0x144>
 800c18a:	2a58      	cmp	r2, #88	; 0x58
 800c18c:	d04d      	beq.n	800c22a <_printf_i+0xca>
 800c18e:	0025      	movs	r5, r4
 800c190:	3542      	adds	r5, #66	; 0x42
 800c192:	702a      	strb	r2, [r5, #0]
 800c194:	e030      	b.n	800c1f8 <_printf_i+0x98>
 800c196:	2a64      	cmp	r2, #100	; 0x64
 800c198:	d001      	beq.n	800c19e <_printf_i+0x3e>
 800c19a:	2a69      	cmp	r2, #105	; 0x69
 800c19c:	d1f7      	bne.n	800c18e <_printf_i+0x2e>
 800c19e:	6819      	ldr	r1, [r3, #0]
 800c1a0:	6825      	ldr	r5, [r4, #0]
 800c1a2:	1d0a      	adds	r2, r1, #4
 800c1a4:	0628      	lsls	r0, r5, #24
 800c1a6:	d529      	bpl.n	800c1fc <_printf_i+0x9c>
 800c1a8:	6808      	ldr	r0, [r1, #0]
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	da03      	bge.n	800c1b8 <_printf_i+0x58>
 800c1b0:	232d      	movs	r3, #45	; 0x2d
 800c1b2:	9a02      	ldr	r2, [sp, #8]
 800c1b4:	4240      	negs	r0, r0
 800c1b6:	7013      	strb	r3, [r2, #0]
 800c1b8:	4e6b      	ldr	r6, [pc, #428]	; (800c368 <_printf_i+0x208>)
 800c1ba:	270a      	movs	r7, #10
 800c1bc:	e04f      	b.n	800c25e <_printf_i+0xfe>
 800c1be:	2a73      	cmp	r2, #115	; 0x73
 800c1c0:	d074      	beq.n	800c2ac <_printf_i+0x14c>
 800c1c2:	d808      	bhi.n	800c1d6 <_printf_i+0x76>
 800c1c4:	2a6f      	cmp	r2, #111	; 0x6f
 800c1c6:	d01f      	beq.n	800c208 <_printf_i+0xa8>
 800c1c8:	2a70      	cmp	r2, #112	; 0x70
 800c1ca:	d1e0      	bne.n	800c18e <_printf_i+0x2e>
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	6809      	ldr	r1, [r1, #0]
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	6022      	str	r2, [r4, #0]
 800c1d4:	e003      	b.n	800c1de <_printf_i+0x7e>
 800c1d6:	2a75      	cmp	r2, #117	; 0x75
 800c1d8:	d016      	beq.n	800c208 <_printf_i+0xa8>
 800c1da:	2a78      	cmp	r2, #120	; 0x78
 800c1dc:	d1d7      	bne.n	800c18e <_printf_i+0x2e>
 800c1de:	0022      	movs	r2, r4
 800c1e0:	2178      	movs	r1, #120	; 0x78
 800c1e2:	3245      	adds	r2, #69	; 0x45
 800c1e4:	7011      	strb	r1, [r2, #0]
 800c1e6:	4e61      	ldr	r6, [pc, #388]	; (800c36c <_printf_i+0x20c>)
 800c1e8:	e022      	b.n	800c230 <_printf_i+0xd0>
 800c1ea:	0025      	movs	r5, r4
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	3542      	adds	r5, #66	; 0x42
 800c1f0:	1d11      	adds	r1, r2, #4
 800c1f2:	6019      	str	r1, [r3, #0]
 800c1f4:	6813      	ldr	r3, [r2, #0]
 800c1f6:	702b      	strb	r3, [r5, #0]
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e065      	b.n	800c2c8 <_printf_i+0x168>
 800c1fc:	6808      	ldr	r0, [r1, #0]
 800c1fe:	601a      	str	r2, [r3, #0]
 800c200:	0669      	lsls	r1, r5, #25
 800c202:	d5d3      	bpl.n	800c1ac <_printf_i+0x4c>
 800c204:	b200      	sxth	r0, r0
 800c206:	e7d1      	b.n	800c1ac <_printf_i+0x4c>
 800c208:	6819      	ldr	r1, [r3, #0]
 800c20a:	6825      	ldr	r5, [r4, #0]
 800c20c:	1d08      	adds	r0, r1, #4
 800c20e:	6018      	str	r0, [r3, #0]
 800c210:	6808      	ldr	r0, [r1, #0]
 800c212:	062e      	lsls	r6, r5, #24
 800c214:	d505      	bpl.n	800c222 <_printf_i+0xc2>
 800c216:	4e54      	ldr	r6, [pc, #336]	; (800c368 <_printf_i+0x208>)
 800c218:	2708      	movs	r7, #8
 800c21a:	2a6f      	cmp	r2, #111	; 0x6f
 800c21c:	d01b      	beq.n	800c256 <_printf_i+0xf6>
 800c21e:	270a      	movs	r7, #10
 800c220:	e019      	b.n	800c256 <_printf_i+0xf6>
 800c222:	066d      	lsls	r5, r5, #25
 800c224:	d5f7      	bpl.n	800c216 <_printf_i+0xb6>
 800c226:	b280      	uxth	r0, r0
 800c228:	e7f5      	b.n	800c216 <_printf_i+0xb6>
 800c22a:	3145      	adds	r1, #69	; 0x45
 800c22c:	4e4e      	ldr	r6, [pc, #312]	; (800c368 <_printf_i+0x208>)
 800c22e:	700a      	strb	r2, [r1, #0]
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	6822      	ldr	r2, [r4, #0]
 800c234:	1d01      	adds	r1, r0, #4
 800c236:	6800      	ldr	r0, [r0, #0]
 800c238:	6019      	str	r1, [r3, #0]
 800c23a:	0615      	lsls	r5, r2, #24
 800c23c:	d521      	bpl.n	800c282 <_printf_i+0x122>
 800c23e:	07d3      	lsls	r3, r2, #31
 800c240:	d502      	bpl.n	800c248 <_printf_i+0xe8>
 800c242:	2320      	movs	r3, #32
 800c244:	431a      	orrs	r2, r3
 800c246:	6022      	str	r2, [r4, #0]
 800c248:	2710      	movs	r7, #16
 800c24a:	2800      	cmp	r0, #0
 800c24c:	d103      	bne.n	800c256 <_printf_i+0xf6>
 800c24e:	2320      	movs	r3, #32
 800c250:	6822      	ldr	r2, [r4, #0]
 800c252:	439a      	bics	r2, r3
 800c254:	6022      	str	r2, [r4, #0]
 800c256:	0023      	movs	r3, r4
 800c258:	2200      	movs	r2, #0
 800c25a:	3343      	adds	r3, #67	; 0x43
 800c25c:	701a      	strb	r2, [r3, #0]
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	60a3      	str	r3, [r4, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	db58      	blt.n	800c318 <_printf_i+0x1b8>
 800c266:	2204      	movs	r2, #4
 800c268:	6821      	ldr	r1, [r4, #0]
 800c26a:	4391      	bics	r1, r2
 800c26c:	6021      	str	r1, [r4, #0]
 800c26e:	2800      	cmp	r0, #0
 800c270:	d154      	bne.n	800c31c <_printf_i+0x1bc>
 800c272:	9d02      	ldr	r5, [sp, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d05a      	beq.n	800c32e <_printf_i+0x1ce>
 800c278:	0025      	movs	r5, r4
 800c27a:	7833      	ldrb	r3, [r6, #0]
 800c27c:	3542      	adds	r5, #66	; 0x42
 800c27e:	702b      	strb	r3, [r5, #0]
 800c280:	e055      	b.n	800c32e <_printf_i+0x1ce>
 800c282:	0655      	lsls	r5, r2, #25
 800c284:	d5db      	bpl.n	800c23e <_printf_i+0xde>
 800c286:	b280      	uxth	r0, r0
 800c288:	e7d9      	b.n	800c23e <_printf_i+0xde>
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	680d      	ldr	r5, [r1, #0]
 800c28e:	1d10      	adds	r0, r2, #4
 800c290:	6949      	ldr	r1, [r1, #20]
 800c292:	6018      	str	r0, [r3, #0]
 800c294:	6813      	ldr	r3, [r2, #0]
 800c296:	062e      	lsls	r6, r5, #24
 800c298:	d501      	bpl.n	800c29e <_printf_i+0x13e>
 800c29a:	6019      	str	r1, [r3, #0]
 800c29c:	e002      	b.n	800c2a4 <_printf_i+0x144>
 800c29e:	066d      	lsls	r5, r5, #25
 800c2a0:	d5fb      	bpl.n	800c29a <_printf_i+0x13a>
 800c2a2:	8019      	strh	r1, [r3, #0]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9d02      	ldr	r5, [sp, #8]
 800c2a8:	6123      	str	r3, [r4, #16]
 800c2aa:	e04f      	b.n	800c34c <_printf_i+0x1ec>
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	1d11      	adds	r1, r2, #4
 800c2b0:	6019      	str	r1, [r3, #0]
 800c2b2:	6815      	ldr	r5, [r2, #0]
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	6862      	ldr	r2, [r4, #4]
 800c2b8:	0028      	movs	r0, r5
 800c2ba:	f000 ffe5 	bl	800d288 <memchr>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d001      	beq.n	800c2c6 <_printf_i+0x166>
 800c2c2:	1b40      	subs	r0, r0, r5
 800c2c4:	6060      	str	r0, [r4, #4]
 800c2c6:	6863      	ldr	r3, [r4, #4]
 800c2c8:	6123      	str	r3, [r4, #16]
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	9a02      	ldr	r2, [sp, #8]
 800c2ce:	7013      	strb	r3, [r2, #0]
 800c2d0:	e03c      	b.n	800c34c <_printf_i+0x1ec>
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	002a      	movs	r2, r5
 800c2d6:	9904      	ldr	r1, [sp, #16]
 800c2d8:	9803      	ldr	r0, [sp, #12]
 800c2da:	9d05      	ldr	r5, [sp, #20]
 800c2dc:	47a8      	blx	r5
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	d03e      	beq.n	800c360 <_printf_i+0x200>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	079b      	lsls	r3, r3, #30
 800c2e6:	d415      	bmi.n	800c314 <_printf_i+0x1b4>
 800c2e8:	9b07      	ldr	r3, [sp, #28]
 800c2ea:	68e0      	ldr	r0, [r4, #12]
 800c2ec:	4298      	cmp	r0, r3
 800c2ee:	da39      	bge.n	800c364 <_printf_i+0x204>
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	e037      	b.n	800c364 <_printf_i+0x204>
 800c2f4:	0022      	movs	r2, r4
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	3219      	adds	r2, #25
 800c2fa:	9904      	ldr	r1, [sp, #16]
 800c2fc:	9803      	ldr	r0, [sp, #12]
 800c2fe:	9e05      	ldr	r6, [sp, #20]
 800c300:	47b0      	blx	r6
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	d02c      	beq.n	800c360 <_printf_i+0x200>
 800c306:	3501      	adds	r5, #1
 800c308:	68e3      	ldr	r3, [r4, #12]
 800c30a:	9a07      	ldr	r2, [sp, #28]
 800c30c:	1a9b      	subs	r3, r3, r2
 800c30e:	42ab      	cmp	r3, r5
 800c310:	dcf0      	bgt.n	800c2f4 <_printf_i+0x194>
 800c312:	e7e9      	b.n	800c2e8 <_printf_i+0x188>
 800c314:	2500      	movs	r5, #0
 800c316:	e7f7      	b.n	800c308 <_printf_i+0x1a8>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d0ad      	beq.n	800c278 <_printf_i+0x118>
 800c31c:	9d02      	ldr	r5, [sp, #8]
 800c31e:	0039      	movs	r1, r7
 800c320:	f7f3 ff8a 	bl	8000238 <__aeabi_uidivmod>
 800c324:	5c73      	ldrb	r3, [r6, r1]
 800c326:	3d01      	subs	r5, #1
 800c328:	702b      	strb	r3, [r5, #0]
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d1f7      	bne.n	800c31e <_printf_i+0x1be>
 800c32e:	2f08      	cmp	r7, #8
 800c330:	d109      	bne.n	800c346 <_printf_i+0x1e6>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	07db      	lsls	r3, r3, #31
 800c336:	d506      	bpl.n	800c346 <_printf_i+0x1e6>
 800c338:	6863      	ldr	r3, [r4, #4]
 800c33a:	6922      	ldr	r2, [r4, #16]
 800c33c:	4293      	cmp	r3, r2
 800c33e:	dc02      	bgt.n	800c346 <_printf_i+0x1e6>
 800c340:	2330      	movs	r3, #48	; 0x30
 800c342:	3d01      	subs	r5, #1
 800c344:	702b      	strb	r3, [r5, #0]
 800c346:	9b02      	ldr	r3, [sp, #8]
 800c348:	1b5b      	subs	r3, r3, r5
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	9b05      	ldr	r3, [sp, #20]
 800c34e:	aa07      	add	r2, sp, #28
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	0021      	movs	r1, r4
 800c354:	9b04      	ldr	r3, [sp, #16]
 800c356:	9803      	ldr	r0, [sp, #12]
 800c358:	f7ff fe94 	bl	800c084 <_printf_common>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d1b8      	bne.n	800c2d2 <_printf_i+0x172>
 800c360:	2001      	movs	r0, #1
 800c362:	4240      	negs	r0, r0
 800c364:	b009      	add	sp, #36	; 0x24
 800c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c368:	0800faf2 	.word	0x0800faf2
 800c36c:	0800fb03 	.word	0x0800fb03

0800c370 <iprintf>:
 800c370:	b40f      	push	{r0, r1, r2, r3}
 800c372:	4b0b      	ldr	r3, [pc, #44]	; (800c3a0 <iprintf+0x30>)
 800c374:	b513      	push	{r0, r1, r4, lr}
 800c376:	681c      	ldr	r4, [r3, #0]
 800c378:	2c00      	cmp	r4, #0
 800c37a:	d005      	beq.n	800c388 <iprintf+0x18>
 800c37c:	69a3      	ldr	r3, [r4, #24]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <iprintf+0x18>
 800c382:	0020      	movs	r0, r4
 800c384:	f000 fed6 	bl	800d134 <__sinit>
 800c388:	ab05      	add	r3, sp, #20
 800c38a:	9a04      	ldr	r2, [sp, #16]
 800c38c:	68a1      	ldr	r1, [r4, #8]
 800c38e:	0020      	movs	r0, r4
 800c390:	9301      	str	r3, [sp, #4]
 800c392:	f001 fcb1 	bl	800dcf8 <_vfiprintf_r>
 800c396:	bc16      	pop	{r1, r2, r4}
 800c398:	bc08      	pop	{r3}
 800c39a:	b004      	add	sp, #16
 800c39c:	4718      	bx	r3
 800c39e:	46c0      	nop			; (mov r8, r8)
 800c3a0:	20000184 	.word	0x20000184

0800c3a4 <siprintf>:
 800c3a4:	b40e      	push	{r1, r2, r3}
 800c3a6:	b500      	push	{lr}
 800c3a8:	490b      	ldr	r1, [pc, #44]	; (800c3d8 <siprintf+0x34>)
 800c3aa:	b09c      	sub	sp, #112	; 0x70
 800c3ac:	ab1d      	add	r3, sp, #116	; 0x74
 800c3ae:	9002      	str	r0, [sp, #8]
 800c3b0:	9006      	str	r0, [sp, #24]
 800c3b2:	9107      	str	r1, [sp, #28]
 800c3b4:	9104      	str	r1, [sp, #16]
 800c3b6:	4809      	ldr	r0, [pc, #36]	; (800c3dc <siprintf+0x38>)
 800c3b8:	4909      	ldr	r1, [pc, #36]	; (800c3e0 <siprintf+0x3c>)
 800c3ba:	cb04      	ldmia	r3!, {r2}
 800c3bc:	9105      	str	r1, [sp, #20]
 800c3be:	6800      	ldr	r0, [r0, #0]
 800c3c0:	a902      	add	r1, sp, #8
 800c3c2:	9301      	str	r3, [sp, #4]
 800c3c4:	f001 fb72 	bl	800daac <_svfiprintf_r>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9a02      	ldr	r2, [sp, #8]
 800c3cc:	7013      	strb	r3, [r2, #0]
 800c3ce:	b01c      	add	sp, #112	; 0x70
 800c3d0:	bc08      	pop	{r3}
 800c3d2:	b003      	add	sp, #12
 800c3d4:	4718      	bx	r3
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	7fffffff 	.word	0x7fffffff
 800c3dc:	20000184 	.word	0x20000184
 800c3e0:	ffff0208 	.word	0xffff0208

0800c3e4 <quorem>:
 800c3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e6:	6903      	ldr	r3, [r0, #16]
 800c3e8:	690c      	ldr	r4, [r1, #16]
 800c3ea:	b089      	sub	sp, #36	; 0x24
 800c3ec:	0007      	movs	r7, r0
 800c3ee:	9105      	str	r1, [sp, #20]
 800c3f0:	2600      	movs	r6, #0
 800c3f2:	42a3      	cmp	r3, r4
 800c3f4:	db65      	blt.n	800c4c2 <quorem+0xde>
 800c3f6:	000b      	movs	r3, r1
 800c3f8:	3c01      	subs	r4, #1
 800c3fa:	3314      	adds	r3, #20
 800c3fc:	00a5      	lsls	r5, r4, #2
 800c3fe:	9303      	str	r3, [sp, #12]
 800c400:	195b      	adds	r3, r3, r5
 800c402:	9304      	str	r3, [sp, #16]
 800c404:	0003      	movs	r3, r0
 800c406:	3314      	adds	r3, #20
 800c408:	9302      	str	r3, [sp, #8]
 800c40a:	195d      	adds	r5, r3, r5
 800c40c:	9b04      	ldr	r3, [sp, #16]
 800c40e:	6828      	ldr	r0, [r5, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	1c59      	adds	r1, r3, #1
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	f7f3 fe89 	bl	800012c <__udivsi3>
 800c41a:	9001      	str	r0, [sp, #4]
 800c41c:	42b0      	cmp	r0, r6
 800c41e:	d029      	beq.n	800c474 <quorem+0x90>
 800c420:	9b03      	ldr	r3, [sp, #12]
 800c422:	9802      	ldr	r0, [sp, #8]
 800c424:	469c      	mov	ip, r3
 800c426:	9606      	str	r6, [sp, #24]
 800c428:	4662      	mov	r2, ip
 800c42a:	ca08      	ldmia	r2!, {r3}
 800c42c:	4694      	mov	ip, r2
 800c42e:	9a01      	ldr	r2, [sp, #4]
 800c430:	b299      	uxth	r1, r3
 800c432:	4351      	muls	r1, r2
 800c434:	0c1b      	lsrs	r3, r3, #16
 800c436:	4353      	muls	r3, r2
 800c438:	1989      	adds	r1, r1, r6
 800c43a:	0c0a      	lsrs	r2, r1, #16
 800c43c:	189b      	adds	r3, r3, r2
 800c43e:	9307      	str	r3, [sp, #28]
 800c440:	0c1e      	lsrs	r6, r3, #16
 800c442:	6803      	ldr	r3, [r0, #0]
 800c444:	b289      	uxth	r1, r1
 800c446:	b29a      	uxth	r2, r3
 800c448:	9b06      	ldr	r3, [sp, #24]
 800c44a:	18d2      	adds	r2, r2, r3
 800c44c:	6803      	ldr	r3, [r0, #0]
 800c44e:	1a52      	subs	r2, r2, r1
 800c450:	0c19      	lsrs	r1, r3, #16
 800c452:	466b      	mov	r3, sp
 800c454:	8b9b      	ldrh	r3, [r3, #28]
 800c456:	1acb      	subs	r3, r1, r3
 800c458:	1411      	asrs	r1, r2, #16
 800c45a:	185b      	adds	r3, r3, r1
 800c45c:	1419      	asrs	r1, r3, #16
 800c45e:	b292      	uxth	r2, r2
 800c460:	041b      	lsls	r3, r3, #16
 800c462:	431a      	orrs	r2, r3
 800c464:	9b04      	ldr	r3, [sp, #16]
 800c466:	9106      	str	r1, [sp, #24]
 800c468:	c004      	stmia	r0!, {r2}
 800c46a:	4563      	cmp	r3, ip
 800c46c:	d2dc      	bcs.n	800c428 <quorem+0x44>
 800c46e:	682b      	ldr	r3, [r5, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d02d      	beq.n	800c4d0 <quorem+0xec>
 800c474:	9905      	ldr	r1, [sp, #20]
 800c476:	0038      	movs	r0, r7
 800c478:	f001 f92e 	bl	800d6d8 <__mcmp>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	db1f      	blt.n	800c4c0 <quorem+0xdc>
 800c480:	2500      	movs	r5, #0
 800c482:	9b01      	ldr	r3, [sp, #4]
 800c484:	9802      	ldr	r0, [sp, #8]
 800c486:	3301      	adds	r3, #1
 800c488:	9903      	ldr	r1, [sp, #12]
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	6802      	ldr	r2, [r0, #0]
 800c48e:	c908      	ldmia	r1!, {r3}
 800c490:	b292      	uxth	r2, r2
 800c492:	1955      	adds	r5, r2, r5
 800c494:	b29a      	uxth	r2, r3
 800c496:	1aaa      	subs	r2, r5, r2
 800c498:	6805      	ldr	r5, [r0, #0]
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	0c2d      	lsrs	r5, r5, #16
 800c49e:	1aeb      	subs	r3, r5, r3
 800c4a0:	1415      	asrs	r5, r2, #16
 800c4a2:	195b      	adds	r3, r3, r5
 800c4a4:	141d      	asrs	r5, r3, #16
 800c4a6:	b292      	uxth	r2, r2
 800c4a8:	041b      	lsls	r3, r3, #16
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	c008      	stmia	r0!, {r3}
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	428b      	cmp	r3, r1
 800c4b2:	d2eb      	bcs.n	800c48c <quorem+0xa8>
 800c4b4:	9a02      	ldr	r2, [sp, #8]
 800c4b6:	00a3      	lsls	r3, r4, #2
 800c4b8:	18d3      	adds	r3, r2, r3
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	2a00      	cmp	r2, #0
 800c4be:	d011      	beq.n	800c4e4 <quorem+0x100>
 800c4c0:	9e01      	ldr	r6, [sp, #4]
 800c4c2:	0030      	movs	r0, r6
 800c4c4:	b009      	add	sp, #36	; 0x24
 800c4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d104      	bne.n	800c4d8 <quorem+0xf4>
 800c4ce:	3c01      	subs	r4, #1
 800c4d0:	9b02      	ldr	r3, [sp, #8]
 800c4d2:	3d04      	subs	r5, #4
 800c4d4:	42ab      	cmp	r3, r5
 800c4d6:	d3f7      	bcc.n	800c4c8 <quorem+0xe4>
 800c4d8:	613c      	str	r4, [r7, #16]
 800c4da:	e7cb      	b.n	800c474 <quorem+0x90>
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	d104      	bne.n	800c4ec <quorem+0x108>
 800c4e2:	3c01      	subs	r4, #1
 800c4e4:	9a02      	ldr	r2, [sp, #8]
 800c4e6:	3b04      	subs	r3, #4
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d3f7      	bcc.n	800c4dc <quorem+0xf8>
 800c4ec:	613c      	str	r4, [r7, #16]
 800c4ee:	e7e7      	b.n	800c4c0 <quorem+0xdc>

0800c4f0 <_dtoa_r>:
 800c4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f2:	0016      	movs	r6, r2
 800c4f4:	001f      	movs	r7, r3
 800c4f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c4f8:	b09b      	sub	sp, #108	; 0x6c
 800c4fa:	9002      	str	r0, [sp, #8]
 800c4fc:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800c4fe:	9606      	str	r6, [sp, #24]
 800c500:	9707      	str	r7, [sp, #28]
 800c502:	2c00      	cmp	r4, #0
 800c504:	d108      	bne.n	800c518 <_dtoa_r+0x28>
 800c506:	2010      	movs	r0, #16
 800c508:	f000 feb4 	bl	800d274 <malloc>
 800c50c:	9b02      	ldr	r3, [sp, #8]
 800c50e:	6258      	str	r0, [r3, #36]	; 0x24
 800c510:	6044      	str	r4, [r0, #4]
 800c512:	6084      	str	r4, [r0, #8]
 800c514:	6004      	str	r4, [r0, #0]
 800c516:	60c4      	str	r4, [r0, #12]
 800c518:	9b02      	ldr	r3, [sp, #8]
 800c51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51c:	6819      	ldr	r1, [r3, #0]
 800c51e:	2900      	cmp	r1, #0
 800c520:	d00b      	beq.n	800c53a <_dtoa_r+0x4a>
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	2301      	movs	r3, #1
 800c526:	4093      	lsls	r3, r2
 800c528:	604a      	str	r2, [r1, #4]
 800c52a:	608b      	str	r3, [r1, #8]
 800c52c:	9802      	ldr	r0, [sp, #8]
 800c52e:	f000 fef7 	bl	800d320 <_Bfree>
 800c532:	2200      	movs	r2, #0
 800c534:	9b02      	ldr	r3, [sp, #8]
 800c536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	2f00      	cmp	r7, #0
 800c53c:	da20      	bge.n	800c580 <_dtoa_r+0x90>
 800c53e:	2301      	movs	r3, #1
 800c540:	602b      	str	r3, [r5, #0]
 800c542:	007b      	lsls	r3, r7, #1
 800c544:	085b      	lsrs	r3, r3, #1
 800c546:	9307      	str	r3, [sp, #28]
 800c548:	9c07      	ldr	r4, [sp, #28]
 800c54a:	4bb2      	ldr	r3, [pc, #712]	; (800c814 <_dtoa_r+0x324>)
 800c54c:	0022      	movs	r2, r4
 800c54e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c550:	401a      	ands	r2, r3
 800c552:	429a      	cmp	r2, r3
 800c554:	d117      	bne.n	800c586 <_dtoa_r+0x96>
 800c556:	4bb0      	ldr	r3, [pc, #704]	; (800c818 <_dtoa_r+0x328>)
 800c558:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c55a:	6013      	str	r3, [r2, #0]
 800c55c:	9b06      	ldr	r3, [sp, #24]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d103      	bne.n	800c56a <_dtoa_r+0x7a>
 800c562:	0324      	lsls	r4, r4, #12
 800c564:	d101      	bne.n	800c56a <_dtoa_r+0x7a>
 800c566:	f000 fd87 	bl	800d078 <_dtoa_r+0xb88>
 800c56a:	4bac      	ldr	r3, [pc, #688]	; (800c81c <_dtoa_r+0x32c>)
 800c56c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c56e:	9308      	str	r3, [sp, #32]
 800c570:	2a00      	cmp	r2, #0
 800c572:	d002      	beq.n	800c57a <_dtoa_r+0x8a>
 800c574:	4baa      	ldr	r3, [pc, #680]	; (800c820 <_dtoa_r+0x330>)
 800c576:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c578:	6013      	str	r3, [r2, #0]
 800c57a:	9808      	ldr	r0, [sp, #32]
 800c57c:	b01b      	add	sp, #108	; 0x6c
 800c57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c580:	2300      	movs	r3, #0
 800c582:	602b      	str	r3, [r5, #0]
 800c584:	e7e0      	b.n	800c548 <_dtoa_r+0x58>
 800c586:	9e06      	ldr	r6, [sp, #24]
 800c588:	9f07      	ldr	r7, [sp, #28]
 800c58a:	2200      	movs	r2, #0
 800c58c:	2300      	movs	r3, #0
 800c58e:	0030      	movs	r0, r6
 800c590:	0039      	movs	r1, r7
 800c592:	f7f3 ff51 	bl	8000438 <__aeabi_dcmpeq>
 800c596:	1e05      	subs	r5, r0, #0
 800c598:	d00b      	beq.n	800c5b2 <_dtoa_r+0xc2>
 800c59a:	2301      	movs	r3, #1
 800c59c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c59e:	6013      	str	r3, [r2, #0]
 800c5a0:	4ba0      	ldr	r3, [pc, #640]	; (800c824 <_dtoa_r+0x334>)
 800c5a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c5a4:	9308      	str	r3, [sp, #32]
 800c5a6:	2a00      	cmp	r2, #0
 800c5a8:	d0e7      	beq.n	800c57a <_dtoa_r+0x8a>
 800c5aa:	4a9f      	ldr	r2, [pc, #636]	; (800c828 <_dtoa_r+0x338>)
 800c5ac:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c5ae:	600a      	str	r2, [r1, #0]
 800c5b0:	e7e3      	b.n	800c57a <_dtoa_r+0x8a>
 800c5b2:	ab18      	add	r3, sp, #96	; 0x60
 800c5b4:	9301      	str	r3, [sp, #4]
 800c5b6:	ab19      	add	r3, sp, #100	; 0x64
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	0032      	movs	r2, r6
 800c5bc:	003b      	movs	r3, r7
 800c5be:	9802      	ldr	r0, [sp, #8]
 800c5c0:	f001 f908 	bl	800d7d4 <__d2b>
 800c5c4:	0063      	lsls	r3, r4, #1
 800c5c6:	9003      	str	r0, [sp, #12]
 800c5c8:	0d5b      	lsrs	r3, r3, #21
 800c5ca:	d074      	beq.n	800c6b6 <_dtoa_r+0x1c6>
 800c5cc:	033a      	lsls	r2, r7, #12
 800c5ce:	4c97      	ldr	r4, [pc, #604]	; (800c82c <_dtoa_r+0x33c>)
 800c5d0:	0b12      	lsrs	r2, r2, #12
 800c5d2:	4314      	orrs	r4, r2
 800c5d4:	0021      	movs	r1, r4
 800c5d6:	4a96      	ldr	r2, [pc, #600]	; (800c830 <_dtoa_r+0x340>)
 800c5d8:	0030      	movs	r0, r6
 800c5da:	9516      	str	r5, [sp, #88]	; 0x58
 800c5dc:	189e      	adds	r6, r3, r2
 800c5de:	2200      	movs	r2, #0
 800c5e0:	4b94      	ldr	r3, [pc, #592]	; (800c834 <_dtoa_r+0x344>)
 800c5e2:	f7f5 f9ef 	bl	80019c4 <__aeabi_dsub>
 800c5e6:	4a94      	ldr	r2, [pc, #592]	; (800c838 <_dtoa_r+0x348>)
 800c5e8:	4b94      	ldr	r3, [pc, #592]	; (800c83c <_dtoa_r+0x34c>)
 800c5ea:	f7f4 ff79 	bl	80014e0 <__aeabi_dmul>
 800c5ee:	4a94      	ldr	r2, [pc, #592]	; (800c840 <_dtoa_r+0x350>)
 800c5f0:	4b94      	ldr	r3, [pc, #592]	; (800c844 <_dtoa_r+0x354>)
 800c5f2:	f7f4 f84f 	bl	8000694 <__aeabi_dadd>
 800c5f6:	0004      	movs	r4, r0
 800c5f8:	0030      	movs	r0, r6
 800c5fa:	000d      	movs	r5, r1
 800c5fc:	f7f5 fd7c 	bl	80020f8 <__aeabi_i2d>
 800c600:	4a91      	ldr	r2, [pc, #580]	; (800c848 <_dtoa_r+0x358>)
 800c602:	4b92      	ldr	r3, [pc, #584]	; (800c84c <_dtoa_r+0x35c>)
 800c604:	f7f4 ff6c 	bl	80014e0 <__aeabi_dmul>
 800c608:	0002      	movs	r2, r0
 800c60a:	000b      	movs	r3, r1
 800c60c:	0020      	movs	r0, r4
 800c60e:	0029      	movs	r1, r5
 800c610:	f7f4 f840 	bl	8000694 <__aeabi_dadd>
 800c614:	0004      	movs	r4, r0
 800c616:	000d      	movs	r5, r1
 800c618:	f7f5 fd38 	bl	800208c <__aeabi_d2iz>
 800c61c:	2200      	movs	r2, #0
 800c61e:	0007      	movs	r7, r0
 800c620:	2300      	movs	r3, #0
 800c622:	0020      	movs	r0, r4
 800c624:	0029      	movs	r1, r5
 800c626:	f7f3 ff0d 	bl	8000444 <__aeabi_dcmplt>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d009      	beq.n	800c642 <_dtoa_r+0x152>
 800c62e:	0038      	movs	r0, r7
 800c630:	f7f5 fd62 	bl	80020f8 <__aeabi_i2d>
 800c634:	002b      	movs	r3, r5
 800c636:	0022      	movs	r2, r4
 800c638:	f7f3 fefe 	bl	8000438 <__aeabi_dcmpeq>
 800c63c:	4243      	negs	r3, r0
 800c63e:	4158      	adcs	r0, r3
 800c640:	1a3f      	subs	r7, r7, r0
 800c642:	2301      	movs	r3, #1
 800c644:	9314      	str	r3, [sp, #80]	; 0x50
 800c646:	2f16      	cmp	r7, #22
 800c648:	d80d      	bhi.n	800c666 <_dtoa_r+0x176>
 800c64a:	4981      	ldr	r1, [pc, #516]	; (800c850 <_dtoa_r+0x360>)
 800c64c:	00fb      	lsls	r3, r7, #3
 800c64e:	18c9      	adds	r1, r1, r3
 800c650:	6808      	ldr	r0, [r1, #0]
 800c652:	6849      	ldr	r1, [r1, #4]
 800c654:	9a06      	ldr	r2, [sp, #24]
 800c656:	9b07      	ldr	r3, [sp, #28]
 800c658:	f7f3 ff08 	bl	800046c <__aeabi_dcmpgt>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d046      	beq.n	800c6ee <_dtoa_r+0x1fe>
 800c660:	2300      	movs	r3, #0
 800c662:	3f01      	subs	r7, #1
 800c664:	9314      	str	r3, [sp, #80]	; 0x50
 800c666:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c668:	1b9e      	subs	r6, r3, r6
 800c66a:	2300      	movs	r3, #0
 800c66c:	930a      	str	r3, [sp, #40]	; 0x28
 800c66e:	0033      	movs	r3, r6
 800c670:	3b01      	subs	r3, #1
 800c672:	930b      	str	r3, [sp, #44]	; 0x2c
 800c674:	d504      	bpl.n	800c680 <_dtoa_r+0x190>
 800c676:	2301      	movs	r3, #1
 800c678:	1b9b      	subs	r3, r3, r6
 800c67a:	930a      	str	r3, [sp, #40]	; 0x28
 800c67c:	2300      	movs	r3, #0
 800c67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c680:	2f00      	cmp	r7, #0
 800c682:	db36      	blt.n	800c6f2 <_dtoa_r+0x202>
 800c684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c686:	9711      	str	r7, [sp, #68]	; 0x44
 800c688:	19db      	adds	r3, r3, r7
 800c68a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c68c:	2300      	movs	r3, #0
 800c68e:	9304      	str	r3, [sp, #16]
 800c690:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c692:	2401      	movs	r4, #1
 800c694:	2b09      	cmp	r3, #9
 800c696:	d900      	bls.n	800c69a <_dtoa_r+0x1aa>
 800c698:	e084      	b.n	800c7a4 <_dtoa_r+0x2b4>
 800c69a:	2b05      	cmp	r3, #5
 800c69c:	dd02      	ble.n	800c6a4 <_dtoa_r+0x1b4>
 800c69e:	2400      	movs	r4, #0
 800c6a0:	3b04      	subs	r3, #4
 800c6a2:	9320      	str	r3, [sp, #128]	; 0x80
 800c6a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c6a6:	1e98      	subs	r0, r3, #2
 800c6a8:	2803      	cmp	r0, #3
 800c6aa:	d900      	bls.n	800c6ae <_dtoa_r+0x1be>
 800c6ac:	e084      	b.n	800c7b8 <_dtoa_r+0x2c8>
 800c6ae:	f7f3 fd33 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c6b2:	7775      	.short	0x7775
 800c6b4:	6a28      	.short	0x6a28
 800c6b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c6b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c6ba:	189e      	adds	r6, r3, r2
 800c6bc:	4b65      	ldr	r3, [pc, #404]	; (800c854 <_dtoa_r+0x364>)
 800c6be:	18f2      	adds	r2, r6, r3
 800c6c0:	2a20      	cmp	r2, #32
 800c6c2:	dd0f      	ble.n	800c6e4 <_dtoa_r+0x1f4>
 800c6c4:	2340      	movs	r3, #64	; 0x40
 800c6c6:	1a9b      	subs	r3, r3, r2
 800c6c8:	409c      	lsls	r4, r3
 800c6ca:	4b63      	ldr	r3, [pc, #396]	; (800c858 <_dtoa_r+0x368>)
 800c6cc:	9806      	ldr	r0, [sp, #24]
 800c6ce:	18f3      	adds	r3, r6, r3
 800c6d0:	40d8      	lsrs	r0, r3
 800c6d2:	4320      	orrs	r0, r4
 800c6d4:	f7f5 fd4a 	bl	800216c <__aeabi_ui2d>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4c60      	ldr	r4, [pc, #384]	; (800c85c <_dtoa_r+0x36c>)
 800c6dc:	3e01      	subs	r6, #1
 800c6de:	1909      	adds	r1, r1, r4
 800c6e0:	9316      	str	r3, [sp, #88]	; 0x58
 800c6e2:	e77c      	b.n	800c5de <_dtoa_r+0xee>
 800c6e4:	2320      	movs	r3, #32
 800c6e6:	9806      	ldr	r0, [sp, #24]
 800c6e8:	1a9b      	subs	r3, r3, r2
 800c6ea:	4098      	lsls	r0, r3
 800c6ec:	e7f2      	b.n	800c6d4 <_dtoa_r+0x1e4>
 800c6ee:	9014      	str	r0, [sp, #80]	; 0x50
 800c6f0:	e7b9      	b.n	800c666 <_dtoa_r+0x176>
 800c6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f4:	1bdb      	subs	r3, r3, r7
 800c6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6f8:	427b      	negs	r3, r7
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9311      	str	r3, [sp, #68]	; 0x44
 800c700:	e7c6      	b.n	800c690 <_dtoa_r+0x1a0>
 800c702:	2301      	movs	r3, #1
 800c704:	930d      	str	r3, [sp, #52]	; 0x34
 800c706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c708:	2b00      	cmp	r3, #0
 800c70a:	dd59      	ble.n	800c7c0 <_dtoa_r+0x2d0>
 800c70c:	930c      	str	r3, [sp, #48]	; 0x30
 800c70e:	9309      	str	r3, [sp, #36]	; 0x24
 800c710:	9a02      	ldr	r2, [sp, #8]
 800c712:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800c714:	2200      	movs	r2, #0
 800c716:	606a      	str	r2, [r5, #4]
 800c718:	3204      	adds	r2, #4
 800c71a:	0010      	movs	r0, r2
 800c71c:	3014      	adds	r0, #20
 800c71e:	6869      	ldr	r1, [r5, #4]
 800c720:	4298      	cmp	r0, r3
 800c722:	d952      	bls.n	800c7ca <_dtoa_r+0x2da>
 800c724:	9802      	ldr	r0, [sp, #8]
 800c726:	f000 fdc3 	bl	800d2b0 <_Balloc>
 800c72a:	9b02      	ldr	r3, [sp, #8]
 800c72c:	6028      	str	r0, [r5, #0]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	9308      	str	r3, [sp, #32]
 800c734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c736:	2b0e      	cmp	r3, #14
 800c738:	d900      	bls.n	800c73c <_dtoa_r+0x24c>
 800c73a:	e10a      	b.n	800c952 <_dtoa_r+0x462>
 800c73c:	2c00      	cmp	r4, #0
 800c73e:	d100      	bne.n	800c742 <_dtoa_r+0x252>
 800c740:	e107      	b.n	800c952 <_dtoa_r+0x462>
 800c742:	9b06      	ldr	r3, [sp, #24]
 800c744:	9c07      	ldr	r4, [sp, #28]
 800c746:	9312      	str	r3, [sp, #72]	; 0x48
 800c748:	9413      	str	r4, [sp, #76]	; 0x4c
 800c74a:	2f00      	cmp	r7, #0
 800c74c:	dc00      	bgt.n	800c750 <_dtoa_r+0x260>
 800c74e:	e089      	b.n	800c864 <_dtoa_r+0x374>
 800c750:	210f      	movs	r1, #15
 800c752:	003a      	movs	r2, r7
 800c754:	4b3e      	ldr	r3, [pc, #248]	; (800c850 <_dtoa_r+0x360>)
 800c756:	400a      	ands	r2, r1
 800c758:	00d2      	lsls	r2, r2, #3
 800c75a:	189b      	adds	r3, r3, r2
 800c75c:	681d      	ldr	r5, [r3, #0]
 800c75e:	685e      	ldr	r6, [r3, #4]
 800c760:	2302      	movs	r3, #2
 800c762:	113c      	asrs	r4, r7, #4
 800c764:	930e      	str	r3, [sp, #56]	; 0x38
 800c766:	06e3      	lsls	r3, r4, #27
 800c768:	d50b      	bpl.n	800c782 <_dtoa_r+0x292>
 800c76a:	4b3d      	ldr	r3, [pc, #244]	; (800c860 <_dtoa_r+0x370>)
 800c76c:	400c      	ands	r4, r1
 800c76e:	6a1a      	ldr	r2, [r3, #32]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c774:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c776:	f7f4 faa9 	bl	8000ccc <__aeabi_ddiv>
 800c77a:	2303      	movs	r3, #3
 800c77c:	9006      	str	r0, [sp, #24]
 800c77e:	9107      	str	r1, [sp, #28]
 800c780:	930e      	str	r3, [sp, #56]	; 0x38
 800c782:	2300      	movs	r3, #0
 800c784:	e03a      	b.n	800c7fc <_dtoa_r+0x30c>
 800c786:	2301      	movs	r3, #1
 800c788:	930d      	str	r3, [sp, #52]	; 0x34
 800c78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	930c      	str	r3, [sp, #48]	; 0x30
 800c790:	3301      	adds	r3, #1
 800c792:	9309      	str	r3, [sp, #36]	; 0x24
 800c794:	2b00      	cmp	r3, #0
 800c796:	dcbb      	bgt.n	800c710 <_dtoa_r+0x220>
 800c798:	2301      	movs	r3, #1
 800c79a:	e7b9      	b.n	800c710 <_dtoa_r+0x220>
 800c79c:	2300      	movs	r3, #0
 800c79e:	e7b1      	b.n	800c704 <_dtoa_r+0x214>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	e7f1      	b.n	800c788 <_dtoa_r+0x298>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	940d      	str	r4, [sp, #52]	; 0x34
 800c7a8:	9320      	str	r3, [sp, #128]	; 0x80
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b2:	3313      	adds	r3, #19
 800c7b4:	9221      	str	r2, [sp, #132]	; 0x84
 800c7b6:	e7ab      	b.n	800c710 <_dtoa_r+0x220>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c7bc:	3b02      	subs	r3, #2
 800c7be:	e7f5      	b.n	800c7ac <_dtoa_r+0x2bc>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	930c      	str	r3, [sp, #48]	; 0x30
 800c7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c6:	001a      	movs	r2, r3
 800c7c8:	e7f4      	b.n	800c7b4 <_dtoa_r+0x2c4>
 800c7ca:	3101      	adds	r1, #1
 800c7cc:	6069      	str	r1, [r5, #4]
 800c7ce:	0052      	lsls	r2, r2, #1
 800c7d0:	e7a3      	b.n	800c71a <_dtoa_r+0x22a>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	421c      	tst	r4, r3
 800c7d6:	d00e      	beq.n	800c7f6 <_dtoa_r+0x306>
 800c7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7da:	4a21      	ldr	r2, [pc, #132]	; (800c860 <_dtoa_r+0x370>)
 800c7dc:	3301      	adds	r3, #1
 800c7de:	930e      	str	r3, [sp, #56]	; 0x38
 800c7e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7e2:	0028      	movs	r0, r5
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	189b      	adds	r3, r3, r2
 800c7e8:	0031      	movs	r1, r6
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	f7f4 fe77 	bl	80014e0 <__aeabi_dmul>
 800c7f2:	0005      	movs	r5, r0
 800c7f4:	000e      	movs	r6, r1
 800c7f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7f8:	1064      	asrs	r4, r4, #1
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	9310      	str	r3, [sp, #64]	; 0x40
 800c7fe:	2c00      	cmp	r4, #0
 800c800:	d1e7      	bne.n	800c7d2 <_dtoa_r+0x2e2>
 800c802:	9806      	ldr	r0, [sp, #24]
 800c804:	9907      	ldr	r1, [sp, #28]
 800c806:	002a      	movs	r2, r5
 800c808:	0033      	movs	r3, r6
 800c80a:	f7f4 fa5f 	bl	8000ccc <__aeabi_ddiv>
 800c80e:	9006      	str	r0, [sp, #24]
 800c810:	9107      	str	r1, [sp, #28]
 800c812:	e042      	b.n	800c89a <_dtoa_r+0x3aa>
 800c814:	7ff00000 	.word	0x7ff00000
 800c818:	0000270f 	.word	0x0000270f
 800c81c:	0800fb1d 	.word	0x0800fb1d
 800c820:	0800fb20 	.word	0x0800fb20
 800c824:	0800faf0 	.word	0x0800faf0
 800c828:	0800faf1 	.word	0x0800faf1
 800c82c:	3ff00000 	.word	0x3ff00000
 800c830:	fffffc01 	.word	0xfffffc01
 800c834:	3ff80000 	.word	0x3ff80000
 800c838:	636f4361 	.word	0x636f4361
 800c83c:	3fd287a7 	.word	0x3fd287a7
 800c840:	8b60c8b3 	.word	0x8b60c8b3
 800c844:	3fc68a28 	.word	0x3fc68a28
 800c848:	509f79fb 	.word	0x509f79fb
 800c84c:	3fd34413 	.word	0x3fd34413
 800c850:	0800fbb0 	.word	0x0800fbb0
 800c854:	00000432 	.word	0x00000432
 800c858:	00000412 	.word	0x00000412
 800c85c:	fe100000 	.word	0xfe100000
 800c860:	0800fb88 	.word	0x0800fb88
 800c864:	2302      	movs	r3, #2
 800c866:	930e      	str	r3, [sp, #56]	; 0x38
 800c868:	2f00      	cmp	r7, #0
 800c86a:	d016      	beq.n	800c89a <_dtoa_r+0x3aa>
 800c86c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c86e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c870:	427c      	negs	r4, r7
 800c872:	330d      	adds	r3, #13
 800c874:	4023      	ands	r3, r4
 800c876:	4ace      	ldr	r2, [pc, #824]	; (800cbb0 <_dtoa_r+0x6c0>)
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	18d3      	adds	r3, r2, r3
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	f7f4 fe2e 	bl	80014e0 <__aeabi_dmul>
 800c884:	2300      	movs	r3, #0
 800c886:	2601      	movs	r6, #1
 800c888:	001d      	movs	r5, r3
 800c88a:	9006      	str	r0, [sp, #24]
 800c88c:	9107      	str	r1, [sp, #28]
 800c88e:	1124      	asrs	r4, r4, #4
 800c890:	2c00      	cmp	r4, #0
 800c892:	d000      	beq.n	800c896 <_dtoa_r+0x3a6>
 800c894:	e08c      	b.n	800c9b0 <_dtoa_r+0x4c0>
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1b9      	bne.n	800c80e <_dtoa_r+0x31e>
 800c89a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d100      	bne.n	800c8a2 <_dtoa_r+0x3b2>
 800c8a0:	e096      	b.n	800c9d0 <_dtoa_r+0x4e0>
 800c8a2:	9c06      	ldr	r4, [sp, #24]
 800c8a4:	9d07      	ldr	r5, [sp, #28]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4bc2      	ldr	r3, [pc, #776]	; (800cbb4 <_dtoa_r+0x6c4>)
 800c8aa:	0020      	movs	r0, r4
 800c8ac:	0029      	movs	r1, r5
 800c8ae:	f7f3 fdc9 	bl	8000444 <__aeabi_dcmplt>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d100      	bne.n	800c8b8 <_dtoa_r+0x3c8>
 800c8b6:	e08b      	b.n	800c9d0 <_dtoa_r+0x4e0>
 800c8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d100      	bne.n	800c8c0 <_dtoa_r+0x3d0>
 800c8be:	e087      	b.n	800c9d0 <_dtoa_r+0x4e0>
 800c8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	dd41      	ble.n	800c94a <_dtoa_r+0x45a>
 800c8c6:	4bbc      	ldr	r3, [pc, #752]	; (800cbb8 <_dtoa_r+0x6c8>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	0020      	movs	r0, r4
 800c8cc:	0029      	movs	r1, r5
 800c8ce:	f7f4 fe07 	bl	80014e0 <__aeabi_dmul>
 800c8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8d4:	9006      	str	r0, [sp, #24]
 800c8d6:	9107      	str	r1, [sp, #28]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	930e      	str	r3, [sp, #56]	; 0x38
 800c8dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8de:	1e7e      	subs	r6, r7, #1
 800c8e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c8e2:	9310      	str	r3, [sp, #64]	; 0x40
 800c8e4:	f7f5 fc08 	bl	80020f8 <__aeabi_i2d>
 800c8e8:	9a06      	ldr	r2, [sp, #24]
 800c8ea:	9b07      	ldr	r3, [sp, #28]
 800c8ec:	f7f4 fdf8 	bl	80014e0 <__aeabi_dmul>
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	4bb2      	ldr	r3, [pc, #712]	; (800cbbc <_dtoa_r+0x6cc>)
 800c8f4:	f7f3 fece 	bl	8000694 <__aeabi_dadd>
 800c8f8:	4ab1      	ldr	r2, [pc, #708]	; (800cbc0 <_dtoa_r+0x6d0>)
 800c8fa:	900e      	str	r0, [sp, #56]	; 0x38
 800c8fc:	910f      	str	r1, [sp, #60]	; 0x3c
 800c8fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c900:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c902:	4694      	mov	ip, r2
 800c904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c906:	4463      	add	r3, ip
 800c908:	9315      	str	r3, [sp, #84]	; 0x54
 800c90a:	001d      	movs	r5, r3
 800c90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d161      	bne.n	800c9d6 <_dtoa_r+0x4e6>
 800c912:	9806      	ldr	r0, [sp, #24]
 800c914:	9907      	ldr	r1, [sp, #28]
 800c916:	2200      	movs	r2, #0
 800c918:	4baa      	ldr	r3, [pc, #680]	; (800cbc4 <_dtoa_r+0x6d4>)
 800c91a:	f7f5 f853 	bl	80019c4 <__aeabi_dsub>
 800c91e:	0022      	movs	r2, r4
 800c920:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c922:	9006      	str	r0, [sp, #24]
 800c924:	9107      	str	r1, [sp, #28]
 800c926:	f7f3 fda1 	bl	800046c <__aeabi_dcmpgt>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d000      	beq.n	800c930 <_dtoa_r+0x440>
 800c92e:	e2a8      	b.n	800ce82 <_dtoa_r+0x992>
 800c930:	48a5      	ldr	r0, [pc, #660]	; (800cbc8 <_dtoa_r+0x6d8>)
 800c932:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c934:	4684      	mov	ip, r0
 800c936:	4461      	add	r1, ip
 800c938:	000b      	movs	r3, r1
 800c93a:	9806      	ldr	r0, [sp, #24]
 800c93c:	9907      	ldr	r1, [sp, #28]
 800c93e:	0022      	movs	r2, r4
 800c940:	f7f3 fd80 	bl	8000444 <__aeabi_dcmplt>
 800c944:	2800      	cmp	r0, #0
 800c946:	d000      	beq.n	800c94a <_dtoa_r+0x45a>
 800c948:	e295      	b.n	800ce76 <_dtoa_r+0x986>
 800c94a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c94c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c94e:	9306      	str	r3, [sp, #24]
 800c950:	9407      	str	r4, [sp, #28]
 800c952:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c954:	2b00      	cmp	r3, #0
 800c956:	da00      	bge.n	800c95a <_dtoa_r+0x46a>
 800c958:	e15c      	b.n	800cc14 <_dtoa_r+0x724>
 800c95a:	2f0e      	cmp	r7, #14
 800c95c:	dd00      	ble.n	800c960 <_dtoa_r+0x470>
 800c95e:	e159      	b.n	800cc14 <_dtoa_r+0x724>
 800c960:	4b93      	ldr	r3, [pc, #588]	; (800cbb0 <_dtoa_r+0x6c0>)
 800c962:	00fa      	lsls	r2, r7, #3
 800c964:	189b      	adds	r3, r3, r2
 800c966:	685c      	ldr	r4, [r3, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	9304      	str	r3, [sp, #16]
 800c96c:	9405      	str	r4, [sp, #20]
 800c96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c970:	2b00      	cmp	r3, #0
 800c972:	db00      	blt.n	800c976 <_dtoa_r+0x486>
 800c974:	e0d8      	b.n	800cb28 <_dtoa_r+0x638>
 800c976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dd00      	ble.n	800c97e <_dtoa_r+0x48e>
 800c97c:	e0d4      	b.n	800cb28 <_dtoa_r+0x638>
 800c97e:	d000      	beq.n	800c982 <_dtoa_r+0x492>
 800c980:	e27d      	b.n	800ce7e <_dtoa_r+0x98e>
 800c982:	9804      	ldr	r0, [sp, #16]
 800c984:	9905      	ldr	r1, [sp, #20]
 800c986:	2200      	movs	r2, #0
 800c988:	4b8e      	ldr	r3, [pc, #568]	; (800cbc4 <_dtoa_r+0x6d4>)
 800c98a:	f7f4 fda9 	bl	80014e0 <__aeabi_dmul>
 800c98e:	9a06      	ldr	r2, [sp, #24]
 800c990:	9b07      	ldr	r3, [sp, #28]
 800c992:	f7f3 fd75 	bl	8000480 <__aeabi_dcmpge>
 800c996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c998:	9304      	str	r3, [sp, #16]
 800c99a:	001e      	movs	r6, r3
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d000      	beq.n	800c9a2 <_dtoa_r+0x4b2>
 800c9a0:	e24f      	b.n	800ce42 <_dtoa_r+0x952>
 800c9a2:	9b08      	ldr	r3, [sp, #32]
 800c9a4:	9a08      	ldr	r2, [sp, #32]
 800c9a6:	1c5d      	adds	r5, r3, #1
 800c9a8:	2331      	movs	r3, #49	; 0x31
 800c9aa:	3701      	adds	r7, #1
 800c9ac:	7013      	strb	r3, [r2, #0]
 800c9ae:	e24b      	b.n	800ce48 <_dtoa_r+0x958>
 800c9b0:	4234      	tst	r4, r6
 800c9b2:	d00a      	beq.n	800c9ca <_dtoa_r+0x4da>
 800c9b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9b6:	4a85      	ldr	r2, [pc, #532]	; (800cbcc <_dtoa_r+0x6dc>)
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	930e      	str	r3, [sp, #56]	; 0x38
 800c9bc:	00eb      	lsls	r3, r5, #3
 800c9be:	189b      	adds	r3, r3, r2
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	f7f4 fd8c 	bl	80014e0 <__aeabi_dmul>
 800c9c8:	0033      	movs	r3, r6
 800c9ca:	1064      	asrs	r4, r4, #1
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	e75f      	b.n	800c890 <_dtoa_r+0x3a0>
 800c9d0:	003e      	movs	r6, r7
 800c9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d4:	e784      	b.n	800c8e0 <_dtoa_r+0x3f0>
 800c9d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9da:	1e5a      	subs	r2, r3, #1
 800c9dc:	4b74      	ldr	r3, [pc, #464]	; (800cbb0 <_dtoa_r+0x6c0>)
 800c9de:	00d2      	lsls	r2, r2, #3
 800c9e0:	189b      	adds	r3, r3, r2
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	2900      	cmp	r1, #0
 800c9e8:	d049      	beq.n	800ca7e <_dtoa_r+0x58e>
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	4978      	ldr	r1, [pc, #480]	; (800cbd0 <_dtoa_r+0x6e0>)
 800c9ee:	f7f4 f96d 	bl	8000ccc <__aeabi_ddiv>
 800c9f2:	002b      	movs	r3, r5
 800c9f4:	0022      	movs	r2, r4
 800c9f6:	f7f4 ffe5 	bl	80019c4 <__aeabi_dsub>
 800c9fa:	9b08      	ldr	r3, [sp, #32]
 800c9fc:	900e      	str	r0, [sp, #56]	; 0x38
 800c9fe:	910f      	str	r1, [sp, #60]	; 0x3c
 800ca00:	9315      	str	r3, [sp, #84]	; 0x54
 800ca02:	9806      	ldr	r0, [sp, #24]
 800ca04:	9907      	ldr	r1, [sp, #28]
 800ca06:	f7f5 fb41 	bl	800208c <__aeabi_d2iz>
 800ca0a:	0004      	movs	r4, r0
 800ca0c:	f7f5 fb74 	bl	80020f8 <__aeabi_i2d>
 800ca10:	0002      	movs	r2, r0
 800ca12:	000b      	movs	r3, r1
 800ca14:	9806      	ldr	r0, [sp, #24]
 800ca16:	9907      	ldr	r1, [sp, #28]
 800ca18:	f7f4 ffd4 	bl	80019c4 <__aeabi_dsub>
 800ca1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca1e:	3430      	adds	r4, #48	; 0x30
 800ca20:	1c5d      	adds	r5, r3, #1
 800ca22:	701c      	strb	r4, [r3, #0]
 800ca24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca28:	9006      	str	r0, [sp, #24]
 800ca2a:	9107      	str	r1, [sp, #28]
 800ca2c:	f7f3 fd0a 	bl	8000444 <__aeabi_dcmplt>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d16c      	bne.n	800cb0e <_dtoa_r+0x61e>
 800ca34:	9a06      	ldr	r2, [sp, #24]
 800ca36:	9b07      	ldr	r3, [sp, #28]
 800ca38:	2000      	movs	r0, #0
 800ca3a:	495e      	ldr	r1, [pc, #376]	; (800cbb4 <_dtoa_r+0x6c4>)
 800ca3c:	f7f4 ffc2 	bl	80019c4 <__aeabi_dsub>
 800ca40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca44:	f7f3 fcfe 	bl	8000444 <__aeabi_dcmplt>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d000      	beq.n	800ca4e <_dtoa_r+0x55e>
 800ca4c:	e0c3      	b.n	800cbd6 <_dtoa_r+0x6e6>
 800ca4e:	9b08      	ldr	r3, [sp, #32]
 800ca50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca52:	1aeb      	subs	r3, r5, r3
 800ca54:	429a      	cmp	r2, r3
 800ca56:	dc00      	bgt.n	800ca5a <_dtoa_r+0x56a>
 800ca58:	e777      	b.n	800c94a <_dtoa_r+0x45a>
 800ca5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ca5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4b55      	ldr	r3, [pc, #340]	; (800cbb8 <_dtoa_r+0x6c8>)
 800ca62:	f7f4 fd3d 	bl	80014e0 <__aeabi_dmul>
 800ca66:	2200      	movs	r2, #0
 800ca68:	900e      	str	r0, [sp, #56]	; 0x38
 800ca6a:	910f      	str	r1, [sp, #60]	; 0x3c
 800ca6c:	9806      	ldr	r0, [sp, #24]
 800ca6e:	9907      	ldr	r1, [sp, #28]
 800ca70:	4b51      	ldr	r3, [pc, #324]	; (800cbb8 <_dtoa_r+0x6c8>)
 800ca72:	f7f4 fd35 	bl	80014e0 <__aeabi_dmul>
 800ca76:	9515      	str	r5, [sp, #84]	; 0x54
 800ca78:	9006      	str	r0, [sp, #24]
 800ca7a:	9107      	str	r1, [sp, #28]
 800ca7c:	e7c1      	b.n	800ca02 <_dtoa_r+0x512>
 800ca7e:	0020      	movs	r0, r4
 800ca80:	0029      	movs	r1, r5
 800ca82:	f7f4 fd2d 	bl	80014e0 <__aeabi_dmul>
 800ca86:	9c08      	ldr	r4, [sp, #32]
 800ca88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca8a:	0023      	movs	r3, r4
 800ca8c:	4694      	mov	ip, r2
 800ca8e:	900e      	str	r0, [sp, #56]	; 0x38
 800ca90:	910f      	str	r1, [sp, #60]	; 0x3c
 800ca92:	4463      	add	r3, ip
 800ca94:	9315      	str	r3, [sp, #84]	; 0x54
 800ca96:	9806      	ldr	r0, [sp, #24]
 800ca98:	9907      	ldr	r1, [sp, #28]
 800ca9a:	f7f5 faf7 	bl	800208c <__aeabi_d2iz>
 800ca9e:	0005      	movs	r5, r0
 800caa0:	f7f5 fb2a 	bl	80020f8 <__aeabi_i2d>
 800caa4:	000b      	movs	r3, r1
 800caa6:	0002      	movs	r2, r0
 800caa8:	9806      	ldr	r0, [sp, #24]
 800caaa:	9907      	ldr	r1, [sp, #28]
 800caac:	f7f4 ff8a 	bl	80019c4 <__aeabi_dsub>
 800cab0:	3530      	adds	r5, #48	; 0x30
 800cab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cab4:	7025      	strb	r5, [r4, #0]
 800cab6:	3401      	adds	r4, #1
 800cab8:	9006      	str	r0, [sp, #24]
 800caba:	9107      	str	r1, [sp, #28]
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	d12a      	bne.n	800cb16 <_dtoa_r+0x626>
 800cac0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cac2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cac4:	9a08      	ldr	r2, [sp, #32]
 800cac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cac8:	4694      	mov	ip, r2
 800caca:	4463      	add	r3, ip
 800cacc:	2200      	movs	r2, #0
 800cace:	001d      	movs	r5, r3
 800cad0:	4b3f      	ldr	r3, [pc, #252]	; (800cbd0 <_dtoa_r+0x6e0>)
 800cad2:	f7f3 fddf 	bl	8000694 <__aeabi_dadd>
 800cad6:	0002      	movs	r2, r0
 800cad8:	000b      	movs	r3, r1
 800cada:	9806      	ldr	r0, [sp, #24]
 800cadc:	9907      	ldr	r1, [sp, #28]
 800cade:	f7f3 fcc5 	bl	800046c <__aeabi_dcmpgt>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d000      	beq.n	800cae8 <_dtoa_r+0x5f8>
 800cae6:	e076      	b.n	800cbd6 <_dtoa_r+0x6e6>
 800cae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caec:	2000      	movs	r0, #0
 800caee:	4938      	ldr	r1, [pc, #224]	; (800cbd0 <_dtoa_r+0x6e0>)
 800caf0:	f7f4 ff68 	bl	80019c4 <__aeabi_dsub>
 800caf4:	0002      	movs	r2, r0
 800caf6:	000b      	movs	r3, r1
 800caf8:	9806      	ldr	r0, [sp, #24]
 800cafa:	9907      	ldr	r1, [sp, #28]
 800cafc:	f7f3 fca2 	bl	8000444 <__aeabi_dcmplt>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d100      	bne.n	800cb06 <_dtoa_r+0x616>
 800cb04:	e721      	b.n	800c94a <_dtoa_r+0x45a>
 800cb06:	1e6b      	subs	r3, r5, #1
 800cb08:	781a      	ldrb	r2, [r3, #0]
 800cb0a:	2a30      	cmp	r2, #48	; 0x30
 800cb0c:	d001      	beq.n	800cb12 <_dtoa_r+0x622>
 800cb0e:	0037      	movs	r7, r6
 800cb10:	e03f      	b.n	800cb92 <_dtoa_r+0x6a2>
 800cb12:	001d      	movs	r5, r3
 800cb14:	e7f7      	b.n	800cb06 <_dtoa_r+0x616>
 800cb16:	9806      	ldr	r0, [sp, #24]
 800cb18:	9907      	ldr	r1, [sp, #28]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	4b26      	ldr	r3, [pc, #152]	; (800cbb8 <_dtoa_r+0x6c8>)
 800cb1e:	f7f4 fcdf 	bl	80014e0 <__aeabi_dmul>
 800cb22:	9006      	str	r0, [sp, #24]
 800cb24:	9107      	str	r1, [sp, #28]
 800cb26:	e7b6      	b.n	800ca96 <_dtoa_r+0x5a6>
 800cb28:	9e08      	ldr	r6, [sp, #32]
 800cb2a:	9a04      	ldr	r2, [sp, #16]
 800cb2c:	9b05      	ldr	r3, [sp, #20]
 800cb2e:	9806      	ldr	r0, [sp, #24]
 800cb30:	9907      	ldr	r1, [sp, #28]
 800cb32:	f7f4 f8cb 	bl	8000ccc <__aeabi_ddiv>
 800cb36:	f7f5 faa9 	bl	800208c <__aeabi_d2iz>
 800cb3a:	0004      	movs	r4, r0
 800cb3c:	f7f5 fadc 	bl	80020f8 <__aeabi_i2d>
 800cb40:	9a04      	ldr	r2, [sp, #16]
 800cb42:	9b05      	ldr	r3, [sp, #20]
 800cb44:	f7f4 fccc 	bl	80014e0 <__aeabi_dmul>
 800cb48:	0002      	movs	r2, r0
 800cb4a:	000b      	movs	r3, r1
 800cb4c:	9806      	ldr	r0, [sp, #24]
 800cb4e:	9907      	ldr	r1, [sp, #28]
 800cb50:	f7f4 ff38 	bl	80019c4 <__aeabi_dsub>
 800cb54:	0023      	movs	r3, r4
 800cb56:	3330      	adds	r3, #48	; 0x30
 800cb58:	7033      	strb	r3, [r6, #0]
 800cb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb5c:	9b08      	ldr	r3, [sp, #32]
 800cb5e:	1c75      	adds	r5, r6, #1
 800cb60:	1aeb      	subs	r3, r5, r3
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d148      	bne.n	800cbf8 <_dtoa_r+0x708>
 800cb66:	0002      	movs	r2, r0
 800cb68:	000b      	movs	r3, r1
 800cb6a:	f7f3 fd93 	bl	8000694 <__aeabi_dadd>
 800cb6e:	9a04      	ldr	r2, [sp, #16]
 800cb70:	9b05      	ldr	r3, [sp, #20]
 800cb72:	9006      	str	r0, [sp, #24]
 800cb74:	9107      	str	r1, [sp, #28]
 800cb76:	f7f3 fc79 	bl	800046c <__aeabi_dcmpgt>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d12a      	bne.n	800cbd4 <_dtoa_r+0x6e4>
 800cb7e:	9a04      	ldr	r2, [sp, #16]
 800cb80:	9b05      	ldr	r3, [sp, #20]
 800cb82:	9806      	ldr	r0, [sp, #24]
 800cb84:	9907      	ldr	r1, [sp, #28]
 800cb86:	f7f3 fc57 	bl	8000438 <__aeabi_dcmpeq>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d001      	beq.n	800cb92 <_dtoa_r+0x6a2>
 800cb8e:	07e3      	lsls	r3, r4, #31
 800cb90:	d420      	bmi.n	800cbd4 <_dtoa_r+0x6e4>
 800cb92:	9903      	ldr	r1, [sp, #12]
 800cb94:	9802      	ldr	r0, [sp, #8]
 800cb96:	f000 fbc3 	bl	800d320 <_Bfree>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	702b      	strb	r3, [r5, #0]
 800cb9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cba0:	3701      	adds	r7, #1
 800cba2:	601f      	str	r7, [r3, #0]
 800cba4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d100      	bne.n	800cbac <_dtoa_r+0x6bc>
 800cbaa:	e4e6      	b.n	800c57a <_dtoa_r+0x8a>
 800cbac:	601d      	str	r5, [r3, #0]
 800cbae:	e4e4      	b.n	800c57a <_dtoa_r+0x8a>
 800cbb0:	0800fbb0 	.word	0x0800fbb0
 800cbb4:	3ff00000 	.word	0x3ff00000
 800cbb8:	40240000 	.word	0x40240000
 800cbbc:	401c0000 	.word	0x401c0000
 800cbc0:	fcc00000 	.word	0xfcc00000
 800cbc4:	40140000 	.word	0x40140000
 800cbc8:	7cc00000 	.word	0x7cc00000
 800cbcc:	0800fb88 	.word	0x0800fb88
 800cbd0:	3fe00000 	.word	0x3fe00000
 800cbd4:	003e      	movs	r6, r7
 800cbd6:	1e6b      	subs	r3, r5, #1
 800cbd8:	781a      	ldrb	r2, [r3, #0]
 800cbda:	2a39      	cmp	r2, #57	; 0x39
 800cbdc:	d106      	bne.n	800cbec <_dtoa_r+0x6fc>
 800cbde:	9a08      	ldr	r2, [sp, #32]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d107      	bne.n	800cbf4 <_dtoa_r+0x704>
 800cbe4:	2330      	movs	r3, #48	; 0x30
 800cbe6:	7013      	strb	r3, [r2, #0]
 800cbe8:	0013      	movs	r3, r2
 800cbea:	3601      	adds	r6, #1
 800cbec:	781a      	ldrb	r2, [r3, #0]
 800cbee:	3201      	adds	r2, #1
 800cbf0:	701a      	strb	r2, [r3, #0]
 800cbf2:	e78c      	b.n	800cb0e <_dtoa_r+0x61e>
 800cbf4:	001d      	movs	r5, r3
 800cbf6:	e7ee      	b.n	800cbd6 <_dtoa_r+0x6e6>
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	4ba4      	ldr	r3, [pc, #656]	; (800ce8c <_dtoa_r+0x99c>)
 800cbfc:	f7f4 fc70 	bl	80014e0 <__aeabi_dmul>
 800cc00:	2200      	movs	r2, #0
 800cc02:	2300      	movs	r3, #0
 800cc04:	9006      	str	r0, [sp, #24]
 800cc06:	9107      	str	r1, [sp, #28]
 800cc08:	002e      	movs	r6, r5
 800cc0a:	f7f3 fc15 	bl	8000438 <__aeabi_dcmpeq>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d08b      	beq.n	800cb2a <_dtoa_r+0x63a>
 800cc12:	e7be      	b.n	800cb92 <_dtoa_r+0x6a2>
 800cc14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc16:	2a00      	cmp	r2, #0
 800cc18:	d100      	bne.n	800cc1c <_dtoa_r+0x72c>
 800cc1a:	e0da      	b.n	800cdd2 <_dtoa_r+0x8e2>
 800cc1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc1e:	2a01      	cmp	r2, #1
 800cc20:	dd00      	ble.n	800cc24 <_dtoa_r+0x734>
 800cc22:	e0bd      	b.n	800cda0 <_dtoa_r+0x8b0>
 800cc24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cc26:	2a00      	cmp	r2, #0
 800cc28:	d100      	bne.n	800cc2c <_dtoa_r+0x73c>
 800cc2a:	e0b5      	b.n	800cd98 <_dtoa_r+0x8a8>
 800cc2c:	4a98      	ldr	r2, [pc, #608]	; (800ce90 <_dtoa_r+0x9a0>)
 800cc2e:	189b      	adds	r3, r3, r2
 800cc30:	9d04      	ldr	r5, [sp, #16]
 800cc32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cc34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc36:	2101      	movs	r1, #1
 800cc38:	18d2      	adds	r2, r2, r3
 800cc3a:	920a      	str	r2, [sp, #40]	; 0x28
 800cc3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc3e:	9802      	ldr	r0, [sp, #8]
 800cc40:	18d3      	adds	r3, r2, r3
 800cc42:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc44:	f000 fc0c 	bl	800d460 <__i2b>
 800cc48:	0006      	movs	r6, r0
 800cc4a:	2c00      	cmp	r4, #0
 800cc4c:	dd0e      	ble.n	800cc6c <_dtoa_r+0x77c>
 800cc4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dd0b      	ble.n	800cc6c <_dtoa_r+0x77c>
 800cc54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc56:	0023      	movs	r3, r4
 800cc58:	4294      	cmp	r4, r2
 800cc5a:	dd00      	ble.n	800cc5e <_dtoa_r+0x76e>
 800cc5c:	0013      	movs	r3, r2
 800cc5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc60:	1ae4      	subs	r4, r4, r3
 800cc62:	1ad2      	subs	r2, r2, r3
 800cc64:	920a      	str	r2, [sp, #40]	; 0x28
 800cc66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d01f      	beq.n	800ccb2 <_dtoa_r+0x7c2>
 800cc72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d100      	bne.n	800cc7a <_dtoa_r+0x78a>
 800cc78:	e0af      	b.n	800cdda <_dtoa_r+0x8ea>
 800cc7a:	2d00      	cmp	r5, #0
 800cc7c:	d011      	beq.n	800cca2 <_dtoa_r+0x7b2>
 800cc7e:	0031      	movs	r1, r6
 800cc80:	002a      	movs	r2, r5
 800cc82:	9802      	ldr	r0, [sp, #8]
 800cc84:	f000 fc84 	bl	800d590 <__pow5mult>
 800cc88:	9a03      	ldr	r2, [sp, #12]
 800cc8a:	0001      	movs	r1, r0
 800cc8c:	0006      	movs	r6, r0
 800cc8e:	9802      	ldr	r0, [sp, #8]
 800cc90:	f000 fbef 	bl	800d472 <__multiply>
 800cc94:	9903      	ldr	r1, [sp, #12]
 800cc96:	9010      	str	r0, [sp, #64]	; 0x40
 800cc98:	9802      	ldr	r0, [sp, #8]
 800cc9a:	f000 fb41 	bl	800d320 <_Bfree>
 800cc9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cca0:	9303      	str	r3, [sp, #12]
 800cca2:	9b04      	ldr	r3, [sp, #16]
 800cca4:	1b5a      	subs	r2, r3, r5
 800cca6:	d004      	beq.n	800ccb2 <_dtoa_r+0x7c2>
 800cca8:	9903      	ldr	r1, [sp, #12]
 800ccaa:	9802      	ldr	r0, [sp, #8]
 800ccac:	f000 fc70 	bl	800d590 <__pow5mult>
 800ccb0:	9003      	str	r0, [sp, #12]
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	9802      	ldr	r0, [sp, #8]
 800ccb6:	f000 fbd3 	bl	800d460 <__i2b>
 800ccba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccbc:	9004      	str	r0, [sp, #16]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d100      	bne.n	800ccc4 <_dtoa_r+0x7d4>
 800ccc2:	e1e3      	b.n	800d08c <_dtoa_r+0xb9c>
 800ccc4:	001a      	movs	r2, r3
 800ccc6:	0001      	movs	r1, r0
 800ccc8:	9802      	ldr	r0, [sp, #8]
 800ccca:	f000 fc61 	bl	800d590 <__pow5mult>
 800ccce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ccd0:	9004      	str	r0, [sp, #16]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	dd00      	ble.n	800ccd8 <_dtoa_r+0x7e8>
 800ccd6:	e082      	b.n	800cdde <_dtoa_r+0x8ee>
 800ccd8:	2500      	movs	r5, #0
 800ccda:	9b06      	ldr	r3, [sp, #24]
 800ccdc:	42ab      	cmp	r3, r5
 800ccde:	d10e      	bne.n	800ccfe <_dtoa_r+0x80e>
 800cce0:	9b07      	ldr	r3, [sp, #28]
 800cce2:	031b      	lsls	r3, r3, #12
 800cce4:	42ab      	cmp	r3, r5
 800cce6:	d10a      	bne.n	800ccfe <_dtoa_r+0x80e>
 800cce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccea:	9a07      	ldr	r2, [sp, #28]
 800ccec:	4213      	tst	r3, r2
 800ccee:	d006      	beq.n	800ccfe <_dtoa_r+0x80e>
 800ccf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf2:	3501      	adds	r5, #1
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	930a      	str	r3, [sp, #40]	; 0x28
 800ccf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd00:	2001      	movs	r0, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d16c      	bne.n	800cde0 <_dtoa_r+0x8f0>
 800cd06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd08:	1818      	adds	r0, r3, r0
 800cd0a:	231f      	movs	r3, #31
 800cd0c:	4018      	ands	r0, r3
 800cd0e:	d07e      	beq.n	800ce0e <_dtoa_r+0x91e>
 800cd10:	3301      	adds	r3, #1
 800cd12:	1a1b      	subs	r3, r3, r0
 800cd14:	2b04      	cmp	r3, #4
 800cd16:	dd70      	ble.n	800cdfa <_dtoa_r+0x90a>
 800cd18:	231c      	movs	r3, #28
 800cd1a:	1a18      	subs	r0, r3, r0
 800cd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd1e:	1824      	adds	r4, r4, r0
 800cd20:	181b      	adds	r3, r3, r0
 800cd22:	930a      	str	r3, [sp, #40]	; 0x28
 800cd24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd26:	181b      	adds	r3, r3, r0
 800cd28:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd05      	ble.n	800cd3c <_dtoa_r+0x84c>
 800cd30:	001a      	movs	r2, r3
 800cd32:	9903      	ldr	r1, [sp, #12]
 800cd34:	9802      	ldr	r0, [sp, #8]
 800cd36:	f000 fc7d 	bl	800d634 <__lshift>
 800cd3a:	9003      	str	r0, [sp, #12]
 800cd3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	dd05      	ble.n	800cd4e <_dtoa_r+0x85e>
 800cd42:	001a      	movs	r2, r3
 800cd44:	9904      	ldr	r1, [sp, #16]
 800cd46:	9802      	ldr	r0, [sp, #8]
 800cd48:	f000 fc74 	bl	800d634 <__lshift>
 800cd4c:	9004      	str	r0, [sp, #16]
 800cd4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d05e      	beq.n	800ce12 <_dtoa_r+0x922>
 800cd54:	9904      	ldr	r1, [sp, #16]
 800cd56:	9803      	ldr	r0, [sp, #12]
 800cd58:	f000 fcbe 	bl	800d6d8 <__mcmp>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	da58      	bge.n	800ce12 <_dtoa_r+0x922>
 800cd60:	2300      	movs	r3, #0
 800cd62:	220a      	movs	r2, #10
 800cd64:	9903      	ldr	r1, [sp, #12]
 800cd66:	9802      	ldr	r0, [sp, #8]
 800cd68:	f000 faf3 	bl	800d352 <__multadd>
 800cd6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd6e:	3f01      	subs	r7, #1
 800cd70:	9003      	str	r0, [sp, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d100      	bne.n	800cd78 <_dtoa_r+0x888>
 800cd76:	e190      	b.n	800d09a <_dtoa_r+0xbaa>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	0031      	movs	r1, r6
 800cd7c:	220a      	movs	r2, #10
 800cd7e:	9802      	ldr	r0, [sp, #8]
 800cd80:	f000 fae7 	bl	800d352 <__multadd>
 800cd84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd86:	0006      	movs	r6, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	dd00      	ble.n	800cd8e <_dtoa_r+0x89e>
 800cd8c:	e088      	b.n	800cea0 <_dtoa_r+0x9b0>
 800cd8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	dc00      	bgt.n	800cd96 <_dtoa_r+0x8a6>
 800cd94:	e084      	b.n	800cea0 <_dtoa_r+0x9b0>
 800cd96:	e044      	b.n	800ce22 <_dtoa_r+0x932>
 800cd98:	2336      	movs	r3, #54	; 0x36
 800cd9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd9c:	1a9b      	subs	r3, r3, r2
 800cd9e:	e747      	b.n	800cc30 <_dtoa_r+0x740>
 800cda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda2:	1e5d      	subs	r5, r3, #1
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	42ab      	cmp	r3, r5
 800cda8:	db08      	blt.n	800cdbc <_dtoa_r+0x8cc>
 800cdaa:	1b5d      	subs	r5, r3, r5
 800cdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	da0c      	bge.n	800cdcc <_dtoa_r+0x8dc>
 800cdb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdb6:	1a9c      	subs	r4, r3, r2
 800cdb8:	2300      	movs	r3, #0
 800cdba:	e73b      	b.n	800cc34 <_dtoa_r+0x744>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	9504      	str	r5, [sp, #16]
 800cdc0:	1aea      	subs	r2, r5, r3
 800cdc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdc4:	2500      	movs	r5, #0
 800cdc6:	189b      	adds	r3, r3, r2
 800cdc8:	9311      	str	r3, [sp, #68]	; 0x44
 800cdca:	e7ef      	b.n	800cdac <_dtoa_r+0x8bc>
 800cdcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd0:	e730      	b.n	800cc34 <_dtoa_r+0x744>
 800cdd2:	9d04      	ldr	r5, [sp, #16]
 800cdd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cdd6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800cdd8:	e737      	b.n	800cc4a <_dtoa_r+0x75a>
 800cdda:	9a04      	ldr	r2, [sp, #16]
 800cddc:	e764      	b.n	800cca8 <_dtoa_r+0x7b8>
 800cdde:	2500      	movs	r5, #0
 800cde0:	9b04      	ldr	r3, [sp, #16]
 800cde2:	9a04      	ldr	r2, [sp, #16]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	9310      	str	r3, [sp, #64]	; 0x40
 800cde8:	3303      	adds	r3, #3
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	18d3      	adds	r3, r2, r3
 800cdee:	6858      	ldr	r0, [r3, #4]
 800cdf0:	f000 faed 	bl	800d3ce <__hi0bits>
 800cdf4:	2320      	movs	r3, #32
 800cdf6:	1a18      	subs	r0, r3, r0
 800cdf8:	e785      	b.n	800cd06 <_dtoa_r+0x816>
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d095      	beq.n	800cd2a <_dtoa_r+0x83a>
 800cdfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce00:	331c      	adds	r3, #28
 800ce02:	18d2      	adds	r2, r2, r3
 800ce04:	920a      	str	r2, [sp, #40]	; 0x28
 800ce06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce08:	18e4      	adds	r4, r4, r3
 800ce0a:	18d3      	adds	r3, r2, r3
 800ce0c:	e78c      	b.n	800cd28 <_dtoa_r+0x838>
 800ce0e:	0003      	movs	r3, r0
 800ce10:	e7f5      	b.n	800cdfe <_dtoa_r+0x90e>
 800ce12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dc3d      	bgt.n	800ce94 <_dtoa_r+0x9a4>
 800ce18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	dd3a      	ble.n	800ce94 <_dtoa_r+0x9a4>
 800ce1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce20:	930c      	str	r3, [sp, #48]	; 0x30
 800ce22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10c      	bne.n	800ce42 <_dtoa_r+0x952>
 800ce28:	9904      	ldr	r1, [sp, #16]
 800ce2a:	2205      	movs	r2, #5
 800ce2c:	9802      	ldr	r0, [sp, #8]
 800ce2e:	f000 fa90 	bl	800d352 <__multadd>
 800ce32:	9004      	str	r0, [sp, #16]
 800ce34:	0001      	movs	r1, r0
 800ce36:	9803      	ldr	r0, [sp, #12]
 800ce38:	f000 fc4e 	bl	800d6d8 <__mcmp>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	dd00      	ble.n	800ce42 <_dtoa_r+0x952>
 800ce40:	e5af      	b.n	800c9a2 <_dtoa_r+0x4b2>
 800ce42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce44:	9d08      	ldr	r5, [sp, #32]
 800ce46:	43df      	mvns	r7, r3
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce4c:	9904      	ldr	r1, [sp, #16]
 800ce4e:	9802      	ldr	r0, [sp, #8]
 800ce50:	f000 fa66 	bl	800d320 <_Bfree>
 800ce54:	2e00      	cmp	r6, #0
 800ce56:	d100      	bne.n	800ce5a <_dtoa_r+0x96a>
 800ce58:	e69b      	b.n	800cb92 <_dtoa_r+0x6a2>
 800ce5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d005      	beq.n	800ce6c <_dtoa_r+0x97c>
 800ce60:	42b3      	cmp	r3, r6
 800ce62:	d003      	beq.n	800ce6c <_dtoa_r+0x97c>
 800ce64:	0019      	movs	r1, r3
 800ce66:	9802      	ldr	r0, [sp, #8]
 800ce68:	f000 fa5a 	bl	800d320 <_Bfree>
 800ce6c:	0031      	movs	r1, r6
 800ce6e:	9802      	ldr	r0, [sp, #8]
 800ce70:	f000 fa56 	bl	800d320 <_Bfree>
 800ce74:	e68d      	b.n	800cb92 <_dtoa_r+0x6a2>
 800ce76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	001e      	movs	r6, r3
 800ce7c:	e7e1      	b.n	800ce42 <_dtoa_r+0x952>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e7fa      	b.n	800ce78 <_dtoa_r+0x988>
 800ce82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce84:	0037      	movs	r7, r6
 800ce86:	9304      	str	r3, [sp, #16]
 800ce88:	001e      	movs	r6, r3
 800ce8a:	e58a      	b.n	800c9a2 <_dtoa_r+0x4b2>
 800ce8c:	40240000 	.word	0x40240000
 800ce90:	00000433 	.word	0x00000433
 800ce94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d100      	bne.n	800ce9c <_dtoa_r+0x9ac>
 800ce9a:	e0b2      	b.n	800d002 <_dtoa_r+0xb12>
 800ce9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce9e:	930c      	str	r3, [sp, #48]	; 0x30
 800cea0:	2c00      	cmp	r4, #0
 800cea2:	dd05      	ble.n	800ceb0 <_dtoa_r+0x9c0>
 800cea4:	0031      	movs	r1, r6
 800cea6:	0022      	movs	r2, r4
 800cea8:	9802      	ldr	r0, [sp, #8]
 800ceaa:	f000 fbc3 	bl	800d634 <__lshift>
 800ceae:	0006      	movs	r6, r0
 800ceb0:	0030      	movs	r0, r6
 800ceb2:	2d00      	cmp	r5, #0
 800ceb4:	d011      	beq.n	800ceda <_dtoa_r+0x9ea>
 800ceb6:	6871      	ldr	r1, [r6, #4]
 800ceb8:	9802      	ldr	r0, [sp, #8]
 800ceba:	f000 f9f9 	bl	800d2b0 <_Balloc>
 800cebe:	0031      	movs	r1, r6
 800cec0:	0004      	movs	r4, r0
 800cec2:	6933      	ldr	r3, [r6, #16]
 800cec4:	310c      	adds	r1, #12
 800cec6:	1c9a      	adds	r2, r3, #2
 800cec8:	0092      	lsls	r2, r2, #2
 800ceca:	300c      	adds	r0, #12
 800cecc:	f000 f9e7 	bl	800d29e <memcpy>
 800ced0:	2201      	movs	r2, #1
 800ced2:	0021      	movs	r1, r4
 800ced4:	9802      	ldr	r0, [sp, #8]
 800ced6:	f000 fbad 	bl	800d634 <__lshift>
 800ceda:	9609      	str	r6, [sp, #36]	; 0x24
 800cedc:	0006      	movs	r6, r0
 800cede:	9b08      	ldr	r3, [sp, #32]
 800cee0:	930a      	str	r3, [sp, #40]	; 0x28
 800cee2:	9904      	ldr	r1, [sp, #16]
 800cee4:	9803      	ldr	r0, [sp, #12]
 800cee6:	f7ff fa7d 	bl	800c3e4 <quorem>
 800ceea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ceec:	900d      	str	r0, [sp, #52]	; 0x34
 800ceee:	0004      	movs	r4, r0
 800cef0:	9803      	ldr	r0, [sp, #12]
 800cef2:	f000 fbf1 	bl	800d6d8 <__mcmp>
 800cef6:	0032      	movs	r2, r6
 800cef8:	9010      	str	r0, [sp, #64]	; 0x40
 800cefa:	9904      	ldr	r1, [sp, #16]
 800cefc:	9802      	ldr	r0, [sp, #8]
 800cefe:	f000 fc05 	bl	800d70c <__mdiff>
 800cf02:	2301      	movs	r3, #1
 800cf04:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf06:	68c3      	ldr	r3, [r0, #12]
 800cf08:	3430      	adds	r4, #48	; 0x30
 800cf0a:	0005      	movs	r5, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d104      	bne.n	800cf1a <_dtoa_r+0xa2a>
 800cf10:	0001      	movs	r1, r0
 800cf12:	9803      	ldr	r0, [sp, #12]
 800cf14:	f000 fbe0 	bl	800d6d8 <__mcmp>
 800cf18:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf1a:	0029      	movs	r1, r5
 800cf1c:	9802      	ldr	r0, [sp, #8]
 800cf1e:	f000 f9ff 	bl	800d320 <_Bfree>
 800cf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf26:	4313      	orrs	r3, r2
 800cf28:	d10e      	bne.n	800cf48 <_dtoa_r+0xa58>
 800cf2a:	9a06      	ldr	r2, [sp, #24]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	4213      	tst	r3, r2
 800cf30:	d10a      	bne.n	800cf48 <_dtoa_r+0xa58>
 800cf32:	2c39      	cmp	r4, #57	; 0x39
 800cf34:	d026      	beq.n	800cf84 <_dtoa_r+0xa94>
 800cf36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	dd01      	ble.n	800cf40 <_dtoa_r+0xa50>
 800cf3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800cf3e:	3431      	adds	r4, #49	; 0x31
 800cf40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf42:	1c5d      	adds	r5, r3, #1
 800cf44:	701c      	strb	r4, [r3, #0]
 800cf46:	e781      	b.n	800ce4c <_dtoa_r+0x95c>
 800cf48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	db07      	blt.n	800cf5e <_dtoa_r+0xa6e>
 800cf4e:	001d      	movs	r5, r3
 800cf50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cf52:	431d      	orrs	r5, r3
 800cf54:	d122      	bne.n	800cf9c <_dtoa_r+0xaac>
 800cf56:	2301      	movs	r3, #1
 800cf58:	9a06      	ldr	r2, [sp, #24]
 800cf5a:	4213      	tst	r3, r2
 800cf5c:	d11e      	bne.n	800cf9c <_dtoa_r+0xaac>
 800cf5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dded      	ble.n	800cf40 <_dtoa_r+0xa50>
 800cf64:	9903      	ldr	r1, [sp, #12]
 800cf66:	2201      	movs	r2, #1
 800cf68:	9802      	ldr	r0, [sp, #8]
 800cf6a:	f000 fb63 	bl	800d634 <__lshift>
 800cf6e:	9904      	ldr	r1, [sp, #16]
 800cf70:	9003      	str	r0, [sp, #12]
 800cf72:	f000 fbb1 	bl	800d6d8 <__mcmp>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	dc02      	bgt.n	800cf80 <_dtoa_r+0xa90>
 800cf7a:	d1e1      	bne.n	800cf40 <_dtoa_r+0xa50>
 800cf7c:	07e3      	lsls	r3, r4, #31
 800cf7e:	d5df      	bpl.n	800cf40 <_dtoa_r+0xa50>
 800cf80:	2c39      	cmp	r4, #57	; 0x39
 800cf82:	d1db      	bne.n	800cf3c <_dtoa_r+0xa4c>
 800cf84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf88:	1c5d      	adds	r5, r3, #1
 800cf8a:	2339      	movs	r3, #57	; 0x39
 800cf8c:	7013      	strb	r3, [r2, #0]
 800cf8e:	1e6b      	subs	r3, r5, #1
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	2a39      	cmp	r2, #57	; 0x39
 800cf94:	d067      	beq.n	800d066 <_dtoa_r+0xb76>
 800cf96:	3201      	adds	r2, #1
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	e757      	b.n	800ce4c <_dtoa_r+0x95c>
 800cf9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf9e:	1c5d      	adds	r5, r3, #1
 800cfa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dd04      	ble.n	800cfb0 <_dtoa_r+0xac0>
 800cfa6:	2c39      	cmp	r4, #57	; 0x39
 800cfa8:	d0ec      	beq.n	800cf84 <_dtoa_r+0xa94>
 800cfaa:	3401      	adds	r4, #1
 800cfac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfae:	e7c9      	b.n	800cf44 <_dtoa_r+0xa54>
 800cfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfb4:	701c      	strb	r4, [r3, #0]
 800cfb6:	9b08      	ldr	r3, [sp, #32]
 800cfb8:	1aeb      	subs	r3, r5, r3
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d03e      	beq.n	800d03c <_dtoa_r+0xb4c>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	220a      	movs	r2, #10
 800cfc2:	9903      	ldr	r1, [sp, #12]
 800cfc4:	9802      	ldr	r0, [sp, #8]
 800cfc6:	f000 f9c4 	bl	800d352 <__multadd>
 800cfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfcc:	9003      	str	r0, [sp, #12]
 800cfce:	42b3      	cmp	r3, r6
 800cfd0:	d109      	bne.n	800cfe6 <_dtoa_r+0xaf6>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	220a      	movs	r2, #10
 800cfd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfd8:	9802      	ldr	r0, [sp, #8]
 800cfda:	f000 f9ba 	bl	800d352 <__multadd>
 800cfde:	9009      	str	r0, [sp, #36]	; 0x24
 800cfe0:	0006      	movs	r6, r0
 800cfe2:	950a      	str	r5, [sp, #40]	; 0x28
 800cfe4:	e77d      	b.n	800cee2 <_dtoa_r+0x9f2>
 800cfe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfe8:	2300      	movs	r3, #0
 800cfea:	220a      	movs	r2, #10
 800cfec:	9802      	ldr	r0, [sp, #8]
 800cfee:	f000 f9b0 	bl	800d352 <__multadd>
 800cff2:	2300      	movs	r3, #0
 800cff4:	9009      	str	r0, [sp, #36]	; 0x24
 800cff6:	220a      	movs	r2, #10
 800cff8:	0031      	movs	r1, r6
 800cffa:	9802      	ldr	r0, [sp, #8]
 800cffc:	f000 f9a9 	bl	800d352 <__multadd>
 800d000:	e7ee      	b.n	800cfe0 <_dtoa_r+0xaf0>
 800d002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d004:	930c      	str	r3, [sp, #48]	; 0x30
 800d006:	9b08      	ldr	r3, [sp, #32]
 800d008:	9306      	str	r3, [sp, #24]
 800d00a:	9904      	ldr	r1, [sp, #16]
 800d00c:	9803      	ldr	r0, [sp, #12]
 800d00e:	f7ff f9e9 	bl	800c3e4 <quorem>
 800d012:	9b06      	ldr	r3, [sp, #24]
 800d014:	3030      	adds	r0, #48	; 0x30
 800d016:	1c5d      	adds	r5, r3, #1
 800d018:	7018      	strb	r0, [r3, #0]
 800d01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d01c:	9b08      	ldr	r3, [sp, #32]
 800d01e:	0004      	movs	r4, r0
 800d020:	1aeb      	subs	r3, r5, r3
 800d022:	429a      	cmp	r2, r3
 800d024:	dd08      	ble.n	800d038 <_dtoa_r+0xb48>
 800d026:	2300      	movs	r3, #0
 800d028:	220a      	movs	r2, #10
 800d02a:	9903      	ldr	r1, [sp, #12]
 800d02c:	9802      	ldr	r0, [sp, #8]
 800d02e:	f000 f990 	bl	800d352 <__multadd>
 800d032:	9506      	str	r5, [sp, #24]
 800d034:	9003      	str	r0, [sp, #12]
 800d036:	e7e8      	b.n	800d00a <_dtoa_r+0xb1a>
 800d038:	2300      	movs	r3, #0
 800d03a:	9309      	str	r3, [sp, #36]	; 0x24
 800d03c:	9903      	ldr	r1, [sp, #12]
 800d03e:	2201      	movs	r2, #1
 800d040:	9802      	ldr	r0, [sp, #8]
 800d042:	f000 faf7 	bl	800d634 <__lshift>
 800d046:	9904      	ldr	r1, [sp, #16]
 800d048:	9003      	str	r0, [sp, #12]
 800d04a:	f000 fb45 	bl	800d6d8 <__mcmp>
 800d04e:	2800      	cmp	r0, #0
 800d050:	dc9d      	bgt.n	800cf8e <_dtoa_r+0xa9e>
 800d052:	d101      	bne.n	800d058 <_dtoa_r+0xb68>
 800d054:	07e3      	lsls	r3, r4, #31
 800d056:	d49a      	bmi.n	800cf8e <_dtoa_r+0xa9e>
 800d058:	1e6b      	subs	r3, r5, #1
 800d05a:	781a      	ldrb	r2, [r3, #0]
 800d05c:	2a30      	cmp	r2, #48	; 0x30
 800d05e:	d000      	beq.n	800d062 <_dtoa_r+0xb72>
 800d060:	e6f4      	b.n	800ce4c <_dtoa_r+0x95c>
 800d062:	001d      	movs	r5, r3
 800d064:	e7f8      	b.n	800d058 <_dtoa_r+0xb68>
 800d066:	9a08      	ldr	r2, [sp, #32]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d103      	bne.n	800d074 <_dtoa_r+0xb84>
 800d06c:	2331      	movs	r3, #49	; 0x31
 800d06e:	3701      	adds	r7, #1
 800d070:	7013      	strb	r3, [r2, #0]
 800d072:	e6eb      	b.n	800ce4c <_dtoa_r+0x95c>
 800d074:	001d      	movs	r5, r3
 800d076:	e78a      	b.n	800cf8e <_dtoa_r+0xa9e>
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <_dtoa_r+0xbb8>)
 800d07a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d07c:	9308      	str	r3, [sp, #32]
 800d07e:	4b0b      	ldr	r3, [pc, #44]	; (800d0ac <_dtoa_r+0xbbc>)
 800d080:	2a00      	cmp	r2, #0
 800d082:	d001      	beq.n	800d088 <_dtoa_r+0xb98>
 800d084:	f7ff fa77 	bl	800c576 <_dtoa_r+0x86>
 800d088:	f7ff fa77 	bl	800c57a <_dtoa_r+0x8a>
 800d08c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d08e:	2b01      	cmp	r3, #1
 800d090:	dc00      	bgt.n	800d094 <_dtoa_r+0xba4>
 800d092:	e621      	b.n	800ccd8 <_dtoa_r+0x7e8>
 800d094:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d096:	2001      	movs	r0, #1
 800d098:	e635      	b.n	800cd06 <_dtoa_r+0x816>
 800d09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	dcb2      	bgt.n	800d006 <_dtoa_r+0xb16>
 800d0a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	ddaf      	ble.n	800d006 <_dtoa_r+0xb16>
 800d0a6:	e6bc      	b.n	800ce22 <_dtoa_r+0x932>
 800d0a8:	0800fb14 	.word	0x0800fb14
 800d0ac:	0800fb1c 	.word	0x0800fb1c

0800d0b0 <std>:
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	0004      	movs	r4, r0
 800d0b6:	6003      	str	r3, [r0, #0]
 800d0b8:	6043      	str	r3, [r0, #4]
 800d0ba:	6083      	str	r3, [r0, #8]
 800d0bc:	8181      	strh	r1, [r0, #12]
 800d0be:	6643      	str	r3, [r0, #100]	; 0x64
 800d0c0:	81c2      	strh	r2, [r0, #14]
 800d0c2:	6103      	str	r3, [r0, #16]
 800d0c4:	6143      	str	r3, [r0, #20]
 800d0c6:	6183      	str	r3, [r0, #24]
 800d0c8:	0019      	movs	r1, r3
 800d0ca:	2208      	movs	r2, #8
 800d0cc:	305c      	adds	r0, #92	; 0x5c
 800d0ce:	f7fe fce8 	bl	800baa2 <memset>
 800d0d2:	4b05      	ldr	r3, [pc, #20]	; (800d0e8 <std+0x38>)
 800d0d4:	6224      	str	r4, [r4, #32]
 800d0d6:	6263      	str	r3, [r4, #36]	; 0x24
 800d0d8:	4b04      	ldr	r3, [pc, #16]	; (800d0ec <std+0x3c>)
 800d0da:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0dc:	4b04      	ldr	r3, [pc, #16]	; (800d0f0 <std+0x40>)
 800d0de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0e0:	4b04      	ldr	r3, [pc, #16]	; (800d0f4 <std+0x44>)
 800d0e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d0e4:	bd10      	pop	{r4, pc}
 800d0e6:	46c0      	nop			; (mov r8, r8)
 800d0e8:	0800df49 	.word	0x0800df49
 800d0ec:	0800df71 	.word	0x0800df71
 800d0f0:	0800dfa9 	.word	0x0800dfa9
 800d0f4:	0800dfd5 	.word	0x0800dfd5

0800d0f8 <_cleanup_r>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	4902      	ldr	r1, [pc, #8]	; (800d104 <_cleanup_r+0xc>)
 800d0fc:	f000 f88c 	bl	800d218 <_fwalk_reent>
 800d100:	bd10      	pop	{r4, pc}
 800d102:	46c0      	nop			; (mov r8, r8)
 800d104:	0800e2d9 	.word	0x0800e2d9

0800d108 <__sfmoreglue>:
 800d108:	b570      	push	{r4, r5, r6, lr}
 800d10a:	2568      	movs	r5, #104	; 0x68
 800d10c:	1e4a      	subs	r2, r1, #1
 800d10e:	4355      	muls	r5, r2
 800d110:	000e      	movs	r6, r1
 800d112:	0029      	movs	r1, r5
 800d114:	3174      	adds	r1, #116	; 0x74
 800d116:	f000 fc09 	bl	800d92c <_malloc_r>
 800d11a:	1e04      	subs	r4, r0, #0
 800d11c:	d008      	beq.n	800d130 <__sfmoreglue+0x28>
 800d11e:	2100      	movs	r1, #0
 800d120:	002a      	movs	r2, r5
 800d122:	6001      	str	r1, [r0, #0]
 800d124:	6046      	str	r6, [r0, #4]
 800d126:	300c      	adds	r0, #12
 800d128:	60a0      	str	r0, [r4, #8]
 800d12a:	3268      	adds	r2, #104	; 0x68
 800d12c:	f7fe fcb9 	bl	800baa2 <memset>
 800d130:	0020      	movs	r0, r4
 800d132:	bd70      	pop	{r4, r5, r6, pc}

0800d134 <__sinit>:
 800d134:	6983      	ldr	r3, [r0, #24]
 800d136:	b513      	push	{r0, r1, r4, lr}
 800d138:	0004      	movs	r4, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d128      	bne.n	800d190 <__sinit+0x5c>
 800d13e:	6483      	str	r3, [r0, #72]	; 0x48
 800d140:	64c3      	str	r3, [r0, #76]	; 0x4c
 800d142:	6503      	str	r3, [r0, #80]	; 0x50
 800d144:	4b13      	ldr	r3, [pc, #76]	; (800d194 <__sinit+0x60>)
 800d146:	4a14      	ldr	r2, [pc, #80]	; (800d198 <__sinit+0x64>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	6282      	str	r2, [r0, #40]	; 0x28
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	4298      	cmp	r0, r3
 800d150:	d101      	bne.n	800d156 <__sinit+0x22>
 800d152:	2301      	movs	r3, #1
 800d154:	6183      	str	r3, [r0, #24]
 800d156:	0020      	movs	r0, r4
 800d158:	f000 f820 	bl	800d19c <__sfp>
 800d15c:	6060      	str	r0, [r4, #4]
 800d15e:	0020      	movs	r0, r4
 800d160:	f000 f81c 	bl	800d19c <__sfp>
 800d164:	60a0      	str	r0, [r4, #8]
 800d166:	0020      	movs	r0, r4
 800d168:	f000 f818 	bl	800d19c <__sfp>
 800d16c:	2200      	movs	r2, #0
 800d16e:	60e0      	str	r0, [r4, #12]
 800d170:	2104      	movs	r1, #4
 800d172:	6860      	ldr	r0, [r4, #4]
 800d174:	f7ff ff9c 	bl	800d0b0 <std>
 800d178:	2201      	movs	r2, #1
 800d17a:	2109      	movs	r1, #9
 800d17c:	68a0      	ldr	r0, [r4, #8]
 800d17e:	f7ff ff97 	bl	800d0b0 <std>
 800d182:	2202      	movs	r2, #2
 800d184:	2112      	movs	r1, #18
 800d186:	68e0      	ldr	r0, [r4, #12]
 800d188:	f7ff ff92 	bl	800d0b0 <std>
 800d18c:	2301      	movs	r3, #1
 800d18e:	61a3      	str	r3, [r4, #24]
 800d190:	bd13      	pop	{r0, r1, r4, pc}
 800d192:	46c0      	nop			; (mov r8, r8)
 800d194:	0800fadc 	.word	0x0800fadc
 800d198:	0800d0f9 	.word	0x0800d0f9

0800d19c <__sfp>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	4b1c      	ldr	r3, [pc, #112]	; (800d210 <__sfp+0x74>)
 800d1a0:	0007      	movs	r7, r0
 800d1a2:	681e      	ldr	r6, [r3, #0]
 800d1a4:	69b3      	ldr	r3, [r6, #24]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d102      	bne.n	800d1b0 <__sfp+0x14>
 800d1aa:	0030      	movs	r0, r6
 800d1ac:	f7ff ffc2 	bl	800d134 <__sinit>
 800d1b0:	3648      	adds	r6, #72	; 0x48
 800d1b2:	68b4      	ldr	r4, [r6, #8]
 800d1b4:	6873      	ldr	r3, [r6, #4]
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	d504      	bpl.n	800d1c4 <__sfp+0x28>
 800d1ba:	6833      	ldr	r3, [r6, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d007      	beq.n	800d1d0 <__sfp+0x34>
 800d1c0:	6836      	ldr	r6, [r6, #0]
 800d1c2:	e7f6      	b.n	800d1b2 <__sfp+0x16>
 800d1c4:	220c      	movs	r2, #12
 800d1c6:	5ea5      	ldrsh	r5, [r4, r2]
 800d1c8:	2d00      	cmp	r5, #0
 800d1ca:	d00d      	beq.n	800d1e8 <__sfp+0x4c>
 800d1cc:	3468      	adds	r4, #104	; 0x68
 800d1ce:	e7f2      	b.n	800d1b6 <__sfp+0x1a>
 800d1d0:	2104      	movs	r1, #4
 800d1d2:	0038      	movs	r0, r7
 800d1d4:	f7ff ff98 	bl	800d108 <__sfmoreglue>
 800d1d8:	6030      	str	r0, [r6, #0]
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d1f0      	bne.n	800d1c0 <__sfp+0x24>
 800d1de:	230c      	movs	r3, #12
 800d1e0:	0004      	movs	r4, r0
 800d1e2:	603b      	str	r3, [r7, #0]
 800d1e4:	0020      	movs	r0, r4
 800d1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1e8:	0020      	movs	r0, r4
 800d1ea:	4b0a      	ldr	r3, [pc, #40]	; (800d214 <__sfp+0x78>)
 800d1ec:	6665      	str	r5, [r4, #100]	; 0x64
 800d1ee:	6025      	str	r5, [r4, #0]
 800d1f0:	6065      	str	r5, [r4, #4]
 800d1f2:	60a5      	str	r5, [r4, #8]
 800d1f4:	60e3      	str	r3, [r4, #12]
 800d1f6:	6125      	str	r5, [r4, #16]
 800d1f8:	6165      	str	r5, [r4, #20]
 800d1fa:	61a5      	str	r5, [r4, #24]
 800d1fc:	2208      	movs	r2, #8
 800d1fe:	0029      	movs	r1, r5
 800d200:	305c      	adds	r0, #92	; 0x5c
 800d202:	f7fe fc4e 	bl	800baa2 <memset>
 800d206:	6365      	str	r5, [r4, #52]	; 0x34
 800d208:	63a5      	str	r5, [r4, #56]	; 0x38
 800d20a:	64a5      	str	r5, [r4, #72]	; 0x48
 800d20c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d20e:	e7e9      	b.n	800d1e4 <__sfp+0x48>
 800d210:	0800fadc 	.word	0x0800fadc
 800d214:	ffff0001 	.word	0xffff0001

0800d218 <_fwalk_reent>:
 800d218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d21a:	0004      	movs	r4, r0
 800d21c:	0007      	movs	r7, r0
 800d21e:	2600      	movs	r6, #0
 800d220:	9101      	str	r1, [sp, #4]
 800d222:	3448      	adds	r4, #72	; 0x48
 800d224:	2c00      	cmp	r4, #0
 800d226:	d101      	bne.n	800d22c <_fwalk_reent+0x14>
 800d228:	0030      	movs	r0, r6
 800d22a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d22c:	6863      	ldr	r3, [r4, #4]
 800d22e:	68a5      	ldr	r5, [r4, #8]
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	9b00      	ldr	r3, [sp, #0]
 800d234:	3b01      	subs	r3, #1
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	d501      	bpl.n	800d23e <_fwalk_reent+0x26>
 800d23a:	6824      	ldr	r4, [r4, #0]
 800d23c:	e7f2      	b.n	800d224 <_fwalk_reent+0xc>
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d908      	bls.n	800d256 <_fwalk_reent+0x3e>
 800d244:	220e      	movs	r2, #14
 800d246:	5eab      	ldrsh	r3, [r5, r2]
 800d248:	3301      	adds	r3, #1
 800d24a:	d004      	beq.n	800d256 <_fwalk_reent+0x3e>
 800d24c:	0029      	movs	r1, r5
 800d24e:	0038      	movs	r0, r7
 800d250:	9b01      	ldr	r3, [sp, #4]
 800d252:	4798      	blx	r3
 800d254:	4306      	orrs	r6, r0
 800d256:	3568      	adds	r5, #104	; 0x68
 800d258:	e7eb      	b.n	800d232 <_fwalk_reent+0x1a>
	...

0800d25c <_localeconv_r>:
 800d25c:	4b03      	ldr	r3, [pc, #12]	; (800d26c <_localeconv_r+0x10>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6a18      	ldr	r0, [r3, #32]
 800d262:	2800      	cmp	r0, #0
 800d264:	d100      	bne.n	800d268 <_localeconv_r+0xc>
 800d266:	4802      	ldr	r0, [pc, #8]	; (800d270 <_localeconv_r+0x14>)
 800d268:	30f0      	adds	r0, #240	; 0xf0
 800d26a:	4770      	bx	lr
 800d26c:	20000184 	.word	0x20000184
 800d270:	200001e8 	.word	0x200001e8

0800d274 <malloc>:
 800d274:	b510      	push	{r4, lr}
 800d276:	4b03      	ldr	r3, [pc, #12]	; (800d284 <malloc+0x10>)
 800d278:	0001      	movs	r1, r0
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	f000 fb56 	bl	800d92c <_malloc_r>
 800d280:	bd10      	pop	{r4, pc}
 800d282:	46c0      	nop			; (mov r8, r8)
 800d284:	20000184 	.word	0x20000184

0800d288 <memchr>:
 800d288:	b2c9      	uxtb	r1, r1
 800d28a:	1882      	adds	r2, r0, r2
 800d28c:	4290      	cmp	r0, r2
 800d28e:	d101      	bne.n	800d294 <memchr+0xc>
 800d290:	2000      	movs	r0, #0
 800d292:	4770      	bx	lr
 800d294:	7803      	ldrb	r3, [r0, #0]
 800d296:	428b      	cmp	r3, r1
 800d298:	d0fb      	beq.n	800d292 <memchr+0xa>
 800d29a:	3001      	adds	r0, #1
 800d29c:	e7f6      	b.n	800d28c <memchr+0x4>

0800d29e <memcpy>:
 800d29e:	2300      	movs	r3, #0
 800d2a0:	b510      	push	{r4, lr}
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d100      	bne.n	800d2a8 <memcpy+0xa>
 800d2a6:	bd10      	pop	{r4, pc}
 800d2a8:	5ccc      	ldrb	r4, [r1, r3]
 800d2aa:	54c4      	strb	r4, [r0, r3]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	e7f8      	b.n	800d2a2 <memcpy+0x4>

0800d2b0 <_Balloc>:
 800d2b0:	b570      	push	{r4, r5, r6, lr}
 800d2b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2b4:	0004      	movs	r4, r0
 800d2b6:	000d      	movs	r5, r1
 800d2b8:	2e00      	cmp	r6, #0
 800d2ba:	d107      	bne.n	800d2cc <_Balloc+0x1c>
 800d2bc:	2010      	movs	r0, #16
 800d2be:	f7ff ffd9 	bl	800d274 <malloc>
 800d2c2:	6260      	str	r0, [r4, #36]	; 0x24
 800d2c4:	6046      	str	r6, [r0, #4]
 800d2c6:	6086      	str	r6, [r0, #8]
 800d2c8:	6006      	str	r6, [r0, #0]
 800d2ca:	60c6      	str	r6, [r0, #12]
 800d2cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2ce:	68f3      	ldr	r3, [r6, #12]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d013      	beq.n	800d2fc <_Balloc+0x4c>
 800d2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2d6:	00aa      	lsls	r2, r5, #2
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	189b      	adds	r3, r3, r2
 800d2dc:	6818      	ldr	r0, [r3, #0]
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d118      	bne.n	800d314 <_Balloc+0x64>
 800d2e2:	2101      	movs	r1, #1
 800d2e4:	000e      	movs	r6, r1
 800d2e6:	40ae      	lsls	r6, r5
 800d2e8:	1d72      	adds	r2, r6, #5
 800d2ea:	0092      	lsls	r2, r2, #2
 800d2ec:	0020      	movs	r0, r4
 800d2ee:	f000 fac5 	bl	800d87c <_calloc_r>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d00c      	beq.n	800d310 <_Balloc+0x60>
 800d2f6:	6045      	str	r5, [r0, #4]
 800d2f8:	6086      	str	r6, [r0, #8]
 800d2fa:	e00d      	b.n	800d318 <_Balloc+0x68>
 800d2fc:	2221      	movs	r2, #33	; 0x21
 800d2fe:	2104      	movs	r1, #4
 800d300:	0020      	movs	r0, r4
 800d302:	f000 fabb 	bl	800d87c <_calloc_r>
 800d306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d308:	60f0      	str	r0, [r6, #12]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1e1      	bne.n	800d2d4 <_Balloc+0x24>
 800d310:	2000      	movs	r0, #0
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	6802      	ldr	r2, [r0, #0]
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	2300      	movs	r3, #0
 800d31a:	6103      	str	r3, [r0, #16]
 800d31c:	60c3      	str	r3, [r0, #12]
 800d31e:	e7f8      	b.n	800d312 <_Balloc+0x62>

0800d320 <_Bfree>:
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d324:	0006      	movs	r6, r0
 800d326:	000d      	movs	r5, r1
 800d328:	2c00      	cmp	r4, #0
 800d32a:	d107      	bne.n	800d33c <_Bfree+0x1c>
 800d32c:	2010      	movs	r0, #16
 800d32e:	f7ff ffa1 	bl	800d274 <malloc>
 800d332:	6270      	str	r0, [r6, #36]	; 0x24
 800d334:	6044      	str	r4, [r0, #4]
 800d336:	6084      	str	r4, [r0, #8]
 800d338:	6004      	str	r4, [r0, #0]
 800d33a:	60c4      	str	r4, [r0, #12]
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	d007      	beq.n	800d350 <_Bfree+0x30>
 800d340:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d342:	686a      	ldr	r2, [r5, #4]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	0092      	lsls	r2, r2, #2
 800d348:	189b      	adds	r3, r3, r2
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	601d      	str	r5, [r3, #0]
 800d350:	bd70      	pop	{r4, r5, r6, pc}

0800d352 <__multadd>:
 800d352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d354:	001e      	movs	r6, r3
 800d356:	2314      	movs	r3, #20
 800d358:	469c      	mov	ip, r3
 800d35a:	0007      	movs	r7, r0
 800d35c:	000c      	movs	r4, r1
 800d35e:	2000      	movs	r0, #0
 800d360:	690d      	ldr	r5, [r1, #16]
 800d362:	448c      	add	ip, r1
 800d364:	4663      	mov	r3, ip
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3001      	adds	r0, #1
 800d36a:	b299      	uxth	r1, r3
 800d36c:	4663      	mov	r3, ip
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4351      	muls	r1, r2
 800d372:	0c1b      	lsrs	r3, r3, #16
 800d374:	4353      	muls	r3, r2
 800d376:	1989      	adds	r1, r1, r6
 800d378:	0c0e      	lsrs	r6, r1, #16
 800d37a:	199b      	adds	r3, r3, r6
 800d37c:	b289      	uxth	r1, r1
 800d37e:	0c1e      	lsrs	r6, r3, #16
 800d380:	041b      	lsls	r3, r3, #16
 800d382:	185b      	adds	r3, r3, r1
 800d384:	4661      	mov	r1, ip
 800d386:	c108      	stmia	r1!, {r3}
 800d388:	468c      	mov	ip, r1
 800d38a:	4285      	cmp	r5, r0
 800d38c:	dcea      	bgt.n	800d364 <__multadd+0x12>
 800d38e:	2e00      	cmp	r6, #0
 800d390:	d01b      	beq.n	800d3ca <__multadd+0x78>
 800d392:	68a3      	ldr	r3, [r4, #8]
 800d394:	42ab      	cmp	r3, r5
 800d396:	dc12      	bgt.n	800d3be <__multadd+0x6c>
 800d398:	6863      	ldr	r3, [r4, #4]
 800d39a:	0038      	movs	r0, r7
 800d39c:	1c59      	adds	r1, r3, #1
 800d39e:	f7ff ff87 	bl	800d2b0 <_Balloc>
 800d3a2:	0021      	movs	r1, r4
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	9001      	str	r0, [sp, #4]
 800d3a8:	1c9a      	adds	r2, r3, #2
 800d3aa:	0092      	lsls	r2, r2, #2
 800d3ac:	310c      	adds	r1, #12
 800d3ae:	300c      	adds	r0, #12
 800d3b0:	f7ff ff75 	bl	800d29e <memcpy>
 800d3b4:	0021      	movs	r1, r4
 800d3b6:	0038      	movs	r0, r7
 800d3b8:	f7ff ffb2 	bl	800d320 <_Bfree>
 800d3bc:	9c01      	ldr	r4, [sp, #4]
 800d3be:	1d2b      	adds	r3, r5, #4
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	18e3      	adds	r3, r4, r3
 800d3c4:	3501      	adds	r5, #1
 800d3c6:	605e      	str	r6, [r3, #4]
 800d3c8:	6125      	str	r5, [r4, #16]
 800d3ca:	0020      	movs	r0, r4
 800d3cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800d3ce <__hi0bits>:
 800d3ce:	0003      	movs	r3, r0
 800d3d0:	0c02      	lsrs	r2, r0, #16
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	4282      	cmp	r2, r0
 800d3d6:	d101      	bne.n	800d3dc <__hi0bits+0xe>
 800d3d8:	041b      	lsls	r3, r3, #16
 800d3da:	3010      	adds	r0, #16
 800d3dc:	0e1a      	lsrs	r2, r3, #24
 800d3de:	d101      	bne.n	800d3e4 <__hi0bits+0x16>
 800d3e0:	3008      	adds	r0, #8
 800d3e2:	021b      	lsls	r3, r3, #8
 800d3e4:	0f1a      	lsrs	r2, r3, #28
 800d3e6:	d101      	bne.n	800d3ec <__hi0bits+0x1e>
 800d3e8:	3004      	adds	r0, #4
 800d3ea:	011b      	lsls	r3, r3, #4
 800d3ec:	0f9a      	lsrs	r2, r3, #30
 800d3ee:	d101      	bne.n	800d3f4 <__hi0bits+0x26>
 800d3f0:	3002      	adds	r0, #2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	db03      	blt.n	800d400 <__hi0bits+0x32>
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	d400      	bmi.n	800d400 <__hi0bits+0x32>
 800d3fe:	2020      	movs	r0, #32
 800d400:	4770      	bx	lr

0800d402 <__lo0bits>:
 800d402:	2207      	movs	r2, #7
 800d404:	6803      	ldr	r3, [r0, #0]
 800d406:	b510      	push	{r4, lr}
 800d408:	0001      	movs	r1, r0
 800d40a:	401a      	ands	r2, r3
 800d40c:	d00d      	beq.n	800d42a <__lo0bits+0x28>
 800d40e:	2401      	movs	r4, #1
 800d410:	2000      	movs	r0, #0
 800d412:	4223      	tst	r3, r4
 800d414:	d105      	bne.n	800d422 <__lo0bits+0x20>
 800d416:	3002      	adds	r0, #2
 800d418:	4203      	tst	r3, r0
 800d41a:	d003      	beq.n	800d424 <__lo0bits+0x22>
 800d41c:	40e3      	lsrs	r3, r4
 800d41e:	0020      	movs	r0, r4
 800d420:	600b      	str	r3, [r1, #0]
 800d422:	bd10      	pop	{r4, pc}
 800d424:	089b      	lsrs	r3, r3, #2
 800d426:	600b      	str	r3, [r1, #0]
 800d428:	e7fb      	b.n	800d422 <__lo0bits+0x20>
 800d42a:	b29c      	uxth	r4, r3
 800d42c:	0010      	movs	r0, r2
 800d42e:	2c00      	cmp	r4, #0
 800d430:	d101      	bne.n	800d436 <__lo0bits+0x34>
 800d432:	2010      	movs	r0, #16
 800d434:	0c1b      	lsrs	r3, r3, #16
 800d436:	b2da      	uxtb	r2, r3
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d101      	bne.n	800d440 <__lo0bits+0x3e>
 800d43c:	3008      	adds	r0, #8
 800d43e:	0a1b      	lsrs	r3, r3, #8
 800d440:	071a      	lsls	r2, r3, #28
 800d442:	d101      	bne.n	800d448 <__lo0bits+0x46>
 800d444:	3004      	adds	r0, #4
 800d446:	091b      	lsrs	r3, r3, #4
 800d448:	079a      	lsls	r2, r3, #30
 800d44a:	d101      	bne.n	800d450 <__lo0bits+0x4e>
 800d44c:	3002      	adds	r0, #2
 800d44e:	089b      	lsrs	r3, r3, #2
 800d450:	07da      	lsls	r2, r3, #31
 800d452:	d4e8      	bmi.n	800d426 <__lo0bits+0x24>
 800d454:	085b      	lsrs	r3, r3, #1
 800d456:	d001      	beq.n	800d45c <__lo0bits+0x5a>
 800d458:	3001      	adds	r0, #1
 800d45a:	e7e4      	b.n	800d426 <__lo0bits+0x24>
 800d45c:	2020      	movs	r0, #32
 800d45e:	e7e0      	b.n	800d422 <__lo0bits+0x20>

0800d460 <__i2b>:
 800d460:	b510      	push	{r4, lr}
 800d462:	000c      	movs	r4, r1
 800d464:	2101      	movs	r1, #1
 800d466:	f7ff ff23 	bl	800d2b0 <_Balloc>
 800d46a:	2301      	movs	r3, #1
 800d46c:	6144      	str	r4, [r0, #20]
 800d46e:	6103      	str	r3, [r0, #16]
 800d470:	bd10      	pop	{r4, pc}

0800d472 <__multiply>:
 800d472:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d474:	690b      	ldr	r3, [r1, #16]
 800d476:	0014      	movs	r4, r2
 800d478:	6912      	ldr	r2, [r2, #16]
 800d47a:	b089      	sub	sp, #36	; 0x24
 800d47c:	000d      	movs	r5, r1
 800d47e:	4293      	cmp	r3, r2
 800d480:	da01      	bge.n	800d486 <__multiply+0x14>
 800d482:	0025      	movs	r5, r4
 800d484:	000c      	movs	r4, r1
 800d486:	692f      	ldr	r7, [r5, #16]
 800d488:	6926      	ldr	r6, [r4, #16]
 800d48a:	6869      	ldr	r1, [r5, #4]
 800d48c:	19bb      	adds	r3, r7, r6
 800d48e:	9302      	str	r3, [sp, #8]
 800d490:	68ab      	ldr	r3, [r5, #8]
 800d492:	19ba      	adds	r2, r7, r6
 800d494:	4293      	cmp	r3, r2
 800d496:	da00      	bge.n	800d49a <__multiply+0x28>
 800d498:	3101      	adds	r1, #1
 800d49a:	f7ff ff09 	bl	800d2b0 <_Balloc>
 800d49e:	0002      	movs	r2, r0
 800d4a0:	19bb      	adds	r3, r7, r6
 800d4a2:	3214      	adds	r2, #20
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	18d3      	adds	r3, r2, r3
 800d4a8:	469c      	mov	ip, r3
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	0013      	movs	r3, r2
 800d4ae:	9004      	str	r0, [sp, #16]
 800d4b0:	4563      	cmp	r3, ip
 800d4b2:	d31d      	bcc.n	800d4f0 <__multiply+0x7e>
 800d4b4:	3514      	adds	r5, #20
 800d4b6:	00bf      	lsls	r7, r7, #2
 800d4b8:	19eb      	adds	r3, r5, r7
 800d4ba:	3414      	adds	r4, #20
 800d4bc:	00b6      	lsls	r6, r6, #2
 800d4be:	9305      	str	r3, [sp, #20]
 800d4c0:	19a3      	adds	r3, r4, r6
 800d4c2:	9503      	str	r5, [sp, #12]
 800d4c4:	9401      	str	r4, [sp, #4]
 800d4c6:	9307      	str	r3, [sp, #28]
 800d4c8:	9b07      	ldr	r3, [sp, #28]
 800d4ca:	9901      	ldr	r1, [sp, #4]
 800d4cc:	4299      	cmp	r1, r3
 800d4ce:	d311      	bcc.n	800d4f4 <__multiply+0x82>
 800d4d0:	9b02      	ldr	r3, [sp, #8]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	dd06      	ble.n	800d4e4 <__multiply+0x72>
 800d4d6:	2304      	movs	r3, #4
 800d4d8:	425b      	negs	r3, r3
 800d4da:	449c      	add	ip, r3
 800d4dc:	4663      	mov	r3, ip
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d051      	beq.n	800d588 <__multiply+0x116>
 800d4e4:	9b04      	ldr	r3, [sp, #16]
 800d4e6:	9a02      	ldr	r2, [sp, #8]
 800d4e8:	0018      	movs	r0, r3
 800d4ea:	611a      	str	r2, [r3, #16]
 800d4ec:	b009      	add	sp, #36	; 0x24
 800d4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4f0:	c302      	stmia	r3!, {r1}
 800d4f2:	e7dd      	b.n	800d4b0 <__multiply+0x3e>
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	b298      	uxth	r0, r3
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d01c      	beq.n	800d538 <__multiply+0xc6>
 800d4fe:	0015      	movs	r5, r2
 800d500:	2600      	movs	r6, #0
 800d502:	9f03      	ldr	r7, [sp, #12]
 800d504:	cf02      	ldmia	r7!, {r1}
 800d506:	682c      	ldr	r4, [r5, #0]
 800d508:	b28b      	uxth	r3, r1
 800d50a:	4343      	muls	r3, r0
 800d50c:	0c09      	lsrs	r1, r1, #16
 800d50e:	4341      	muls	r1, r0
 800d510:	b2a4      	uxth	r4, r4
 800d512:	191b      	adds	r3, r3, r4
 800d514:	199b      	adds	r3, r3, r6
 800d516:	000e      	movs	r6, r1
 800d518:	6829      	ldr	r1, [r5, #0]
 800d51a:	9506      	str	r5, [sp, #24]
 800d51c:	0c09      	lsrs	r1, r1, #16
 800d51e:	1871      	adds	r1, r6, r1
 800d520:	0c1e      	lsrs	r6, r3, #16
 800d522:	1989      	adds	r1, r1, r6
 800d524:	0c0e      	lsrs	r6, r1, #16
 800d526:	b29b      	uxth	r3, r3
 800d528:	0409      	lsls	r1, r1, #16
 800d52a:	430b      	orrs	r3, r1
 800d52c:	c508      	stmia	r5!, {r3}
 800d52e:	9b05      	ldr	r3, [sp, #20]
 800d530:	42bb      	cmp	r3, r7
 800d532:	d8e7      	bhi.n	800d504 <__multiply+0x92>
 800d534:	9b06      	ldr	r3, [sp, #24]
 800d536:	605e      	str	r6, [r3, #4]
 800d538:	9b01      	ldr	r3, [sp, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	0c1d      	lsrs	r5, r3, #16
 800d53e:	d01e      	beq.n	800d57e <__multiply+0x10c>
 800d540:	0010      	movs	r0, r2
 800d542:	2700      	movs	r7, #0
 800d544:	6813      	ldr	r3, [r2, #0]
 800d546:	9e03      	ldr	r6, [sp, #12]
 800d548:	6831      	ldr	r1, [r6, #0]
 800d54a:	6804      	ldr	r4, [r0, #0]
 800d54c:	b289      	uxth	r1, r1
 800d54e:	4369      	muls	r1, r5
 800d550:	0c24      	lsrs	r4, r4, #16
 800d552:	1909      	adds	r1, r1, r4
 800d554:	19c9      	adds	r1, r1, r7
 800d556:	040f      	lsls	r7, r1, #16
 800d558:	b29b      	uxth	r3, r3
 800d55a:	433b      	orrs	r3, r7
 800d55c:	6003      	str	r3, [r0, #0]
 800d55e:	ce80      	ldmia	r6!, {r7}
 800d560:	6843      	ldr	r3, [r0, #4]
 800d562:	0c3f      	lsrs	r7, r7, #16
 800d564:	436f      	muls	r7, r5
 800d566:	b29b      	uxth	r3, r3
 800d568:	18fb      	adds	r3, r7, r3
 800d56a:	0c09      	lsrs	r1, r1, #16
 800d56c:	185b      	adds	r3, r3, r1
 800d56e:	9905      	ldr	r1, [sp, #20]
 800d570:	9006      	str	r0, [sp, #24]
 800d572:	0c1f      	lsrs	r7, r3, #16
 800d574:	3004      	adds	r0, #4
 800d576:	42b1      	cmp	r1, r6
 800d578:	d8e6      	bhi.n	800d548 <__multiply+0xd6>
 800d57a:	9906      	ldr	r1, [sp, #24]
 800d57c:	604b      	str	r3, [r1, #4]
 800d57e:	9b01      	ldr	r3, [sp, #4]
 800d580:	3204      	adds	r2, #4
 800d582:	3304      	adds	r3, #4
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	e79f      	b.n	800d4c8 <__multiply+0x56>
 800d588:	9b02      	ldr	r3, [sp, #8]
 800d58a:	3b01      	subs	r3, #1
 800d58c:	9302      	str	r3, [sp, #8]
 800d58e:	e79f      	b.n	800d4d0 <__multiply+0x5e>

0800d590 <__pow5mult>:
 800d590:	2303      	movs	r3, #3
 800d592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d594:	4013      	ands	r3, r2
 800d596:	0005      	movs	r5, r0
 800d598:	000e      	movs	r6, r1
 800d59a:	0014      	movs	r4, r2
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d008      	beq.n	800d5b2 <__pow5mult+0x22>
 800d5a0:	4922      	ldr	r1, [pc, #136]	; (800d62c <__pow5mult+0x9c>)
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	009a      	lsls	r2, r3, #2
 800d5a6:	5852      	ldr	r2, [r2, r1]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	0031      	movs	r1, r6
 800d5ac:	f7ff fed1 	bl	800d352 <__multadd>
 800d5b0:	0006      	movs	r6, r0
 800d5b2:	10a3      	asrs	r3, r4, #2
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	d036      	beq.n	800d626 <__pow5mult+0x96>
 800d5b8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800d5ba:	2c00      	cmp	r4, #0
 800d5bc:	d107      	bne.n	800d5ce <__pow5mult+0x3e>
 800d5be:	2010      	movs	r0, #16
 800d5c0:	f7ff fe58 	bl	800d274 <malloc>
 800d5c4:	6268      	str	r0, [r5, #36]	; 0x24
 800d5c6:	6044      	str	r4, [r0, #4]
 800d5c8:	6084      	str	r4, [r0, #8]
 800d5ca:	6004      	str	r4, [r0, #0]
 800d5cc:	60c4      	str	r4, [r0, #12]
 800d5ce:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800d5d0:	68bc      	ldr	r4, [r7, #8]
 800d5d2:	2c00      	cmp	r4, #0
 800d5d4:	d107      	bne.n	800d5e6 <__pow5mult+0x56>
 800d5d6:	4916      	ldr	r1, [pc, #88]	; (800d630 <__pow5mult+0xa0>)
 800d5d8:	0028      	movs	r0, r5
 800d5da:	f7ff ff41 	bl	800d460 <__i2b>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	0004      	movs	r4, r0
 800d5e2:	60b8      	str	r0, [r7, #8]
 800d5e4:	6003      	str	r3, [r0, #0]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	9b01      	ldr	r3, [sp, #4]
 800d5ea:	4213      	tst	r3, r2
 800d5ec:	d00a      	beq.n	800d604 <__pow5mult+0x74>
 800d5ee:	0031      	movs	r1, r6
 800d5f0:	0022      	movs	r2, r4
 800d5f2:	0028      	movs	r0, r5
 800d5f4:	f7ff ff3d 	bl	800d472 <__multiply>
 800d5f8:	0007      	movs	r7, r0
 800d5fa:	0031      	movs	r1, r6
 800d5fc:	0028      	movs	r0, r5
 800d5fe:	f7ff fe8f 	bl	800d320 <_Bfree>
 800d602:	003e      	movs	r6, r7
 800d604:	9b01      	ldr	r3, [sp, #4]
 800d606:	105b      	asrs	r3, r3, #1
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	d00c      	beq.n	800d626 <__pow5mult+0x96>
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	2800      	cmp	r0, #0
 800d610:	d107      	bne.n	800d622 <__pow5mult+0x92>
 800d612:	0022      	movs	r2, r4
 800d614:	0021      	movs	r1, r4
 800d616:	0028      	movs	r0, r5
 800d618:	f7ff ff2b 	bl	800d472 <__multiply>
 800d61c:	2300      	movs	r3, #0
 800d61e:	6020      	str	r0, [r4, #0]
 800d620:	6003      	str	r3, [r0, #0]
 800d622:	0004      	movs	r4, r0
 800d624:	e7df      	b.n	800d5e6 <__pow5mult+0x56>
 800d626:	0030      	movs	r0, r6
 800d628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d62a:	46c0      	nop			; (mov r8, r8)
 800d62c:	0800fc78 	.word	0x0800fc78
 800d630:	00000271 	.word	0x00000271

0800d634 <__lshift>:
 800d634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d636:	000d      	movs	r5, r1
 800d638:	0017      	movs	r7, r2
 800d63a:	692b      	ldr	r3, [r5, #16]
 800d63c:	1154      	asrs	r4, r2, #5
 800d63e:	b085      	sub	sp, #20
 800d640:	18e3      	adds	r3, r4, r3
 800d642:	9301      	str	r3, [sp, #4]
 800d644:	3301      	adds	r3, #1
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	6849      	ldr	r1, [r1, #4]
 800d64a:	68ab      	ldr	r3, [r5, #8]
 800d64c:	9002      	str	r0, [sp, #8]
 800d64e:	9a00      	ldr	r2, [sp, #0]
 800d650:	4293      	cmp	r3, r2
 800d652:	db35      	blt.n	800d6c0 <__lshift+0x8c>
 800d654:	9802      	ldr	r0, [sp, #8]
 800d656:	f7ff fe2b 	bl	800d2b0 <_Balloc>
 800d65a:	2300      	movs	r3, #0
 800d65c:	0002      	movs	r2, r0
 800d65e:	0006      	movs	r6, r0
 800d660:	0019      	movs	r1, r3
 800d662:	3214      	adds	r2, #20
 800d664:	42a3      	cmp	r3, r4
 800d666:	db2e      	blt.n	800d6c6 <__lshift+0x92>
 800d668:	43e3      	mvns	r3, r4
 800d66a:	17db      	asrs	r3, r3, #31
 800d66c:	401c      	ands	r4, r3
 800d66e:	002b      	movs	r3, r5
 800d670:	00a4      	lsls	r4, r4, #2
 800d672:	1914      	adds	r4, r2, r4
 800d674:	692a      	ldr	r2, [r5, #16]
 800d676:	3314      	adds	r3, #20
 800d678:	0092      	lsls	r2, r2, #2
 800d67a:	189a      	adds	r2, r3, r2
 800d67c:	4694      	mov	ip, r2
 800d67e:	221f      	movs	r2, #31
 800d680:	4017      	ands	r7, r2
 800d682:	d024      	beq.n	800d6ce <__lshift+0x9a>
 800d684:	3201      	adds	r2, #1
 800d686:	1bd2      	subs	r2, r2, r7
 800d688:	9203      	str	r2, [sp, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	6819      	ldr	r1, [r3, #0]
 800d68e:	0020      	movs	r0, r4
 800d690:	40b9      	lsls	r1, r7
 800d692:	430a      	orrs	r2, r1
 800d694:	c404      	stmia	r4!, {r2}
 800d696:	cb04      	ldmia	r3!, {r2}
 800d698:	9903      	ldr	r1, [sp, #12]
 800d69a:	40ca      	lsrs	r2, r1
 800d69c:	459c      	cmp	ip, r3
 800d69e:	d8f5      	bhi.n	800d68c <__lshift+0x58>
 800d6a0:	6042      	str	r2, [r0, #4]
 800d6a2:	2a00      	cmp	r2, #0
 800d6a4:	d002      	beq.n	800d6ac <__lshift+0x78>
 800d6a6:	9b01      	ldr	r3, [sp, #4]
 800d6a8:	3302      	adds	r3, #2
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	9b00      	ldr	r3, [sp, #0]
 800d6ae:	9802      	ldr	r0, [sp, #8]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	6133      	str	r3, [r6, #16]
 800d6b4:	0029      	movs	r1, r5
 800d6b6:	f7ff fe33 	bl	800d320 <_Bfree>
 800d6ba:	0030      	movs	r0, r6
 800d6bc:	b005      	add	sp, #20
 800d6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6c0:	3101      	adds	r1, #1
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	e7c3      	b.n	800d64e <__lshift+0x1a>
 800d6c6:	0098      	lsls	r0, r3, #2
 800d6c8:	5011      	str	r1, [r2, r0]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	e7ca      	b.n	800d664 <__lshift+0x30>
 800d6ce:	cb04      	ldmia	r3!, {r2}
 800d6d0:	c404      	stmia	r4!, {r2}
 800d6d2:	459c      	cmp	ip, r3
 800d6d4:	d8fb      	bhi.n	800d6ce <__lshift+0x9a>
 800d6d6:	e7e9      	b.n	800d6ac <__lshift+0x78>

0800d6d8 <__mcmp>:
 800d6d8:	690a      	ldr	r2, [r1, #16]
 800d6da:	6903      	ldr	r3, [r0, #16]
 800d6dc:	b530      	push	{r4, r5, lr}
 800d6de:	1a9b      	subs	r3, r3, r2
 800d6e0:	d10d      	bne.n	800d6fe <__mcmp+0x26>
 800d6e2:	0092      	lsls	r2, r2, #2
 800d6e4:	3014      	adds	r0, #20
 800d6e6:	3114      	adds	r1, #20
 800d6e8:	1884      	adds	r4, r0, r2
 800d6ea:	1889      	adds	r1, r1, r2
 800d6ec:	3c04      	subs	r4, #4
 800d6ee:	3904      	subs	r1, #4
 800d6f0:	6825      	ldr	r5, [r4, #0]
 800d6f2:	680a      	ldr	r2, [r1, #0]
 800d6f4:	4295      	cmp	r5, r2
 800d6f6:	d004      	beq.n	800d702 <__mcmp+0x2a>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	4295      	cmp	r5, r2
 800d6fc:	d304      	bcc.n	800d708 <__mcmp+0x30>
 800d6fe:	0018      	movs	r0, r3
 800d700:	bd30      	pop	{r4, r5, pc}
 800d702:	42a0      	cmp	r0, r4
 800d704:	d3f2      	bcc.n	800d6ec <__mcmp+0x14>
 800d706:	e7fa      	b.n	800d6fe <__mcmp+0x26>
 800d708:	425b      	negs	r3, r3
 800d70a:	e7f8      	b.n	800d6fe <__mcmp+0x26>

0800d70c <__mdiff>:
 800d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d70e:	000d      	movs	r5, r1
 800d710:	b085      	sub	sp, #20
 800d712:	0007      	movs	r7, r0
 800d714:	0011      	movs	r1, r2
 800d716:	0028      	movs	r0, r5
 800d718:	0014      	movs	r4, r2
 800d71a:	f7ff ffdd 	bl	800d6d8 <__mcmp>
 800d71e:	1e06      	subs	r6, r0, #0
 800d720:	d108      	bne.n	800d734 <__mdiff+0x28>
 800d722:	0001      	movs	r1, r0
 800d724:	0038      	movs	r0, r7
 800d726:	f7ff fdc3 	bl	800d2b0 <_Balloc>
 800d72a:	2301      	movs	r3, #1
 800d72c:	6146      	str	r6, [r0, #20]
 800d72e:	6103      	str	r3, [r0, #16]
 800d730:	b005      	add	sp, #20
 800d732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d734:	2301      	movs	r3, #1
 800d736:	9301      	str	r3, [sp, #4]
 800d738:	2800      	cmp	r0, #0
 800d73a:	db04      	blt.n	800d746 <__mdiff+0x3a>
 800d73c:	0023      	movs	r3, r4
 800d73e:	002c      	movs	r4, r5
 800d740:	001d      	movs	r5, r3
 800d742:	2300      	movs	r3, #0
 800d744:	9301      	str	r3, [sp, #4]
 800d746:	6861      	ldr	r1, [r4, #4]
 800d748:	0038      	movs	r0, r7
 800d74a:	f7ff fdb1 	bl	800d2b0 <_Balloc>
 800d74e:	002f      	movs	r7, r5
 800d750:	2200      	movs	r2, #0
 800d752:	9b01      	ldr	r3, [sp, #4]
 800d754:	6926      	ldr	r6, [r4, #16]
 800d756:	60c3      	str	r3, [r0, #12]
 800d758:	3414      	adds	r4, #20
 800d75a:	00b3      	lsls	r3, r6, #2
 800d75c:	18e3      	adds	r3, r4, r3
 800d75e:	9302      	str	r3, [sp, #8]
 800d760:	692b      	ldr	r3, [r5, #16]
 800d762:	3714      	adds	r7, #20
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	18fb      	adds	r3, r7, r3
 800d768:	9303      	str	r3, [sp, #12]
 800d76a:	0003      	movs	r3, r0
 800d76c:	4694      	mov	ip, r2
 800d76e:	3314      	adds	r3, #20
 800d770:	cc20      	ldmia	r4!, {r5}
 800d772:	cf04      	ldmia	r7!, {r2}
 800d774:	9201      	str	r2, [sp, #4]
 800d776:	b2aa      	uxth	r2, r5
 800d778:	4494      	add	ip, r2
 800d77a:	466a      	mov	r2, sp
 800d77c:	4661      	mov	r1, ip
 800d77e:	8892      	ldrh	r2, [r2, #4]
 800d780:	0c2d      	lsrs	r5, r5, #16
 800d782:	1a8a      	subs	r2, r1, r2
 800d784:	9901      	ldr	r1, [sp, #4]
 800d786:	0c09      	lsrs	r1, r1, #16
 800d788:	1a69      	subs	r1, r5, r1
 800d78a:	1415      	asrs	r5, r2, #16
 800d78c:	1949      	adds	r1, r1, r5
 800d78e:	140d      	asrs	r5, r1, #16
 800d790:	b292      	uxth	r2, r2
 800d792:	0409      	lsls	r1, r1, #16
 800d794:	430a      	orrs	r2, r1
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	9a03      	ldr	r2, [sp, #12]
 800d79a:	46ac      	mov	ip, r5
 800d79c:	3304      	adds	r3, #4
 800d79e:	42ba      	cmp	r2, r7
 800d7a0:	d8e6      	bhi.n	800d770 <__mdiff+0x64>
 800d7a2:	9902      	ldr	r1, [sp, #8]
 800d7a4:	001a      	movs	r2, r3
 800d7a6:	428c      	cmp	r4, r1
 800d7a8:	d305      	bcc.n	800d7b6 <__mdiff+0xaa>
 800d7aa:	3a04      	subs	r2, #4
 800d7ac:	6813      	ldr	r3, [r2, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00e      	beq.n	800d7d0 <__mdiff+0xc4>
 800d7b2:	6106      	str	r6, [r0, #16]
 800d7b4:	e7bc      	b.n	800d730 <__mdiff+0x24>
 800d7b6:	cc04      	ldmia	r4!, {r2}
 800d7b8:	b291      	uxth	r1, r2
 800d7ba:	4461      	add	r1, ip
 800d7bc:	140d      	asrs	r5, r1, #16
 800d7be:	0c12      	lsrs	r2, r2, #16
 800d7c0:	1952      	adds	r2, r2, r5
 800d7c2:	1415      	asrs	r5, r2, #16
 800d7c4:	b289      	uxth	r1, r1
 800d7c6:	0412      	lsls	r2, r2, #16
 800d7c8:	430a      	orrs	r2, r1
 800d7ca:	46ac      	mov	ip, r5
 800d7cc:	c304      	stmia	r3!, {r2}
 800d7ce:	e7e8      	b.n	800d7a2 <__mdiff+0x96>
 800d7d0:	3e01      	subs	r6, #1
 800d7d2:	e7ea      	b.n	800d7aa <__mdiff+0x9e>

0800d7d4 <__d2b>:
 800d7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7d6:	001d      	movs	r5, r3
 800d7d8:	2101      	movs	r1, #1
 800d7da:	0014      	movs	r4, r2
 800d7dc:	9f08      	ldr	r7, [sp, #32]
 800d7de:	f7ff fd67 	bl	800d2b0 <_Balloc>
 800d7e2:	032b      	lsls	r3, r5, #12
 800d7e4:	006d      	lsls	r5, r5, #1
 800d7e6:	0006      	movs	r6, r0
 800d7e8:	0b1b      	lsrs	r3, r3, #12
 800d7ea:	0d6d      	lsrs	r5, r5, #21
 800d7ec:	d124      	bne.n	800d838 <__d2b+0x64>
 800d7ee:	9301      	str	r3, [sp, #4]
 800d7f0:	2c00      	cmp	r4, #0
 800d7f2:	d027      	beq.n	800d844 <__d2b+0x70>
 800d7f4:	4668      	mov	r0, sp
 800d7f6:	9400      	str	r4, [sp, #0]
 800d7f8:	f7ff fe03 	bl	800d402 <__lo0bits>
 800d7fc:	9c00      	ldr	r4, [sp, #0]
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d01e      	beq.n	800d840 <__d2b+0x6c>
 800d802:	9b01      	ldr	r3, [sp, #4]
 800d804:	2120      	movs	r1, #32
 800d806:	001a      	movs	r2, r3
 800d808:	1a09      	subs	r1, r1, r0
 800d80a:	408a      	lsls	r2, r1
 800d80c:	40c3      	lsrs	r3, r0
 800d80e:	4322      	orrs	r2, r4
 800d810:	6172      	str	r2, [r6, #20]
 800d812:	9301      	str	r3, [sp, #4]
 800d814:	9c01      	ldr	r4, [sp, #4]
 800d816:	61b4      	str	r4, [r6, #24]
 800d818:	1e63      	subs	r3, r4, #1
 800d81a:	419c      	sbcs	r4, r3
 800d81c:	3401      	adds	r4, #1
 800d81e:	6134      	str	r4, [r6, #16]
 800d820:	2d00      	cmp	r5, #0
 800d822:	d018      	beq.n	800d856 <__d2b+0x82>
 800d824:	4b12      	ldr	r3, [pc, #72]	; (800d870 <__d2b+0x9c>)
 800d826:	18ed      	adds	r5, r5, r3
 800d828:	2335      	movs	r3, #53	; 0x35
 800d82a:	182d      	adds	r5, r5, r0
 800d82c:	603d      	str	r5, [r7, #0]
 800d82e:	1a18      	subs	r0, r3, r0
 800d830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d832:	6018      	str	r0, [r3, #0]
 800d834:	0030      	movs	r0, r6
 800d836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d838:	2280      	movs	r2, #128	; 0x80
 800d83a:	0352      	lsls	r2, r2, #13
 800d83c:	4313      	orrs	r3, r2
 800d83e:	e7d6      	b.n	800d7ee <__d2b+0x1a>
 800d840:	6174      	str	r4, [r6, #20]
 800d842:	e7e7      	b.n	800d814 <__d2b+0x40>
 800d844:	a801      	add	r0, sp, #4
 800d846:	f7ff fddc 	bl	800d402 <__lo0bits>
 800d84a:	2401      	movs	r4, #1
 800d84c:	9b01      	ldr	r3, [sp, #4]
 800d84e:	6134      	str	r4, [r6, #16]
 800d850:	6173      	str	r3, [r6, #20]
 800d852:	3020      	adds	r0, #32
 800d854:	e7e4      	b.n	800d820 <__d2b+0x4c>
 800d856:	4b07      	ldr	r3, [pc, #28]	; (800d874 <__d2b+0xa0>)
 800d858:	18c0      	adds	r0, r0, r3
 800d85a:	4b07      	ldr	r3, [pc, #28]	; (800d878 <__d2b+0xa4>)
 800d85c:	6038      	str	r0, [r7, #0]
 800d85e:	18e3      	adds	r3, r4, r3
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	18f3      	adds	r3, r6, r3
 800d864:	6958      	ldr	r0, [r3, #20]
 800d866:	f7ff fdb2 	bl	800d3ce <__hi0bits>
 800d86a:	0164      	lsls	r4, r4, #5
 800d86c:	1a20      	subs	r0, r4, r0
 800d86e:	e7df      	b.n	800d830 <__d2b+0x5c>
 800d870:	fffffbcd 	.word	0xfffffbcd
 800d874:	fffffbce 	.word	0xfffffbce
 800d878:	3fffffff 	.word	0x3fffffff

0800d87c <_calloc_r>:
 800d87c:	434a      	muls	r2, r1
 800d87e:	b570      	push	{r4, r5, r6, lr}
 800d880:	0011      	movs	r1, r2
 800d882:	0014      	movs	r4, r2
 800d884:	f000 f852 	bl	800d92c <_malloc_r>
 800d888:	1e05      	subs	r5, r0, #0
 800d88a:	d003      	beq.n	800d894 <_calloc_r+0x18>
 800d88c:	0022      	movs	r2, r4
 800d88e:	2100      	movs	r1, #0
 800d890:	f7fe f907 	bl	800baa2 <memset>
 800d894:	0028      	movs	r0, r5
 800d896:	bd70      	pop	{r4, r5, r6, pc}

0800d898 <_free_r>:
 800d898:	b570      	push	{r4, r5, r6, lr}
 800d89a:	0005      	movs	r5, r0
 800d89c:	2900      	cmp	r1, #0
 800d89e:	d010      	beq.n	800d8c2 <_free_r+0x2a>
 800d8a0:	1f0c      	subs	r4, r1, #4
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	da00      	bge.n	800d8aa <_free_r+0x12>
 800d8a8:	18e4      	adds	r4, r4, r3
 800d8aa:	0028      	movs	r0, r5
 800d8ac:	f000 fdd2 	bl	800e454 <__malloc_lock>
 800d8b0:	4a1d      	ldr	r2, [pc, #116]	; (800d928 <_free_r+0x90>)
 800d8b2:	6813      	ldr	r3, [r2, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d105      	bne.n	800d8c4 <_free_r+0x2c>
 800d8b8:	6063      	str	r3, [r4, #4]
 800d8ba:	6014      	str	r4, [r2, #0]
 800d8bc:	0028      	movs	r0, r5
 800d8be:	f000 fdca 	bl	800e456 <__malloc_unlock>
 800d8c2:	bd70      	pop	{r4, r5, r6, pc}
 800d8c4:	42a3      	cmp	r3, r4
 800d8c6:	d909      	bls.n	800d8dc <_free_r+0x44>
 800d8c8:	6821      	ldr	r1, [r4, #0]
 800d8ca:	1860      	adds	r0, r4, r1
 800d8cc:	4283      	cmp	r3, r0
 800d8ce:	d1f3      	bne.n	800d8b8 <_free_r+0x20>
 800d8d0:	6818      	ldr	r0, [r3, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	1841      	adds	r1, r0, r1
 800d8d6:	6021      	str	r1, [r4, #0]
 800d8d8:	e7ee      	b.n	800d8b8 <_free_r+0x20>
 800d8da:	0013      	movs	r3, r2
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	d001      	beq.n	800d8e6 <_free_r+0x4e>
 800d8e2:	42a2      	cmp	r2, r4
 800d8e4:	d9f9      	bls.n	800d8da <_free_r+0x42>
 800d8e6:	6819      	ldr	r1, [r3, #0]
 800d8e8:	1858      	adds	r0, r3, r1
 800d8ea:	42a0      	cmp	r0, r4
 800d8ec:	d10b      	bne.n	800d906 <_free_r+0x6e>
 800d8ee:	6820      	ldr	r0, [r4, #0]
 800d8f0:	1809      	adds	r1, r1, r0
 800d8f2:	1858      	adds	r0, r3, r1
 800d8f4:	6019      	str	r1, [r3, #0]
 800d8f6:	4282      	cmp	r2, r0
 800d8f8:	d1e0      	bne.n	800d8bc <_free_r+0x24>
 800d8fa:	6810      	ldr	r0, [r2, #0]
 800d8fc:	6852      	ldr	r2, [r2, #4]
 800d8fe:	1841      	adds	r1, r0, r1
 800d900:	6019      	str	r1, [r3, #0]
 800d902:	605a      	str	r2, [r3, #4]
 800d904:	e7da      	b.n	800d8bc <_free_r+0x24>
 800d906:	42a0      	cmp	r0, r4
 800d908:	d902      	bls.n	800d910 <_free_r+0x78>
 800d90a:	230c      	movs	r3, #12
 800d90c:	602b      	str	r3, [r5, #0]
 800d90e:	e7d5      	b.n	800d8bc <_free_r+0x24>
 800d910:	6821      	ldr	r1, [r4, #0]
 800d912:	1860      	adds	r0, r4, r1
 800d914:	4282      	cmp	r2, r0
 800d916:	d103      	bne.n	800d920 <_free_r+0x88>
 800d918:	6810      	ldr	r0, [r2, #0]
 800d91a:	6852      	ldr	r2, [r2, #4]
 800d91c:	1841      	adds	r1, r0, r1
 800d91e:	6021      	str	r1, [r4, #0]
 800d920:	6062      	str	r2, [r4, #4]
 800d922:	605c      	str	r4, [r3, #4]
 800d924:	e7ca      	b.n	800d8bc <_free_r+0x24>
 800d926:	46c0      	nop			; (mov r8, r8)
 800d928:	200009b0 	.word	0x200009b0

0800d92c <_malloc_r>:
 800d92c:	2303      	movs	r3, #3
 800d92e:	b570      	push	{r4, r5, r6, lr}
 800d930:	1ccd      	adds	r5, r1, #3
 800d932:	439d      	bics	r5, r3
 800d934:	3508      	adds	r5, #8
 800d936:	0006      	movs	r6, r0
 800d938:	2d0c      	cmp	r5, #12
 800d93a:	d21e      	bcs.n	800d97a <_malloc_r+0x4e>
 800d93c:	250c      	movs	r5, #12
 800d93e:	42a9      	cmp	r1, r5
 800d940:	d81d      	bhi.n	800d97e <_malloc_r+0x52>
 800d942:	0030      	movs	r0, r6
 800d944:	f000 fd86 	bl	800e454 <__malloc_lock>
 800d948:	4a25      	ldr	r2, [pc, #148]	; (800d9e0 <_malloc_r+0xb4>)
 800d94a:	6814      	ldr	r4, [r2, #0]
 800d94c:	0021      	movs	r1, r4
 800d94e:	2900      	cmp	r1, #0
 800d950:	d119      	bne.n	800d986 <_malloc_r+0x5a>
 800d952:	4c24      	ldr	r4, [pc, #144]	; (800d9e4 <_malloc_r+0xb8>)
 800d954:	6823      	ldr	r3, [r4, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d103      	bne.n	800d962 <_malloc_r+0x36>
 800d95a:	0030      	movs	r0, r6
 800d95c:	f000 fae2 	bl	800df24 <_sbrk_r>
 800d960:	6020      	str	r0, [r4, #0]
 800d962:	0029      	movs	r1, r5
 800d964:	0030      	movs	r0, r6
 800d966:	f000 fadd 	bl	800df24 <_sbrk_r>
 800d96a:	1c43      	adds	r3, r0, #1
 800d96c:	d12b      	bne.n	800d9c6 <_malloc_r+0x9a>
 800d96e:	230c      	movs	r3, #12
 800d970:	0030      	movs	r0, r6
 800d972:	6033      	str	r3, [r6, #0]
 800d974:	f000 fd6f 	bl	800e456 <__malloc_unlock>
 800d978:	e003      	b.n	800d982 <_malloc_r+0x56>
 800d97a:	2d00      	cmp	r5, #0
 800d97c:	dadf      	bge.n	800d93e <_malloc_r+0x12>
 800d97e:	230c      	movs	r3, #12
 800d980:	6033      	str	r3, [r6, #0]
 800d982:	2000      	movs	r0, #0
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	680b      	ldr	r3, [r1, #0]
 800d988:	1b5b      	subs	r3, r3, r5
 800d98a:	d419      	bmi.n	800d9c0 <_malloc_r+0x94>
 800d98c:	2b0b      	cmp	r3, #11
 800d98e:	d903      	bls.n	800d998 <_malloc_r+0x6c>
 800d990:	600b      	str	r3, [r1, #0]
 800d992:	18cc      	adds	r4, r1, r3
 800d994:	6025      	str	r5, [r4, #0]
 800d996:	e003      	b.n	800d9a0 <_malloc_r+0x74>
 800d998:	684b      	ldr	r3, [r1, #4]
 800d99a:	428c      	cmp	r4, r1
 800d99c:	d10d      	bne.n	800d9ba <_malloc_r+0x8e>
 800d99e:	6013      	str	r3, [r2, #0]
 800d9a0:	0030      	movs	r0, r6
 800d9a2:	f000 fd58 	bl	800e456 <__malloc_unlock>
 800d9a6:	0020      	movs	r0, r4
 800d9a8:	2207      	movs	r2, #7
 800d9aa:	300b      	adds	r0, #11
 800d9ac:	1d23      	adds	r3, r4, #4
 800d9ae:	4390      	bics	r0, r2
 800d9b0:	1ac3      	subs	r3, r0, r3
 800d9b2:	d0e7      	beq.n	800d984 <_malloc_r+0x58>
 800d9b4:	425a      	negs	r2, r3
 800d9b6:	50e2      	str	r2, [r4, r3]
 800d9b8:	e7e4      	b.n	800d984 <_malloc_r+0x58>
 800d9ba:	6063      	str	r3, [r4, #4]
 800d9bc:	000c      	movs	r4, r1
 800d9be:	e7ef      	b.n	800d9a0 <_malloc_r+0x74>
 800d9c0:	000c      	movs	r4, r1
 800d9c2:	6849      	ldr	r1, [r1, #4]
 800d9c4:	e7c3      	b.n	800d94e <_malloc_r+0x22>
 800d9c6:	2303      	movs	r3, #3
 800d9c8:	1cc4      	adds	r4, r0, #3
 800d9ca:	439c      	bics	r4, r3
 800d9cc:	42a0      	cmp	r0, r4
 800d9ce:	d0e1      	beq.n	800d994 <_malloc_r+0x68>
 800d9d0:	1a21      	subs	r1, r4, r0
 800d9d2:	0030      	movs	r0, r6
 800d9d4:	f000 faa6 	bl	800df24 <_sbrk_r>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d1db      	bne.n	800d994 <_malloc_r+0x68>
 800d9dc:	e7c7      	b.n	800d96e <_malloc_r+0x42>
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	200009b0 	.word	0x200009b0
 800d9e4:	200009b4 	.word	0x200009b4

0800d9e8 <__ssputs_r>:
 800d9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ea:	688e      	ldr	r6, [r1, #8]
 800d9ec:	b085      	sub	sp, #20
 800d9ee:	0007      	movs	r7, r0
 800d9f0:	000c      	movs	r4, r1
 800d9f2:	9203      	str	r2, [sp, #12]
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	429e      	cmp	r6, r3
 800d9f8:	d83c      	bhi.n	800da74 <__ssputs_r+0x8c>
 800d9fa:	2390      	movs	r3, #144	; 0x90
 800d9fc:	898a      	ldrh	r2, [r1, #12]
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	421a      	tst	r2, r3
 800da02:	d034      	beq.n	800da6e <__ssputs_r+0x86>
 800da04:	2503      	movs	r5, #3
 800da06:	6909      	ldr	r1, [r1, #16]
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	1a5b      	subs	r3, r3, r1
 800da0c:	9302      	str	r3, [sp, #8]
 800da0e:	6963      	ldr	r3, [r4, #20]
 800da10:	9802      	ldr	r0, [sp, #8]
 800da12:	435d      	muls	r5, r3
 800da14:	0feb      	lsrs	r3, r5, #31
 800da16:	195d      	adds	r5, r3, r5
 800da18:	9b01      	ldr	r3, [sp, #4]
 800da1a:	106d      	asrs	r5, r5, #1
 800da1c:	3301      	adds	r3, #1
 800da1e:	181b      	adds	r3, r3, r0
 800da20:	42ab      	cmp	r3, r5
 800da22:	d900      	bls.n	800da26 <__ssputs_r+0x3e>
 800da24:	001d      	movs	r5, r3
 800da26:	0553      	lsls	r3, r2, #21
 800da28:	d532      	bpl.n	800da90 <__ssputs_r+0xa8>
 800da2a:	0029      	movs	r1, r5
 800da2c:	0038      	movs	r0, r7
 800da2e:	f7ff ff7d 	bl	800d92c <_malloc_r>
 800da32:	1e06      	subs	r6, r0, #0
 800da34:	d109      	bne.n	800da4a <__ssputs_r+0x62>
 800da36:	230c      	movs	r3, #12
 800da38:	603b      	str	r3, [r7, #0]
 800da3a:	2340      	movs	r3, #64	; 0x40
 800da3c:	2001      	movs	r0, #1
 800da3e:	89a2      	ldrh	r2, [r4, #12]
 800da40:	4240      	negs	r0, r0
 800da42:	4313      	orrs	r3, r2
 800da44:	81a3      	strh	r3, [r4, #12]
 800da46:	b005      	add	sp, #20
 800da48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da4a:	9a02      	ldr	r2, [sp, #8]
 800da4c:	6921      	ldr	r1, [r4, #16]
 800da4e:	f7ff fc26 	bl	800d29e <memcpy>
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	4a14      	ldr	r2, [pc, #80]	; (800daa8 <__ssputs_r+0xc0>)
 800da56:	401a      	ands	r2, r3
 800da58:	2380      	movs	r3, #128	; 0x80
 800da5a:	4313      	orrs	r3, r2
 800da5c:	81a3      	strh	r3, [r4, #12]
 800da5e:	9b02      	ldr	r3, [sp, #8]
 800da60:	6126      	str	r6, [r4, #16]
 800da62:	18f6      	adds	r6, r6, r3
 800da64:	6026      	str	r6, [r4, #0]
 800da66:	6165      	str	r5, [r4, #20]
 800da68:	9e01      	ldr	r6, [sp, #4]
 800da6a:	1aed      	subs	r5, r5, r3
 800da6c:	60a5      	str	r5, [r4, #8]
 800da6e:	9b01      	ldr	r3, [sp, #4]
 800da70:	429e      	cmp	r6, r3
 800da72:	d900      	bls.n	800da76 <__ssputs_r+0x8e>
 800da74:	9e01      	ldr	r6, [sp, #4]
 800da76:	0032      	movs	r2, r6
 800da78:	9903      	ldr	r1, [sp, #12]
 800da7a:	6820      	ldr	r0, [r4, #0]
 800da7c:	f7fd fffe 	bl	800ba7c <memmove>
 800da80:	68a3      	ldr	r3, [r4, #8]
 800da82:	2000      	movs	r0, #0
 800da84:	1b9b      	subs	r3, r3, r6
 800da86:	60a3      	str	r3, [r4, #8]
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	199e      	adds	r6, r3, r6
 800da8c:	6026      	str	r6, [r4, #0]
 800da8e:	e7da      	b.n	800da46 <__ssputs_r+0x5e>
 800da90:	002a      	movs	r2, r5
 800da92:	0038      	movs	r0, r7
 800da94:	f000 fce0 	bl	800e458 <_realloc_r>
 800da98:	1e06      	subs	r6, r0, #0
 800da9a:	d1e0      	bne.n	800da5e <__ssputs_r+0x76>
 800da9c:	6921      	ldr	r1, [r4, #16]
 800da9e:	0038      	movs	r0, r7
 800daa0:	f7ff fefa 	bl	800d898 <_free_r>
 800daa4:	e7c7      	b.n	800da36 <__ssputs_r+0x4e>
 800daa6:	46c0      	nop			; (mov r8, r8)
 800daa8:	fffffb7f 	.word	0xfffffb7f

0800daac <_svfiprintf_r>:
 800daac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daae:	b0a1      	sub	sp, #132	; 0x84
 800dab0:	9003      	str	r0, [sp, #12]
 800dab2:	001d      	movs	r5, r3
 800dab4:	898b      	ldrh	r3, [r1, #12]
 800dab6:	000f      	movs	r7, r1
 800dab8:	0016      	movs	r6, r2
 800daba:	061b      	lsls	r3, r3, #24
 800dabc:	d511      	bpl.n	800dae2 <_svfiprintf_r+0x36>
 800dabe:	690b      	ldr	r3, [r1, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10e      	bne.n	800dae2 <_svfiprintf_r+0x36>
 800dac4:	2140      	movs	r1, #64	; 0x40
 800dac6:	f7ff ff31 	bl	800d92c <_malloc_r>
 800daca:	6038      	str	r0, [r7, #0]
 800dacc:	6138      	str	r0, [r7, #16]
 800dace:	2800      	cmp	r0, #0
 800dad0:	d105      	bne.n	800dade <_svfiprintf_r+0x32>
 800dad2:	230c      	movs	r3, #12
 800dad4:	9a03      	ldr	r2, [sp, #12]
 800dad6:	3801      	subs	r0, #1
 800dad8:	6013      	str	r3, [r2, #0]
 800dada:	b021      	add	sp, #132	; 0x84
 800dadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dade:	2340      	movs	r3, #64	; 0x40
 800dae0:	617b      	str	r3, [r7, #20]
 800dae2:	2300      	movs	r3, #0
 800dae4:	ac08      	add	r4, sp, #32
 800dae6:	6163      	str	r3, [r4, #20]
 800dae8:	3320      	adds	r3, #32
 800daea:	7663      	strb	r3, [r4, #25]
 800daec:	3310      	adds	r3, #16
 800daee:	76a3      	strb	r3, [r4, #26]
 800daf0:	9507      	str	r5, [sp, #28]
 800daf2:	0035      	movs	r5, r6
 800daf4:	782b      	ldrb	r3, [r5, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <_svfiprintf_r+0x52>
 800dafa:	2b25      	cmp	r3, #37	; 0x25
 800dafc:	d146      	bne.n	800db8c <_svfiprintf_r+0xe0>
 800dafe:	1bab      	subs	r3, r5, r6
 800db00:	9305      	str	r3, [sp, #20]
 800db02:	d00c      	beq.n	800db1e <_svfiprintf_r+0x72>
 800db04:	0032      	movs	r2, r6
 800db06:	0039      	movs	r1, r7
 800db08:	9803      	ldr	r0, [sp, #12]
 800db0a:	f7ff ff6d 	bl	800d9e8 <__ssputs_r>
 800db0e:	1c43      	adds	r3, r0, #1
 800db10:	d100      	bne.n	800db14 <_svfiprintf_r+0x68>
 800db12:	e0ae      	b.n	800dc72 <_svfiprintf_r+0x1c6>
 800db14:	6962      	ldr	r2, [r4, #20]
 800db16:	9b05      	ldr	r3, [sp, #20]
 800db18:	4694      	mov	ip, r2
 800db1a:	4463      	add	r3, ip
 800db1c:	6163      	str	r3, [r4, #20]
 800db1e:	782b      	ldrb	r3, [r5, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d100      	bne.n	800db26 <_svfiprintf_r+0x7a>
 800db24:	e0a5      	b.n	800dc72 <_svfiprintf_r+0x1c6>
 800db26:	2201      	movs	r2, #1
 800db28:	2300      	movs	r3, #0
 800db2a:	4252      	negs	r2, r2
 800db2c:	6062      	str	r2, [r4, #4]
 800db2e:	a904      	add	r1, sp, #16
 800db30:	3254      	adds	r2, #84	; 0x54
 800db32:	1852      	adds	r2, r2, r1
 800db34:	1c6e      	adds	r6, r5, #1
 800db36:	6023      	str	r3, [r4, #0]
 800db38:	60e3      	str	r3, [r4, #12]
 800db3a:	60a3      	str	r3, [r4, #8]
 800db3c:	7013      	strb	r3, [r2, #0]
 800db3e:	65a3      	str	r3, [r4, #88]	; 0x58
 800db40:	7831      	ldrb	r1, [r6, #0]
 800db42:	2205      	movs	r2, #5
 800db44:	4853      	ldr	r0, [pc, #332]	; (800dc94 <_svfiprintf_r+0x1e8>)
 800db46:	f7ff fb9f 	bl	800d288 <memchr>
 800db4a:	1c75      	adds	r5, r6, #1
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d11f      	bne.n	800db90 <_svfiprintf_r+0xe4>
 800db50:	6822      	ldr	r2, [r4, #0]
 800db52:	06d3      	lsls	r3, r2, #27
 800db54:	d504      	bpl.n	800db60 <_svfiprintf_r+0xb4>
 800db56:	2353      	movs	r3, #83	; 0x53
 800db58:	a904      	add	r1, sp, #16
 800db5a:	185b      	adds	r3, r3, r1
 800db5c:	2120      	movs	r1, #32
 800db5e:	7019      	strb	r1, [r3, #0]
 800db60:	0713      	lsls	r3, r2, #28
 800db62:	d504      	bpl.n	800db6e <_svfiprintf_r+0xc2>
 800db64:	2353      	movs	r3, #83	; 0x53
 800db66:	a904      	add	r1, sp, #16
 800db68:	185b      	adds	r3, r3, r1
 800db6a:	212b      	movs	r1, #43	; 0x2b
 800db6c:	7019      	strb	r1, [r3, #0]
 800db6e:	7833      	ldrb	r3, [r6, #0]
 800db70:	2b2a      	cmp	r3, #42	; 0x2a
 800db72:	d016      	beq.n	800dba2 <_svfiprintf_r+0xf6>
 800db74:	0035      	movs	r5, r6
 800db76:	2100      	movs	r1, #0
 800db78:	200a      	movs	r0, #10
 800db7a:	68e3      	ldr	r3, [r4, #12]
 800db7c:	782a      	ldrb	r2, [r5, #0]
 800db7e:	1c6e      	adds	r6, r5, #1
 800db80:	3a30      	subs	r2, #48	; 0x30
 800db82:	2a09      	cmp	r2, #9
 800db84:	d94e      	bls.n	800dc24 <_svfiprintf_r+0x178>
 800db86:	2900      	cmp	r1, #0
 800db88:	d018      	beq.n	800dbbc <_svfiprintf_r+0x110>
 800db8a:	e010      	b.n	800dbae <_svfiprintf_r+0x102>
 800db8c:	3501      	adds	r5, #1
 800db8e:	e7b1      	b.n	800daf4 <_svfiprintf_r+0x48>
 800db90:	4b40      	ldr	r3, [pc, #256]	; (800dc94 <_svfiprintf_r+0x1e8>)
 800db92:	6822      	ldr	r2, [r4, #0]
 800db94:	1ac0      	subs	r0, r0, r3
 800db96:	2301      	movs	r3, #1
 800db98:	4083      	lsls	r3, r0
 800db9a:	4313      	orrs	r3, r2
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	002e      	movs	r6, r5
 800dba0:	e7ce      	b.n	800db40 <_svfiprintf_r+0x94>
 800dba2:	9b07      	ldr	r3, [sp, #28]
 800dba4:	1d19      	adds	r1, r3, #4
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	9107      	str	r1, [sp, #28]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	db01      	blt.n	800dbb2 <_svfiprintf_r+0x106>
 800dbae:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbb0:	e004      	b.n	800dbbc <_svfiprintf_r+0x110>
 800dbb2:	425b      	negs	r3, r3
 800dbb4:	60e3      	str	r3, [r4, #12]
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	6023      	str	r3, [r4, #0]
 800dbbc:	782b      	ldrb	r3, [r5, #0]
 800dbbe:	2b2e      	cmp	r3, #46	; 0x2e
 800dbc0:	d10a      	bne.n	800dbd8 <_svfiprintf_r+0x12c>
 800dbc2:	786b      	ldrb	r3, [r5, #1]
 800dbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbc6:	d135      	bne.n	800dc34 <_svfiprintf_r+0x188>
 800dbc8:	9b07      	ldr	r3, [sp, #28]
 800dbca:	3502      	adds	r5, #2
 800dbcc:	1d1a      	adds	r2, r3, #4
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	9207      	str	r2, [sp, #28]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	db2b      	blt.n	800dc2e <_svfiprintf_r+0x182>
 800dbd6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd8:	4e2f      	ldr	r6, [pc, #188]	; (800dc98 <_svfiprintf_r+0x1ec>)
 800dbda:	7829      	ldrb	r1, [r5, #0]
 800dbdc:	2203      	movs	r2, #3
 800dbde:	0030      	movs	r0, r6
 800dbe0:	f7ff fb52 	bl	800d288 <memchr>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d006      	beq.n	800dbf6 <_svfiprintf_r+0x14a>
 800dbe8:	2340      	movs	r3, #64	; 0x40
 800dbea:	1b80      	subs	r0, r0, r6
 800dbec:	4083      	lsls	r3, r0
 800dbee:	6822      	ldr	r2, [r4, #0]
 800dbf0:	3501      	adds	r5, #1
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	7829      	ldrb	r1, [r5, #0]
 800dbf8:	2206      	movs	r2, #6
 800dbfa:	4828      	ldr	r0, [pc, #160]	; (800dc9c <_svfiprintf_r+0x1f0>)
 800dbfc:	1c6e      	adds	r6, r5, #1
 800dbfe:	7621      	strb	r1, [r4, #24]
 800dc00:	f7ff fb42 	bl	800d288 <memchr>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d03c      	beq.n	800dc82 <_svfiprintf_r+0x1d6>
 800dc08:	4b25      	ldr	r3, [pc, #148]	; (800dca0 <_svfiprintf_r+0x1f4>)
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d125      	bne.n	800dc5a <_svfiprintf_r+0x1ae>
 800dc0e:	2207      	movs	r2, #7
 800dc10:	9b07      	ldr	r3, [sp, #28]
 800dc12:	3307      	adds	r3, #7
 800dc14:	4393      	bics	r3, r2
 800dc16:	3308      	adds	r3, #8
 800dc18:	9307      	str	r3, [sp, #28]
 800dc1a:	6963      	ldr	r3, [r4, #20]
 800dc1c:	9a04      	ldr	r2, [sp, #16]
 800dc1e:	189b      	adds	r3, r3, r2
 800dc20:	6163      	str	r3, [r4, #20]
 800dc22:	e766      	b.n	800daf2 <_svfiprintf_r+0x46>
 800dc24:	4343      	muls	r3, r0
 800dc26:	2101      	movs	r1, #1
 800dc28:	189b      	adds	r3, r3, r2
 800dc2a:	0035      	movs	r5, r6
 800dc2c:	e7a6      	b.n	800db7c <_svfiprintf_r+0xd0>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	425b      	negs	r3, r3
 800dc32:	e7d0      	b.n	800dbd6 <_svfiprintf_r+0x12a>
 800dc34:	2300      	movs	r3, #0
 800dc36:	200a      	movs	r0, #10
 800dc38:	001a      	movs	r2, r3
 800dc3a:	3501      	adds	r5, #1
 800dc3c:	6063      	str	r3, [r4, #4]
 800dc3e:	7829      	ldrb	r1, [r5, #0]
 800dc40:	1c6e      	adds	r6, r5, #1
 800dc42:	3930      	subs	r1, #48	; 0x30
 800dc44:	2909      	cmp	r1, #9
 800dc46:	d903      	bls.n	800dc50 <_svfiprintf_r+0x1a4>
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d0c5      	beq.n	800dbd8 <_svfiprintf_r+0x12c>
 800dc4c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc4e:	e7c3      	b.n	800dbd8 <_svfiprintf_r+0x12c>
 800dc50:	4342      	muls	r2, r0
 800dc52:	2301      	movs	r3, #1
 800dc54:	1852      	adds	r2, r2, r1
 800dc56:	0035      	movs	r5, r6
 800dc58:	e7f1      	b.n	800dc3e <_svfiprintf_r+0x192>
 800dc5a:	ab07      	add	r3, sp, #28
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	003a      	movs	r2, r7
 800dc60:	4b10      	ldr	r3, [pc, #64]	; (800dca4 <_svfiprintf_r+0x1f8>)
 800dc62:	0021      	movs	r1, r4
 800dc64:	9803      	ldr	r0, [sp, #12]
 800dc66:	f7fd ffc1 	bl	800bbec <_printf_float>
 800dc6a:	9004      	str	r0, [sp, #16]
 800dc6c:	9b04      	ldr	r3, [sp, #16]
 800dc6e:	3301      	adds	r3, #1
 800dc70:	d1d3      	bne.n	800dc1a <_svfiprintf_r+0x16e>
 800dc72:	89bb      	ldrh	r3, [r7, #12]
 800dc74:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc76:	065b      	lsls	r3, r3, #25
 800dc78:	d400      	bmi.n	800dc7c <_svfiprintf_r+0x1d0>
 800dc7a:	e72e      	b.n	800dada <_svfiprintf_r+0x2e>
 800dc7c:	2001      	movs	r0, #1
 800dc7e:	4240      	negs	r0, r0
 800dc80:	e72b      	b.n	800dada <_svfiprintf_r+0x2e>
 800dc82:	ab07      	add	r3, sp, #28
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	003a      	movs	r2, r7
 800dc88:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <_svfiprintf_r+0x1f8>)
 800dc8a:	0021      	movs	r1, r4
 800dc8c:	9803      	ldr	r0, [sp, #12]
 800dc8e:	f7fe fa67 	bl	800c160 <_printf_i>
 800dc92:	e7ea      	b.n	800dc6a <_svfiprintf_r+0x1be>
 800dc94:	0800fc84 	.word	0x0800fc84
 800dc98:	0800fc8a 	.word	0x0800fc8a
 800dc9c:	0800fc8e 	.word	0x0800fc8e
 800dca0:	0800bbed 	.word	0x0800bbed
 800dca4:	0800d9e9 	.word	0x0800d9e9

0800dca8 <__sfputc_r>:
 800dca8:	6893      	ldr	r3, [r2, #8]
 800dcaa:	b510      	push	{r4, lr}
 800dcac:	3b01      	subs	r3, #1
 800dcae:	6093      	str	r3, [r2, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	da04      	bge.n	800dcbe <__sfputc_r+0x16>
 800dcb4:	6994      	ldr	r4, [r2, #24]
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	db07      	blt.n	800dcca <__sfputc_r+0x22>
 800dcba:	290a      	cmp	r1, #10
 800dcbc:	d005      	beq.n	800dcca <__sfputc_r+0x22>
 800dcbe:	6813      	ldr	r3, [r2, #0]
 800dcc0:	1c58      	adds	r0, r3, #1
 800dcc2:	6010      	str	r0, [r2, #0]
 800dcc4:	7019      	strb	r1, [r3, #0]
 800dcc6:	0008      	movs	r0, r1
 800dcc8:	bd10      	pop	{r4, pc}
 800dcca:	f000 f989 	bl	800dfe0 <__swbuf_r>
 800dcce:	0001      	movs	r1, r0
 800dcd0:	e7f9      	b.n	800dcc6 <__sfputc_r+0x1e>

0800dcd2 <__sfputs_r>:
 800dcd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd4:	0006      	movs	r6, r0
 800dcd6:	000f      	movs	r7, r1
 800dcd8:	0014      	movs	r4, r2
 800dcda:	18d5      	adds	r5, r2, r3
 800dcdc:	42ac      	cmp	r4, r5
 800dcde:	d101      	bne.n	800dce4 <__sfputs_r+0x12>
 800dce0:	2000      	movs	r0, #0
 800dce2:	e007      	b.n	800dcf4 <__sfputs_r+0x22>
 800dce4:	7821      	ldrb	r1, [r4, #0]
 800dce6:	003a      	movs	r2, r7
 800dce8:	0030      	movs	r0, r6
 800dcea:	f7ff ffdd 	bl	800dca8 <__sfputc_r>
 800dcee:	3401      	adds	r4, #1
 800dcf0:	1c43      	adds	r3, r0, #1
 800dcf2:	d1f3      	bne.n	800dcdc <__sfputs_r+0xa>
 800dcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcf8 <_vfiprintf_r>:
 800dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfa:	b0a1      	sub	sp, #132	; 0x84
 800dcfc:	9003      	str	r0, [sp, #12]
 800dcfe:	000f      	movs	r7, r1
 800dd00:	0016      	movs	r6, r2
 800dd02:	001d      	movs	r5, r3
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d005      	beq.n	800dd14 <_vfiprintf_r+0x1c>
 800dd08:	6983      	ldr	r3, [r0, #24]
 800dd0a:	9305      	str	r3, [sp, #20]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <_vfiprintf_r+0x1c>
 800dd10:	f7ff fa10 	bl	800d134 <__sinit>
 800dd14:	4b7b      	ldr	r3, [pc, #492]	; (800df04 <_vfiprintf_r+0x20c>)
 800dd16:	429f      	cmp	r7, r3
 800dd18:	d15c      	bne.n	800ddd4 <_vfiprintf_r+0xdc>
 800dd1a:	9b03      	ldr	r3, [sp, #12]
 800dd1c:	685f      	ldr	r7, [r3, #4]
 800dd1e:	89bb      	ldrh	r3, [r7, #12]
 800dd20:	071b      	lsls	r3, r3, #28
 800dd22:	d563      	bpl.n	800ddec <_vfiprintf_r+0xf4>
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d060      	beq.n	800ddec <_vfiprintf_r+0xf4>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	ac08      	add	r4, sp, #32
 800dd2e:	6163      	str	r3, [r4, #20]
 800dd30:	3320      	adds	r3, #32
 800dd32:	7663      	strb	r3, [r4, #25]
 800dd34:	3310      	adds	r3, #16
 800dd36:	76a3      	strb	r3, [r4, #26]
 800dd38:	9507      	str	r5, [sp, #28]
 800dd3a:	0035      	movs	r5, r6
 800dd3c:	782b      	ldrb	r3, [r5, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d001      	beq.n	800dd46 <_vfiprintf_r+0x4e>
 800dd42:	2b25      	cmp	r3, #37	; 0x25
 800dd44:	d15c      	bne.n	800de00 <_vfiprintf_r+0x108>
 800dd46:	1bab      	subs	r3, r5, r6
 800dd48:	9305      	str	r3, [sp, #20]
 800dd4a:	d00c      	beq.n	800dd66 <_vfiprintf_r+0x6e>
 800dd4c:	0032      	movs	r2, r6
 800dd4e:	0039      	movs	r1, r7
 800dd50:	9803      	ldr	r0, [sp, #12]
 800dd52:	f7ff ffbe 	bl	800dcd2 <__sfputs_r>
 800dd56:	1c43      	adds	r3, r0, #1
 800dd58:	d100      	bne.n	800dd5c <_vfiprintf_r+0x64>
 800dd5a:	e0c4      	b.n	800dee6 <_vfiprintf_r+0x1ee>
 800dd5c:	6962      	ldr	r2, [r4, #20]
 800dd5e:	9b05      	ldr	r3, [sp, #20]
 800dd60:	4694      	mov	ip, r2
 800dd62:	4463      	add	r3, ip
 800dd64:	6163      	str	r3, [r4, #20]
 800dd66:	782b      	ldrb	r3, [r5, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d100      	bne.n	800dd6e <_vfiprintf_r+0x76>
 800dd6c:	e0bb      	b.n	800dee6 <_vfiprintf_r+0x1ee>
 800dd6e:	2201      	movs	r2, #1
 800dd70:	2300      	movs	r3, #0
 800dd72:	4252      	negs	r2, r2
 800dd74:	6062      	str	r2, [r4, #4]
 800dd76:	a904      	add	r1, sp, #16
 800dd78:	3254      	adds	r2, #84	; 0x54
 800dd7a:	1852      	adds	r2, r2, r1
 800dd7c:	1c6e      	adds	r6, r5, #1
 800dd7e:	6023      	str	r3, [r4, #0]
 800dd80:	60e3      	str	r3, [r4, #12]
 800dd82:	60a3      	str	r3, [r4, #8]
 800dd84:	7013      	strb	r3, [r2, #0]
 800dd86:	65a3      	str	r3, [r4, #88]	; 0x58
 800dd88:	7831      	ldrb	r1, [r6, #0]
 800dd8a:	2205      	movs	r2, #5
 800dd8c:	485e      	ldr	r0, [pc, #376]	; (800df08 <_vfiprintf_r+0x210>)
 800dd8e:	f7ff fa7b 	bl	800d288 <memchr>
 800dd92:	1c75      	adds	r5, r6, #1
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d135      	bne.n	800de04 <_vfiprintf_r+0x10c>
 800dd98:	6822      	ldr	r2, [r4, #0]
 800dd9a:	06d3      	lsls	r3, r2, #27
 800dd9c:	d504      	bpl.n	800dda8 <_vfiprintf_r+0xb0>
 800dd9e:	2353      	movs	r3, #83	; 0x53
 800dda0:	a904      	add	r1, sp, #16
 800dda2:	185b      	adds	r3, r3, r1
 800dda4:	2120      	movs	r1, #32
 800dda6:	7019      	strb	r1, [r3, #0]
 800dda8:	0713      	lsls	r3, r2, #28
 800ddaa:	d504      	bpl.n	800ddb6 <_vfiprintf_r+0xbe>
 800ddac:	2353      	movs	r3, #83	; 0x53
 800ddae:	a904      	add	r1, sp, #16
 800ddb0:	185b      	adds	r3, r3, r1
 800ddb2:	212b      	movs	r1, #43	; 0x2b
 800ddb4:	7019      	strb	r1, [r3, #0]
 800ddb6:	7833      	ldrb	r3, [r6, #0]
 800ddb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddba:	d02c      	beq.n	800de16 <_vfiprintf_r+0x11e>
 800ddbc:	0035      	movs	r5, r6
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	200a      	movs	r0, #10
 800ddc2:	68e3      	ldr	r3, [r4, #12]
 800ddc4:	782a      	ldrb	r2, [r5, #0]
 800ddc6:	1c6e      	adds	r6, r5, #1
 800ddc8:	3a30      	subs	r2, #48	; 0x30
 800ddca:	2a09      	cmp	r2, #9
 800ddcc:	d964      	bls.n	800de98 <_vfiprintf_r+0x1a0>
 800ddce:	2900      	cmp	r1, #0
 800ddd0:	d02e      	beq.n	800de30 <_vfiprintf_r+0x138>
 800ddd2:	e026      	b.n	800de22 <_vfiprintf_r+0x12a>
 800ddd4:	4b4d      	ldr	r3, [pc, #308]	; (800df0c <_vfiprintf_r+0x214>)
 800ddd6:	429f      	cmp	r7, r3
 800ddd8:	d102      	bne.n	800dde0 <_vfiprintf_r+0xe8>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	689f      	ldr	r7, [r3, #8]
 800ddde:	e79e      	b.n	800dd1e <_vfiprintf_r+0x26>
 800dde0:	4b4b      	ldr	r3, [pc, #300]	; (800df10 <_vfiprintf_r+0x218>)
 800dde2:	429f      	cmp	r7, r3
 800dde4:	d19b      	bne.n	800dd1e <_vfiprintf_r+0x26>
 800dde6:	9b03      	ldr	r3, [sp, #12]
 800dde8:	68df      	ldr	r7, [r3, #12]
 800ddea:	e798      	b.n	800dd1e <_vfiprintf_r+0x26>
 800ddec:	0039      	movs	r1, r7
 800ddee:	9803      	ldr	r0, [sp, #12]
 800ddf0:	f000 f960 	bl	800e0b4 <__swsetup_r>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d098      	beq.n	800dd2a <_vfiprintf_r+0x32>
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	4240      	negs	r0, r0
 800ddfc:	b021      	add	sp, #132	; 0x84
 800ddfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de00:	3501      	adds	r5, #1
 800de02:	e79b      	b.n	800dd3c <_vfiprintf_r+0x44>
 800de04:	4b40      	ldr	r3, [pc, #256]	; (800df08 <_vfiprintf_r+0x210>)
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	1ac0      	subs	r0, r0, r3
 800de0a:	2301      	movs	r3, #1
 800de0c:	4083      	lsls	r3, r0
 800de0e:	4313      	orrs	r3, r2
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	002e      	movs	r6, r5
 800de14:	e7b8      	b.n	800dd88 <_vfiprintf_r+0x90>
 800de16:	9b07      	ldr	r3, [sp, #28]
 800de18:	1d19      	adds	r1, r3, #4
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	9107      	str	r1, [sp, #28]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	db01      	blt.n	800de26 <_vfiprintf_r+0x12e>
 800de22:	930b      	str	r3, [sp, #44]	; 0x2c
 800de24:	e004      	b.n	800de30 <_vfiprintf_r+0x138>
 800de26:	425b      	negs	r3, r3
 800de28:	60e3      	str	r3, [r4, #12]
 800de2a:	2302      	movs	r3, #2
 800de2c:	4313      	orrs	r3, r2
 800de2e:	6023      	str	r3, [r4, #0]
 800de30:	782b      	ldrb	r3, [r5, #0]
 800de32:	2b2e      	cmp	r3, #46	; 0x2e
 800de34:	d10a      	bne.n	800de4c <_vfiprintf_r+0x154>
 800de36:	786b      	ldrb	r3, [r5, #1]
 800de38:	2b2a      	cmp	r3, #42	; 0x2a
 800de3a:	d135      	bne.n	800dea8 <_vfiprintf_r+0x1b0>
 800de3c:	9b07      	ldr	r3, [sp, #28]
 800de3e:	3502      	adds	r5, #2
 800de40:	1d1a      	adds	r2, r3, #4
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	9207      	str	r2, [sp, #28]
 800de46:	2b00      	cmp	r3, #0
 800de48:	db2b      	blt.n	800dea2 <_vfiprintf_r+0x1aa>
 800de4a:	9309      	str	r3, [sp, #36]	; 0x24
 800de4c:	4e31      	ldr	r6, [pc, #196]	; (800df14 <_vfiprintf_r+0x21c>)
 800de4e:	7829      	ldrb	r1, [r5, #0]
 800de50:	2203      	movs	r2, #3
 800de52:	0030      	movs	r0, r6
 800de54:	f7ff fa18 	bl	800d288 <memchr>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d006      	beq.n	800de6a <_vfiprintf_r+0x172>
 800de5c:	2340      	movs	r3, #64	; 0x40
 800de5e:	1b80      	subs	r0, r0, r6
 800de60:	4083      	lsls	r3, r0
 800de62:	6822      	ldr	r2, [r4, #0]
 800de64:	3501      	adds	r5, #1
 800de66:	4313      	orrs	r3, r2
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	7829      	ldrb	r1, [r5, #0]
 800de6c:	2206      	movs	r2, #6
 800de6e:	482a      	ldr	r0, [pc, #168]	; (800df18 <_vfiprintf_r+0x220>)
 800de70:	1c6e      	adds	r6, r5, #1
 800de72:	7621      	strb	r1, [r4, #24]
 800de74:	f7ff fa08 	bl	800d288 <memchr>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d03a      	beq.n	800def2 <_vfiprintf_r+0x1fa>
 800de7c:	4b27      	ldr	r3, [pc, #156]	; (800df1c <_vfiprintf_r+0x224>)
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d125      	bne.n	800dece <_vfiprintf_r+0x1d6>
 800de82:	2207      	movs	r2, #7
 800de84:	9b07      	ldr	r3, [sp, #28]
 800de86:	3307      	adds	r3, #7
 800de88:	4393      	bics	r3, r2
 800de8a:	3308      	adds	r3, #8
 800de8c:	9307      	str	r3, [sp, #28]
 800de8e:	6963      	ldr	r3, [r4, #20]
 800de90:	9a04      	ldr	r2, [sp, #16]
 800de92:	189b      	adds	r3, r3, r2
 800de94:	6163      	str	r3, [r4, #20]
 800de96:	e750      	b.n	800dd3a <_vfiprintf_r+0x42>
 800de98:	4343      	muls	r3, r0
 800de9a:	2101      	movs	r1, #1
 800de9c:	189b      	adds	r3, r3, r2
 800de9e:	0035      	movs	r5, r6
 800dea0:	e790      	b.n	800ddc4 <_vfiprintf_r+0xcc>
 800dea2:	2301      	movs	r3, #1
 800dea4:	425b      	negs	r3, r3
 800dea6:	e7d0      	b.n	800de4a <_vfiprintf_r+0x152>
 800dea8:	2300      	movs	r3, #0
 800deaa:	200a      	movs	r0, #10
 800deac:	001a      	movs	r2, r3
 800deae:	3501      	adds	r5, #1
 800deb0:	6063      	str	r3, [r4, #4]
 800deb2:	7829      	ldrb	r1, [r5, #0]
 800deb4:	1c6e      	adds	r6, r5, #1
 800deb6:	3930      	subs	r1, #48	; 0x30
 800deb8:	2909      	cmp	r1, #9
 800deba:	d903      	bls.n	800dec4 <_vfiprintf_r+0x1cc>
 800debc:	2b00      	cmp	r3, #0
 800debe:	d0c5      	beq.n	800de4c <_vfiprintf_r+0x154>
 800dec0:	9209      	str	r2, [sp, #36]	; 0x24
 800dec2:	e7c3      	b.n	800de4c <_vfiprintf_r+0x154>
 800dec4:	4342      	muls	r2, r0
 800dec6:	2301      	movs	r3, #1
 800dec8:	1852      	adds	r2, r2, r1
 800deca:	0035      	movs	r5, r6
 800decc:	e7f1      	b.n	800deb2 <_vfiprintf_r+0x1ba>
 800dece:	ab07      	add	r3, sp, #28
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	003a      	movs	r2, r7
 800ded4:	4b12      	ldr	r3, [pc, #72]	; (800df20 <_vfiprintf_r+0x228>)
 800ded6:	0021      	movs	r1, r4
 800ded8:	9803      	ldr	r0, [sp, #12]
 800deda:	f7fd fe87 	bl	800bbec <_printf_float>
 800dede:	9004      	str	r0, [sp, #16]
 800dee0:	9b04      	ldr	r3, [sp, #16]
 800dee2:	3301      	adds	r3, #1
 800dee4:	d1d3      	bne.n	800de8e <_vfiprintf_r+0x196>
 800dee6:	89bb      	ldrh	r3, [r7, #12]
 800dee8:	065b      	lsls	r3, r3, #25
 800deea:	d500      	bpl.n	800deee <_vfiprintf_r+0x1f6>
 800deec:	e784      	b.n	800ddf8 <_vfiprintf_r+0x100>
 800deee:	980d      	ldr	r0, [sp, #52]	; 0x34
 800def0:	e784      	b.n	800ddfc <_vfiprintf_r+0x104>
 800def2:	ab07      	add	r3, sp, #28
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	003a      	movs	r2, r7
 800def8:	4b09      	ldr	r3, [pc, #36]	; (800df20 <_vfiprintf_r+0x228>)
 800defa:	0021      	movs	r1, r4
 800defc:	9803      	ldr	r0, [sp, #12]
 800defe:	f7fe f92f 	bl	800c160 <_printf_i>
 800df02:	e7ec      	b.n	800dede <_vfiprintf_r+0x1e6>
 800df04:	0800fb44 	.word	0x0800fb44
 800df08:	0800fc84 	.word	0x0800fc84
 800df0c:	0800fb64 	.word	0x0800fb64
 800df10:	0800fb24 	.word	0x0800fb24
 800df14:	0800fc8a 	.word	0x0800fc8a
 800df18:	0800fc8e 	.word	0x0800fc8e
 800df1c:	0800bbed 	.word	0x0800bbed
 800df20:	0800dcd3 	.word	0x0800dcd3

0800df24 <_sbrk_r>:
 800df24:	2300      	movs	r3, #0
 800df26:	b570      	push	{r4, r5, r6, lr}
 800df28:	4c06      	ldr	r4, [pc, #24]	; (800df44 <_sbrk_r+0x20>)
 800df2a:	0005      	movs	r5, r0
 800df2c:	0008      	movs	r0, r1
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	f7f5 f960 	bl	80031f4 <_sbrk>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	d103      	bne.n	800df40 <_sbrk_r+0x1c>
 800df38:	6823      	ldr	r3, [r4, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d000      	beq.n	800df40 <_sbrk_r+0x1c>
 800df3e:	602b      	str	r3, [r5, #0]
 800df40:	bd70      	pop	{r4, r5, r6, pc}
 800df42:	46c0      	nop			; (mov r8, r8)
 800df44:	20001a10 	.word	0x20001a10

0800df48 <__sread>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	000c      	movs	r4, r1
 800df4c:	250e      	movs	r5, #14
 800df4e:	5f49      	ldrsh	r1, [r1, r5]
 800df50:	f000 faa8 	bl	800e4a4 <_read_r>
 800df54:	2800      	cmp	r0, #0
 800df56:	db03      	blt.n	800df60 <__sread+0x18>
 800df58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800df5a:	181b      	adds	r3, r3, r0
 800df5c:	6563      	str	r3, [r4, #84]	; 0x54
 800df5e:	bd70      	pop	{r4, r5, r6, pc}
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	4a02      	ldr	r2, [pc, #8]	; (800df6c <__sread+0x24>)
 800df64:	4013      	ands	r3, r2
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	e7f9      	b.n	800df5e <__sread+0x16>
 800df6a:	46c0      	nop			; (mov r8, r8)
 800df6c:	ffffefff 	.word	0xffffefff

0800df70 <__swrite>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	001f      	movs	r7, r3
 800df74:	898b      	ldrh	r3, [r1, #12]
 800df76:	0005      	movs	r5, r0
 800df78:	000c      	movs	r4, r1
 800df7a:	0016      	movs	r6, r2
 800df7c:	05db      	lsls	r3, r3, #23
 800df7e:	d505      	bpl.n	800df8c <__swrite+0x1c>
 800df80:	230e      	movs	r3, #14
 800df82:	5ec9      	ldrsh	r1, [r1, r3]
 800df84:	2200      	movs	r2, #0
 800df86:	2302      	movs	r3, #2
 800df88:	f000 f9d2 	bl	800e330 <_lseek_r>
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	4a05      	ldr	r2, [pc, #20]	; (800dfa4 <__swrite+0x34>)
 800df90:	0028      	movs	r0, r5
 800df92:	4013      	ands	r3, r2
 800df94:	81a3      	strh	r3, [r4, #12]
 800df96:	0032      	movs	r2, r6
 800df98:	230e      	movs	r3, #14
 800df9a:	5ee1      	ldrsh	r1, [r4, r3]
 800df9c:	003b      	movs	r3, r7
 800df9e:	f000 f875 	bl	800e08c <_write_r>
 800dfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfa4:	ffffefff 	.word	0xffffefff

0800dfa8 <__sseek>:
 800dfa8:	b570      	push	{r4, r5, r6, lr}
 800dfaa:	000c      	movs	r4, r1
 800dfac:	250e      	movs	r5, #14
 800dfae:	5f49      	ldrsh	r1, [r1, r5]
 800dfb0:	f000 f9be 	bl	800e330 <_lseek_r>
 800dfb4:	89a3      	ldrh	r3, [r4, #12]
 800dfb6:	1c42      	adds	r2, r0, #1
 800dfb8:	d103      	bne.n	800dfc2 <__sseek+0x1a>
 800dfba:	4a05      	ldr	r2, [pc, #20]	; (800dfd0 <__sseek+0x28>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	81a3      	strh	r3, [r4, #12]
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
 800dfc2:	2280      	movs	r2, #128	; 0x80
 800dfc4:	0152      	lsls	r2, r2, #5
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	81a3      	strh	r3, [r4, #12]
 800dfca:	6560      	str	r0, [r4, #84]	; 0x54
 800dfcc:	e7f8      	b.n	800dfc0 <__sseek+0x18>
 800dfce:	46c0      	nop			; (mov r8, r8)
 800dfd0:	ffffefff 	.word	0xffffefff

0800dfd4 <__sclose>:
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	230e      	movs	r3, #14
 800dfd8:	5ec9      	ldrsh	r1, [r1, r3]
 800dfda:	f000 f8e1 	bl	800e1a0 <_close_r>
 800dfde:	bd10      	pop	{r4, pc}

0800dfe0 <__swbuf_r>:
 800dfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe2:	0005      	movs	r5, r0
 800dfe4:	000e      	movs	r6, r1
 800dfe6:	0014      	movs	r4, r2
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d004      	beq.n	800dff6 <__swbuf_r+0x16>
 800dfec:	6983      	ldr	r3, [r0, #24]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <__swbuf_r+0x16>
 800dff2:	f7ff f89f 	bl	800d134 <__sinit>
 800dff6:	4b22      	ldr	r3, [pc, #136]	; (800e080 <__swbuf_r+0xa0>)
 800dff8:	429c      	cmp	r4, r3
 800dffa:	d12d      	bne.n	800e058 <__swbuf_r+0x78>
 800dffc:	686c      	ldr	r4, [r5, #4]
 800dffe:	69a3      	ldr	r3, [r4, #24]
 800e000:	60a3      	str	r3, [r4, #8]
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	071b      	lsls	r3, r3, #28
 800e006:	d531      	bpl.n	800e06c <__swbuf_r+0x8c>
 800e008:	6923      	ldr	r3, [r4, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d02e      	beq.n	800e06c <__swbuf_r+0x8c>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	6922      	ldr	r2, [r4, #16]
 800e012:	b2f7      	uxtb	r7, r6
 800e014:	1a98      	subs	r0, r3, r2
 800e016:	6963      	ldr	r3, [r4, #20]
 800e018:	b2f6      	uxtb	r6, r6
 800e01a:	4283      	cmp	r3, r0
 800e01c:	dc05      	bgt.n	800e02a <__swbuf_r+0x4a>
 800e01e:	0021      	movs	r1, r4
 800e020:	0028      	movs	r0, r5
 800e022:	f000 f959 	bl	800e2d8 <_fflush_r>
 800e026:	2800      	cmp	r0, #0
 800e028:	d126      	bne.n	800e078 <__swbuf_r+0x98>
 800e02a:	68a3      	ldr	r3, [r4, #8]
 800e02c:	3001      	adds	r0, #1
 800e02e:	3b01      	subs	r3, #1
 800e030:	60a3      	str	r3, [r4, #8]
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	1c5a      	adds	r2, r3, #1
 800e036:	6022      	str	r2, [r4, #0]
 800e038:	701f      	strb	r7, [r3, #0]
 800e03a:	6963      	ldr	r3, [r4, #20]
 800e03c:	4283      	cmp	r3, r0
 800e03e:	d004      	beq.n	800e04a <__swbuf_r+0x6a>
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	07db      	lsls	r3, r3, #31
 800e044:	d51a      	bpl.n	800e07c <__swbuf_r+0x9c>
 800e046:	2e0a      	cmp	r6, #10
 800e048:	d118      	bne.n	800e07c <__swbuf_r+0x9c>
 800e04a:	0021      	movs	r1, r4
 800e04c:	0028      	movs	r0, r5
 800e04e:	f000 f943 	bl	800e2d8 <_fflush_r>
 800e052:	2800      	cmp	r0, #0
 800e054:	d012      	beq.n	800e07c <__swbuf_r+0x9c>
 800e056:	e00f      	b.n	800e078 <__swbuf_r+0x98>
 800e058:	4b0a      	ldr	r3, [pc, #40]	; (800e084 <__swbuf_r+0xa4>)
 800e05a:	429c      	cmp	r4, r3
 800e05c:	d101      	bne.n	800e062 <__swbuf_r+0x82>
 800e05e:	68ac      	ldr	r4, [r5, #8]
 800e060:	e7cd      	b.n	800dffe <__swbuf_r+0x1e>
 800e062:	4b09      	ldr	r3, [pc, #36]	; (800e088 <__swbuf_r+0xa8>)
 800e064:	429c      	cmp	r4, r3
 800e066:	d1ca      	bne.n	800dffe <__swbuf_r+0x1e>
 800e068:	68ec      	ldr	r4, [r5, #12]
 800e06a:	e7c8      	b.n	800dffe <__swbuf_r+0x1e>
 800e06c:	0021      	movs	r1, r4
 800e06e:	0028      	movs	r0, r5
 800e070:	f000 f820 	bl	800e0b4 <__swsetup_r>
 800e074:	2800      	cmp	r0, #0
 800e076:	d0ca      	beq.n	800e00e <__swbuf_r+0x2e>
 800e078:	2601      	movs	r6, #1
 800e07a:	4276      	negs	r6, r6
 800e07c:	0030      	movs	r0, r6
 800e07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e080:	0800fb44 	.word	0x0800fb44
 800e084:	0800fb64 	.word	0x0800fb64
 800e088:	0800fb24 	.word	0x0800fb24

0800e08c <_write_r>:
 800e08c:	b570      	push	{r4, r5, r6, lr}
 800e08e:	0005      	movs	r5, r0
 800e090:	0008      	movs	r0, r1
 800e092:	0011      	movs	r1, r2
 800e094:	2200      	movs	r2, #0
 800e096:	4c06      	ldr	r4, [pc, #24]	; (800e0b0 <_write_r+0x24>)
 800e098:	6022      	str	r2, [r4, #0]
 800e09a:	001a      	movs	r2, r3
 800e09c:	f7f5 f861 	bl	8003162 <_write>
 800e0a0:	1c43      	adds	r3, r0, #1
 800e0a2:	d103      	bne.n	800e0ac <_write_r+0x20>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d000      	beq.n	800e0ac <_write_r+0x20>
 800e0aa:	602b      	str	r3, [r5, #0]
 800e0ac:	bd70      	pop	{r4, r5, r6, pc}
 800e0ae:	46c0      	nop			; (mov r8, r8)
 800e0b0:	20001a10 	.word	0x20001a10

0800e0b4 <__swsetup_r>:
 800e0b4:	4b36      	ldr	r3, [pc, #216]	; (800e190 <__swsetup_r+0xdc>)
 800e0b6:	b570      	push	{r4, r5, r6, lr}
 800e0b8:	681d      	ldr	r5, [r3, #0]
 800e0ba:	0006      	movs	r6, r0
 800e0bc:	000c      	movs	r4, r1
 800e0be:	2d00      	cmp	r5, #0
 800e0c0:	d005      	beq.n	800e0ce <__swsetup_r+0x1a>
 800e0c2:	69ab      	ldr	r3, [r5, #24]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <__swsetup_r+0x1a>
 800e0c8:	0028      	movs	r0, r5
 800e0ca:	f7ff f833 	bl	800d134 <__sinit>
 800e0ce:	4b31      	ldr	r3, [pc, #196]	; (800e194 <__swsetup_r+0xe0>)
 800e0d0:	429c      	cmp	r4, r3
 800e0d2:	d10f      	bne.n	800e0f4 <__swsetup_r+0x40>
 800e0d4:	686c      	ldr	r4, [r5, #4]
 800e0d6:	230c      	movs	r3, #12
 800e0d8:	5ee2      	ldrsh	r2, [r4, r3]
 800e0da:	b293      	uxth	r3, r2
 800e0dc:	0719      	lsls	r1, r3, #28
 800e0de:	d42d      	bmi.n	800e13c <__swsetup_r+0x88>
 800e0e0:	06d9      	lsls	r1, r3, #27
 800e0e2:	d411      	bmi.n	800e108 <__swsetup_r+0x54>
 800e0e4:	2309      	movs	r3, #9
 800e0e6:	2001      	movs	r0, #1
 800e0e8:	6033      	str	r3, [r6, #0]
 800e0ea:	3337      	adds	r3, #55	; 0x37
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	81a3      	strh	r3, [r4, #12]
 800e0f0:	4240      	negs	r0, r0
 800e0f2:	bd70      	pop	{r4, r5, r6, pc}
 800e0f4:	4b28      	ldr	r3, [pc, #160]	; (800e198 <__swsetup_r+0xe4>)
 800e0f6:	429c      	cmp	r4, r3
 800e0f8:	d101      	bne.n	800e0fe <__swsetup_r+0x4a>
 800e0fa:	68ac      	ldr	r4, [r5, #8]
 800e0fc:	e7eb      	b.n	800e0d6 <__swsetup_r+0x22>
 800e0fe:	4b27      	ldr	r3, [pc, #156]	; (800e19c <__swsetup_r+0xe8>)
 800e100:	429c      	cmp	r4, r3
 800e102:	d1e8      	bne.n	800e0d6 <__swsetup_r+0x22>
 800e104:	68ec      	ldr	r4, [r5, #12]
 800e106:	e7e6      	b.n	800e0d6 <__swsetup_r+0x22>
 800e108:	075b      	lsls	r3, r3, #29
 800e10a:	d513      	bpl.n	800e134 <__swsetup_r+0x80>
 800e10c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e10e:	2900      	cmp	r1, #0
 800e110:	d008      	beq.n	800e124 <__swsetup_r+0x70>
 800e112:	0023      	movs	r3, r4
 800e114:	3344      	adds	r3, #68	; 0x44
 800e116:	4299      	cmp	r1, r3
 800e118:	d002      	beq.n	800e120 <__swsetup_r+0x6c>
 800e11a:	0030      	movs	r0, r6
 800e11c:	f7ff fbbc 	bl	800d898 <_free_r>
 800e120:	2300      	movs	r3, #0
 800e122:	6363      	str	r3, [r4, #52]	; 0x34
 800e124:	2224      	movs	r2, #36	; 0x24
 800e126:	89a3      	ldrh	r3, [r4, #12]
 800e128:	4393      	bics	r3, r2
 800e12a:	81a3      	strh	r3, [r4, #12]
 800e12c:	2300      	movs	r3, #0
 800e12e:	6063      	str	r3, [r4, #4]
 800e130:	6923      	ldr	r3, [r4, #16]
 800e132:	6023      	str	r3, [r4, #0]
 800e134:	2308      	movs	r3, #8
 800e136:	89a2      	ldrh	r2, [r4, #12]
 800e138:	4313      	orrs	r3, r2
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	6923      	ldr	r3, [r4, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10b      	bne.n	800e15a <__swsetup_r+0xa6>
 800e142:	21a0      	movs	r1, #160	; 0xa0
 800e144:	2280      	movs	r2, #128	; 0x80
 800e146:	89a3      	ldrh	r3, [r4, #12]
 800e148:	0089      	lsls	r1, r1, #2
 800e14a:	0092      	lsls	r2, r2, #2
 800e14c:	400b      	ands	r3, r1
 800e14e:	4293      	cmp	r3, r2
 800e150:	d003      	beq.n	800e15a <__swsetup_r+0xa6>
 800e152:	0021      	movs	r1, r4
 800e154:	0030      	movs	r0, r6
 800e156:	f000 f927 	bl	800e3a8 <__smakebuf_r>
 800e15a:	2301      	movs	r3, #1
 800e15c:	89a2      	ldrh	r2, [r4, #12]
 800e15e:	4013      	ands	r3, r2
 800e160:	d011      	beq.n	800e186 <__swsetup_r+0xd2>
 800e162:	2300      	movs	r3, #0
 800e164:	60a3      	str	r3, [r4, #8]
 800e166:	6963      	ldr	r3, [r4, #20]
 800e168:	425b      	negs	r3, r3
 800e16a:	61a3      	str	r3, [r4, #24]
 800e16c:	2000      	movs	r0, #0
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	4283      	cmp	r3, r0
 800e172:	d1be      	bne.n	800e0f2 <__swsetup_r+0x3e>
 800e174:	230c      	movs	r3, #12
 800e176:	5ee2      	ldrsh	r2, [r4, r3]
 800e178:	0613      	lsls	r3, r2, #24
 800e17a:	d5ba      	bpl.n	800e0f2 <__swsetup_r+0x3e>
 800e17c:	2340      	movs	r3, #64	; 0x40
 800e17e:	4313      	orrs	r3, r2
 800e180:	81a3      	strh	r3, [r4, #12]
 800e182:	3801      	subs	r0, #1
 800e184:	e7b5      	b.n	800e0f2 <__swsetup_r+0x3e>
 800e186:	0792      	lsls	r2, r2, #30
 800e188:	d400      	bmi.n	800e18c <__swsetup_r+0xd8>
 800e18a:	6963      	ldr	r3, [r4, #20]
 800e18c:	60a3      	str	r3, [r4, #8]
 800e18e:	e7ed      	b.n	800e16c <__swsetup_r+0xb8>
 800e190:	20000184 	.word	0x20000184
 800e194:	0800fb44 	.word	0x0800fb44
 800e198:	0800fb64 	.word	0x0800fb64
 800e19c:	0800fb24 	.word	0x0800fb24

0800e1a0 <_close_r>:
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	b570      	push	{r4, r5, r6, lr}
 800e1a4:	4c06      	ldr	r4, [pc, #24]	; (800e1c0 <_close_r+0x20>)
 800e1a6:	0005      	movs	r5, r0
 800e1a8:	0008      	movs	r0, r1
 800e1aa:	6023      	str	r3, [r4, #0]
 800e1ac:	f7f4 fff5 	bl	800319a <_close>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	d103      	bne.n	800e1bc <_close_r+0x1c>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d000      	beq.n	800e1bc <_close_r+0x1c>
 800e1ba:	602b      	str	r3, [r5, #0]
 800e1bc:	bd70      	pop	{r4, r5, r6, pc}
 800e1be:	46c0      	nop			; (mov r8, r8)
 800e1c0:	20001a10 	.word	0x20001a10

0800e1c4 <__sflush_r>:
 800e1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1c6:	898a      	ldrh	r2, [r1, #12]
 800e1c8:	0005      	movs	r5, r0
 800e1ca:	000c      	movs	r4, r1
 800e1cc:	0713      	lsls	r3, r2, #28
 800e1ce:	d460      	bmi.n	800e292 <__sflush_r+0xce>
 800e1d0:	684b      	ldr	r3, [r1, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	dc04      	bgt.n	800e1e0 <__sflush_r+0x1c>
 800e1d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	dc01      	bgt.n	800e1e0 <__sflush_r+0x1c>
 800e1dc:	2000      	movs	r0, #0
 800e1de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e1e2:	2f00      	cmp	r7, #0
 800e1e4:	d0fa      	beq.n	800e1dc <__sflush_r+0x18>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	682e      	ldr	r6, [r5, #0]
 800e1ea:	602b      	str	r3, [r5, #0]
 800e1ec:	2380      	movs	r3, #128	; 0x80
 800e1ee:	015b      	lsls	r3, r3, #5
 800e1f0:	6a21      	ldr	r1, [r4, #32]
 800e1f2:	401a      	ands	r2, r3
 800e1f4:	d034      	beq.n	800e260 <__sflush_r+0x9c>
 800e1f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1f8:	89a3      	ldrh	r3, [r4, #12]
 800e1fa:	075b      	lsls	r3, r3, #29
 800e1fc:	d506      	bpl.n	800e20c <__sflush_r+0x48>
 800e1fe:	6863      	ldr	r3, [r4, #4]
 800e200:	1ac0      	subs	r0, r0, r3
 800e202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <__sflush_r+0x48>
 800e208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e20a:	1ac0      	subs	r0, r0, r3
 800e20c:	0002      	movs	r2, r0
 800e20e:	6a21      	ldr	r1, [r4, #32]
 800e210:	2300      	movs	r3, #0
 800e212:	0028      	movs	r0, r5
 800e214:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e216:	47b8      	blx	r7
 800e218:	89a1      	ldrh	r1, [r4, #12]
 800e21a:	1c43      	adds	r3, r0, #1
 800e21c:	d106      	bne.n	800e22c <__sflush_r+0x68>
 800e21e:	682b      	ldr	r3, [r5, #0]
 800e220:	2b1d      	cmp	r3, #29
 800e222:	d830      	bhi.n	800e286 <__sflush_r+0xc2>
 800e224:	4a2b      	ldr	r2, [pc, #172]	; (800e2d4 <__sflush_r+0x110>)
 800e226:	40da      	lsrs	r2, r3
 800e228:	07d3      	lsls	r3, r2, #31
 800e22a:	d52c      	bpl.n	800e286 <__sflush_r+0xc2>
 800e22c:	2300      	movs	r3, #0
 800e22e:	6063      	str	r3, [r4, #4]
 800e230:	6923      	ldr	r3, [r4, #16]
 800e232:	6023      	str	r3, [r4, #0]
 800e234:	04cb      	lsls	r3, r1, #19
 800e236:	d505      	bpl.n	800e244 <__sflush_r+0x80>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	d102      	bne.n	800e242 <__sflush_r+0x7e>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d100      	bne.n	800e244 <__sflush_r+0x80>
 800e242:	6560      	str	r0, [r4, #84]	; 0x54
 800e244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e246:	602e      	str	r6, [r5, #0]
 800e248:	2900      	cmp	r1, #0
 800e24a:	d0c7      	beq.n	800e1dc <__sflush_r+0x18>
 800e24c:	0023      	movs	r3, r4
 800e24e:	3344      	adds	r3, #68	; 0x44
 800e250:	4299      	cmp	r1, r3
 800e252:	d002      	beq.n	800e25a <__sflush_r+0x96>
 800e254:	0028      	movs	r0, r5
 800e256:	f7ff fb1f 	bl	800d898 <_free_r>
 800e25a:	2000      	movs	r0, #0
 800e25c:	6360      	str	r0, [r4, #52]	; 0x34
 800e25e:	e7be      	b.n	800e1de <__sflush_r+0x1a>
 800e260:	2301      	movs	r3, #1
 800e262:	0028      	movs	r0, r5
 800e264:	47b8      	blx	r7
 800e266:	1c43      	adds	r3, r0, #1
 800e268:	d1c6      	bne.n	800e1f8 <__sflush_r+0x34>
 800e26a:	682b      	ldr	r3, [r5, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d0c3      	beq.n	800e1f8 <__sflush_r+0x34>
 800e270:	2b1d      	cmp	r3, #29
 800e272:	d001      	beq.n	800e278 <__sflush_r+0xb4>
 800e274:	2b16      	cmp	r3, #22
 800e276:	d101      	bne.n	800e27c <__sflush_r+0xb8>
 800e278:	602e      	str	r6, [r5, #0]
 800e27a:	e7af      	b.n	800e1dc <__sflush_r+0x18>
 800e27c:	2340      	movs	r3, #64	; 0x40
 800e27e:	89a2      	ldrh	r2, [r4, #12]
 800e280:	4313      	orrs	r3, r2
 800e282:	81a3      	strh	r3, [r4, #12]
 800e284:	e7ab      	b.n	800e1de <__sflush_r+0x1a>
 800e286:	2340      	movs	r3, #64	; 0x40
 800e288:	430b      	orrs	r3, r1
 800e28a:	2001      	movs	r0, #1
 800e28c:	81a3      	strh	r3, [r4, #12]
 800e28e:	4240      	negs	r0, r0
 800e290:	e7a5      	b.n	800e1de <__sflush_r+0x1a>
 800e292:	690f      	ldr	r7, [r1, #16]
 800e294:	2f00      	cmp	r7, #0
 800e296:	d0a1      	beq.n	800e1dc <__sflush_r+0x18>
 800e298:	680b      	ldr	r3, [r1, #0]
 800e29a:	600f      	str	r7, [r1, #0]
 800e29c:	1bdb      	subs	r3, r3, r7
 800e29e:	9301      	str	r3, [sp, #4]
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	0792      	lsls	r2, r2, #30
 800e2a4:	d100      	bne.n	800e2a8 <__sflush_r+0xe4>
 800e2a6:	694b      	ldr	r3, [r1, #20]
 800e2a8:	60a3      	str	r3, [r4, #8]
 800e2aa:	9b01      	ldr	r3, [sp, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	dc00      	bgt.n	800e2b2 <__sflush_r+0xee>
 800e2b0:	e794      	b.n	800e1dc <__sflush_r+0x18>
 800e2b2:	9b01      	ldr	r3, [sp, #4]
 800e2b4:	003a      	movs	r2, r7
 800e2b6:	6a21      	ldr	r1, [r4, #32]
 800e2b8:	0028      	movs	r0, r5
 800e2ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2bc:	47b0      	blx	r6
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	dc03      	bgt.n	800e2ca <__sflush_r+0x106>
 800e2c2:	2340      	movs	r3, #64	; 0x40
 800e2c4:	89a2      	ldrh	r2, [r4, #12]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	e7df      	b.n	800e28a <__sflush_r+0xc6>
 800e2ca:	9b01      	ldr	r3, [sp, #4]
 800e2cc:	183f      	adds	r7, r7, r0
 800e2ce:	1a1b      	subs	r3, r3, r0
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	e7ea      	b.n	800e2aa <__sflush_r+0xe6>
 800e2d4:	20400001 	.word	0x20400001

0800e2d8 <_fflush_r>:
 800e2d8:	690b      	ldr	r3, [r1, #16]
 800e2da:	b570      	push	{r4, r5, r6, lr}
 800e2dc:	0005      	movs	r5, r0
 800e2de:	000c      	movs	r4, r1
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <_fflush_r+0x10>
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d004      	beq.n	800e2f6 <_fflush_r+0x1e>
 800e2ec:	6983      	ldr	r3, [r0, #24]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <_fflush_r+0x1e>
 800e2f2:	f7fe ff1f 	bl	800d134 <__sinit>
 800e2f6:	4b0b      	ldr	r3, [pc, #44]	; (800e324 <_fflush_r+0x4c>)
 800e2f8:	429c      	cmp	r4, r3
 800e2fa:	d109      	bne.n	800e310 <_fflush_r+0x38>
 800e2fc:	686c      	ldr	r4, [r5, #4]
 800e2fe:	220c      	movs	r2, #12
 800e300:	5ea3      	ldrsh	r3, [r4, r2]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d0ee      	beq.n	800e2e4 <_fflush_r+0xc>
 800e306:	0021      	movs	r1, r4
 800e308:	0028      	movs	r0, r5
 800e30a:	f7ff ff5b 	bl	800e1c4 <__sflush_r>
 800e30e:	e7ea      	b.n	800e2e6 <_fflush_r+0xe>
 800e310:	4b05      	ldr	r3, [pc, #20]	; (800e328 <_fflush_r+0x50>)
 800e312:	429c      	cmp	r4, r3
 800e314:	d101      	bne.n	800e31a <_fflush_r+0x42>
 800e316:	68ac      	ldr	r4, [r5, #8]
 800e318:	e7f1      	b.n	800e2fe <_fflush_r+0x26>
 800e31a:	4b04      	ldr	r3, [pc, #16]	; (800e32c <_fflush_r+0x54>)
 800e31c:	429c      	cmp	r4, r3
 800e31e:	d1ee      	bne.n	800e2fe <_fflush_r+0x26>
 800e320:	68ec      	ldr	r4, [r5, #12]
 800e322:	e7ec      	b.n	800e2fe <_fflush_r+0x26>
 800e324:	0800fb44 	.word	0x0800fb44
 800e328:	0800fb64 	.word	0x0800fb64
 800e32c:	0800fb24 	.word	0x0800fb24

0800e330 <_lseek_r>:
 800e330:	b570      	push	{r4, r5, r6, lr}
 800e332:	0005      	movs	r5, r0
 800e334:	0008      	movs	r0, r1
 800e336:	0011      	movs	r1, r2
 800e338:	2200      	movs	r2, #0
 800e33a:	4c06      	ldr	r4, [pc, #24]	; (800e354 <_lseek_r+0x24>)
 800e33c:	6022      	str	r2, [r4, #0]
 800e33e:	001a      	movs	r2, r3
 800e340:	f7f4 ff4c 	bl	80031dc <_lseek>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d103      	bne.n	800e350 <_lseek_r+0x20>
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d000      	beq.n	800e350 <_lseek_r+0x20>
 800e34e:	602b      	str	r3, [r5, #0]
 800e350:	bd70      	pop	{r4, r5, r6, pc}
 800e352:	46c0      	nop			; (mov r8, r8)
 800e354:	20001a10 	.word	0x20001a10

0800e358 <__swhatbuf_r>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	000e      	movs	r6, r1
 800e35c:	001d      	movs	r5, r3
 800e35e:	230e      	movs	r3, #14
 800e360:	5ec9      	ldrsh	r1, [r1, r3]
 800e362:	b096      	sub	sp, #88	; 0x58
 800e364:	0014      	movs	r4, r2
 800e366:	2900      	cmp	r1, #0
 800e368:	da07      	bge.n	800e37a <__swhatbuf_r+0x22>
 800e36a:	2300      	movs	r3, #0
 800e36c:	602b      	str	r3, [r5, #0]
 800e36e:	89b3      	ldrh	r3, [r6, #12]
 800e370:	061b      	lsls	r3, r3, #24
 800e372:	d411      	bmi.n	800e398 <__swhatbuf_r+0x40>
 800e374:	2380      	movs	r3, #128	; 0x80
 800e376:	00db      	lsls	r3, r3, #3
 800e378:	e00f      	b.n	800e39a <__swhatbuf_r+0x42>
 800e37a:	466a      	mov	r2, sp
 800e37c:	f000 f8b2 	bl	800e4e4 <_fstat_r>
 800e380:	2800      	cmp	r0, #0
 800e382:	dbf2      	blt.n	800e36a <__swhatbuf_r+0x12>
 800e384:	22f0      	movs	r2, #240	; 0xf0
 800e386:	9b01      	ldr	r3, [sp, #4]
 800e388:	0212      	lsls	r2, r2, #8
 800e38a:	4013      	ands	r3, r2
 800e38c:	4a05      	ldr	r2, [pc, #20]	; (800e3a4 <__swhatbuf_r+0x4c>)
 800e38e:	189b      	adds	r3, r3, r2
 800e390:	425a      	negs	r2, r3
 800e392:	4153      	adcs	r3, r2
 800e394:	602b      	str	r3, [r5, #0]
 800e396:	e7ed      	b.n	800e374 <__swhatbuf_r+0x1c>
 800e398:	2340      	movs	r3, #64	; 0x40
 800e39a:	2000      	movs	r0, #0
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	b016      	add	sp, #88	; 0x58
 800e3a0:	bd70      	pop	{r4, r5, r6, pc}
 800e3a2:	46c0      	nop			; (mov r8, r8)
 800e3a4:	ffffe000 	.word	0xffffe000

0800e3a8 <__smakebuf_r>:
 800e3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3aa:	2602      	movs	r6, #2
 800e3ac:	898b      	ldrh	r3, [r1, #12]
 800e3ae:	0005      	movs	r5, r0
 800e3b0:	000c      	movs	r4, r1
 800e3b2:	4233      	tst	r3, r6
 800e3b4:	d006      	beq.n	800e3c4 <__smakebuf_r+0x1c>
 800e3b6:	0023      	movs	r3, r4
 800e3b8:	3347      	adds	r3, #71	; 0x47
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	6123      	str	r3, [r4, #16]
 800e3be:	2301      	movs	r3, #1
 800e3c0:	6163      	str	r3, [r4, #20]
 800e3c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e3c4:	ab01      	add	r3, sp, #4
 800e3c6:	466a      	mov	r2, sp
 800e3c8:	f7ff ffc6 	bl	800e358 <__swhatbuf_r>
 800e3cc:	9900      	ldr	r1, [sp, #0]
 800e3ce:	0007      	movs	r7, r0
 800e3d0:	0028      	movs	r0, r5
 800e3d2:	f7ff faab 	bl	800d92c <_malloc_r>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d108      	bne.n	800e3ec <__smakebuf_r+0x44>
 800e3da:	220c      	movs	r2, #12
 800e3dc:	5ea3      	ldrsh	r3, [r4, r2]
 800e3de:	059a      	lsls	r2, r3, #22
 800e3e0:	d4ef      	bmi.n	800e3c2 <__smakebuf_r+0x1a>
 800e3e2:	2203      	movs	r2, #3
 800e3e4:	4393      	bics	r3, r2
 800e3e6:	431e      	orrs	r6, r3
 800e3e8:	81a6      	strh	r6, [r4, #12]
 800e3ea:	e7e4      	b.n	800e3b6 <__smakebuf_r+0xe>
 800e3ec:	4b0f      	ldr	r3, [pc, #60]	; (800e42c <__smakebuf_r+0x84>)
 800e3ee:	62ab      	str	r3, [r5, #40]	; 0x28
 800e3f0:	2380      	movs	r3, #128	; 0x80
 800e3f2:	89a2      	ldrh	r2, [r4, #12]
 800e3f4:	6020      	str	r0, [r4, #0]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	9b00      	ldr	r3, [sp, #0]
 800e3fc:	6120      	str	r0, [r4, #16]
 800e3fe:	6163      	str	r3, [r4, #20]
 800e400:	9b01      	ldr	r3, [sp, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d00d      	beq.n	800e422 <__smakebuf_r+0x7a>
 800e406:	230e      	movs	r3, #14
 800e408:	5ee1      	ldrsh	r1, [r4, r3]
 800e40a:	0028      	movs	r0, r5
 800e40c:	f000 f87c 	bl	800e508 <_isatty_r>
 800e410:	2800      	cmp	r0, #0
 800e412:	d006      	beq.n	800e422 <__smakebuf_r+0x7a>
 800e414:	2203      	movs	r2, #3
 800e416:	89a3      	ldrh	r3, [r4, #12]
 800e418:	4393      	bics	r3, r2
 800e41a:	001a      	movs	r2, r3
 800e41c:	2301      	movs	r3, #1
 800e41e:	4313      	orrs	r3, r2
 800e420:	81a3      	strh	r3, [r4, #12]
 800e422:	89a0      	ldrh	r0, [r4, #12]
 800e424:	4338      	orrs	r0, r7
 800e426:	81a0      	strh	r0, [r4, #12]
 800e428:	e7cb      	b.n	800e3c2 <__smakebuf_r+0x1a>
 800e42a:	46c0      	nop			; (mov r8, r8)
 800e42c:	0800d0f9 	.word	0x0800d0f9

0800e430 <__ascii_mbtowc>:
 800e430:	b082      	sub	sp, #8
 800e432:	2900      	cmp	r1, #0
 800e434:	d100      	bne.n	800e438 <__ascii_mbtowc+0x8>
 800e436:	a901      	add	r1, sp, #4
 800e438:	1e10      	subs	r0, r2, #0
 800e43a:	d006      	beq.n	800e44a <__ascii_mbtowc+0x1a>
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d006      	beq.n	800e44e <__ascii_mbtowc+0x1e>
 800e440:	7813      	ldrb	r3, [r2, #0]
 800e442:	600b      	str	r3, [r1, #0]
 800e444:	7810      	ldrb	r0, [r2, #0]
 800e446:	1e43      	subs	r3, r0, #1
 800e448:	4198      	sbcs	r0, r3
 800e44a:	b002      	add	sp, #8
 800e44c:	4770      	bx	lr
 800e44e:	2002      	movs	r0, #2
 800e450:	4240      	negs	r0, r0
 800e452:	e7fa      	b.n	800e44a <__ascii_mbtowc+0x1a>

0800e454 <__malloc_lock>:
 800e454:	4770      	bx	lr

0800e456 <__malloc_unlock>:
 800e456:	4770      	bx	lr

0800e458 <_realloc_r>:
 800e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45a:	0007      	movs	r7, r0
 800e45c:	000d      	movs	r5, r1
 800e45e:	0016      	movs	r6, r2
 800e460:	2900      	cmp	r1, #0
 800e462:	d105      	bne.n	800e470 <_realloc_r+0x18>
 800e464:	0011      	movs	r1, r2
 800e466:	f7ff fa61 	bl	800d92c <_malloc_r>
 800e46a:	0004      	movs	r4, r0
 800e46c:	0020      	movs	r0, r4
 800e46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e470:	2a00      	cmp	r2, #0
 800e472:	d103      	bne.n	800e47c <_realloc_r+0x24>
 800e474:	f7ff fa10 	bl	800d898 <_free_r>
 800e478:	0034      	movs	r4, r6
 800e47a:	e7f7      	b.n	800e46c <_realloc_r+0x14>
 800e47c:	f000 f856 	bl	800e52c <_malloc_usable_size_r>
 800e480:	002c      	movs	r4, r5
 800e482:	42b0      	cmp	r0, r6
 800e484:	d2f2      	bcs.n	800e46c <_realloc_r+0x14>
 800e486:	0031      	movs	r1, r6
 800e488:	0038      	movs	r0, r7
 800e48a:	f7ff fa4f 	bl	800d92c <_malloc_r>
 800e48e:	1e04      	subs	r4, r0, #0
 800e490:	d0ec      	beq.n	800e46c <_realloc_r+0x14>
 800e492:	0029      	movs	r1, r5
 800e494:	0032      	movs	r2, r6
 800e496:	f7fe ff02 	bl	800d29e <memcpy>
 800e49a:	0029      	movs	r1, r5
 800e49c:	0038      	movs	r0, r7
 800e49e:	f7ff f9fb 	bl	800d898 <_free_r>
 800e4a2:	e7e3      	b.n	800e46c <_realloc_r+0x14>

0800e4a4 <_read_r>:
 800e4a4:	b570      	push	{r4, r5, r6, lr}
 800e4a6:	0005      	movs	r5, r0
 800e4a8:	0008      	movs	r0, r1
 800e4aa:	0011      	movs	r1, r2
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	4c06      	ldr	r4, [pc, #24]	; (800e4c8 <_read_r+0x24>)
 800e4b0:	6022      	str	r2, [r4, #0]
 800e4b2:	001a      	movs	r2, r3
 800e4b4:	f7f4 fe38 	bl	8003128 <_read>
 800e4b8:	1c43      	adds	r3, r0, #1
 800e4ba:	d103      	bne.n	800e4c4 <_read_r+0x20>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d000      	beq.n	800e4c4 <_read_r+0x20>
 800e4c2:	602b      	str	r3, [r5, #0]
 800e4c4:	bd70      	pop	{r4, r5, r6, pc}
 800e4c6:	46c0      	nop			; (mov r8, r8)
 800e4c8:	20001a10 	.word	0x20001a10

0800e4cc <__ascii_wctomb>:
 800e4cc:	1e0b      	subs	r3, r1, #0
 800e4ce:	d004      	beq.n	800e4da <__ascii_wctomb+0xe>
 800e4d0:	2aff      	cmp	r2, #255	; 0xff
 800e4d2:	d904      	bls.n	800e4de <__ascii_wctomb+0x12>
 800e4d4:	238a      	movs	r3, #138	; 0x8a
 800e4d6:	6003      	str	r3, [r0, #0]
 800e4d8:	3b8b      	subs	r3, #139	; 0x8b
 800e4da:	0018      	movs	r0, r3
 800e4dc:	4770      	bx	lr
 800e4de:	700a      	strb	r2, [r1, #0]
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	e7fa      	b.n	800e4da <__ascii_wctomb+0xe>

0800e4e4 <_fstat_r>:
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	b570      	push	{r4, r5, r6, lr}
 800e4e8:	4c06      	ldr	r4, [pc, #24]	; (800e504 <_fstat_r+0x20>)
 800e4ea:	0005      	movs	r5, r0
 800e4ec:	0008      	movs	r0, r1
 800e4ee:	0011      	movs	r1, r2
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	f7f4 fe5c 	bl	80031ae <_fstat>
 800e4f6:	1c43      	adds	r3, r0, #1
 800e4f8:	d103      	bne.n	800e502 <_fstat_r+0x1e>
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d000      	beq.n	800e502 <_fstat_r+0x1e>
 800e500:	602b      	str	r3, [r5, #0]
 800e502:	bd70      	pop	{r4, r5, r6, pc}
 800e504:	20001a10 	.word	0x20001a10

0800e508 <_isatty_r>:
 800e508:	2300      	movs	r3, #0
 800e50a:	b570      	push	{r4, r5, r6, lr}
 800e50c:	4c06      	ldr	r4, [pc, #24]	; (800e528 <_isatty_r+0x20>)
 800e50e:	0005      	movs	r5, r0
 800e510:	0008      	movs	r0, r1
 800e512:	6023      	str	r3, [r4, #0]
 800e514:	f7f4 fe59 	bl	80031ca <_isatty>
 800e518:	1c43      	adds	r3, r0, #1
 800e51a:	d103      	bne.n	800e524 <_isatty_r+0x1c>
 800e51c:	6823      	ldr	r3, [r4, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d000      	beq.n	800e524 <_isatty_r+0x1c>
 800e522:	602b      	str	r3, [r5, #0]
 800e524:	bd70      	pop	{r4, r5, r6, pc}
 800e526:	46c0      	nop			; (mov r8, r8)
 800e528:	20001a10 	.word	0x20001a10

0800e52c <_malloc_usable_size_r>:
 800e52c:	1f0b      	subs	r3, r1, #4
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	1f18      	subs	r0, r3, #4
 800e532:	2b00      	cmp	r3, #0
 800e534:	da01      	bge.n	800e53a <_malloc_usable_size_r+0xe>
 800e536:	580b      	ldr	r3, [r1, r0]
 800e538:	18c0      	adds	r0, r0, r3
 800e53a:	4770      	bx	lr

0800e53c <_init>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	46c0      	nop			; (mov r8, r8)
 800e540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e542:	bc08      	pop	{r3}
 800e544:	469e      	mov	lr, r3
 800e546:	4770      	bx	lr

0800e548 <_fini>:
 800e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54a:	46c0      	nop			; (mov r8, r8)
 800e54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e54e:	bc08      	pop	{r3}
 800e550:	469e      	mov	lr, r3
 800e552:	4770      	bx	lr
